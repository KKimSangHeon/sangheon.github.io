<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-08-17T02:00:52.960Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4. 함수</title>
    <link href="http://KKimSangHeon.github.io/2017/08/17/database4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/17/database4/</id>
    <published>2017-08-17T01:59:31.000Z</published>
    <updated>2017-08-17T02:00:52.960Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>3. 함수 NVL,SYSDATE,IN,BETWEEN,IS NULL,LIKE,LOWER,INITCAP,LPAD,TRIM,REPLACE,CEIL,FLOOR,ROUND,TRUNC,MOD,POWER,SIGN,ADD_MONTHS,TO_CHAR</title>
    <link href="http://KKimSangHeon.github.io/2017/08/16/database3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/16/database3/</id>
    <published>2017-08-16T04:19:24.000Z</published>
    <updated>2017-08-17T02:00:09.102Z</updated>
    
    <content type="html"><![CDATA[<p>SELECT FIRST_NAME || ‘ ‘ || LAST_NAME AS NAME FROM EMPLOYEES;<br>                           ||은 CONCAT</p>
<p>SELECT SALARY AS “본봉”, SALARY + SALARY * 0.3 AS “보너스”<br>FROM EMPLOYEES;</p>
<p>SELECT -SALARY FROM EMPLOYEES;</p>
<h4 id="NVL-NVL2"><a href="#NVL-NVL2" class="headerlink" title="NVL, NVL2"></a>NVL, NVL2</h4><p>SELECT EMPLOYEE_ID,<br>       NVL(MANAGER_ID,’0’)<br>FROM EMPLOYEES;<br>        NVL함수 내의 두 형태는 같아야함</p>
<p>SELECT NVL(NULL, ‘0’) FROM DUAL;</p>
<p>SELECT NVL2(NULL,10, 20) FROM DUAL;<br>–NULL이면 10</p>
<p>SELECT NVL2(0, 10, 20) FROM DUAL;<br>–NULL이 아니면 20</p>
<p>SELECT SALARY AS “본봉”,<br>       SALARY + SALARY * NVL(COMMISSION_PCT,0)<br>       AS “보너스”<br>FROM EMPLOYEES;</p>
<p>SELECT SALARY AS “본봉”,<br>       NVL2(COMMISSION_PCT,SALARY + SALARY * COMMISSION_PCT, SALARY)<br>       AS “보너스”<br>FROM EMPLOYEES;</p>
<h4 id="SYSDATE"><a href="#SYSDATE" class="headerlink" title="SYSDATE"></a>SYSDATE</h4><p>SELECT SYSDATE FROM DUAL;</p>
<p>SELECT JOB_ID<br>FROM EMPLOYEES<br>WHERE JOB_ID = ‘AD_PRES’<br>   OR JOB_ID = ‘AD_VP’;</p>
<h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>SELECT JOB_ID<br>FROM EMPLOYEES<br>WHERE JOB_ID IN(‘AD_PRES’,’AD_VP’);</p>
<h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><p>SELECT EMPLOYEE_ID,<br>         SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY BETWEEN 10000  AND SALARY  ;</p>
<h4 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h4><p>SELECT EMPLOYEE_ID,<br>       COMMISSION_PCT<br>FROM   EMPLOYEES<br>WHERE  COMMISSION_PCT IS NULL;        </p>
<h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  FIRST_NAME LIKE ‘A%’;<br>–A로 시작하는 문자열에 대해서</p>
<p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  FIRST<em>NAME LIKE ‘A</em>‘;<br>–A로시작하는 두글자 검색</p>
<p>SELECT EMPLOYEE_ID,<br>       FIRST_NAME<br>FROM   EMPLOYEES<br>ORDER BY FIRST_NAME DESC;</p>
<p>SELECT EMPLOYEE_ID, HIRE_DATE<br>FROM   EMPLOYEES;</p>
<h4 id="LOWER"><a href="#LOWER" class="headerlink" title="LOWER"></a>LOWER</h4><p>SELECT FIRST_NAME<br>FROM EMPLOYEES<br>WHERE LOWER(FIRST_NAME) LIKE ‘al%’;</p>
<h4 id="INITCAP"><a href="#INITCAP" class="headerlink" title="INITCAP"></a>INITCAP</h4><p>SELECT INITCAP(‘database managemaent system’) from dual;<br>–맨앞만 대문자로</p>
<p>SELECT INSTR( ‘DATABASE MANAGEMENT SYSTEM’ , ‘BASE’ ) FROM DUAL;<br>– BASE의 위치 찾기 (DB는 대부분 시작 인덱스가 1이다. )<br>SELECT CEIL( 4.99) FROM DUAL;<br>SELECT CEIL( 4.01) FROM DUAL;<br>– 해당 수보다 큰 정수값 (5 출력됨)</p>
<p>SELECT FLOOR( 4.99 ) FROM DUAL;<br>SELECT FLOOR( 4.00001) FROM DUAL;<br>– 해당 수보다 작은 정수값</p>
<p>SELECT ROUND(3.3364,3) FROM DUAL;<br>– 넷째자리에서 반올림함(3.336 출력됨)</p>
<p>SELECT MOD (9999,6) FROM DUAL;<br>– 나머지<br>SELECT POWER ( 2,10) FROM DUAL;<br>–2의 10승</p>
<h4 id="LPAD"><a href="#LPAD" class="headerlink" title="LPAD"></a>LPAD</h4><p>SELECT EMPLOYEE_ID, LPAD(SALARY, 10 , ‘<em>‘) FROM EMPLOYEES;<br>– 10칸을만들되 왼쪽 나머지는 </em>로 채울것</p>
<h4 id="TRIM"><a href="#TRIM" class="headerlink" title="TRIM"></a>TRIM</h4><p>SELECT TRIM( ‘#’ FROM ‘####DATA#BASE####’) FROM DUAL;<br>– 앞뒤 특정문자 제거</p>
<p>SELECT TRIM( ‘ ‘ FROM ‘  DATA  BASE    ‘) FROM DUAL;<br>– 앞뒤 공백 제거</p>
<p>SELECT  LTRIM(‘   DATA BASE   ‘,’ ‘) FROM DUAL;<br>– 왼쪽 공백 제거</p>
<h4 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h4><p>SELECT REPLACE(‘  DATA BASE  ‘, ‘ ‘ ,’’) FROM DUAL;<br>– 공백 제거</p>
<h4 id="CEIL"><a href="#CEIL" class="headerlink" title="CEIL"></a>CEIL</h4><p>SELECT CEIL( 4.99) FROM DUAL;<br>SELECT CEIL( 4.01) FROM DUAL;<br>– 해당 수보다 큰 정수값 (5 출력됨)</p>
<h4 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR"></a>FLOOR</h4><p>SELECT FLOOR( 4.99 ) FROM DUAL;<br>SELECT FLOOR( 4.00001) FROM DUAL;<br>– 해당 수보다 작은 정수값</p>
<h4 id="ROUND"><a href="#ROUND" class="headerlink" title="ROUND"></a>ROUND</h4><p>SELECT ROUND(3.3364,3) FROM DUAL;<br>– 넷째자리에서 반올림함(3.336 출력됨)</p>
<h4 id="TRUNC"><a href="#TRUNC" class="headerlink" title="TRUNC"></a>TRUNC</h4><p>SELECT TRUNC( 3.3864,1) FROM DUAL;<br>– 1자리만 남기고 버림(3.3나옴)</p>
<h4 id="MOD"><a href="#MOD" class="headerlink" title="MOD"></a>MOD</h4><p>SELECT MOD (9999,6) FROM DUAL;<br>– 나머지</p>
<h4 id="POWER"><a href="#POWER" class="headerlink" title="POWER"></a>POWER</h4><p>SELECT POWER ( 2,10) FROM DUAL;<br>–2의 10승</p>
<h4 id="SIGN"><a href="#SIGN" class="headerlink" title="SIGN"></a>SIGN</h4><p>SELECT SIGN(9999) FROM DUAL;<br>–   1나옴</p>
<p>SELECT SIGN(-9999) FROM DUAL;<br>–  -1나옴</p>
<p>SELECT SIGN(0) FROM DUAL;<br>–  0나옴</p>
<h4 id="ADD-MONTHS"><a href="#ADD-MONTHS" class="headerlink" title="ADD_MONTHS"></a>ADD_MONTHS</h4><p>SELECT ADD_MONTHS( SYSDATE, 3 ) FROM DUAL;<br>SELECT ADD_MONTHS( ‘15/01/01’,3 ) FROM DUAL;</p>
<p>SELECT LAST_DAY( SYSDATE ) FROM DUAL;<br>–해당월에 마지막 일</p>
<p>SELECT MONTHS_BETWEEN( ADD_MONTHS(SYSDATE,3), SYSDATE) FROM DUAL;</p>
<p>SELECT EMPLOYEE_ID,<br>       JOB_ID,<br>       ROUND(MONTHS_BETWEEN( END_DATE, START_DATE))<br>FROM   JOB_HISTORY;</p>
<p>SELECT NEXT_DAY( SYSDATE, 7) FROM DUAL;<br>–    1-&gt;SUN  7-&gt;SAT</p>
<h4 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR"></a>TO_CHAR</h4><p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘99999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자<br>– 5자리가 넘어가면 #####으로 표시된다.</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘000099999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자<br>–앞에 0000으로 채운다.</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘999,999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자</p>
<p>SELECT TO_CHAR( 3.141592, ‘9.99’) FROM DUAL;<br>– 3.14 나옴</p>
<p>SELECT TO_CHAR( 3.141592, ‘9999.9999’) FROM DUAL;<br>–     3.1416 나옴</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FM99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡겨준다</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FM$99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡겨준다</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FML99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡기고 원화를 넣어준다.</p>
<p>SELECT TO_CHAR(-12345,’99999MI’) FROM DUAL;<br>– 12345-  </p>
<p>SELECT TO_CHAR(-12345,’S99999’) FROM DUAL;<br>– -12345 출력</p>
<p>SELECT TO_CHAR(12345,’S99999’) FROM DUAL;<br>– +12345 출력</p>
<p>SELECT TO_CHAR(-12345,’99999PR’) FROM DUAL;<br>– <12345> 출력</12345></p>
<p>SELECT TO_CHAR(12345,’99999PR’) FROM DUAL;</p>
<p>SELECT TO_CHAR( 1234, ‘RN’) FROM DUAL;<br>–로마자로 표기</p>
<p>SELECT TO_CHAR( 1234, ‘XXXX’ ) FROM DUAL;<br>–16진수 대문자로 표기</p>
<p>SELECT TO_CHAR( 1234, ‘xxxx’ ) FROM DUAL;<br>–16진수 소문자로 표기</p>
<p>SELECT TO_NUMBER( ‘1234567’,’99999999’) FROM DUAL;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy-mm-dd’)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일”‘)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일” hh24”시”:mi:ss’)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일” day pm hh:mi:ss’)<br>FROM EMPLOYEES;</p>
<p>SELECT<br>TO_CHAR(SYSDATE, ‘yyyy”년”-mm”월”-dd”일” ddd”일째 되는날”‘)<br>FROM DUAL;</p>
<p>SELECT TO_CHAR(SYSDATE, ‘RR’)<br>FROM DUAL;</p>
<p>SELECT TO_CHAR(TO_DATE(‘30’,’RR’), ‘YYYY’) FROM DUAL;<br>– 현재 세기</p>
<p>SELECT TO_CHAR(TO_DATE(‘60’,’RR’), ‘YYYY’) FROM DUAL;<br>– 이전 세기</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SELECT FIRST_NAME || ‘ ‘ || LAST_NAME AS NAME FROM EMPLOYEES;&lt;br&gt;                           ||은 CONCAT&lt;/p&gt;
&lt;p&gt;SELECT SALARY AS “본봉”, SALA
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>2. 데이터베이스 기본</title>
    <link href="http://KKimSangHeon.github.io/2017/08/16/database2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/16/database2/</id>
    <published>2017-08-16T00:05:42.000Z</published>
    <updated>2017-08-16T04:19:06.546Z</updated>
    
    <content type="html"><![CDATA[<h4 id="데이터베이스의-기본개념-정의"><a href="#데이터베이스의-기본개념-정의" class="headerlink" title="데이터베이스의 기본개념 (정의)"></a>데이터베이스의 기본개념 (정의)</h4><p>-데이터의 집합 ( a Set of Data )<br>-여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) 데이터의 집합<br>-효율적으로 저장, 검색, 갱신할 수 있도록 데이터 집합들끼리 연관시키고 조직화되어야 한다.</p>
<h4 id="DBMS가-하는일"><a href="#DBMS가-하는일" class="headerlink" title="DBMS가 하는일"></a>DBMS가 하는일</h4><p>데이터 통합, 저장, 운영, 공유 기능 담당. 이를 위해 조직화 되어있어야 함.</p>
<h4 id="데이터베이스의-특성"><a href="#데이터베이스의-특성" class="headerlink" title="데이터베이스의 특성"></a>데이터베이스의 특성</h4><p>-실시간 접근성(Real-time Accessability)<br>    사용자의 요구를 즉시 처리할 수 있다.<br>-계속적인 변화(Continuous Evolution)<br>    정확한 값을 유지하려고 삽입·삭제·수정 작업 등을 이용해 데이터를 지속적으로 갱신할 수 있다.<br>-동시 공유성(Concurrent Sharing)<br>     사용자마다 서로 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근하고 이용할 수 있다.<br>-내용 참조(Content Reference)<br>     저장한 데이터 레코드의 위치나 주소가 아닌 사용자가 요구하는 데이터의 내용, 즉 데이터 값에 따라 참조할 수 있어야 한다.</p>
<h4 id="데이터베이스-관리-시스템-장점"><a href="#데이터베이스-관리-시스템-장점" class="headerlink" title="데이터베이스 관리 시스템 장점"></a>데이터베이스 관리 시스템 장점</h4><p>데이터 중복이 최소화<br>데이터의 일관성 및 무결성 유지<br>데이터 보안 보장</p>
<h4 id="데이터-베이스의-종류"><a href="#데이터-베이스의-종류" class="headerlink" title="데이터 베이스의 종류"></a>데이터 베이스의 종류</h4><p>객체 관계형 데이터베이스 (  Object Relation DataBase = ORDB )<br>     -관계형 데이터베이스에서 사용하는 데이터를 확장<br>     -관계형 데이터베이스를 객체 지향 모델링과 데이터를 관리하는 기능을 갖도록 확장한 것<br>NoSQL(Not Only SQL - SQL문 만을 이용하지 않아도 된다.)<br>     -대용량 데이터의 웹 서비스와 SNS, 클라우드 컴퓨팅의 확대 보급과 대중화로  최근 주목 받는 데이터베이스 기술      </p>
<h4 id="PK"><a href="#PK" class="headerlink" title="PK"></a>PK</h4><p>다른 행과 구분하기 위해 필요.<br>PK를 설정할 땐 비즈니스와 상관없는 컬럼을 지정하는것이 좋다.(비즈니스 변경시 귀찮아 질 수 있다.)<br>PK는 인덱싱이 자동으로 잡혀 빠르다.<br>릴레이션에서 튜플(행)을 구분하기 위하여 사용하는 기본 키<br>하나의 애트리뷰트, 또는 애트리뷰트의 집합(복합키) 가능<br>관리자에 의해 릴레이션 생성시 정의됨 (자동으로 Index생성됨)<br>동일한 PK를 지닌 레코드가 존재할 수 없음</p>
<h4 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h4><p>Candidate Key (후보키): 튜플을 식별할 수 있는 최소한의 애트리뷰트 집합<br>하나의 릴레이션에는 PK가 될 수 있는 키가 여러 개 있을 수 있음<br>유일성과 최소성이 있으면 candidate key가 될 수 있음.<br>Alternative Key (대체키): 후보키 중 기본키가 아닌것<br>Composite key (복합키): 둘 이상의 애트리뷰트가 하나의 Key를 이루는 경우</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;데이터베이스의-기본개념-정의&quot;&gt;&lt;a href=&quot;#데이터베이스의-기본개념-정의&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스의 기본개념 (정의)&quot;&gt;&lt;/a&gt;데이터베이스의 기본개념 (정의)&lt;/h4&gt;&lt;p&gt;-데이터의 집합 ( a S
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>Whole in 밴드</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/wholin/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/wholin/</id>
    <published>2017-08-11T06:55:24.000Z</published>
    <updated>2017-08-11T07:13:18.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-소개-및-개발배경"><a href="#App-소개-및-개발배경" class="headerlink" title="App 소개 및 개발배경"></a>App 소개 및 개발배경</h1><p>-GIF 2016 에 참가하면서 개발하였던 어플리케이션 입니다. 주제는 성공적인 개최를 위한 IOT 서비스 활용방안이였으며 저희팀은 NFC를 이용하여 국적별 다용도로 활용할 수 있는 팔찌(Wholin 밴드)를 제작하였습니다.<br>프로토 타입 어플리케이션이므로 밴드를 통한 국적별 메뉴판 조회, 음식주문 기능을 구현하였습니다.</p>
<h1 id="밴드소개"><a href="#밴드소개" class="headerlink" title="밴드소개"></a>밴드소개</h1><img src="/2017/08/11/wholin/band.PNG" alt="밴드소개" title="밴드소개">
<p>밴드 속에는 NFC칩이 존재하며 메뉴주문 및 결제, 사각지대 VR 생중계 등의 기능을 제공하며 프로토 타입이므로 국적별 메뉴판 조회기능만 제공합니다.</p>
<h1 id="작동화면"><a href="#작동화면" class="headerlink" title="작동화면"></a>작동화면</h1><img src="/2017/08/11/wholin/work1.PNG" alt="작동화면" title="작동화면">
<p>처음 언어를 설정하고 자신의 기본정보를 입력하고 추가정보를 입력후 밴드를 스마트폰에 갖다대면 밴드 등록이 완료됩니다.</p>
<p>-시연영상<br><div class="video-container"><iframe src="//www.youtube.com/embed/eBBswuTXMxY" frameborder="0" allowfullscreen></iframe></div><br><a href="https://github.com/KKimSangHeon/Wholin_Band" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-소개-및-개발배경&quot;&gt;&lt;a href=&quot;#App-소개-및-개발배경&quot; class=&quot;headerlink&quot; title=&quot;App 소개 및 개발배경&quot;&gt;&lt;/a&gt;App 소개 및 개발배경&lt;/h1&gt;&lt;p&gt;-GIF 2016 에 참가하면서 개발하였던 어플
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Android" scheme="http://KKimSangHeon.github.io/tags/Android/"/>
    
      <category term="NFC" scheme="http://KKimSangHeon.github.io/tags/NFC/"/>
    
  </entry>
  
  <entry>
    <title>동국대학교 경주캠퍼스 채팅봇</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/dg-chat-bot/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/dg-chat-bot/</id>
    <published>2017-08-11T06:20:24.000Z</published>
    <updated>2017-08-11T06:45:52.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그램-개발배경"><a href="#프로그램-개발배경" class="headerlink" title="프로그램 개발배경"></a>프로그램 개발배경</h1><p>-기숙사 외박계가 서비스 되지 않은점이 아쉬웠으며 유용하게 쓰일 수 있는 프로그램을 만들어 보고싶어 학교 채팅봇을 만들어보게 되었습니다.</p>
<h1 id="프로그램-소개"><a href="#프로그램-소개" class="headerlink" title="프로그램 소개"></a>프로그램 소개</h1><p>플러스 친구 추가 후 통학버스 조회, 기숙사 식단조회, 도서관 좌석조회, 홈페이지 조회 기능을 사용할 수 있습니다.<br>또한 AWS EC2인스턴스를 활용하여 서비스하며 동국대학교 경주캠퍼스 채팅봇을 검색 후 친구추가가 가능합니다.</p>
<h1 id="프로그램-동작화면"><a href="#프로그램-동작화면" class="headerlink" title="프로그램 동작화면"></a>프로그램 동작화면</h1><img src="/2017/08/11/dg-chat-bot/dgchat.png" alt="동작화면 [그림1]" title="동작화면 [그림1]">
<p>플러스 친구 추가 후 통학버스 조회, 기숙사 식단조회, 도서관 좌석조회, 홈페이지 조회 기능을 사용할 수 있습니다.</p>
<p><a href="https://github.com/KKimSangHeon/Dg_Chat_Bot" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;프로그램-개발배경&quot;&gt;&lt;a href=&quot;#프로그램-개발배경&quot; class=&quot;headerlink&quot; title=&quot;프로그램 개발배경&quot;&gt;&lt;/a&gt;프로그램 개발배경&lt;/h1&gt;&lt;p&gt;-기숙사 외박계가 서비스 되지 않은점이 아쉬웠으며 유용하게 쓰일 수 있는 프
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Node.js" scheme="http://KKimSangHeon.github.io/tags/Node-js/"/>
    
      <category term="Kakao talk open API" scheme="http://KKimSangHeon.github.io/tags/Kakao-talk-open-API/"/>
    
      <category term="챗봇" scheme="http://KKimSangHeon.github.io/tags/%EC%B1%97%EB%B4%87/"/>
    
      <category term="MySQL" scheme="http://KKimSangHeon.github.io/tags/MySQL/"/>
    
      <category term="CentOS" scheme="http://KKimSangHeon.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>데이터 프리 기프티콘</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/defcon/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/defcon/</id>
    <published>2017-08-11T06:07:04.000Z</published>
    <updated>2017-08-11T06:15:14.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="참가배경"><a href="#참가배경" class="headerlink" title="참가배경"></a>참가배경</h1><p>-두 번째 참가한 해커톤 입니다. 첫 해커톤에 흥미를 느껴 다시한번 참가하게 되었습니다.</p>
<h1 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h1><p>VPN을 이용하여 스마트폰 데이터 사용량을 감소시키는 어플리케이션입니다.<br>데이터 사용량을 감소시키기 위해 서버에 데이터를 전송하기 전 압축하여 보내고 서버에서 클라이언트로 데이터를 보낼때도 압축을 진행하게 됩니다.<br>서버, 클라이언트는 toyVPN이라는 오픈소스를 활용하였습니다.</p>
<h1 id="동작화면"><a href="#동작화면" class="headerlink" title="동작화면"></a>동작화면</h1><img src="/2017/08/11/defcon/defcon.png" alt="동작화면 [그림1]" title="동작화면 [그림1]">
<p>서버의 주소, 포트, 암호를 입력하고 데.프.콘 바로가기 버튼을 누르면 VPN서버에 접속하게됩니다. </p>
<p><a href="https://github.com/KKimSangHeon/Defcon" target="_blank" rel="external">github Repository</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;참가배경&quot;&gt;&lt;a href=&quot;#참가배경&quot; class=&quot;headerlink&quot; title=&quot;참가배경&quot;&gt;&lt;/a&gt;참가배경&lt;/h1&gt;&lt;p&gt;-두 번째 참가한 해커톤 입니다. 첫 해커톤에 흥미를 느껴 다시한번 참가하게 되었습니다.&lt;/p&gt;
&lt;h1 id=&quot;
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="ID 해커톤" scheme="http://KKimSangHeon.github.io/tags/ID-%ED%95%B4%EC%BB%A4%ED%86%A4/"/>
    
  </entry>
  
  <entry>
    <title>엄마가 보고있다</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/Mother-Is-Looking/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/Mother-Is-Looking/</id>
    <published>2017-08-11T05:53:02.000Z</published>
    <updated>2017-08-11T06:06:16.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="참가배경"><a href="#참가배경" class="headerlink" title="참가배경"></a>참가배경</h1><p>-해커톤을 통해 다양한 사람을 만나고 해커톤이라는 콘테스트에 한번쯤 참가 해 보고싶었습니다.</p>
<h1 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h1><p>에너톡 플러그인을 사용하여 현재 문제가 되는 청소년 인터넷 중독문제를 해결하고자 하였습니다. 또한 실시간 전력량을 확인할 수 있는 기능또한 추가하였습니다.</p>
<h1 id="동작화면"><a href="#동작화면" class="headerlink" title="동작화면"></a>동작화면</h1><img src="/2017/08/11/Mother-Is-Looking/motherLooking.png" alt="동작화면 [그림1]" title="동작화면 [그림1]">
<p>어플리케이션을 실행시켜면 다음과 같이 “우리 집 PC 확인”, “우리집 전력 확인”을 선택할 수 있습니다.</p>
<p>우리 집 PC 확인 버튼을 눌러 현재 PC의 사용유무를 확인할 수 있으며 전원버튼을 눌러 컴퓨터를 종료할 수 있습니다.</p>
<p>우리 집 전력 확인 버튼을 누르면 실시간 전력량을 확인할 수 있습니다.</p>
<p><a href="https://github.com/KKimSangHeon/Mother_Is_Looking" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;참가배경&quot;&gt;&lt;a href=&quot;#참가배경&quot; class=&quot;headerlink&quot; title=&quot;참가배경&quot;&gt;&lt;/a&gt;참가배경&lt;/h1&gt;&lt;p&gt;-해커톤을 통해 다양한 사람을 만나고 해커톤이라는 콘테스트에 한번쯤 참가 해 보고싶었습니다.&lt;/p&gt;
&lt;h1 id
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="에너지 해커톤" scheme="http://KKimSangHeon.github.io/tags/%EC%97%90%EB%84%88%EC%A7%80-%ED%95%B4%EC%BB%A4%ED%86%A4/"/>
    
  </entry>
  
  <entry>
    <title>1. 오라클 설치</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/database1/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/database1/</id>
    <published>2017-08-11T04:39:31.000Z</published>
    <updated>2017-08-16T00:08:01.330Z</updated>
    
    <content type="html"><![CDATA[<p>run sql command line을 켜고</p>
<p>conn system/manager 입력 // manager가 비번</p>
<p>conn /as sysdba   //관리자로 로그인</p>
<p>mysql은 데이터베이스를 각각 생성하지만<br>오라클을 테이블 스페이스가 존재하며 자신의 테이블스페이스에 테이블 생성</p>
<p>alter user hr account unlock; //hr계정을 언락함(사용하기 위해)<br>alter user hr identified by “hr”;   //비번을 hr로함</p>
<p>conn hr/hr    //hr 계정으로 로그인</p>
<p>이클립스 - help - market place - toad 설치</p>
<p>자바가 데이터베이스에 접근하기 위해서는 jdbc가 필요.</p>
<p>Connections탭에가서 new connection선택</p>
<p>User에 hr입력<br>비번에 hr입력</p>
<p>OK클릭</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;run sql command line을 켜고&lt;/p&gt;
&lt;p&gt;conn system/manager 입력 // manager가 비번&lt;/p&gt;
&lt;p&gt;conn /as sysdba   //관리자로 로그인&lt;/p&gt;
&lt;p&gt;mysql은 데이터베이스를 각각 생성하지만&lt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>12. UDP 소켓</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/bigdata13/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/bigdata13/</id>
    <published>2017-08-11T00:08:02.000Z</published>
    <updated>2017-08-11T04:36:14.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>1.비 연결 지향 프로그래밍<br>2.TCP와 달리 연결되지 않은 상태로 데이터 통신을 하기 때문에 패킷이 유실될 가능성이 있다<br>3.속도 면에서는 큰 장점이 있다. ( 처음 반응속도가 빠르다 )</p>
<p>TCP 서버 포트 6000 / UDP 서버 포트 6000 일 때 충돌이 날까?<br>나지않는다. 다른 프로토콜이라서 그렇다.</p>
<p>UDP Echo Server<br><figure class="highlight java"><figcaption><span>UDPEchoServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPEchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> DatagramSocket(PORT);</div><div class="line"></div><div class="line">			<span class="comment">//2. 데이터 수신</span></div><div class="line">			DatagramPacket receivePacket =</div><div class="line">					<span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE], BUFFER_SIZE);</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( <span class="keyword">true</span> ) &#123;</div><div class="line">			<span class="comment">//3. 데이터 수신 대기</span></div><div class="line">			socket.receive( receivePacket ); <span class="comment">//block</span></div><div class="line"></div><div class="line">			<span class="comment">//4. 수신</span></div><div class="line">			String message =</div><div class="line">					<span class="keyword">new</span> String( receivePacket.getData(), <span class="number">0</span>, receivePacket.getLength(), <span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">			System.out.println( message );</div><div class="line"></div><div class="line">			<span class="comment">//5. 데이터 송신</span></div><div class="line">			<span class="keyword">byte</span>[] sendData = message.getBytes( <span class="string">"UTF-8"</span> );</div><div class="line">			DatagramPacket sendPacket =</div><div class="line">					<span class="keyword">new</span> DatagramPacket( sendData,</div><div class="line">										sendData.length,</div><div class="line">										receivePacket.getAddress(),</div><div class="line">										receivePacket.getPort() );</div><div class="line"></div><div class="line">			socket.send( sendPacket );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span>( socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">				socket.close();				</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>UDP Echo Client<br><figure class="highlight java"><figcaption><span>UDPEchoClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPEchoClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">6000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line">		Scanner scanner = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 0. 키보드 연결</span></div><div class="line">			scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">			<span class="comment">// 1. 소켓생성</span></div><div class="line">			socket = <span class="keyword">new</span> DatagramSocket();</div><div class="line"></div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">				System.out.print(<span class="string">"&gt;&gt;"</span>);</div><div class="line">				String message = scanner.nextLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">""</span>.equals(message)) &#123;</div><div class="line">					<span class="keyword">continue</span>;					</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">"quit"</span>.equals( message )) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//2. 전송패킷 생성</span></div><div class="line">				<span class="keyword">byte</span>[] sendData = message.getBytes(<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">				DatagramPacket sendPacket = <span class="keyword">new</span> DatagramPacket(sendData, sendData.length,</div><div class="line">						<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">				<span class="comment">//3. 전송</span></div><div class="line">				socket.send(sendPacket);</div><div class="line"></div><div class="line">				<span class="comment">//4. 메세지 수신</span></div><div class="line">				DatagramPacket receivePacket = <span class="keyword">new</span> DatagramPacket( <span class="keyword">new</span> <span class="keyword">byte</span>[ BUFFER_SIZE], BUFFER_SIZE);</div><div class="line">				socket.receive(receivePacket);</div><div class="line"></div><div class="line">				message = <span class="keyword">new</span> String( receivePacket.getData(), <span class="number">0</span>, receivePacket.getLength(), <span class="string">"UTF-8"</span>) ;</div><div class="line">				System.out.println(<span class="string">"&lt;&lt;"</span>+message);						</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">				socket.close();</div><div class="line">			&#125;</div><div class="line">			scanner.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;UDP&quot;&gt;&lt;a href=&quot;#UDP&quot; class=&quot;headerlink&quot; title=&quot;UDP&quot;&gt;&lt;/a&gt;UDP&lt;/h4&gt;&lt;p&gt;1.비 연결 지향 프로그래밍&lt;br&gt;2.TCP와 달리 연결되지 않은 상태로 데이터 통신을 하기 때문에 패킷이 유실될 가능
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>11.소켓과 스레드의 결합</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata12/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata12/</id>
    <published>2017-08-09T04:15:08.000Z</published>
    <updated>2017-08-09T04:41:54.150Z</updated>
    
    <content type="html"><![CDATA[<p>여러 클라이언트가 접속가능한 서버<br><figure class="highlight java"><figcaption><span>EchoServerReceiveThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// 반복문 내에서 blocking이 되기떄문에 CPU를 많이먹지 않는다.</span></div><div class="line">			<span class="keyword">new</span> EchoServerReceiveThread( socket ).start();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">			<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consoLog</span><span class="params">( String log )</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"[server:"</span> );</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>EchoServerReceiveThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerReceiveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Socket socket;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoServerReceiveThread</span><span class="params">( Socket socket )</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 4. 연결성공</span></div><div class="line">		InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">		<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">		String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">		consoleLog(<span class="string">"connected from "</span>+ remoteHostAddress);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line"></div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is, <span class="string">"UTF-8"</span>));</div><div class="line"></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">			<span class="comment">// auto flush를 true로 한다. true로 안하면</span></div><div class="line">			<span class="comment">// 버퍼가 다찬다음 나가기 때문에 늦게나간다.</span></div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				<span class="comment">// 6. 데이터 읽기</span></div><div class="line">				String message = br.readLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123; <span class="comment">// 정상종료</span></div><div class="line">					consoleLog(<span class="string">"disconnection by client"</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				consoleLog(<span class="string">" received : "</span> + message);</div><div class="line"></div><div class="line">				<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">				pw.println(message);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">			consoleLog(<span class="string">"sudden closed by client"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consoleLog</span><span class="params">(String log)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"[Server: "</span>+getId() + <span class="string">"]"</span> + log);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;여러 클라이언트가 접속가능한 서버&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;EchoServerReceiveThread.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>10.쓰레드</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata11/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata11/</id>
    <published>2017-08-09T02:42:34.000Z</published>
    <updated>2017-08-09T04:14:24.003Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>MultiThreadEx.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadEx</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> AlphabetThread();		<span class="comment">//쓰레드 생성방법1</span></div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> DigitThread());	<span class="comment">//쓰레드 생성방법2</span></div><div class="line">		<span class="comment">//매개변수로 Runnable이 구현된 객체를 받음</span></div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;	<span class="comment">//쓰레드 생성방법3</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">for</span>( <span class="keyword">char</span> c = <span class="string">'A'</span>; c&lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">					System.out.print( c );</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;			</div><div class="line">		&#125;).start();;</div><div class="line"></div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>DigitThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.print( i );</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep( <span class="number">1000</span> );</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>AlphabetThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlphabetThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">			System.out.print( c );</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep( <span class="number">1000</span> );</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MultiThreadEx.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>9. TCP 소켓 프로그래밍1</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata10/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata10/</id>
    <published>2017-08-09T00:05:06.000Z</published>
    <updated>2017-08-09T02:42:16.840Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP : 스트림(stream) 통신 프로토콜<br>양쪽의 소켓이 연결된 상태에서 통신이 가능하다. (연결지향 프로토콜)<br>신뢰성 있는 데이터 통신<br>한 번 연결이 되면 연결이 끊어 질 때까지 송신한 데이터는 차례대로 목적지의 소켓에 전달<br>자바는  java.net 패키지에  TCP 소켓 프로그래밍을  쉽게 하도록  관련 클래스를  제공하고 있다.<br>라이브러리의 사용법과  동작순서를 정확하게 이해하고 있어야 한다.<br>ServerSocket과 Socket 클래스를 사용하게 된다.  </p>
<figure class="highlight java"><figcaption><span>TCPServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPSever</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// blocking</span></div><div class="line"></div><div class="line">			<span class="comment">// 4. 연결성공</span></div><div class="line">			InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">			<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">			String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">			System.out.println(<span class="string">"[server] connected from "</span> + remoteHostAddress + remoteHostPort);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line">				OutputStream os = socket.getOutputStream();</div><div class="line"></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					<span class="comment">// 6. 데이터 읽기</span></div><div class="line">					<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">					<span class="keyword">int</span> readByteCount = is.read(buffer); <span class="comment">// block</span></div><div class="line"></div><div class="line">					<span class="keyword">if</span> (readByteCount &lt;= -<span class="number">1</span>) &#123;	<span class="comment">//정상종료</span></div><div class="line">						System.out.println(<span class="string">"[server] disconnection by client"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					String data = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, readByteCount, <span class="string">"utf-8"</span>);</div><div class="line">					System.out.println(<span class="string">"[server] received : "</span> + data);</div><div class="line"></div><div class="line">					<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">					os.write(data.getBytes(<span class="string">"utf-8"</span>));</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span>(SocketException e) &#123;</div><div class="line">				<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">				System.out.println(<span class="string">"[server] sudden closed by client"</span>);</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">						socket.close();</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>TCPClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> Socket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 서버 연결</span></div><div class="line">			socket.connect(<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">			<span class="comment">// 3. I/O 받아오기</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line">			OutputStream os = socket.getOutputStream();</div><div class="line"></div><div class="line">			<span class="comment">// 4. 쓰기 / 읽기</span></div><div class="line">			String data = <span class="string">"hello"</span>;</div><div class="line">			os.write( data.getBytes( <span class="string">"utf-8"</span> ));</div><div class="line"></div><div class="line">			<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">			<span class="keyword">int</span> readByteCount = is.read( buffer );</div><div class="line">			<span class="keyword">if</span>( readByteCount &lt;= -<span class="number">1</span>) &#123;</div><div class="line">				System.out.println( <span class="string">"[client] disconnection by server"</span>);				</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			data = <span class="keyword">new</span> String( buffer, <span class="number">0</span>, readByteCount, <span class="string">"utf-8"</span>);</div><div class="line">			System.out.println(<span class="string">"[client] received:"</span>+ data);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>에코서버, 클라이언트 만들기</p>
<figure class="highlight java"><figcaption><span>EchoServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// blocking</span></div><div class="line"></div><div class="line">			<span class="comment">// 4. 연결성공</span></div><div class="line">			InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">			<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">			String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">			System.out.println(<span class="string">"[server] connected from "</span> + remoteHostAddress + remoteHostPort);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line"></div><div class="line"></div><div class="line">				BufferedReader br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader( is, <span class="string">"UTF-8"</span> ));</div><div class="line"></div><div class="line">				PrintWriter pw = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">												<span class="comment">// auto flush를 true로 한다. true로 안하면</span></div><div class="line">												<span class="comment">//버퍼가 다찬다음 나가기 때문에 늦게나간다.</span></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					<span class="comment">// 6. 데이터 읽기</span></div><div class="line">					String message = br.readLine();</div><div class="line"></div><div class="line">					<span class="keyword">if</span> ( message == <span class="keyword">null</span> ) &#123;	<span class="comment">//정상종료</span></div><div class="line">						System.out.println(<span class="string">"[server] disconnection by client"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					System.out.println(<span class="string">"[server] received : "</span> + message);</div><div class="line"></div><div class="line">					<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">					pw.println(message);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span>(SocketException e) &#123;</div><div class="line">				<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">				System.out.println(<span class="string">"[server] sudden closed by client"</span>);</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">						socket.close();</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>EchoClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">static</span> Scanner scanner;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> Socket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 서버 연결</span></div><div class="line">			socket.connect(<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">			<span class="comment">// 3. I/O 받아오기</span></div><div class="line">			BufferedReader br =</div><div class="line">					<span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter( <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream(),<span class="string">"UTF-8"</span>),<span class="keyword">true</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 4. 쓰기 / 읽기</span></div><div class="line">			 scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				System.out.print( <span class="string">"&gt;&gt;"</span> );</div><div class="line">				String message = scanner.nextLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(<span class="string">"exit"</span>.equals(message)) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//메세지 보내기</span></div><div class="line">				pw.println( message );</div><div class="line"></div><div class="line">				<span class="comment">//에코 메시지 받기</span></div><div class="line">				String echoMessage = br.readLine();</div><div class="line">				<span class="keyword">if</span>( echoMessage == <span class="keyword">null</span>) &#123;</div><div class="line">					System.out.println(<span class="string">"[client] Disconnection by Server"</span>);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//출력</span></div><div class="line">				System.out.println( <span class="string">"&lt;&lt;"</span> + echoMessage );</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			scanner.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h4&gt;&lt;p&gt;TCP : 스트림(stream) 통신 프로토콜&lt;br&gt;양쪽의 소켓이 연결된 상태에서 통신이 가능하다. (연결지향 프로토콜
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>8. 네트워크와 소켓의 이해</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata9/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata9/</id>
    <published>2017-08-07T05:01:36.000Z</published>
    <updated>2017-08-08T07:09:50.450Z</updated>
    
    <content type="html"><![CDATA[<h5 id="네트워크란"><a href="#네트워크란" class="headerlink" title="네트워크란?"></a>네트워크란?</h5><p>“유/무선 으로 연결되어 있는  Device들의  집합 ”</p>
<h5 id="네트워킹"><a href="#네트워킹" class="headerlink" title="네트워킹?"></a>네트워킹?</h5><p>디바이스들 간에 미리 정의된 프로토콜을 사용하여 데이터를 교환 하는것.<br>이를위해서는 프로토콜이 필요하다.</p>
<h5 id="클라이언트-서버구조"><a href="#클라이언트-서버구조" class="headerlink" title="클라이언트 서버구조"></a>클라이언트 서버구조</h5><p>Client  -&gt; Server<br>request</p>
<p>Server -&gt; Client<br>response(ACK)</p>
<p>서버 : 서버프로그램이 돌고있는 장비</p>
<h5 id="프로토콜"><a href="#프로토콜" class="headerlink" title="프로토콜"></a>프로토콜</h5><p>디바이스간 데이터 통신을 위해 필요한 규약<br>Hyper Text Transfer Protocol<br>File Transfer Protocol<br>SMTP 등등.</p>
<h5 id="패킷"><a href="#패킷" class="headerlink" title="패킷"></a>패킷</h5><p>패킷은 Header, Body부분으로 나뉜다.<br>Header은 Address, checksum 등 으로 구성되고<br>Body는 Data로 구성된다.</p>
<h4 id="소켓"><a href="#소켓" class="headerlink" title="소켓"></a>소켓</h4><h5 id="소켓-1"><a href="#소켓-1" class="headerlink" title="소켓?"></a>소켓?</h5><p>TCP / IP 프로토콜의 프로그래머 인터페이스를 의미<br>네트워크 프로그래밍에서 개발자에게 네트워크에 접근할 수  있는 인터페이스 제공</p>
<h5 id="포트"><a href="#포트" class="headerlink" title="포트?"></a>포트?</h5><p>프로세스를 구분할 수 있는 주소<br>16비트 정수를 사용한다.</p>
<p>Address =&gt; IP Address</p>
<p>Socket Address =&gt; IP Address + Port</p>
<figure class="highlight java"><figcaption><span>LocalHost.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalHost</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String hostName = inetAddress.getHostName();</div><div class="line">			String hostAddress = inetAddress.getHostAddress();</div><div class="line">			<span class="keyword">byte</span>[] addresses = inetAddress.getAddress();	<span class="comment">//byte배열로 ip 받아오는 함수</span></div><div class="line"></div><div class="line">			System.out.println(hostName);	<span class="comment">//컴퓨터이름</span></div><div class="line">			System.out.println(hostAddress); <span class="comment">//ipconfig의 결과와 같음</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; addresses.length ; i++) &#123;</div><div class="line">				System.out.print( addresses[i] &amp; <span class="number">0x000000ff</span>);</div><div class="line">					<span class="comment">//MSB로 인해 음수가 나와 마스킹을 해주는것.</span></div><div class="line">				<span class="keyword">if</span>( i &lt; <span class="number">3</span> ) &#123;</div><div class="line">					System.out.print(<span class="string">"."</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NSLookup기능을 구현해보자.</p>
<figure class="highlight java"><figcaption><span>NSLookup.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSLookup</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		String host = <span class="string">""</span>;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (!(host.equals(<span class="string">"exit"</span>))) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				System.out.print(<span class="string">"&gt;"</span>);</div><div class="line">				host = sc.nextLine();</div><div class="line"></div><div class="line"></div><div class="line">				InetAddress[] inetAddresses = InetAddress.getAllByName(host);</div><div class="line"></div><div class="line">				<span class="keyword">for</span> (InetAddress inetAddress : inetAddresses) &#123;</div><div class="line">					System.out.println(inetAddress.getHostAddress());</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;네트워크란&quot;&gt;&lt;a href=&quot;#네트워크란&quot; class=&quot;headerlink&quot; title=&quot;네트워크란?&quot;&gt;&lt;/a&gt;네트워크란?&lt;/h5&gt;&lt;p&gt;“유/무선 으로 연결되어 있는  Device들의  집합 ”&lt;/p&gt;
&lt;h5 id=&quot;네트워킹&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>7. 스트림</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata8/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata8/</id>
    <published>2017-08-07T00:17:29.000Z</published>
    <updated>2017-08-08T02:11:38.343Z</updated>
    
    <content type="html"><![CDATA[<h5 id="InputStream-1-byte-단위로-읽는놈"><a href="#InputStream-1-byte-단위로-읽는놈" class="headerlink" title="InputStream - 1 byte 단위로 읽는놈"></a>InputStream - 1 byte 단위로 읽는놈</h5><p>ByteInputStream<br>FileInputStream</p>
<p>FilterInputStream(보조스트림)</p>
<h5 id="OutputStream-1-byte-단위로-쓰는놈"><a href="#OutputStream-1-byte-단위로-쓰는놈" class="headerlink" title="OutputStream - 1 byte 단위로 쓰는놈"></a>OutputStream - 1 byte 단위로 쓰는놈</h5><p>ByteOutputStream<br>FileOutputStream</p>
<p>FilterOutputStream(보조스트림)</p>
<h5 id="Reader-char-2byte-자바에서는-3byte-UTF-8-단위로-읽는놈"><a href="#Reader-char-2byte-자바에서는-3byte-UTF-8-단위로-읽는놈" class="headerlink" title="Reader - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 읽는놈"></a>Reader - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 읽는놈</h5><p>FileReader(InputStreamReader을 상속)<br>BufferedReader</p>
<h5 id="Writer-char-2byte-자바에서는-3byte-UTF-8-단위로-쓰는놈"><a href="#Writer-char-2byte-자바에서는-3byte-UTF-8-단위로-쓰는놈" class="headerlink" title="Writer - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 쓰는놈"></a>Writer - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 쓰는놈</h5><p>FileWriter<br>BufferedWriter</p>
<h4 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h4><p>1.주 스트림을 소스에 꽂는다.<br>2.보조스트림은 주 스트림에 꽂는다.<br>3.프로그램에서 보조스트림을 사용해서 읽는다.</p>
<figure class="highlight java"><figcaption><span>IOExample.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] src = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">		<span class="keyword">byte</span>[] dest = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">		InputStream is = <span class="keyword">new</span> ByteArrayInputStream( src );</div><div class="line">		OutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>( (data = is.read()) != -<span class="number">1</span> ) &#123;	<span class="comment">//data에 1바이트식 저장됨</span></div><div class="line">			os.write(data);		</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		dest = ((ByteArrayOutputStream)os).toByteArray();</div><div class="line"></div><div class="line">		System.out.println( Arrays.toString( src ));</div><div class="line">		System.out.println( Arrays.toString( dest ));</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>FileCopy.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopy</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		OutputStream os = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			is = <span class="keyword">new</span> FileInputStream( <span class="string">"./dooly.png"</span> );</div><div class="line"></div><div class="line">			os = <span class="keyword">new</span> FileOutputStream( <span class="string">"./dooly2.png "</span>);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> data = <span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( (data = is.read()) !=-<span class="number">1</span> ) &#123;</div><div class="line">				os.write( data );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일없음"</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);			</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span>( is != <span class="keyword">null</span>) &#123;</div><div class="line">			is.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( os != <span class="keyword">null</span>)</div><div class="line">			os.close();</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>123.txt를 UTF-8로 만들고(직접만들자)<br>FileReader로 1바이트씩 읽어보고<br>FileInputStream으로 3(UTF-8이므로..) 바이트씩 읽어보자</p>
<figure class="highlight java"><figcaption><span>FileReaderTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Reader reader = <span class="keyword">null</span>;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//비교를 위해서 두개를 만들었다.</span></div><div class="line">			reader = <span class="keyword">new</span> FileReader( <span class="string">"./hello.txt"</span> );	<span class="comment">//char 기반</span></div><div class="line">			is = <span class="keyword">new</span> FileInputStream( <span class="string">"./hello.txt "</span>);	<span class="comment">//바이트기반</span></div><div class="line"></div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;			</div><div class="line">			<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span>( (data = reader.read()) != -<span class="number">1</span> ) &#123;</div><div class="line">				count++;</div><div class="line">				System.out.println( (<span class="keyword">char</span>)data );</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println( <span class="string">"\n읽은 회수: "</span> + count );</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"========="</span>);</div><div class="line"></div><div class="line">			count = <span class="number">0</span>;</div><div class="line">			data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( (data = is.read() )!= -<span class="number">1</span>) &#123;</div><div class="line">				count++;</div><div class="line">				System.out.println( (<span class="keyword">char</span>) data);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"파일 없음 "</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러:"</span> + e);			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( reader != <span class="keyword">null</span>) &#123;</div><div class="line">					reader.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( is != <span class="keyword">null</span>) &#123;</div><div class="line">					is.close();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>보조스트림을 사용하여 보자</p>
<figure class="highlight java"><figcaption><span>BufferedOutputStreamTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedOutputStreamTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedOutputStream bos = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			bos = <span class="keyword">new</span> BufferedOutputStream( <span class="keyword">new</span> FileOutputStream( <span class="string">"./123.txt"</span> ), <span class="number">5</span> );</div><div class="line">						<span class="comment">//버퍼가 5의 크기를 갖는다 5만큼 차면 flush(비우기)가 발생함</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'1'</span> ; i &lt;= <span class="string">'9'</span> ; i++) &#123;</div><div class="line">				bos.write( i );</div><div class="line">				<span class="comment">//bos.flush();		//한번쓰고 플러시하고를 반복.(버퍼를 5로 설정한 의미가 없어짐..)</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일 없음: "</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( bos!= <span class="keyword">null</span>) &#123;</div><div class="line">					bos.close();</div><div class="line">				&#125;				</div><div class="line">			&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>주스트림 FileReader을 꽂고<br>보조스트림 BufferedReader을 꽂음.</p>
<figure class="highlight java"><figcaption><span>BufferedOutputStreamTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> FileReader(<span class="string">"./src/io/BufferedReaderTest.java"</span>));</div><div class="line"></div><div class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">			String line = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>((line = br.readLine())!= <span class="keyword">null</span>) &#123;</div><div class="line">				System.out.println(++index + <span class="string">" : "</span> + line);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span>( FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일없음: "</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(br != <span class="keyword">null</span>) &#123;</div><div class="line">					br.close();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				System.out.println(<span class="string">"파일없음"</span>+e);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>MS 949로 텍스트 파일을 하나만들자.<br>FileInputStream 주 스트림을 바이트단위로 꽂고</p>
<figure class="highlight java"><figcaption><span>InputStreamReaderTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Reader reader = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			reader =</div><div class="line">					<span class="keyword">new</span> InputStreamReader(  <span class="keyword">new</span> FileInputStream(<span class="string">"./ms949.txt"</span>), <span class="string">"MS949"</span> );</div><div class="line"></div><div class="line">			<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( ( data = reader.read()) != -<span class="number">1</span> ) &#123;</div><div class="line">				System.out.println( (<span class="keyword">char</span>)data );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일이 없음:"</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"IOException:"</span>+e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( reader!=<span class="keyword">null</span>) &#123;</div><div class="line">					reader.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>System.in으로 부터 스트림을 생성해보자<br><figure class="highlight java"><figcaption><span>KeyboardTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in, <span class="string">"UTF-8"</span>));	<span class="comment">//키보드에서 라인 단위로 읽기 위해 br사용</span></div><div class="line">				<span class="comment">//readLine() 메소드를 쓰기위해</span></div><div class="line"></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				System.out.print( <span class="string">"&gt;&gt;"</span> );</div><div class="line">				String line = br.readLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (line == <span class="keyword">null</span> ) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">"exit"</span>.equals( line )) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				System.out.println(line);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset : "</span>+e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(br != <span class="keyword">null</span>) &#123;</div><div class="line">					br.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>파일 객체사용해보자.<br>tokenizer도 사용해보자<br><figure class="highlight java"><figcaption><span>PhoneList01.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneList01</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">		File file = <span class="keyword">new</span> File( <span class="string">"./phone.txt"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span>( file.exists() == <span class="keyword">false</span> ) &#123;</div><div class="line">			System.out.println( <span class="string">"파일이 존재하지 않습니다"</span> );</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"========== 파일정보 ========="</span> );</div><div class="line">		System.out.println( <span class="string">"경로"</span> + file.getAbsolutePath() );</div><div class="line">		System.out.println( <span class="string">"크기: "</span>+ file.length()+<span class="string">"Bytes"</span> );</div><div class="line"></div><div class="line"></div><div class="line">		Date date = <span class="keyword">new</span> Date( file.lastModified() );</div><div class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">		System.out.println( <span class="string">"마지막 수정일:"</span> + sdf.format(date));</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"전화번호"</span>);</div><div class="line">		br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader( <span class="keyword">new</span> FileInputStream(file),<span class="string">"UTF-8"</span>) );</div><div class="line"></div><div class="line">		String line = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">//System.out.println(line);</span></div><div class="line">			StringTokenizer st =</div><div class="line">					<span class="keyword">new</span> StringTokenizer(line, <span class="string">"\t "</span>);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span>( st.hasMoreTokens() ) &#123;</div><div class="line">				String s = st.nextToken();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</div><div class="line">					System.out.print( s + <span class="string">":"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>( index ==<span class="number">1</span> ) &#123;</div><div class="line">					System.out.print( s+ <span class="string">"-"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>( index == <span class="number">2</span>) &#123;</div><div class="line">					System.out.print( s+ <span class="string">"-"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					System.out.print( s);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				index++;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			System.out.print(<span class="string">"\n"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">catch</span> ( UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset"</span>);</div><div class="line">		&#125;  <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span>( br !=<span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					br.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>위에서 했던 작업을 Scanner로 간편하게 해보자<br><figure class="highlight java"><figcaption><span>PhoneList02.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneList02</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner scanner = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File file = <span class="keyword">new</span> File(<span class="string">"./phone.txt"</span>);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (file.exists() == <span class="keyword">false</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"파일이 존재하지 않습니다"</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"========== 파일정보 ========="</span>);</div><div class="line">			System.out.println(<span class="string">"경로"</span> + file.getAbsolutePath());</div><div class="line">			System.out.println(<span class="string">"크기: "</span> + file.length() + <span class="string">"Bytes"</span>);</div><div class="line"></div><div class="line">			Date date = <span class="keyword">new</span> Date(file.lastModified());</div><div class="line">			SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">			System.out.println(<span class="string">"마지막 수정일:"</span> + sdf.format(date));</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"전화번호"</span>);</div><div class="line">			<span class="comment">// 여기까지는 PhoneList01과 같다</span></div><div class="line"></div><div class="line">			scanner = <span class="keyword">new</span> Scanner(file);</div><div class="line">			<span class="keyword">while</span>( scanner.hasNext() ) &#123;</div><div class="line">				String name = scanner.next();</div><div class="line">				String phone1 = scanner.next();</div><div class="line">				String phone2 = scanner.next();</div><div class="line">				String phone3 = scanner.next();</div><div class="line"></div><div class="line">				System.out.println(name + <span class="string">":"</span> + phone1 + <span class="string">"-"</span> + phone2 + <span class="string">"-"</span> + phone3);</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> ( scanner != <span class="keyword">null</span> ) &#123;</div><div class="line">				scanner.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;InputStream-1-byte-단위로-읽는놈&quot;&gt;&lt;a href=&quot;#InputStream-1-byte-단위로-읽는놈&quot; class=&quot;headerlink&quot; title=&quot;InputStream - 1 byte 단위로 읽는놈&quot;&gt;&lt;/a&gt;InputS
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>6. 제네릭, 가변변수, 익명클래스, Collection프레임워크</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata7/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata7/</id>
    <published>2017-08-07T00:04:17.000Z</published>
    <updated>2017-08-07T06:04:14.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="제네릭"><a href="#제네릭" class="headerlink" title="제네릭"></a>제네릭</h3><p>오버로딩을 대체할 수 있으며 유용하다.</p>
<p>메소드에 제네릭을 적용<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T,P,Q,R&gt; <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">( T t )</span> </span>&#123;</div><div class="line">  System.out.println(t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">  println( <span class="number">10</span> );</div><div class="line">  println( <span class="keyword">true</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>메소드 반환형에 제네릭 적용<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T, P&gt; <span class="function">List&lt;P&gt; <span class="title">println</span><span class="params">( T t )</span> </span>&#123;</div><div class="line">  System.out.println( t );</div><div class="line"></div><div class="line">  List&lt;P&gt; list = <span class="keyword">new</span> ArrayList&lt;P&gt;();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>제네릭 배열을 어떻게 동적으로 생성하느냐<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">( E[] objects, <span class="keyword">int</span> capacity )</span> </span>&#123;</div><div class="line">  <span class="comment">//buffer = new E[ capacity ];	오류발생</span></div><div class="line">  <span class="comment">//방법1.</span></div><div class="line">  buffer = ( E[] ) Array.newInstance(objects.getClass(), capacity);</div><div class="line">  <span class="comment">//방법2. 방법2가 더 선호된다. 객체를 생성하지 않아도 된다는점 때문에</span></div><div class="line">  buffer = ( E[] )Array.newInstance(Object.class, capacity);</div><div class="line">  <span class="comment">//방법3. 방법 2와 일치하는방식이다.</span></div><div class="line">  buffer = ( E[] )<span class="keyword">new</span> Object[capacity];</div><div class="line">  <span class="comment">//방법 3을 제일 많이 쓴다.</span></div><div class="line"></div><div class="line">  <span class="keyword">this</span>.capacity = capacity;</div><div class="line">  currentIndex = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>제네릭 호출 방식<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    MyStack&lt;String&gt; stack = <span class="keyword">new</span> MyStack&lt;String&gt;(<span class="number">3</span>);</div><div class="line">    <span class="comment">//String의 스택을 생성한다.</span></div><div class="line"></div><div class="line">    MyStack&lt;?&gt; stack = <span class="keyword">new</span> MyStack&lt;String&gt;(<span class="number">3</span>);</div><div class="line">    <span class="comment">//모든 타입의 객체를 생성하겠다.</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> .... f(List&lt;? extends Shape&gt;)&#123;</div><div class="line">  <span class="comment">// Shape를 상속한 것들의 리스트를 파라미터로 받음</span></div><div class="line">  <span class="comment">//와일드 카드를 사용해서 제네릭 타입 제한하기.</span></div><div class="line">    ...</div><div class="line">&#125;  </div></pre></td></tr></table></figure></p>
<h3 id="가변변수"><a href="#가변변수" class="headerlink" title="가변변수"></a>가변변수</h3><p>가변변수를 배우기 전에는 파라미터에 배열을 넣을 생각을 할 것이다. 하지만 이를 대체할 수 있는것이 가변변수이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">  println2( <span class="string">"둘리"</span> );</div><div class="line">  println2( <span class="string">"둘리"</span>, <span class="string">"마이콜"</span> );</div><div class="line">  println2( <span class="string">"둘리"</span>, <span class="string">"마이콜"</span>, <span class="string">"또치"</span>);</div><div class="line"></div><div class="line">  <span class="comment">//println3( new String[]&#123;"둘리", "마이콜", "또치"&#125;); 배열사용</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println2</span><span class="params">(String ... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>( String s : params)&#123;</div><div class="line">      System.out.println(s);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>아래의 경우 Object를 파라미터로 주면 캐스팅을 계속 해줘야한다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">( T t)</span> </span>&#123;</div><div class="line">  System.out.println(t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Object o )</span> </span>&#123;</div><div class="line">  System.out.println(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="익명클래스"><a href="#익명클래스" class="headerlink" title="익명클래스"></a>익명클래스</h3><p>파라미터를 전달하는 부분에서 객체를 생성하여 메소드를 호출.<br>객체를 생성하지 않고 메소드 호출부분에서 객체를 생성함.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//anonymous class object</span></div><div class="line">draw( <span class="keyword">new</span> Drawable() &#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				System.out.println(<span class="string">"한 번만 만들고 버릴 도형을 그렸습니다"</span>);</div><div class="line">  &#125;			</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection인터페이스는 inteator() 메소드를 갖고 있다.<br>List, Set 클래스는 Collection클래스를 구현하며 List는 중복허용, 순서를 갖는다. 그러나 Set는 중복을 허용하지 않으며 순서를 갖지 않는다.<br>List인터페이스는 add, get, remove를 갖는다.<br>LinkedList, ArrayList가 List 인터페이스를 구현한다.</p>
<p>ArrayList는 빈번한 삽입,삭제가 일어나는 경우 사용하면 안된다. 그 과정이 길기 떄문에.<br>LinkedList는 삽입삭제가 유용하나 10000번째 놈이면 10000번을 next해야한다.</p>
<p>멀티스레드에서 ArrayList, LinkedList의 add를 사용할 때는 동기화 처리를 해줘야한다. 하지만 Vector은 멀티스레드 환경에서 동기화를 해주지 않아도 된다.</p>
<h4 id="ArrayList-LinkedList-VectorTest2"><a href="#ArrayList-LinkedList-VectorTest2" class="headerlink" title="ArrayList , LinkedList, VectorTest2"></a>ArrayList , LinkedList, VectorTest2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                            LinkedList&lt;String&gt;();</div><div class="line">                            Vector&lt;String&gt;();</div><div class="line"></div><div class="line">		<span class="comment">//삽입</span></div><div class="line">		list.add( <span class="string">"둘리"</span> );</div><div class="line">		list.add( <span class="string">"마이콜"</span> );</div><div class="line">		list.add( <span class="string">"도우넛"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//순회1</span></div><div class="line">		<span class="keyword">int</span> count = list.size();</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count ; i++) &#123;</div><div class="line">			String s = list.get( i );</div><div class="line">			System.out.println(i);			</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//제거</span></div><div class="line">		list.remove( <span class="number">1</span> );</div><div class="line"></div><div class="line">		<span class="comment">//순회2</span></div><div class="line">		Iterator&lt;String&gt; it = list.iterator();</div><div class="line">		<span class="keyword">while</span>( it.hasNext() ) &#123;</div><div class="line">			String s = it.next();</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//순회3</span></div><div class="line">		<span class="keyword">for</span>( String s : list) &#123;</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>1.2 시대의 Vector인터페이스는 addElement, elementAt, removeElement, elements메소드를 갖고 있다. 그 후 1.2이후에 생긴 List를 구현하여 List의 메소드를 갖는다. Vector를 사용하려면 Vector 메소드를 사용하거나 List 인터페이스 내부의 메소드만 사용하든가 해야 복잡해지지 않는다.</p>
<p>과거 Vector을 사용하는 방식. 호환성 때문에 존재할뿐.. 사용일 지양하자.<br><figure class="highlight java"><figcaption><span>VectorTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Vector&lt;String&gt; v = <span class="keyword">new</span> Vector&lt;String&gt;();</div><div class="line"></div><div class="line">		v.addElement( <span class="string">"둘리"</span> );</div><div class="line">		v.addElement( <span class="string">"마이콜"</span> );</div><div class="line">		v.addElement( <span class="string">"도우넛"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//순회1</span></div><div class="line">		Enumeration&lt;String&gt; e = v.elements();</div><div class="line">		<span class="keyword">while</span>( e.hasMoreElements() ) &#123;</div><div class="line">			String s = e.nextElement();</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//삭제</span></div><div class="line">		v.removeElementAt( <span class="number">1</span> );</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"====================="</span>);</div><div class="line">		<span class="comment">//순회2</span></div><div class="line">		<span class="keyword">int</span> count = v.size();</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt; count; i++) &#123;</div><div class="line">			String s = v.elementAt( i );</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line"> 	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>Set 인터페이스는 key, value로 구성된다. key를 통해 value에 접근할 수 있다.<br>HashSet, TreeSet가 Map인터페이스를 구현한다.<br>hashCode를 오버라이드 하여 사용하여야 한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Set&lt;Value&gt; set = <span class="keyword">new</span> HashSet&lt;Value&gt;();</div><div class="line"></div><div class="line">		Value v1 =<span class="keyword">new</span> Value(<span class="number">10</span>);</div><div class="line">		Value v2 =<span class="keyword">new</span> Value(<span class="number">5</span>);</div><div class="line">		Value v3 =<span class="keyword">new</span> Value(<span class="number">10</span>);</div><div class="line">		Value v4 =<span class="keyword">new</span> Value(<span class="number">20</span>);</div><div class="line"></div><div class="line">		set.add(v1);</div><div class="line">		set.add(v2);</div><div class="line">		set.add(v3);</div><div class="line">		set.add(v4);</div><div class="line"></div><div class="line">    <span class="comment">//존재여부 확인</span></div><div class="line">		System.out.println(set.contains(<span class="keyword">new</span> Value(<span class="number">10</span>)));</div><div class="line"></div><div class="line">    <span class="comment">//삭제</span></div><div class="line">    set.remove( <span class="keyword">new</span> Value(<span class="number">10</span>) );</div><div class="line"></div><div class="line">		<span class="comment">//순회</span></div><div class="line">		Iterator&lt;Value&gt; it = set.iterator();</div><div class="line">		<span class="keyword">while</span>( it.hasNext() )&#123;</div><div class="line">			Value v = it.next();</div><div class="line">			System.out.println(v);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>성능향상을 위해 hash를 오버라이드 한다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">( <span class="keyword">int</span> value )</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Value [value="</span> + value + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + value;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Value other = (Value) obj;</div><div class="line">		<span class="keyword">if</span> (value != other.value)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line"></div><div class="line">		stack.push(<span class="string">"둘리"</span>);</div><div class="line">		stack.push(<span class="string">"마이콜"</span>);</div><div class="line">		stack.push(<span class="string">"도우넛"</span>);</div><div class="line">		stack.push(<span class="string">"길동"</span>);</div><div class="line"></div><div class="line">		System.out.println( stack.isEmpty() );</div><div class="line">		System.out.println( stack.pop() );</div><div class="line">		System.out.println( stack.pop() );</div><div class="line">		System.out.println( stack.peek() ); <span class="comment">//pop을 하지않고 확인만</span></div><div class="line">		System.out.println( stack.pop() );</div><div class="line">		System.out.println( stack.pop() );</div><div class="line"></div><div class="line">		<span class="comment">//스택은 비어있는 경우 pop호출 시 예외가 발생한다.</span></div><div class="line">		System.out.println( stack.pop() );</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line"></div><div class="line">		queue.offer(<span class="string">"둘리"</span>);</div><div class="line">		queue.offer(<span class="string">"마이콜"</span>);</div><div class="line">		queue.offer(<span class="string">"도우너"</span>);</div><div class="line">		queue.offer(<span class="string">"길동"</span>);</div><div class="line"></div><div class="line">		System.out.println( queue.isEmpty() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line"></div><div class="line">		System.out.println( queue.peek() );</div><div class="line"></div><div class="line">		System.out.println( queue.poll() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line"></div><div class="line">		System.out.println( queue.isEmpty() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line">		<span class="comment">//스택은 예외가 발생했지만 큐는 null이 리턴된다.</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>Map 인터페이스가 존재하는데 HashMap, HashTable가 이를 구현한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line"></div><div class="line">  map.put(<span class="string">"둘리"</span>, <span class="number">100</span>);</div><div class="line">  map.put(<span class="string">"마이콜"</span>, <span class="number">50</span>);</div><div class="line">  map.put(<span class="string">"도우넛"</span>, <span class="number">80</span>);</div><div class="line">  map.put(<span class="string">"길동"</span>, <span class="number">90</span>);</div><div class="line"></div><div class="line">  <span class="comment">//중복</span></div><div class="line">  map.put( <span class="string">"둘리"</span> , <span class="number">0</span>);		<span class="comment">//덮어쓴다.</span></div><div class="line"></div><div class="line">  <span class="comment">//auto unboxing</span></div><div class="line">  <span class="keyword">int</span> score = map.get( <span class="string">"둘리"</span> );</div><div class="line">  System.out.println(score);</div><div class="line"></div><div class="line">  map.remove( <span class="string">"둘리"</span> );</div><div class="line"></div><div class="line">  <span class="comment">//평균 ( 키를 모르는데 어떻게할까?)</span></div><div class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">  Set&lt;String&gt; keySet = map.keySet();</div><div class="line">  Iterator&lt;String&gt; it = keySet.iterator();</div><div class="line">  <span class="keyword">while</span>( it.hasNext() ) &#123;</div><div class="line">    String key = it.next();</div><div class="line">    System.out.println( key );</div><div class="line">    <span class="keyword">int</span> s = map.get( key );</div><div class="line">    sum += s;</div><div class="line">  &#125;</div><div class="line">  System.out.println( <span class="string">"평균 : "</span>+ sum / keySet.size() );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;제네릭&quot;&gt;&lt;a href=&quot;#제네릭&quot; class=&quot;headerlink&quot; title=&quot;제네릭&quot;&gt;&lt;/a&gt;제네릭&lt;/h3&gt;&lt;p&gt;오버로딩을 대체할 수 있으며 유용하다.&lt;/p&gt;
&lt;p&gt;메소드에 제네릭을 적용&lt;br&gt;&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>5.자바기본API(유틸리티API)</title>
    <link href="http://KKimSangHeon.github.io/2017/08/04/bigdata6/"/>
    <id>http://KKimSangHeon.github.io/2017/08/04/bigdata6/</id>
    <published>2017-08-04T05:10:31.000Z</published>
    <updated>2017-08-07T06:04:11.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="날짜"><a href="#날짜" class="headerlink" title="날짜"></a>날짜</h4><p>date 보다는 calendar을 쓰라고 권고한다.</p>
<h5 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h5><figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Date now = <span class="keyword">new</span> Date();</div><div class="line">		System.out.println( now );</div><div class="line">		printDate1(now);</div><div class="line">		printDate2(now);</div><div class="line"></div><div class="line">		<span class="comment">// 특정시간 세팅(200/08/04)</span></div><div class="line">		Date d1 = <span class="keyword">new</span> Date(<span class="number">100</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line">		printDate2( d1 );</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//1970년 1월 1일 00:00:00 기준</span></div><div class="line">		<span class="comment">//milliseconds 값을 세팅</span></div><div class="line">		Date d3 = <span class="keyword">new</span> Date( <span class="number">24L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">365</span> * <span class="number">30</span>);</div><div class="line">		printDate2(d3);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDate1</span><span class="params">( Date date )</span> </span>&#123;</div><div class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat( <span class="string">"YYYY년 MM월 dd일 hh시 mm분 ss초"</span> );</div><div class="line"></div><div class="line">		System.out.println(sdf.format(date));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDate2</span><span class="params">( Date date)</span> </span>&#123;</div><div class="line">		<span class="comment">//년도 (+1900)</span></div><div class="line">		<span class="keyword">int</span> year = date.getYear();</div><div class="line"></div><div class="line">		<span class="comment">//월(0~11)</span></div><div class="line">		<span class="keyword">int</span> month = date.getMonth();</div><div class="line"></div><div class="line">		<span class="comment">//일</span></div><div class="line">		<span class="keyword">int</span> day = date.getDay();</div><div class="line"></div><div class="line">		<span class="comment">//시</span></div><div class="line">		<span class="keyword">int</span> hour = date.getHours();</div><div class="line"></div><div class="line">		<span class="comment">//분</span></div><div class="line">		<span class="keyword">int</span> minutes = date.getMinutes();</div><div class="line"></div><div class="line">		<span class="comment">//초</span></div><div class="line">		<span class="keyword">int</span> seconds = date.getSeconds();</div><div class="line"></div><div class="line">		System.out.println(</div><div class="line">				(year + <span class="number">1900</span>) + <span class="string">"년 "</span> +</div><div class="line">				(month + <span class="number">1</span>)+ <span class="string">"월 "</span> +</div><div class="line">				day + <span class="string">"일 "</span> +</div><div class="line">				hour + <span class="string">"시 "</span> +</div><div class="line">				minutes + <span class="string">"분"</span> +</div><div class="line">				seconds + <span class="string">"초"</span></div><div class="line">				);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="싱글톤"><a href="#싱글톤" class="headerlink" title="싱글톤"></a>싱글톤</h4><p>어플리케이션에서  객체 하나만 유지하고 싶을 떄 이 방법을 쓴다.<br><figure class="highlight java"><figcaption><span>Singleton.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">			instance = <span class="keyword">new</span> Singleton();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//생성자를 private로 하여 객체 생성을 외부에서 불가능하도록</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>싱글톤 클래스를 활용해보자<br><figure class="highlight java"><figcaption><span>SingletonTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Singleton s1 = Singleton.getInstance();</div><div class="line">	Singleton s2 = Singleton.getInstance();</div><div class="line">	Singleton s3 = Singleton.getInstance();</div><div class="line"></div><div class="line">	System.out.println(s1 == s2);</div><div class="line">	System.out.println(s2 == s3);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p>Calendar클래스는 추상클래스이다.(객체생성 불가능)<br><figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//		Calendar cal = new Calendar();	//추상클래스라 객체생성 불가능</span></div><div class="line">		Calendar cal = Calendar.getInstance();</div><div class="line">		<span class="comment">//어플리케이션에서 이 객체 하나만 유지하고 싶을 떄 이 방법을 쓴다. 싱글톤 패턴이라함</span></div><div class="line">		printDate( cal );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDate</span><span class="params">( Calendar cal )</span> </span>&#123;</div><div class="line">		String[] days = &#123;<span class="string">"일"</span>,<span class="string">"월"</span>,<span class="string">"화"</span>,<span class="string">"수"</span>,<span class="string">"목"</span>,<span class="string">"금"</span>,<span class="string">"토"</span>&#125;;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> year = cal.get( Calendar.YEAR );</div><div class="line">		<span class="keyword">int</span> month = cal.get( Calendar.MONTH );</div><div class="line">		<span class="keyword">int</span> date = cal.get( Calendar.DATE );</div><div class="line"></div><div class="line">		<span class="comment">//1(일요일) ~ 7(토요일)</span></div><div class="line">		<span class="keyword">int</span> day = cal.get( Calendar.DAY_OF_WEEK);</div><div class="line"></div><div class="line">		<span class="keyword">int</span> hour = cal.get( Calendar.HOUR );</div><div class="line">		<span class="keyword">int</span> minute = cal.get( Calendar.MINUTE );</div><div class="line">		<span class="keyword">int</span> seconds = cal.get( Calendar.SECOND );</div><div class="line"></div><div class="line">		System.out.println(</div><div class="line">				(year) + <span class="string">"년 "</span> +</div><div class="line">				(month + <span class="number">1</span>)+ <span class="string">"월 "</span> +</div><div class="line">				date + <span class="string">"일 "</span> +</div><div class="line">				<span class="string">"("</span> + days[day-<span class="number">1</span>] + <span class="string">")"</span> +</div><div class="line">				hour + <span class="string">"시 "</span> +</div><div class="line">				minute + <span class="string">"분"</span> +</div><div class="line">				seconds + <span class="string">"초"</span></div><div class="line">				);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;날짜&quot;&gt;&lt;a href=&quot;#날짜&quot; class=&quot;headerlink&quot; title=&quot;날짜&quot;&gt;&lt;/a&gt;날짜&lt;/h4&gt;&lt;p&gt;date 보다는 calendar을 쓰라고 권고한다.&lt;/p&gt;
&lt;h5 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>4. 자바기본 API(equals, wrapper클래스)</title>
    <link href="http://KKimSangHeon.github.io/2017/08/03/bigdata5/"/>
    <id>http://KKimSangHeon.github.io/2017/08/03/bigdata5/</id>
    <published>2017-08-03T02:25:31.000Z</published>
    <updated>2017-08-07T06:04:11.018Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>String 인스턴스 안에는 char 배열이 존재하는것이다.<br>String은 toString를 오버라이딩 하여 안에 내용이 출력된다.<br>toString를 오버라이딩 하여 인스턴스에 대한 정보를 확인할 수 있게 만드는 것은 좋은 습관이다. 디버깅할때 편하다는 장점이 있다.</p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><h5 id="결과를-예측해보자"><a href="#결과를-예측해보자" class="headerlink" title="결과를 예측해보자"></a>결과를 예측해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Point point1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">		Point point2 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">		Point point3 = point2;</div><div class="line"></div><div class="line">		<span class="comment">// ==연산자에서 두 개의 항이 객체 참조 변수 인 경우</span></div><div class="line">		<span class="comment">// 두 개체의 동일 여부(동일성)</span></div><div class="line">		System.out.println( point1 == point2 );	<span class="comment">//false</span></div><div class="line">		System.out.println( point2 == point3 );	<span class="comment">//true</span></div><div class="line"></div><div class="line">		<span class="comment">//equals는 오버라이딩이 되지 않았을 경우 참조값 비교를 함.(동질성 비교)</span></div><div class="line">		<span class="comment">//해쉬코드를 갖고와서 비교를함(해쉬코드==참조값)</span></div><div class="line">		System.out.println( point1.equals(point2) ); <span class="comment">//false</span></div><div class="line">		System.out.println( point2.equals(point3) ); <span class="comment">//true</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"================"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//String 객체와 비교</span></div><div class="line">		<span class="comment">//String는 equals가 오버라이딩 되어있다.</span></div><div class="line">		String s1 = <span class="keyword">new</span> String( <span class="string">"hello"</span> );</div><div class="line">		String s2 = <span class="keyword">new</span> String( <span class="string">"hello"</span> );</div><div class="line">		String s3 = s2;</div><div class="line"></div><div class="line">		System.out.println( s1 == s2 );		<span class="comment">//false</span></div><div class="line">		System.out.println( s2 == s3 );		<span class="comment">//true</span></div><div class="line">		System.out.println( s1.equals(s2) );	<span class="comment">//true</span></div><div class="line">		System.out.println( s2.equals(s3) );	<span class="comment">//true</span></div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h5 id="equals를-오버라이딩-해보자"><a href="#equals를-오버라이딩-해보자" class="headerlink" title="equals를 오버라이딩 해보자"></a>equals를 오버라이딩 해보자</h5><p>hashCode()메소드도 오버라이딩이 필요하다.<br>자바에서는 hashCode() equal() 메소드를 동시에 오버라이드 해야한다.<br>equals 조건을 제곱으로 한다면 hashCode도 제곱으로 변경해주어야 한다.<br>그렇지 않으면 해쉬맵 해쉬 셋을 쓸 때 어려워진다.<br><figure class="highlight java"><figcaption><span>Point.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + x;</div><div class="line">		result = prime * result + y;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Point other = (Point) obj;</div><div class="line">		<span class="keyword">if</span> (x != other.x)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (y != other.y)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h5 id="결과를-예측해보자-1"><a href="#결과를-예측해보자-1" class="headerlink" title="결과를 예측해보자"></a>결과를 예측해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String Literal		</span></div><div class="line"><span class="comment">// 문자열 상수 Pool에 있는것을 재사용함</span></div><div class="line"><span class="comment">// 문자열 상수 Pool을 공유하기 때문에 문자열의 수정이 불가능하다.</span></div><div class="line"><span class="comment">// str1의 변경은 가능하나 문자열 상수인 hello의 값이 변경 불가능하다는것.</span></div><div class="line">String str1 = <span class="string">"hello"</span>;</div><div class="line">String str2 = <span class="string">"hello"</span>;</div><div class="line">String str3 = str2;</div><div class="line"></div><div class="line">System.out.println( str1 == str2 );	<span class="comment">//true</span></div><div class="line">System.out.println( str2 == str3 );	<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h5 id="new-String-“문자열”-“문자열”의-차이는"><a href="#new-String-“문자열”-“문자열”의-차이는" class="headerlink" title="new String(“문자열”) “문자열”의 차이는?"></a>new String(“문자열”) “문자열”의 차이는?</h5><p>위의 결과를 보고 잘 생각해 보자<br>문자열은 변경되지 않는다는점을 잘 생각하자.<br>변한다면 참고하고 있는 다른 참조변수들이 피해를 본다..</p>
<h5 id="잘생각해보자"><a href="#잘생각해보자" class="headerlink" title="잘생각해보자"></a>잘생각해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	String str1 = <span class="string">"abc"</span>;</div><div class="line">	String str2 = <span class="string">"cde"</span>;</div><div class="line">	String str3 = str2;</div><div class="line"></div><div class="line">	str2 = str3.toUpperCase();</div><div class="line"></div><div class="line">	System.out.println(str1);</div><div class="line">	System.out.println(str2);</div><div class="line">	System.out.println(str3);</div><div class="line"></div><div class="line">	String str4 = str2.concat(<span class="string">"??"</span>);</div><div class="line">	System.out.println(str2);</div><div class="line">	System.out.println(str4);</div><div class="line"></div><div class="line"><span class="comment">//		String s = "!";</span></div><div class="line"><span class="comment">//		String str5 = s.concat(str2);</span></div><div class="line"><span class="comment">//		Method chain		</span></div><div class="line">	String str5 = <span class="string">"!"</span>.concat(str2);	<span class="comment">//위의 코드와 별다른 차이가 없다.</span></div><div class="line"></div><div class="line">	System.out.println(str5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="String-메소드의-사용법-및-활용"><a href="#String-메소드의-사용법-및-활용" class="headerlink" title="String 메소드의 사용법 및 활용"></a>String 메소드의 사용법 및 활용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest03</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String s= <span class="string">"abcAbcabcABC"</span>;</div><div class="line"></div><div class="line">		<span class="comment">//charAt</span></div><div class="line">		<span class="keyword">char</span> c = s.charAt( <span class="number">2</span> );</div><div class="line">		System.out.println( c );</div><div class="line"></div><div class="line">		<span class="comment">//indexOf</span></div><div class="line">		System.out.println( s.indexOf( <span class="string">"Abc"</span> ) );	<span class="comment">//3</span></div><div class="line">		System.out.println( s.indexOf(<span class="string">"ab"</span>) );		<span class="comment">//0</span></div><div class="line">		System.out.println( s.lastIndexOf(<span class="string">"ab"</span>) );	<span class="comment">//6</span></div><div class="line">		System.out.println( s.indexOf( <span class="string">"XYZ"</span> ));	<span class="comment">//-1 반환</span></div><div class="line"></div><div class="line">		<span class="comment">//replace</span></div><div class="line">		System.out.println( s.replace(<span class="string">"bc"</span>, <span class="string">"12"</span>) );	<span class="comment">//s가 바뀌지는 않음</span></div><div class="line">		System.out.println( s.replaceAll(<span class="string">"bc"</span>, <span class="string">"12"</span>) );	<span class="comment">//s가 바뀌지는 않음</span></div><div class="line"></div><div class="line">		<span class="comment">//substring</span></div><div class="line">		System.out.println( s.substring( <span class="number">3</span>, <span class="number">7</span>) );	<span class="comment">//3~6까지 나온다</span></div><div class="line"></div><div class="line">		<span class="comment">//case</span></div><div class="line">		System.out.println( s.toLowerCase() );</div><div class="line">		System.out.println( s.toUpperCase() );</div><div class="line"></div><div class="line">		<span class="comment">//concat</span></div><div class="line">		String str1 = <span class="string">" ab cd "</span>;</div><div class="line">		String str2 = <span class="string">",efg"</span>;</div><div class="line"></div><div class="line">		str1 = str1.concat(str2);</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//trim</span></div><div class="line">		System.out.println( <span class="string">"---"</span> + str1 + <span class="string">"---"</span> );		<span class="comment">//--- ab cd ,efg---</span></div><div class="line">		System.out.println( <span class="string">"---"</span> + str1.trim() + <span class="string">"---"</span> );<span class="comment">//---ab cd ,efg---</span></div><div class="line"></div><div class="line">		<span class="comment">//split</span></div><div class="line">		String[] tokens = str1.split(<span class="string">","</span>);</div><div class="line">		<span class="keyword">for</span>( String token : tokens) &#123;				<span class="comment">// ab cd</span></div><div class="line">			System.out.println( token );			<span class="comment">// efg</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//split 예외</span></div><div class="line">		tokens = <span class="string">"abcdefg"</span>.split( <span class="string">","</span> );</div><div class="line">		<span class="keyword">for</span>( String token : tokens) &#123;</div><div class="line">			System.out.println( token );	<span class="comment">//abcdefg</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		tokens = <span class="string">""</span>.split( <span class="string">","</span> );</div><div class="line">		System.out.println( tokens.length );	<span class="comment">// 1</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>StringBuffer는 가변크기의 버퍼를 가짐.<br>“abc” + “cde”    (String) 보다는 StringBuffer를 쓰는게 낫다.<br>전자의 경우 런타임 때 “abc”를 스트링 버퍼로 만들고 append(“cde”)후 toString()를 통해 값을 반환한다.<br>String를 사용해도 되지만 append의 작업이 많을 경우 StringBuffer사용하는것이 빠르다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//생성</span></div><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer( <span class="string">"this"</span> );</div><div class="line"></div><div class="line">System.out.println(sb.length() + <span class="string">":"</span> + sb.capacity());	<span class="comment">//4:20</span></div><div class="line"><span class="comment">//버퍼의 크기를 문자의 크기보다 크게 생성함(append를 염두)</span></div><div class="line"></div><div class="line"><span class="comment">//문자열추가</span></div><div class="line">sb.append(<span class="string">" is pencil"</span>);</div><div class="line">System.out.println( sb );</div><div class="line"></div><div class="line"><span class="comment">//삽입</span></div><div class="line">sb.insert(<span class="number">7</span>, <span class="string">" my"</span>);</div><div class="line">System.out.println( sb );	<span class="comment">//this is my pencil</span></div><div class="line"></div><div class="line"><span class="comment">//치환</span></div><div class="line">sb.replace( <span class="number">8</span>, <span class="number">10</span>, <span class="string">"your"</span> );</div><div class="line">System.out.println( sb );</div><div class="line"></div><div class="line"><span class="comment">//버퍼 크기</span></div><div class="line">sb.setLength( <span class="number">3</span> );</div><div class="line">System.out.println( sb );</div><div class="line"></div><div class="line"><span class="comment">//문자열 + 연산은 내부적으로 StringBuffer 객체로 변환</span></div><div class="line">String s1 = <span class="string">"Hello"</span> + <span class="string">" World"</span> + <span class="number">10</span> +<span class="keyword">true</span>;</div><div class="line">System.out.println(s1);		<span class="comment">//Hello World10true</span></div><div class="line"><span class="comment">//다음과 코드가 같은것.</span></div><div class="line"></div><div class="line">String s2 = <span class="keyword">new</span> StringBuffer( <span class="string">"Hello"</span> ).append( <span class="string">" World"</span> ).append( <span class="number">10</span> ).append( <span class="keyword">true</span> ).toString();</div><div class="line"></div><div class="line">System.out.println(s1);	<span class="comment">//Hello World10true</span></div><div class="line">System.out.println(s2);	<span class="comment">//Hello World10true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Wrapper-클래스"><a href="#Wrapper-클래스" class="headerlink" title="Wrapper 클래스"></a>Wrapper 클래스</h4><p>기본형 보다는 Wrapper 클래스를 쓰고자하는 움직임이 많이 발생하고 있다.</p>
<figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClassTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Integer i = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line">		Character c = <span class="keyword">new</span> Character( <span class="string">'c'</span> );</div><div class="line">		Float f = <span class="keyword">new</span> Float ( <span class="number">3.14</span> );</div><div class="line">		Boolean b = <span class="keyword">new</span> Boolean( <span class="keyword">true</span> );</div><div class="line"></div><div class="line">		<span class="comment">//Auto Boxing</span></div><div class="line">		Integer j = <span class="number">10</span>;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//int k = 20 + j.intValue();</span></div><div class="line">		<span class="comment">//Auto Unboxing</span></div><div class="line">		<span class="keyword">int</span> k = <span class="number">20</span> + j;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">( Integer a, Integer b )</span> </span>&#123;</div><div class="line">		<span class="comment">// 상수풀 운영원칙 때문에 객체이지만 내부를 수정할 수 없다.</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="정규식을활용하여-정수인지-확인"><a href="#정규식을활용하여-정수인지-확인" class="headerlink" title="정규식을활용하여 정수인지 확인"></a>정규식을활용하여 정수인지 확인</h5><figure class="highlight java"><figcaption><span>WrapperClassTest2.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClassTest2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println( Character.toLowerCase( <span class="string">'a'</span> ));</div><div class="line">		System.out.println( Character.isDigit( <span class="string">'1'</span> ));</div><div class="line">		System.out.println( Character.isDigit( <span class="string">'@'</span> ));</div><div class="line"></div><div class="line">		<span class="comment">//String는 isdigit가 존재하지 않는다.</span></div><div class="line">		String s = <span class="string">"1234"</span>;</div><div class="line">		<span class="keyword">if</span>(s.matches(<span class="string">"-?\\d+"</span>) == <span class="keyword">false</span> ) &#123;</div><div class="line">			System.out.println(<span class="string">"숫자가 아닙니다"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> i = Integer.parseInt(s);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 프로그램 로직(변수 검증) 할 때는</span></div><div class="line">		<span class="comment">// try - catch 문으로 하지 말것.</span></div><div class="line">		<span class="comment">// 비용이 많이든다.</span></div><div class="line"></div><div class="line">		<span class="comment">//정규식을 활용하자</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h4&gt;&lt;p&gt;String 인스턴스 안에는 char 배열이 존재하는것이다.&lt;br&gt;String은 toString를
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>3. 패키지, 예외</title>
    <link href="http://KKimSangHeon.github.io/2017/08/03/bigdata4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/03/bigdata4/</id>
    <published>2017-08-03T01:41:54.000Z</published>
    <updated>2017-08-07T06:04:10.611Z</updated>
    
    <content type="html"><![CDATA[<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>탐색의 경우 O(n)   / 삽입 삭제의 경우 간단.</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>탐색의 경우 O(1)   / 삽입 삭제의 경우 쭉~ 밀려남</p>
<h4 id="패키지"><a href="#패키지" class="headerlink" title="패키지"></a>패키지</h4><p>java.lang.* - 명시적으로 지정하지 않아도 자동으로 import 되는 패키지.<br>자바 프로그램이 기본적으로 필요로 하는 클래스와 인터페이스 포함</p>
<p>java.io.* - 데이터를 입력받고 출력할 수 있도록 하는 클래스 포함</p>
<p>java.net.* - 네트워크를 통하여 통신할 수 있도록 해주는 클래스 포함</p>
<p>java.util.* - 날짜/시간 조작, 난수 발생 등 각종 유틸리티 클래스와 인터페이스 포함</p>
<h4 id="예외처리"><a href="#예외처리" class="headerlink" title="예외처리"></a>예외처리</h4><h5 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h5><p>프로그램이 실행되는 동안 발생할 수 있는 비정상적인 조건<br>번역시의 에러가 아닌 실행시의 에러를 예외라 함</p>
<h5 id="자바에서의-예외처리"><a href="#자바에서의-예외처리" class="headerlink" title="자바에서의 예외처리"></a>자바에서의 예외처리</h5><p>예외처리를 위한 Exception 클래스 정의<br>기본적인 예외는 자바에 미리 정의된 예외를 통해 처리 가능<br>사용자가 필요한 예외를 직접 정의할 수 있음<br>예상되는 예외는 미리 처리해주면 무조건적인 프로그램의 종료를 피할 수 있음<br>예외처리의 사용은 프로그램의 신뢰성을 높여줌</p>
<h5 id="try-catch-문"><a href="#try-catch-문" class="headerlink" title="try catch 문"></a>try catch 문</h5><p>catch문에서 예외가 발생하면 복구시키는게 목표이다. 하지만 그게 말이 쉽지 복구라는건 불가능한 경우가 많이있다.<br>try catch는 가독성을 떨어뜨린다는 단점이 있다.<br>ex) 상대방이 랜선을 뽑아서 캐치에 왔다면 어쩔래</p>
<p>finally는 옵션이다.<br>주로 자원정리가 목적이다. 예외가 발생하던 안하던 들어감.<br>심지어 try에서 return 을 해도 finally가 실행된다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  result = <span class="number">1000</span> / a;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(ArithmeticException e) &#123;</div><div class="line">  System.out.println(<span class="string">"예외발생"</span>);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  System.out.println(<span class="string">"자원정리"</span>);   <span class="comment">//실행된다.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="checked-Exception"><a href="#checked-Exception" class="headerlink" title="checked Exception"></a>checked Exception</h5><p>메소드를 사용하기 위해서는 반드시 예외를 처리해 줘야함 (ex&gt; FileInputStream)</p>
<h4 id="실습1"><a href="#실습1" class="headerlink" title="실습1."></a>실습1.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    fis = <span class="keyword">new</span> FileInputStream( <span class="string">"./hello.txt"</span> );</div><div class="line">    <span class="keyword">int</span> data = fis.read();</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span>(FileNotFoundException|NullPointerException e) &#123;</div><div class="line">    <span class="comment">/*여러개의 예외를 처리*/</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">  <span class="comment">/*모든예외를 처리하고 싶을 때*/</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="실습2-나의-Exception-정의"><a href="#실습2-나의-Exception-정의" class="headerlink" title="실습2. 나의 Exception 정의"></a>실습2. 나의 Exception 정의</h4><p>MyException 정의<br><figure class="highlight java"><figcaption><span>MyException.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>( <span class="string">"MyException Occurs"</span> );		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">( String message )</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>( message );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MyClass 정의</p>
<figure class="highlight java"><figcaption><span>MyClass.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">danger</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">		System.out.println( <span class="string">"some code1"</span> );</div><div class="line">		System.out.println( <span class="string">"some code2"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span>( <span class="number">1</span>==<span class="number">1</span> ) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"MyClass Exception 발행"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"some code3"</span> );</div><div class="line">		System.out.println( <span class="string">"some code4"</span> );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyClassTest 정의<br><figure class="highlight java"><figcaption><span>MyClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			MyClass myClass = <span class="keyword">new</span> MyClass();</div><div class="line">			myClass.danger();</div><div class="line">		&#125; <span class="keyword">catch</span> (MyException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;		</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;LinkedList&quot;&gt;&lt;a href=&quot;#LinkedList&quot; class=&quot;headerlink&quot; title=&quot;LinkedList&quot;&gt;&lt;/a&gt;LinkedList&lt;/h4&gt;&lt;p&gt;탐색의 경우 O(n)   / 삽입 삭제의 경우 간단.&lt;/p&gt;
&lt;h4 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2. 오버로드,오버로딩,추상클래스,인터페이스</title>
    <link href="http://KKimSangHeon.github.io/2017/08/03/bigdata3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/03/bigdata3/</id>
    <published>2017-08-03T00:27:12.000Z</published>
    <updated>2017-08-07T06:04:10.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="오버로드"><a href="#오버로드" class="headerlink" title="오버로드"></a>오버로드</h4><p>아래는 다 다른 메소드이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">..</div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="title">a</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b)</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="title">a</span> <span class="params">(<span class="keyword">float</span> a, <span class="keyword">int</span> b)</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h4 id="아규먼트-파라미터"><a href="#아규먼트-파라미터" class="headerlink" title="아규먼트 , 파라미터"></a>아규먼트 , 파라미터</h4><p>아규먼트는 int ,float 등 형을 의미<br>파라미터는 실제적인 데이터 10, 0.5 등을 의미.</p>
<h4 id="식별자"><a href="#식별자" class="headerlink" title="식별자"></a>식별자</h4><p>클래스 이름, 변수이름, 메소드 이름을 식별자라 한다.<br>대소문자 가능 숫자 가능 하지만 앞에는 안되고 특수문자는 $ _ 만 사용가능.</p>
<h4 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h4><p>기본으로 디폴트 생성자가 만들어지지만 생성자가 하나라도 정의되어 있으면 디폴트 생성자가 생성되지 않는다.</p>
<h4 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h4><p>외부에서 사용할 땐 일관되게 사용하는것.<br>오버로딩, 오버라이딩을 통해 구현</p>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>this 키워드는 메소드 호출을 받는 객체를 의미한다.<br>현재 사용중인 객체 그 자체를 의미한다.<br>this() 는  클래스의 한 생성자에서 다른 생성자를 호출 할 때 사용할 수 있다</p>
<h4 id="오버로딩"><a href="#오버로딩" class="headerlink" title="오버로딩"></a>오버로딩</h4><p>부모에있는 메소드와 시그니쳐가 동일(접근제어자 , 반환형, 메소드이름, 아규먼트)</p>
<h4 id="생성자-관련-문제"><a href="#생성자-관련-문제" class="headerlink" title="생성자 관련 문제"></a>생성자 관련 문제</h4><p>상속관계에서 자식 클래스의 인스턴스를 생성하면 부모 혹은 자식 생성자중 어떤것이 먼저 호출될까?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">부모 생성자</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span></span>&#123;</div><div class="line">  syso(<span class="string">"부모 호출됨"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">자식 생성자</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">  syso(<span class="string">"자식 호출됨"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>부모 생성자가 먼저 호출된다.<br>즉 자식 메소드의 생성자 안에(8행) super(); (기본생성자 호출)가 자동으로 삽입된것이다.</p>
<p>int형 매개변수가 존재하는 부모 생성자를 호출하려면 8행에 super(35); 를 넣어주면 된다.</p>
<h4 id="캐스팅"><a href="#캐스팅" class="headerlink" title="캐스팅"></a>캐스팅</h4><p>형은 높은데에서 낮은곳으로 가면 명시적으로 알려줘야 하지만 , 인스턴스는높은곳(부모)  낮은곳(자식) 으로 가려면 명시를 해줘야 한다.<br>다운캐스팅의 예(Explicity Casting 명시적 캐스팅)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//방법 1</span></div><div class="line">Person p = <span class="keyword">new</span> Student();</div><div class="line">Student s1 = (Student)p;</div><div class="line"></div><div class="line"><span class="comment">//방법 2</span></div><div class="line">((Student)p).set();   </div></pre></td></tr></table></figure></p>
<p>업캐스팅의 예(Implicity Casting 암시적 캐스팅)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p2 = s1;</div></pre></td></tr></table></figure></p>
<h4 id="추상클래스"><a href="#추상클래스" class="headerlink" title="추상클래스"></a>추상클래스</h4><h5 id="추상화"><a href="#추상화" class="headerlink" title="추상화"></a>추상화</h5><p>객체들이 가지고 있는 속성과 기능 중에 중요한 것들은 남기고 필요 없는 불필요한 것은 없애는것. 또는 공통된 것들을 그룹핑해서 한곳에다 모아놓는것.</p>
<h5 id="추상클래스-1"><a href="#추상클래스-1" class="headerlink" title="추상클래스"></a>추상클래스</h5><p>new를 통해 객체를 생성하지는 못한다.<br>필드를 갖을 수 있고, 구현된 메소드를 갖을 수 있다.<br>추상 클래스를 상속하는 클래스는 반드시 추상 클래스의 추상 메소드를 구현해야 함<br>추상 클래스간의 상속에서는 추상클래스를 구현하지 않아도 됨<br>추상 클래스의 활용<br>여러 클래스들이 상당수 공통점을 가지고 있으나 부분적으로 그 처리 방식이 다를 경우 부모 클래스를 추상 클래스로 정의하여 자식 클래스들이 각각 해당 메소드를 구현</p>
<h5 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h5><p>부모클래스<br><figure class="highlight java"><figcaption><span>Shape.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String fillColor;</div><div class="line">	<span class="keyword">private</span> String lineColor;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calcArea</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Shape 클래스를 상속<br><figure class="highlight java"><figcaption><span>Rectangle.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x2;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y2;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"사각형을 그렸습니다."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calcArea</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ((x1+x2)*(y1+y2));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Shape 클래스를 상속<br><figure class="highlight java"><figcaption><span>Circle.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> radius;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> radius)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.x1 = x1;</div><div class="line">		<span class="keyword">this</span>.y1 = y1;</div><div class="line">		<span class="keyword">this</span>.radius = radius;		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"원을 그렸습니다."</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calcArea</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)(Math.PI * radius * radius);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>main 메소드<br><figure class="highlight java"><figcaption><span>PaintApp.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> paint;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaintApp</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		drawShape( <span class="keyword">new</span> Rectangle());</div><div class="line">		drawShape( <span class="keyword">new</span> Circle(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">( Shape shape )</span> </span>&#123;</div><div class="line">		shape.draw();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h4><p>객체를 사용할 수 있는 목록. 즉 메소드 목록이다.<br>UML 에서는 &lt;<interface>&gt; 라고 하고 그림.<br>기능의 명세이다. Drawable라는 인터페이스를 구현하여 draw 메소드를 오버라이딩하여 사용.<br>Drawable 인터페이스를 구현하면 그릴수 있다는 것을 암시.<br>서로 관계가 없는 물체들이 상호 작용을 하기 위해서 사용하는 장치나 시스템<br>클래스 구조상의 관계와 상관 없이 클래스들에 의해 구현되어질 수 있는 규약<br>인터페이스 안에서는 인터페이스 끼리 다중상속이 된다.<br>public interface Drivable extends A,B{…..}</interface></p>
<h5 id="실습-1"><a href="#실습-1" class="headerlink" title="실습"></a>실습</h5><p>인터페이스 정의<br><figure class="highlight java"><figcaption><span>Drawable.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drawable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;		<span class="comment">//자동으로 abstract가 됨</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Point클래스가 Drawable 인터페이스를 구현함<br><figure class="highlight java"><figcaption><span>Paint.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Drawable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println( <span class="string">"점[x="</span> + x + <span class="string">",y="</span> + y +<span class="string">"]을 그렸습니다."</span>);			</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ColorPoint가 Point클래스를 상속하여 Drawable를 구현한 효과를 갖음<br><figure class="highlight java"><figcaption><span>ColorPoint.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> paint;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String color;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, String color)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(x, y);</div><div class="line">		<span class="keyword">this</span>.color = color;		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//완전</span></div><div class="line">		<span class="keyword">super</span>.show();</div><div class="line">		System.out.println( <span class="string">"color "</span> + color);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>메인메소드<br><figure class="highlight java"><figcaption><span>PaintApp.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaintApp</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		draw(<span class="keyword">new</span> ColorPoint(<span class="number">200</span>,<span class="number">200</span>,<span class="string">"yellow"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">( Drawable drawable )</span> </span>&#123;<span class="comment">//Drawable를 구현하고 있으면 draw를 해줄게</span></div><div class="line">		drawable.draw();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="인터페이스-추상클래스-차이"><a href="#인터페이스-추상클래스-차이" class="headerlink" title="인터페이스 추상클래스 차이"></a>인터페이스 추상클래스 차이</h5><p>인터페이스는<br>서로 관계가 없는 물체들이 상호 작용을 하기 위해서 사용하는 장치나 시스템<br>클래스 구조상의 관계와 상관 없이 클래스들에 의해 구현되어질 수 있는 규약<br>하나 또는 그 이상의 클래스들에서 똑같이 구현되어질 법한 메소드를 선언하는 경우</p>
<p>추상클래스는<br>객체들이 가지고 있는 속성과 기능 중에 중요한 것들은 남기고 필요 없는 불필요한 것은 없애는것. 또는 공통된 것들을 그룹핑해서 한곳에다 모아놓는것.</p>
<h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>일반클래스 : 모두 완결한 메소드  /  필드를 가질 수 있음 / 객체화 가능</p>
<p>추상클래스 : 완결한 메소드, 추상메소드 / 필드 가질 수 있음 / 객체화 불가</p>
<p>인터페이스 : 모든 추상 메소드 / 필드 가질 수 없음 / 객체화 불가</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 객체가 Circle 클래스의 인스턴스 인가?</div><div class="line">System.out.println( c instanceof Circle );</div><div class="line"></div><div class="line">// 객체가 Drawable 인터페이스를 구현하였는가?</div><div class="line">System.out.println( c instanceof Drawable );</div><div class="line"></div><div class="line">// 객체가 Rectangle 클래스의 인스턴스 인가?</div><div class="line">System.out.println( c instanceof Rectangle );</div><div class="line"></div><div class="line">// 객체가 Shape 클래스의 인스턴스 인가?</div><div class="line">System.out.println( c instanceof Shape );</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;오버로드&quot;&gt;&lt;a href=&quot;#오버로드&quot; class=&quot;headerlink&quot; title=&quot;오버로드&quot;&gt;&lt;/a&gt;오버로드&lt;/h4&gt;&lt;p&gt;아래는 다 다른 메소드이다.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>깃허브 사용</title>
    <link href="http://KKimSangHeon.github.io/2017/08/01/bigdata2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/01/bigdata2/</id>
    <published>2017-08-01T04:04:28.000Z</published>
    <updated>2017-08-07T06:03:38.957Z</updated>
    
    <content type="html"><![CDATA[<p>깃허브란 형상관리 툴이다.</p>
<p>A(팀장,a모듈담당) B(b모듈담당) C(c모듈담당) 개발자가 하나의 프로젝트를 개발중이다.</p>
<p>A 가 프로젝트(모듈 a,b,c 포함)를 올린다.</p>
<p>그 후 B C 에게 그 사실을 알린다.</p>
<p>B C 는 프로젝트를 내려받고</p>
<p>B,C가 자신의 모듈을 수정 후 커밋을 한다.</p>
<p>A,B,C는 수정된 것을 내려 받은 후 테스트를 한다.</p>
<p>git가 있으며 내부에는 Repository가 있다.</p>
<p>git는 레파지토리가 2개 존재한다.<br>하나는 로컬이고 하나는 원격이다.</p>
<p>로컬 레파지토리에 프로젝트를 올리는것을 commit 라고 하며 로컬 레파지토리를 원격 레파지토리에 맞추는 것을 push 라고 한다.</p>
<p>원격 레파지토리에서 프로젝트를 로컬레파지토리로 갖고오는것을 full 내 프로젝트로 반영하는것은 fetch라고 한다.</p>
<h4 id="하지만-보통-로컬레파지토리와-프로젝트를-같이-놓는다-편의상"><a href="#하지만-보통-로컬레파지토리와-프로젝트를-같이-놓는다-편의상" class="headerlink" title="하지만 보통 로컬레파지토리와 프로젝트를 같이 놓는다.(편의상)"></a>하지만 보통 로컬레파지토리와 프로젝트를 같이 놓는다.(편의상)</h4><h3 id="1-내-프로젝트-올리기"><a href="#1-내-프로젝트-올리기" class="headerlink" title="1.내 프로젝트 올리기"></a>1.내 프로젝트 올리기</h3><h5 id="이클립스에서-실행"><a href="#이클립스에서-실행" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h5><p>1.이클립스 - show view - git Repository 선택<br>2.프로젝트 우클릭 후 - team - share …-체크-create누름(로컬레파지토리 프로젝트를 같이하는것.)</p>
<h5 id="깃허브에서-실행"><a href="#깃허브에서-실행" class="headerlink" title="깃허브에서 실행"></a>깃허브에서 실행</h5><p>1.레파지토리 new - 프로젝트 이름이랑 동일하게 생성(굳이 안해도되나 편의상)<br>2.깃 주소를 복사</p>
<h5 id="이클립스에서-실행-1"><a href="#이클립스에서-실행-1" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h5><p>1.git Repository탭 - remote - Configure fetch 체크(push 체크하면 올리기만 되고 받기는 안된다.) - change 버튼 클릭 - save Fetch 클릭<br>2.project explorer탭으로 - team - commit - Unsatage Changes에 있는 것들을 staged Changed로 내림. 커밋메세지는 추가할 수 있도록 하자. - commit and push 클릭 - next - finish</p>
<h3 id="2-타-프로젝트-받기"><a href="#2-타-프로젝트-받기" class="headerlink" title="2.타 프로젝트 받기."></a>2.타 프로젝트 받기.</h3><p>방법1. 깃허브에서 다운받아서 임포트하기.</p>
<p>방법2. 프로젝트를 fork한다.</p>
<h4 id="깃허브에서-실행-1"><a href="#깃허브에서-실행-1" class="headerlink" title="깃허브에서 실행"></a>깃허브에서 실행</h4><p>원하는 프로젝트로 가서 fork를 누르고<br>내 레파지토리로 가보자. 자신의 레파지토리에 생성되있는게 있을것임.<br>이제 자기 레파지토리에 있는것을 잡아 땡겨보자<br>clone or download 에서 url 복사</p>
<h4 id="이클립스에서-실행-2"><a href="#이클립스에서-실행-2" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h4><p>git Repository탭으로 가서 컨트롤+v<br>next-next - browse 눌러서 자기 워크스페이스 선택 (로컬 레파지토리와 프로젝트저장소를 하나로 합치는것.)<br>working tree 선택 후 오른쪽 누르고 import .. 클릭 후 finish</p>
<p>Project explorer 탭으로 가서 보면 에러가 난다. (환경설정이 달라서 나는 에러이다.)<br>프로젝트 우클릭 후 - properties - java build path 선택- Libraries 탭 선택 - 더블클릭 후 - alternate JRE 에서 선택</p>
<h3 id="3-레파지토리-삭제"><a href="#3-레파지토리-삭제" class="headerlink" title="3.레파지토리 삭제"></a>3.레파지토리 삭제</h3><p>해당레파지토리로 가서 - 세팅 - 레파지토리 이름 입력</p>
<p>이클립스에서 실행<br>team - disconnect  후 delete Repository 클릭<br>하나로 뭉쳐놨기 때문에 맨위 하나만 선택하면 된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;깃허브란 형상관리 툴이다.&lt;/p&gt;
&lt;p&gt;A(팀장,a모듈담당) B(b모듈담당) C(c모듈담당) 개발자가 하나의 프로젝트를 개발중이다.&lt;/p&gt;
&lt;p&gt;A 가 프로젝트(모듈 a,b,c 포함)를 올린다.&lt;/p&gt;
&lt;p&gt;그 후 B C 에게 그 사실을 알린다.
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/%EA%B8%B0%ED%83%80/"/>
    
    
  </entry>
  
</feed>
