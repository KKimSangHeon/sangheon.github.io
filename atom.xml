<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-09-06T06:45:23.647Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring</title>
    <link href="http://KKimSangHeon.github.io/2017/09/06/spring/"/>
    <id>http://KKimSangHeon.github.io/2017/09/06/spring/</id>
    <published>2017-09-06T05:01:31.000Z</published>
    <updated>2017-09-06T06:45:23.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링이란"><a href="#스프링이란" class="headerlink" title="스프링이란?"></a>스프링이란?</h3><p>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크</p>
<h4 id="프레임워크"><a href="#프레임워크" class="headerlink" title="프레임워크?"></a>프레임워크?</h4><p>소프트웨어를  만드는  데  기본이 되는 골격 코드<br>반제품<br>완전한 애플리케이션 소프트웨어가 아니다.<br>문제 영역(도메인)을 해결하기 위한 잘 설계된 재사용 가능한 모듈<br>확장하여 비즈니스 요구사항에 맞는 완전한 애플리케이션으로 완성이 요구된다.</p>
<p>스프링을 이용하여 웹을 만들면 Spring MVC를 사용<br>DB어플리케이션 프레임 워크는 MyBatis,Spring DAO가 존재<br>기타(지원) 프레임워크로는 로깅(Log4J),  빌드/배포(Ant),  단위테스트(JUnit)가 존재     </p>
<p>객체에 대한 의존성,생성,소멸 등에 대한 것을 스프링 컨테이너에게 넘긴다. 이로 인해 개발자는 비즈니스만 잘 만들면 된다. 이로인해 생산성이 향상된다.</p>
<h4 id="EJB"><a href="#EJB" class="headerlink" title="EJB"></a>EJB</h4><p>Enterprise Java Bean의 약자.<br>자바 빈즈 스펙에 맞게 구현된 자바코드를 웹에서 쉽게 이용하기 위해 JSP 표준액션 태그 지원<br>인터페이스 구현 등 불편한 점이 많았다.</p>
<h4 id="POJO-Plain-Old-Java-Object"><a href="#POJO-Plain-Old-Java-Object" class="headerlink" title="POJO(Plain Old Java Object)"></a>POJO(Plain Old Java Object)</h4><p>EJB를 대체하여 특정클래스를 상속하거나 인터페이스를 구현하지 않는 평범한 자바 클래스(느슨한 Java Bean, Spring Bean)를 이용하며 단순하지만 EJB에서 제공하는 고급 기술을  제공한다.<br>-자바 언어와  꼭 필요한  API외에는 특정 규약에 종속되지 않는다.<br>-특정 환경에 종속되지 않는다. (기술과 비즈니스 분리)(서블릿은 서블릿 컨테이너에 종속적이였음)<br>-스프링에서는 스프링에 특화된 인터페이스 구현을 요구하지 않음<br>-스프링 자체에 의존성이 높은 클래스 확장을  거의 요구 하지 않음</p>
<h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p>1.POJO를 이용한 가볍고(lightweight) 비침투적(non-invasive) 개발<br>2.DI와 인터페이스 지향을 통한 느슨한 결합도(loose coupling)<br>3.Aspect와 공통 규약을 통한 선언적(declarative) 프로그래밍<br>4.Aspect와 템플릿(template)을 통한 반복적이고 상투적인(boilerplate) 코드 제거</p>
<p>AOP는 OOP를 더 OOP답게 쓰는것</p>
<h4 id="3-1-IoC-제어역전-Inverse-of-Control-Object-과-DI-의존관계-주입"><a href="#3-1-IoC-제어역전-Inverse-of-Control-Object-과-DI-의존관계-주입" class="headerlink" title="3.1 IoC( 제어역전 ,Inverse of Control (Object) ) 과 DI( 의존관계 주입)"></a>3.1 IoC( 제어역전 ,Inverse of Control (Object) ) 과 DI( 의존관계 주입)</h4><p>Spring Container = IoC(DI) Container = Bean Container = Application Context<br>new를 하지 않아도 컨테이너가 알아서 만들고 소멸해주고 다한다!!</p>
<h4 id="AOP-Aspect-Oriented-Programming"><a href="#AOP-Aspect-Oriented-Programming" class="headerlink" title="AOP (Aspect Oriented Programming)"></a>AOP (Aspect Oriented Programming)</h4><p>클래스의 관심에 따라 클래스를 구성하게되는데(ex:DAO는 DB접근에 관심)</p>
<p>횡단관심: 여러곳에서 공통으로 필요한 모듈<br>횡단관심은 클래스로 빼내서 모듈로 만든다.<br>관심의 분리 ( Separation of Concern )<br>횡단 관심( Crosscutting Concern )과  핵심관심(  Core Concern )<br>핵심관심  모듈과  횡단 관심 모듈이 긴밀하게 결합 ( 핵심 모듈이 필요한 시점에..)<br>OOP 문제점 : 중복코드,  지저분한 코드,  생산성 저하,  재활용성의 문제점<br>필요한 시점에  횡단 관심 모듈을 삽입하여 동작하게 하는 기술.<br>EJB AOP, JDK Dynamic Proxy, AspectJ, Spring AOP      </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링이란&quot;&gt;&lt;a href=&quot;#스프링이란&quot; class=&quot;headerlink&quot; title=&quot;스프링이란?&quot;&gt;&lt;/a&gt;스프링이란?&lt;/h3&gt;&lt;p&gt;자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크&lt;/p&gt;
&lt;h4 id=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ajax</title>
    <link href="http://KKimSangHeon.github.io/2017/09/06/ajax/"/>
    <id>http://KKimSangHeon.github.io/2017/09/06/ajax/</id>
    <published>2017-09-06T00:10:29.000Z</published>
    <updated>2017-09-06T05:01:23.364Z</updated>
    
    <content type="html"><![CDATA[<p>Asynchronous Javascript XML</p>
<p>AJAX는 비동기 통신이다.</p>
<h4 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h4><p>클라이언트가 리퀘스트를 보내면 그에 대한 리스폰스가 와야 다른 리퀘스트를 보낼 수 있다.<br>서버에서 리퀘스트에 대한 응답이 오지 않으면 block상태에 빠진다는 단점 존재.</p>
<h4 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h4><p>리퀘스트에 대한 응답을 기다리지 않고 다른 동작을 처리할 수 있다.<br>단점은 어느 요청이 어느 요청에 대한 응답인지 알기 어려울 수 있다. 도착순서도 정해져있지 않고 많은 응답이 있기 때문에..<br><figure class="highlight java"><figcaption><span>ajax를 이용하지 않고 통신</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(<span class="string">"button"</span>).click(function()&#123;</div><div class="line"></div><div class="line">		<span class="comment">//1.XMLHttpRequest 객체 생성</span></div><div class="line">		var xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">		<span class="comment">//2. 통신 상태 변화에 따른 콜백함수 정의</span></div><div class="line">		xhr.onreadystatechange = function()&#123;</div><div class="line">			<span class="keyword">if</span>( <span class="keyword">this</span>.readyState == <span class="number">0</span> )&#123;</div><div class="line">			<span class="comment">//open() 호출 전</span></div><div class="line">			console.log( <span class="string">"readyState(0) - unset"</span> );</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">1</span>)&#123;</div><div class="line">				<span class="comment">//open() 호출 후</span></div><div class="line">			console.log( <span class="string">"readyState(1) - set"</span> );</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">2</span>)&#123;</div><div class="line">				<span class="comment">//send() 호출 후</span></div><div class="line">			console.log( <span class="string">"readyState(2) - sent"</span> );</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">3</span>)&#123;</div><div class="line">				<span class="comment">//loading...</span></div><div class="line">			console.log( <span class="string">"readyState(3) - loading"</span> );</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">4</span>)&#123;</div><div class="line">				<span class="comment">//done</span></div><div class="line">			console.log( <span class="string">"readyState(4) - done"</span> );</div><div class="line"></div><div class="line">			console.log( xhr.responseText);</div><div class="line"></div><div class="line">			var response = eval(xhr.responseText);</div><div class="line">			console.log(response);</div><div class="line">			$.each(response,function(index,vo)&#123;</div><div class="line">				console.log( index +<span class="string">":"</span> + vo.name)</div><div class="line"></div><div class="line">			&#125;)</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">//3. open</span></div><div class="line">		xhr.open(<span class="string">"GET"</span>,<span class="string">"/wp_js2/sample.json"</span>)</div><div class="line"></div><div class="line">		<span class="comment">//4. send request</span></div><div class="line">		xhr.send();</div><div class="line"></div><div class="line">	&#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>ajax를 이용하여 통신</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(<span class="string">"button"</span>).click(function()&#123;</div><div class="line">		$.ajax( &#123;</div><div class="line">			async: <span class="keyword">true</span>,</div><div class="line">			url : <span class="string">"/wp_js2/sample.json"</span>,</div><div class="line">			type: <span class="string">"get"</span>,</div><div class="line">			dataType: <span class="string">"json"</span>,</div><div class="line">			data: <span class="string">""</span>,</div><div class="line">			contentType: <span class="string">'application/json'</span>,</div><div class="line">			success: function(response)&#123;</div><div class="line">				$.each (response,function(index,vo)&#123;</div><div class="line">					console.log(vo.name)</div><div class="line">				&#125;)</div><div class="line">			&#125;,</div><div class="line">			error: function( jqXHR, status, e )&#123;</div><div class="line">				alert( status + <span class="string">" : "</span> + e );</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Asynchronous Javascript XML&lt;/p&gt;
&lt;p&gt;AJAX는 비동기 통신이다.&lt;/p&gt;
&lt;h4 id=&quot;동기&quot;&gt;&lt;a href=&quot;#동기&quot; class=&quot;headerlink&quot; title=&quot;동기&quot;&gt;&lt;/a&gt;동기&lt;/h4&gt;&lt;p&gt;클라이언트가 리퀘스트를
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>jquery</title>
    <link href="http://KKimSangHeon.github.io/2017/09/05/jquery1/"/>
    <id>http://KKimSangHeon.github.io/2017/09/05/jquery1/</id>
    <published>2017-09-05T00:09:56.000Z</published>
    <updated>2017-09-05T05:21:59.160Z</updated>
    
    <content type="html"><![CDATA[<p>2006년 Mozila의 자바스크립트 에반젤리스 Jhon Resig에 의해 개발 / 공개<br>여러 자바스크립트 라이브러리 ( prototype.js, Mootool.js 등) 중에 가장 주목 받고 있다.<br>jQuery로 코딩하면 자바스크립트 코드가  간결해 진다.<br>가볍다 ( 90KB)<br>IE6.0 이상,  Firefox2.0 이상,  Safari 3 이상, Opera 9이상,  Google Chrome등의 주요 브라우저를 지원하여 클로스브라우징을 가능케 한다.</p>
<figure class="highlight java"><figcaption><span>엘리먼트를 골라야 하는 시점들</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 1(Vanilla JS)</span></div><div class="line">window.onload = function()&#123;</div><div class="line">	console.log(document.getElementBy(<span class="string">"my-p"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 2 (jQuery)</span></div><div class="line">jQuery( document ).ready( function()&#123;</div><div class="line">	console.log( document.getElementById(<span class="string">"my-p"</span>));</div><div class="line"></div><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 3 (jQuery)</span></div><div class="line">$( document ).ready( function()&#123;</div><div class="line">	console.log(document.getElementById(<span class="string">"my-p"</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 4 (jQuery)</span></div><div class="line">$(function()&#123;</div><div class="line">	console.log(document.getElementById(<span class="string">"my-p"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>jQuery 함수를 이용한 색 변경</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">  setTimeout( function()&#123;</div><div class="line">  var $li = $(<span class="string">"li"</span>);</div><div class="line">  $li.css(<span class="string">"color"</span>,<span class="string">"#f00"</span> );</div><div class="line"></div><div class="line">  <span class="comment">//jQuery Object 뭐냐?</span></div><div class="line">  console.log($li.length);</div><div class="line">  console.log($li[<span class="number">0</span>]); <span class="comment">//HTMLElement Object</span></div><div class="line"></div><div class="line">  <span class="comment">//에러유발</span></div><div class="line">  <span class="comment">//$li[0].css("font-weigth","bold")</span></div><div class="line"></div><div class="line">  $li[<span class="number">0</span>].style.fontWeight = <span class="string">"bold"</span>;</div><div class="line"></div><div class="line">  <span class="comment">//jQuery API를 호출 하고 싶으면</span></div><div class="line">  <span class="comment">//jQuery 함수(=$)로 매핑한다</span></div><div class="line">  $($li[<span class="number">0</span>]).css(<span class="string">"text-decoration"</span>,<span class="string">"underline"</span>)</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//get api함수를 사용해서 HTMLElement 가져오기</span></div><div class="line"></div><div class="line">  $($li.get(<span class="number">1</span>)).css(<span class="string">"backgroundColor"</span>,<span class="string">"#ccc"</span>);</div><div class="line"></div><div class="line">  &#125;,<span class="number">2000</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>jQuery 활용방법</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#first"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"#secnod"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>);</div><div class="line">$(<span class="string">"#second"</span>).css(<span class="string">"fontWeight"</span>,<span class="string">"bold"</span>);</div><div class="line"></div><div class="line">var $li3 = $(<span class="string">"#third"</span>);</div><div class="line">$li3.css(<span class="string">"color"</span>,<span class="string">"blue"</span>);</div><div class="line">$li3.css(<span class="string">"fontWeigth"</span>,<span class="string">"bold"</span>);</div><div class="line"></div><div class="line"><span class="comment">//메소드 체인</span></div><div class="line">$(<span class="string">"#third"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>).css(<span class="string">"fontWeight"</span>,<span class="string">"bold"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 파라미터로 JSON을 사용하는 방법</span></div><div class="line">$(<span class="string">"#fifth"</span>).css(&#123;</div><div class="line">  <span class="string">"color"</span>:<span class="string">"blue"</span>,</div><div class="line">  <span class="string">"fontWeight"</span>:<span class="string">"bold"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>다양한 선택방법</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".red strong"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).text(<span class="string">"text"</span>);</div><div class="line"></div><div class="line">$(<span class="string">".blue #s1"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>);	<span class="comment">//자손 선택</span></div><div class="line">$(<span class="string">".blue &gt; #s2"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//자식선택 (바로아래)</span></div><div class="line">$(<span class="string">"#second + li"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//인접선택</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"li:first-child"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//첫번째 자식</span></div><div class="line">$(<span class="string">"li:last-child"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//마지막 자식</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"li[id]"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//id 속성이 있는 애만</span></div><div class="line">$(<span class="string">"li[class]"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//class속성이 있는애만</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2006년 Mozila의 자바스크립트 에반젤리스 Jhon Resig에 의해 개발 / 공개&lt;br&gt;여러 자바스크립트 라이브러리 ( prototype.js, Mootool.js 등) 중에 가장 주목 받고 있다.&lt;br&gt;jQuery로 코딩하면 자바스크립트
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>6.웹표준</title>
    <link href="http://KKimSangHeon.github.io/2017/08/30/servlet6/"/>
    <id>http://KKimSangHeon.github.io/2017/08/30/servlet6/</id>
    <published>2017-08-30T00:00:10.000Z</published>
    <updated>2017-08-31T00:11:35.251Z</updated>
    
    <content type="html"><![CDATA[<p>초창기 웹은 넷스케이프가 독주하는 상황이었지만,  윈도우98 부터 IE브라우저가  기본 탑재되어  IE6.0는 브라우저 시장의 90%를 점유 했었다.</p>
<p>IE의 ActiveX (자사 기술 독점)에 따른 웹 환경의 폐해<br>MS는 COM(Component Object Model)이라는 기술 제공한다. 이 중 UI가 있는 컴포넌트를 ActiveX라 한다.  </p>
<p>IE이외의 사파리, 크롬, 파이어폭스, 오페라 등  다양한 브라우저가  데스트탑  환경에서 영향력이  커졌다<br>특히,  모바일 환경에서는 사파리,  크롬,  파이어폭스가  주도권을 잡았다.<br>특정 웹 브라우저에  종속되는 웹 페이지는 더 이상 설 자리가 없음을  의미<br>웹 페이지 제작 기술에  표준의 필요성이 대두</p>
<h4 id="웹-표준을-주도하는-W3C-World-Wide-Web-Consortium"><a href="#웹-표준을-주도하는-W3C-World-Wide-Web-Consortium" class="headerlink" title="웹 표준을 주도하는 W3C( World Wide Web Consortium )"></a>웹 표준을 주도하는 W3C( World Wide Web Consortium )</h4><p>-<a href="http://www.w3.org" target="_blank" rel="external">http://www.w3.org</a><br>-웹 기술의 표준화를 담당하는 기구<br>-HTML, CSS, XML 등 웹과 관련된 다양한 기술에 대해  논의하며 관련기술 표준 재정<br>-웹 표준은 W3C의 목표와 비전에 따라 연구한 결과를  웹에 반영시키기 위한 권고 사항</p>
<h4 id="웹-접근성"><a href="#웹-접근성" class="headerlink" title="웹 접근성"></a>웹 접근성</h4><p>어떤 장비, 어떤 브라우저를 사용하던지 해당 사이트를 얼마나 볼 수 있는냐를 의미<br>일반인이건 장애인이건 어떤 사용자도 해당 사이트 사용에 어려움이 없어야 한다는 의미<br>웹 표준을 지켜 작성한 HTML 문서는 웹 접근성을 준수하는 데 비표준 문서들 보다 쉽다.<br>표현을 CSS로 분리 시킨 HTML 문서는 웹 접근성을 준수하는 데  표현과 정보가 섞여 있는 문서들 보다 쉽다.</p>
<h4 id="웹-2-0의-개념"><a href="#웹-2-0의-개념" class="headerlink" title="웹 2.0의 개념"></a>웹 2.0의 개념</h4><p>-웹2.0이란 이용자가 적극적으로 참여하여 정보/지식을 만들고 공유하는 열린 인터넷을 의미한다<br>-웹 2.0은 웹과 관련된 새로운 기술, 문화, 그리고 경제 현상의 복합적인 변화를 포함하는 개념이다. 즉, 사용자 편의성을 강화한 새로운 기술의 활용, 정보의 생성 및 개방/ 공유를 통한 직접적 가치 창출, 이를 통해 만들어진 새로운 문화 및 경제 현상을 통틀어 웹2.0으로 이해할 수 있다</p>
<h4 id="웹-2-0의-목표"><a href="#웹-2-0의-목표" class="headerlink" title="웹 2.0의 목표"></a>웹 2.0의 목표</h4><p>앞서 웹2.0의 개념을 살펴보았습니다. 그렇다면 웹2.0은 어떤 배경에서 등장하게 되었고, 이 새로운 패러다임으로 이루고자하는 것은 무엇일까요? 웹2.0의 기본적인 목적은 ‘사람들을 다양하고 새로운 방식으로 연결하고 연결 된 사람들의 집단지성을 활용하는 것’입니다.<br><img src="/2017/08/30/servlet6/web2.png" alt="web1.0 web2.0의 차이" title="web1.0 web2.0의 차이"></p>
<p>웹 2.0 출처 : <a href="http://visualize.tistory.com/267" target="_blank" rel="external">http://visualize.tistory.com/267</a></p>
<h4 id="웹언어-HTML"><a href="#웹언어-HTML" class="headerlink" title="웹언어 ( = HTML )"></a>웹언어 ( = HTML )</h4><pre><code>-웹페이지를 만들기 위해 HTML(Hyper Text Markup Language)를 사용하여 파일을 생성하고, 웹 서버에 그 파일을 올려 놓아야 한다.
-HTML은 페이지를 보여주기 위해서 알아야 할 필요가 있는 모든 것을 브라우저에게 알려준다.
</code></pre><h4 id="하이퍼텍스트-HTML"><a href="#하이퍼텍스트-HTML" class="headerlink" title="하이퍼텍스트 (HTML)"></a>하이퍼텍스트 (HTML)</h4><p>-웹 전체의 기초가 되는 것<br>-단일 페이지에서 벗어나 다른 페이지와 연결할 수 있게 해주는 것<br>-<a> 엘리멘트에 의해 구현<br>-<a href="‘’">콘텐츠</a>  이런 식으로 링크가 걸리며, href 속성은 목적지를 명시    </a></p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>Document Object Model로 웹페이지를 자바스크립트로 제어하기 위한 객체 모델을 의미한다. window 객체의 document 프로퍼티를 통해서 사용할 수 있다. Window 객체가 창을 의미한다면 Document 객체는 윈도우에 로드된 문서를 의미한다고 할 수 있다. DOM의 하위 수업에서는 문서를 제어하는 방법에 대한 내용을 다룬다.</p>
<p>DOM 출처 : <a href="https://opentutorials.org/course/1375/6655" target="_blank" rel="external">https://opentutorials.org/course/1375/6655</a></p>
<h4 id="시맨틱-검색"><a href="#시맨틱-검색" class="headerlink" title="시맨틱 검색"></a>시맨틱 검색</h4><p>시맨틱 검색은 검색로봇이 검색어 의미를 스스로 분석하고 추리해 원하는 정보를 더 정교하게 찾아주는 검색방식</p>
<h4 id="시맨틱-마크업"><a href="#시맨틱-마크업" class="headerlink" title="시맨틱 마크업"></a>시맨틱 마크업</h4><p>시맨틱 마크업이란 HTML의 태그를 사용하여 문서 안의 내용이 담고 있는 의미가 무엇인지 표현할 수 있도록 구조를 작성하는 것을 말함</p>
<p><a href="http://www.greeneclipse.com/eclipsepalette.html" target="_blank" rel="external">http://www.greeneclipse.com/eclipsepalette.html</a> 에 접속해서 설치하면</p>
<h4 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h4><p>-DOCTYPE은 html의 태그는 아니지만 웹페이지에서 맨 처음에 선언되어 어떤 종류의 html을 사용할지 웹브라우저에게 알려줄 목적으로 사용<br>-브라우저는 DOCTYPE 선언을 확인하고 브라우저 모드를 결정한다.<br>-브라우저 모드는 표준 호환 모드,  비표준 호환 모드<br>-웹 표준에서는 웹 페이지를 제대로 표현하기 위해서는 올바른 문서 형태를 정의해주어야 한다.<br>-가장 많이 사용되고 있는 HTML 버전은 HTML4.01  과  XHTML1.0<br>-최신 버전인 HTML5를 문서형식으로 사용하는 웹사이트도 증가 추세</p>
<h4 id="CSS-Cascading-Style-Sheet-이해"><a href="#CSS-Cascading-Style-Sheet-이해" class="headerlink" title="CSS ( Cascading Style Sheet ) 이해"></a>CSS ( Cascading Style Sheet ) 이해</h4><p>-워드프로세스의 스타일 적용과 유사<br>-cascading : ‘계단형’ 의 의미로  스타일 적용에 특정도, 또는 우선순위가  있고 우선 순위가 정해지는 것이 계단식 스타일 시트라는 의미<br>무조건 맨 아래 있는게 적용되는게 아니라 P{…}   body P{….}   body P.aaa{…} 일 경우 가장 길이가 긴 body P.aaa{…} 가 적용됨</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;초창기 웹은 넷스케이프가 독주하는 상황이었지만,  윈도우98 부터 IE브라우저가  기본 탑재되어  IE6.0는 브라우저 시장의 90%를 점유 했었다.&lt;/p&gt;
&lt;p&gt;IE의 ActiveX (자사 기술 독점)에 따른 웹 환경의 폐해&lt;br&gt;MS는 COM
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Servlet/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>5. EL, JSTL</title>
    <link href="http://KKimSangHeon.github.io/2017/08/28/servlet5/"/>
    <id>http://KKimSangHeon.github.io/2017/08/28/servlet5/</id>
    <published>2017-08-28T05:13:23.000Z</published>
    <updated>2017-08-30T00:15:16.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h4><p>기존에 사용하는 스크립트릿을 &lt;%= %&gt;를 대체할 수 있따.<br>&lt;%= vo.getName %&gt;를</p>
<p>$ { vo.name } 으로 대체 가능하다</p>
<p>이를 EL(Expression Language)이라 한다.<br>웹 페이지에  값을  표시(표현),하는 데 사용되는 태그<br>JSP의 출력 문법을 보완하는 역할<br>${} 를 사용한다.<br>표현언어의 식을 계산해서 출력한다.<br>null 는 공백으로  출력한다.</p>
<figure class="highlight"><figcaption><span>스클릿틀릿 사용예시</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    if( null == session.getAttribute( "authUser" ) ) &#123;</div><div class="line">%&gt;</div><div class="line">    &lt;p&gt;로그인을 하지 않았습니다.&lt;/p&gt;</div><div class="line">&lt;%</div><div class="line">    &#125;</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<p>위의 코드는 다음과 같다<br><figure class="highlight"><figcaption><span>EL의 사용예시</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:if test="$&#123; empty authUser &#125;"&gt;</div><div class="line">    &lt;p&gt;로그인을 하지 않았습니다.&lt;/p&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure><br>EL로 내장객체  접근하기<br>-pageScope             :  페이지 범위에 빈을 저장<br>-requestScope          :  요청 범위에서 빈을 저장<br>-sessionScope          :  세션 범위에서 빈을 저장<br>-applicationScope     :  어플리케이션 범위에서 빈을 저장</p>
<h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><p>JSP에서 사용 가능한 표준 태그 라이브러리<br>JSP 코드가 깔끔해지고 가독성이 좋아진다.<br>JSTL 라이브러리<br>    -기본기능 ( core )<br>    -형식화(format)<br>    -데이터베이스(sql)<br>    -XML 처리(xml)<br>    -함수처리(function)</p>
<p>jstl.jar 파일을 구해서 프로젝트 우클릭 후 자바빌드패스의 라이브러리탭에서 추가하고 deployment assembly에 추가</p>
<p>아래 3개는 추가해놓고 사용하여야 한다.<br>-기본기능 ( core ) :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="external">http://java.sun.com/jsp/jstl/core</a>“ prefix=”c”%&gt;</p>
<p>-형식화(format) :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="external">http://java.sun.com/jsp/jstl/fmt</a>“ prefix=”fmt”%&gt;</p>
<p>-함수처리(function) :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="external">http://java.sun.com/jsp/jstl/functions</a>“ prefix=”fn”%&gt;  </p>
<p>JSTL은 if문을 제공하나 else if , else를 제공하지 않는다. 이를 대체하여 사용할 수 있는것이 choose이다.</p>
<figure class="highlight"><figcaption><span>choose사용예시</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;c:choose&gt;</div><div class="line">  &lt;c:when test="$&#123;param.color == 1&#125;"&gt;</div><div class="line">    &lt;span style="color: red"&gt;빨강&lt;/span&gt;</div><div class="line">  &lt;/c:when&gt;</div><div class="line"></div><div class="line">  &lt;c:when test="$&#123;param.color == 2&#125;"&gt;</div><div class="line">    &lt;span style="color: green"&gt;초록&lt;/span&gt;</div><div class="line">  &lt;/c:when&gt;</div><div class="line"></div><div class="line">  &lt;c:when test="$&#123;param.color == 3&#125;"&gt;</div><div class="line">    &lt;span style="color: blue"&gt;파랑&lt;/span&gt;</div><div class="line">  &lt;/c:when&gt;</div><div class="line"></div><div class="line">  &lt;c:otherwise&gt;</div><div class="line">    &lt;span style="color: black"&gt;검정&lt;/span&gt;		</div><div class="line">  &lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<p>-변수에  값을  설정한다.</p>
<c:set var="count" value="10" scope="page">
</c:set>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;EL&quot;&gt;&lt;a href=&quot;#EL&quot; class=&quot;headerlink&quot; title=&quot;EL&quot;&gt;&lt;/a&gt;EL&lt;/h4&gt;&lt;p&gt;기존에 사용하는 스크립트릿을 &amp;lt;%= %&amp;gt;를 대체할 수 있따.&lt;br&gt;&amp;lt;%= vo.getName %&amp;gt;를&lt;/p
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>4. 서블릿의 Life Cicle, MVC, Model1</title>
    <link href="http://KKimSangHeon.github.io/2017/08/25/servlet4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/25/servlet4/</id>
    <published>2017-08-25T00:07:35.000Z</published>
    <updated>2017-08-30T00:15:18.375Z</updated>
    
    <content type="html"><![CDATA[<p>첫번째 호출 때는<br>init() called<br>service() called<br>doGet() called<br>순으로 이어진다.</p>
<p>두번 째 호출때는<br>service() called<br>doGet() called<br>순으로 이어진다</p>
<p>즉 변수를 선언 할 때는 init() 메소드 안에 선언해주는것이 좋으나 동기화를 잘 해줘야하는단점이 있다.</p>
<h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>아키텍쳐 패턴 중에 하나로 GUI 기반 Application 설계, 패턴<br>클라이언트 요청을 받아 처리하여 응답하는 로직을  Model, View, Controller 로 나누어 설계하고 구현</p>
<h5 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h5><p>애플리케이션 정보(데이터) 또는 정보를 처리하는 모듈(객체)<br>ex) DAO</p>
<h5 id="View"><a href="#View" class="headerlink" title="View"></a>View</h5><p>텍스트,  체크박스,  입력창 등과 같은 사용자 인터페이스 요소를 나타냄<br>ex) HTML</p>
<h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><p>클라이언트 요청,  Model,  View 사이의  상호동작을 관리 한다. 라우팅만 한다고 생각하자<br>ex) java로직</p>
<h4 id="Model1"><a href="#Model1" class="headerlink" title="Model1"></a>Model1</h4><p>M + VC 이라고 생각하면 된다.<br>※모델1은 컨트롤 뷰가 하나로 이루어짐.</p>
<p>모델1은 요청마다 서블릿이 만들어져 관리해야할 jsp가 많아진다.</p>
<h4 id="Model2"><a href="#Model2" class="headerlink" title="Model2"></a>Model2</h4><p>M(DAO) + V(JSP) + C(Servlet)<br>주로 복잡한 요구사항을 처리하는 웹 애플리케이션에서 MVC(Model-View-Controller pattern) 패턴을 사용한다. MVC 패턴은 코딩과 유지보수를 쉽게 하고, Model 2 아키텍처라고도 불린다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;첫번째 호출 때는&lt;br&gt;init() called&lt;br&gt;service() called&lt;br&gt;doGet() called&lt;br&gt;순으로 이어진다.&lt;/p&gt;
&lt;p&gt;두번 째 호출때는&lt;br&gt;service() called&lt;br&gt;doGet() called&lt;br&gt;순
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>3. Servlet &amp; JSP 응용실습</title>
    <link href="http://KKimSangHeon.github.io/2017/08/24/servlet3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/24/servlet3/</id>
    <published>2017-08-24T02:07:50.000Z</published>
    <updated>2017-08-30T00:15:18.922Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><p>jsp파일은 내부적으로 서블릿으로 변환 된다는 점을 잊지말자.<br>톰캣이 자동으로 해준다.</p>
<h4 id="리다이렉트-포워드의-차이"><a href="#리다이렉트-포워드의-차이" class="headerlink" title="리다이렉트 포워드의 차이"></a>리다이렉트 포워드의 차이</h4><p>포워드  -  새로운 페이지는 이전 페이지에서 처리하던 것과 같은 요청을 처리하게 하고 응답하여 브라우저는 하나 이상의 페이지가 연관 된 것을 알 수 없다.</p>
<p>리다렉트 -  첫번째 페이지는 브라우저에게 새로운 페이지로 다시 요청해야 한다는  내용의 응답을 보낸다.  브라우저는 이 응답을 받으면 즉시 새로운 페이지로 다시 요청을 보낸다.</p>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><p>다이나믹 웹 프로젝트 생성<br>-서버우클릭 add and remove 프로젝트 추가</p>
<p>프로젝트 우클릭 후 - 프로퍼티스 -JAVA BUILD PATH - add library 후 ojdbc 추가<br>프로젝트 우클릭 후 - 프로퍼티스 -deployment assembly - add -jdbc 추가 후 apply</p>
<p>JSTL<br>jsp standard tag library</p>
<figure class="highlight java"><figcaption><span>EmailListDao.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.emaillist.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.bigdata2017.emaillist.vo.EmailListVo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailListDao</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">( EmailListVo vo)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">		Connection conn= <span class="keyword">null</span>;</div><div class="line">		PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line">			String sql = <span class="string">"INSERT "</span></div><div class="line">						+<span class="string">"INTO EMAILLIST "</span> +</div><div class="line">						 <span class="string">"VALUES (SEQ_EMAILLIST.NEXTVAL,?,?,?)"</span>;</div><div class="line"></div><div class="line">			pstmt = conn.prepareStatement(sql);</div><div class="line">			pstmt.setString(<span class="number">1</span>, vo.getFirstName());</div><div class="line">			pstmt.setString(<span class="number">2</span>, vo.getLastName());</div><div class="line">			pstmt.setString(<span class="number">3</span>, vo.getEmail());</div><div class="line"></div><div class="line">			count = pstmt.executeUpdate();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( pstmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					pstmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;EmailListVo&gt; <span class="title">getList</span><span class="params">()</span></span>&#123;</div><div class="line">		List&lt;EmailListVo&gt; list = <span class="keyword">new</span> ArrayList&lt;EmailListVo&gt;();</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 객체 생성</span></div><div class="line">			stmt = conn.createStatement();</div><div class="line"></div><div class="line">			<span class="comment">//4. SQL문 실행</span></div><div class="line">			String sql =<span class="string">"SELECT NO,FIRST_NAME,LAST_NAME,EMAIL\r\n"</span> +</div><div class="line">						<span class="string">"FROM EMAILLIST ORDER BY NO DESC"</span>;</div><div class="line">			rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"connection 성공"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//5. 결과 사용하기</span></div><div class="line">			<span class="keyword">while</span>( rs.next() ) &#123;</div><div class="line">				Long no = rs.getLong( <span class="number">1</span> );</div><div class="line">				String firstName = rs.getString(<span class="number">2</span>);</div><div class="line">				String lastName = rs.getString(<span class="number">3</span>);</div><div class="line">				String email = rs.getString(<span class="number">4</span>);</div><div class="line"></div><div class="line">				EmailListVo vo = <span class="keyword">new</span> EmailListVo();</div><div class="line">				vo.setNo(no);</div><div class="line">				vo.setFirstName(firstName);</div><div class="line">				vo.setLastName(lastName);</div><div class="line">				vo.setEmail(email);</div><div class="line">				list.add(vo);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( rs != <span class="keyword">null</span> ) &#123;</div><div class="line">					rs.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					stmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			conn = DriverManager.getConnection(url, <span class="string">"webdb"</span>, <span class="string">"webdb"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>form.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;메일 리스트 가입&lt;/h1&gt;</div><div class="line">	&lt;p&gt;</div><div class="line">		메일 리스트에 가입하려면,&lt;br&gt;</div><div class="line">		아래 항목을 기입하고 등록 버튼을 클릭하세요.</div><div class="line">	&lt;/p&gt;</div><div class="line">	&lt;form method="post" action="&lt;%=request.getContextPath() %&gt;/insert.jsp" &gt;</div><div class="line">	    First name: &lt;input type="text" name="fn" value="" /&gt;&lt;br&gt;</div><div class="line">	    Last name: &lt;input type="text" name="ln" value="" /&gt;&lt;br&gt;</div><div class="line">	    Email address: &lt;input type="text" name="email" value=""/&gt;&lt;br&gt;</div><div class="line">	    &lt;input type="submit" value="submit"&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">	&lt;p&gt;</div><div class="line">	&lt;a href = "&lt;%=request.getContextPath()%&gt;"&gt;리스트 바로가기&lt;/a&gt;</div><div class="line">	&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>index.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;%@page import="com.bigdata2017.emaillist.vo.EmailListVo"%&gt;</div><div class="line">&lt;%@page import="java.util.List"%&gt;</div><div class="line">&lt;%@page import="com.bigdata2017.emaillist.dao.EmailListDao"%&gt;</div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%</div><div class="line"></div><div class="line">	EmailListDao dao = new EmailListDao();</div><div class="line">	List&lt;EmailListVo&gt; list = dao.getList();</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;메일 리스트에 가입되었습니다.&lt;/h1&gt;</div><div class="line">	&lt;p&gt;입력한 정보 내역입니다.&lt;/p&gt;</div><div class="line">	&lt;!-- 메일정보 리스트 --&gt;</div><div class="line">	&lt;%-- list에서 하나씩 빼서 테이블를 채운다--%&gt;</div><div class="line"></div><div class="line">	&lt;% for(EmailListVo vo : list )&#123; %&gt;</div><div class="line"></div><div class="line">	&lt;table border="1" cellpadding="5" cellspacing="2"&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td align=right&gt;First name: &lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;%=vo.getFirstName() %&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td align=right width="110"&gt;Last name: &lt;/td&gt;</div><div class="line">			&lt;td width="110"&gt;&lt;%=vo.getLastName()%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td align=right&gt;Email address: &lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;%=vo.getEmail()%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">	&lt;%&#125; %&gt;</div><div class="line">	&lt;p&gt;</div><div class="line">		&lt;a href="&lt;%=request.getContextPath() %&gt;/form.jsp" &gt;추가메일 등록&lt;/a&gt;</div><div class="line">	&lt;/p&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>insert.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;%@page import="com.bigdata2017.emaillist.dao.EmailListDao"%&gt;</div><div class="line">&lt;%@page import="com.bigdata2017.emaillist.vo.EmailListVo"%&gt;</div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line"> &lt;%</div><div class="line">	 request.setCharacterEncoding( "utf-8");</div><div class="line">	 String firstName = request.getParameter( "fn" );</div><div class="line">	 String lastName = request.getParameter( "ln" );</div><div class="line">	 String email = request.getParameter("email");</div><div class="line"></div><div class="line">	 EmailListVo vo = new EmailListVo();</div><div class="line">	 vo.setFirstName(firstName);</div><div class="line">	 vo.setLastName(lastName);</div><div class="line">	 vo.setEmail(email);</div><div class="line"></div><div class="line">	 new EmailListDao().insert(vo);</div><div class="line"></div><div class="line">	 response.sendRedirect( request.getContextPath() );</div><div class="line"> %&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;성공적으로 등록되었습니다.&lt;/h1&gt;</div><div class="line">	&lt;a href="index.jsp"&gt;리스트 돌아가기&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h4&gt;&lt;p&gt;jsp파일은 내부적으로 서블릿으로 변환 된다는 점을 잊지말자.&lt;br&gt;톰캣이 자동으로 해준다.&lt;/p&gt;
&lt;h4 id=&quot;리다
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>2. Servlet &amp; JSP 기본실습</title>
    <link href="http://KKimSangHeon.github.io/2017/08/24/servlet2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/24/servlet2/</id>
    <published>2017-08-24T00:02:51.000Z</published>
    <updated>2017-08-30T00:15:19.427Z</updated>
    
    <content type="html"><![CDATA[<p>JSP도 곧 서블릿임을 잊지말자.</p>
<p>GET 방식 : <a href="http://naver.com?이름=shkim&amp;암호=1234" target="_blank" rel="external">http://naver.com?이름=shkim&amp;암호=1234</a></p>
<p>get방식으로 한글을 보낼경우 글이 깨지는데 이때는 server을 열고 server.xml을 열자. 65라인에 URIEncoding=”utf-8”을 추가해주자</p>
<p>WebContent에 form.jsp 생성<br>form , 절대경로, 상대경로에 대해 알아보자<br><figure class="highlight"><figcaption><span>form.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;!-- h1태그는 블록 태그라 아래로 내려감 --&gt;</div><div class="line">	&lt;h1&gt;폼테스트&lt;/h1&gt;</div><div class="line">	&lt;h2&gt;폼테스트&lt;/h2&gt;</div><div class="line">	&lt;h3&gt;폼테스트&lt;/h3&gt;</div><div class="line">	&lt;h4&gt;폼테스트&lt;/h4&gt;</div><div class="line">	&lt;h5&gt;폼테스트&lt;/h5&gt;</div><div class="line"></div><div class="line">	&lt;!-- 상대경로(form.jsp의 위치부터) --&gt;</div><div class="line">	&lt;img src = "images/java.png"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 절대경로 --&gt;</div><div class="line">	&lt;a href = "/helloweb/index.jsp"&gt;메인으로 가기&lt;/a&gt;</div><div class="line"></div><div class="line">	&lt;!-- 절대경로를 처리하는 안정적인 방법 --&gt;</div><div class="line">	&lt;a href = "&lt;%=request.getContextPath() %&gt;/index.jsp"&gt;메인으로 가기&lt;/a&gt;</div><div class="line"></div><div class="line">	&lt;!-- form 태그는 디폴트로 겟방식으로 날린다. --&gt;</div><div class="line">	&lt;form method="post" action="&lt;%= request.getContextPath() %&gt;/join"&gt;</div><div class="line"></div><div class="line">	&lt;!-- input 태그는 인라인 태그라 옆으로간다. --&gt;</div><div class="line">		&lt;input type="hidden" name="type" value="나쁜놈"/&gt;</div><div class="line"></div><div class="line">		이메일: &lt;input type="text" name="email" value=""&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		비밀번호: &lt;input type="password" name="password" value=""&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		이름: &lt;input type="text" name="name" &gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		성별:</div><div class="line">		&lt;!-- radio는 name속성을 같게 해줘야 하나만 선택된다. --&gt;</div><div class="line">		&lt;input type="radio" name="gender" value="female"/&gt; 여</div><div class="line">		&lt;input type="radio" name="gender" value="male checked=checked"/&gt; 남</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		생년:</div><div class="line">		&lt;select name = "birth-year"&gt;</div><div class="line">			&lt;option value="1995"&gt;1995&lt;/option&gt;</div><div class="line">			&lt;option value="1994"&gt;1994&lt;/option&gt;</div><div class="line">			&lt;option value="1993"&gt;1993&lt;/option&gt;</div><div class="line">			&lt;option value="1992"&gt;1992&lt;/option&gt;</div><div class="line">			&lt;option value="1991"&gt;1991&lt;/option&gt;</div><div class="line">			&lt;option value="1990" selected&gt;1990&lt;/option&gt;</div><div class="line">		&lt;/select&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		취미:</div><div class="line">		&lt;input type="checkbox" name="hobby" value="reading"/&gt;독서</div><div class="line">		&lt;input type="checkbox" name="hobby" value="sleeping"/&gt;잠자기</div><div class="line">		&lt;input type="checkbox" name="hobby" value="swimming"/&gt;수영</div><div class="line">		&lt;input type="checkbox" name="hobby" value="coding"/&gt;코딩</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		자기소개:</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line">		&lt;textarea rows="15" cols="80" name="self-intro"&gt;1234</div><div class="line">1234</div><div class="line">1234&lt;/textarea&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		&lt;input type="submit" value="가입"&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>Java Resource에 서블릿 파일 생성<br><figure class="highlight java"><figcaption><span>join.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.helloweb.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class join</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/join"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">join</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		request.setCharacterEncoding( <span class="string">"utf-8"</span>);</div><div class="line">		<span class="comment">//post 방식으로 데이터를 전달 받는 경우</span></div><div class="line">		<span class="comment">//encoidng charset를 지정</span></div><div class="line"></div><div class="line"></div><div class="line">		String type = request.getParameter(<span class="string">"type"</span>);</div><div class="line">		System.out.println(type);		</div><div class="line"></div><div class="line">		String email = request.getParameter(<span class="string">"email"</span>);</div><div class="line">		System.out.println(email);</div><div class="line"></div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		System.out.println(password);</div><div class="line"></div><div class="line">		String name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">		System.out.println(name);</div><div class="line"></div><div class="line">		String gender = request.getParameter(<span class="string">"gender"</span>);</div><div class="line">		System.out.println(gender);</div><div class="line"></div><div class="line">		String birthYear = request.getParameter(<span class="string">"birth-year"</span>);</div><div class="line">		System.out.println(birthYear);</div><div class="line"></div><div class="line">		String hobbies[] = request.getParameterValues( <span class="string">"hobby"</span> );</div><div class="line">		<span class="keyword">if</span>( hobbies != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span>( String hobby : hobbies) &#123;</div><div class="line">				System.out.println( hobby );</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String selfIntro = request.getParameter(<span class="string">"self-intro"</span>);</div><div class="line">		System.out.println(selfIntro);</div><div class="line"></div><div class="line">		response.setContentType( <span class="string">"text/html; charset=utf-8"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//setContentType() 메소드를 호출하고 getWriter()을 호출해야 글이 안꺠진다.</span></div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		out.println(<span class="string">"&lt;h1&gt;성공적으로 가입되었습니다&lt;/h1&gt;"</span>);</div><div class="line">		out.print(<span class="string">"&lt;a href='/helloweb/form.jsp'&gt;폼으로가기&lt;/a&gt;"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSP도 곧 서블릿임을 잊지말자.&lt;/p&gt;
&lt;p&gt;GET 방식 : &lt;a href=&quot;http://naver.com?이름=shkim&amp;amp;암호=1234&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://naver.com?이름=shk
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>1. servlet이란? 실습</title>
    <link href="http://KKimSangHeon.github.io/2017/08/23/servlet1/"/>
    <id>http://KKimSangHeon.github.io/2017/08/23/servlet1/</id>
    <published>2017-08-23T04:05:38.000Z</published>
    <updated>2017-08-30T00:15:20.033Z</updated>
    
    <content type="html"><![CDATA[<p>톰켓을 서블릿 콘테이너, WAS라 부른다.</p>
<p>JSP - HTML을 아는사람들이 쉽게 만들 수 있는것.<br>결국 이도 서블릿 클래스로 변한다.<br>톰캣은 web.xml파일의 매핑 정보를 보고 요청에 대한 응답을 날려준다.</p>
<p>서버 생성하고 - 프로젝트 익스플로러 탭에서 우클릭- web프로젝트 생성 - next-next-맨 아래 체크 - finish</p>
<p>이클립스가 프로젝트명.war파일을 올려놓으면 톰켓이 그것을 풀어서 활용한다.</p>
<p>web-info는 찾아갈 수 없다.</p>
<h4 id="실습-1"><a href="#실습-1" class="headerlink" title="실습 1"></a>실습 1</h4><p>서버 생성하고 - 프로젝트 익스플로러 탭에서 우클릭- web프로젝트 생성(이름:helloweb) - next-next-맨 아래 체크 - finish<br>이미지파일을 Web-Content안에 넣는다.<br>서버 우클릭<br>add and remove 클릭<br>서버실행 (에러난다 8080쓰고 있어서 에러남(오라클))<br>서버패키지의 server.xml 파일을 찾아가 65라인의 8080을 8088로 수정<br><a href="http://localhost:8088/helloweb/java.png" target="_blank" rel="external">http://localhost:8088/helloweb/java.png</a> 접속해보자</p>
<p>WebContent 우클릭 후 jsp 파일생성하고 접속해보자<br>hello.jsp 생성<br><a href="http://localhost:8088/helloweb/hello.jsp" target="_blank" rel="external">http://localhost:8088/helloweb/hello.jsp</a> 접속해보자</p>
<p>WebContent 우클릭 후 images 폴더생성<br>그안에 이미지 붙여넣자<br><a href="http://localhost:8088/helloweb/images/java.png" target="_blank" rel="external">http://localhost:8088/helloweb/images/java.png</a> 접속해보자</p>
<p>java Resource에 com.bigdata2017.helloweb.servlet패키지를 생성하자.<br>패키지 선택하고 우클릭 서블릿 생성 HelloServlet로 하고 next - URL mapping에 add 선택- /hello 입력- next - doget , dopost 선택 후 finish</p>
<figure class="highlight java"><figcaption><span>HelloServlet.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.helloweb.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class HelloServlet</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(&#123; <span class="string">"/hello"</span> &#125;) <span class="comment">//얘는 표준은 아니다. web.xml을 열어서 해야함!</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</div><div class="line"></div><div class="line">		PrintWriter pw = response.getWriter();</div><div class="line">		pw.println(<span class="string">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		doGet(request, response);</div><div class="line">		<span class="comment">// doPost를 doGet로 처리</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p><a href="http://localhost:8088/helloweb/hello" target="_blank" rel="external">http://localhost:8088/helloweb/hello</a> 에 접속해보자</p>
<p>JSP 로만 짜는것 -모델1<br>JSP - servlet 를 혼용해서 짜는것을 모델2 MVC라고 한다.</p>
<h4 id="실습2"><a href="#실습2" class="headerlink" title="실습2"></a>실습2</h4><p>HelloServlet.java의 @WebServlet({ “/hello” })을 지우고 해보자<br>어노테이션을 이용한 것이 표준은 아니다.<br>web.xml파일을 열자</p>
<figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>helloweb<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bigdata2017.helloweb.servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="실습3"><a href="#실습3" class="headerlink" title="실습3"></a>실습3</h4><p>jsp는 서블릿 코드가 내장되어있다고 생각하면 된다.</p>
<p>WebContent의 우클릭 후 table.jsp 생성<br><figure class="highlight"><figcaption><span>table.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line"> &lt;%</div><div class="line"> String sRow = request.getParameter( "r" );</div><div class="line"> String sCol = request.getParameter( "c" );</div><div class="line"></div><div class="line"> int nRow = Integer.parseInt( sRow );</div><div class="line"> int nCol = Integer.parseInt( sCol );</div><div class="line"> %&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;table border="1px" cellspacing=0 cellpadding="10px"&gt;</div><div class="line">		&lt;%</div><div class="line">			for(int i = 0; i&lt; nRow; i++)&#123;</div><div class="line">		%&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;%</div><div class="line">				for(int j=0; j&lt;nCol;j++) &#123;</div><div class="line">			%&gt;</div><div class="line">			&lt;td&gt;cell(&lt;%=j %&gt;,&lt;%=i %&gt;)&lt;/td&gt;</div><div class="line">			&lt;td&gt;cell(&lt;%=j %&gt;,&lt;%=i %&gt;)&lt;/td&gt;</div><div class="line">			&lt;td&gt;cell(&lt;%=j %&gt;,&lt;%=i %&gt;)&lt;/td&gt;</div><div class="line">		&lt;%</div><div class="line">			&#125;</div><div class="line">		%&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;%</div><div class="line">		&#125;</div><div class="line">		%&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="실습4"><a href="#실습4" class="headerlink" title="실습4"></a>실습4</h4><p>실습3과 동일한 코드를 서블릿으로 작성해보자<br><figure class="highlight java"><figcaption><span>TableServelt.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.helloweb.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="meta">@WebServlet</span>(&#123; <span class="string">"/table"</span> &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableServelt</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		 String sRow = request.getParameter( <span class="string">"r"</span> );</div><div class="line">		 String sCol = request.getParameter( <span class="string">"c"</span> );</div><div class="line"></div><div class="line">		 <span class="keyword">int</span> nRow = Integer.parseInt( sRow );</div><div class="line">		 <span class="keyword">int</span> nCol = Integer.parseInt( sCol );</div><div class="line"></div><div class="line">		 response.setContentType( <span class="string">"text/html; charset=utf-8"</span> );</div><div class="line">		 PrintWriter out = response.getWriter();</div><div class="line">		 out.println(<span class="string">"&lt;table border=\"1px\" cellspacing=0 cellpadding=\"10px\"&gt;"</span>);</div><div class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; nRow; i++) &#123;</div><div class="line">			 out.println(<span class="string">"&lt;tr&gt;"</span>);</div><div class="line">			 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nCol; j++) &#123;</div><div class="line">				 out.println(<span class="string">"&lt;td&gt;cell("</span>+j+<span class="string">","</span>+ i + <span class="string">")&lt;/td&gt;"</span>);</div><div class="line"></div><div class="line">			 &#125;</div><div class="line">			 out.println(<span class="string">"&lt;/tr&gt;"</span>);</div><div class="line"></div><div class="line">		 &#125;</div><div class="line">		 out.println(<span class="string">"&lt;/table&gt;"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;톰켓을 서블릿 콘테이너, WAS라 부른다.&lt;/p&gt;
&lt;p&gt;JSP - HTML을 아는사람들이 쉽게 만들 수 있는것.&lt;br&gt;결국 이도 서블릿 클래스로 변한다.&lt;br&gt;톰캣은 web.xml파일의 매핑 정보를 보고 요청에 대한 응답을 날려준다.&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>12. 정규화</title>
    <link href="http://KKimSangHeon.github.io/2017/08/23/database12/"/>
    <id>http://KKimSangHeon.github.io/2017/08/23/database12/</id>
    <published>2017-08-23T00:07:28.000Z</published>
    <updated>2017-08-23T03:36:08.807Z</updated>
    
    <content type="html"><![CDATA[<h4 id="데이터-베이스-설계의-주된-목적"><a href="#데이터-베이스-설계의-주된-목적" class="headerlink" title="데이터 베이스 설계의 주된 목적"></a>데이터 베이스 설계의 주된 목적</h4><p>중복성 제거, 정규화</p>
<h4 id="데이터-모델"><a href="#데이터-모델" class="headerlink" title="데이터 모델"></a>데이터 모델</h4><p>데이터베이스 설계를 도식화한 도표로서 엔티티, 속성, 관계 3가지 요소로 구성</p>
<h4 id="정규화"><a href="#정규화" class="headerlink" title="정규화"></a>정규화</h4><p>갱신이상, 데이터의 중복성을 제거. 데이터 모델을 좀 더 구체적으로 해준다.</p>
<h5 id="제-1-정규형-1NF"><a href="#제-1-정규형-1NF" class="headerlink" title="제 1 정규형(1NF)"></a>제 1 정규형(1NF)</h5><p>모든속성이 하나의 값을 가질 때 제 1 정규형이라 한다.<br>(도메인이 원자값 임)</p>
<h5 id="제-2-정규형-2NF"><a href="#제-2-정규형-2NF" class="headerlink" title="제 2 정규형(2NF)"></a>제 2 정규형(2NF)</h5><p>하나의 엔티티가 이미 1NF로 되어 있고 모든 식별되지 않은 속성들이 엔티티의 유일한 식별자에 종속적이면 “제 2 정규형(2nd Normal form)” 이라 한다.<br>(부분적 함수 종속 제거 됨)</p>
<h5 id="제-3-정규형-3NF"><a href="#제-3-정규형-3NF" class="headerlink" title="제 3 정규형(3NF)"></a>제 3 정규형(3NF)</h5><p>하나의 엔티티가 이미 2NF로 되어 있고 식별할 수 없는 어떠한 속성도 어떤 다른 식별할 수 없는 속성들에게 종속적이지 않으면 “제 3 정규형(3nd Normal form)” 이라 한다.<br>(이행적 함수 종속 제거 됨)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;데이터-베이스-설계의-주된-목적&quot;&gt;&lt;a href=&quot;#데이터-베이스-설계의-주된-목적&quot; class=&quot;headerlink&quot; title=&quot;데이터 베이스 설계의 주된 목적&quot;&gt;&lt;/a&gt;데이터 베이스 설계의 주된 목적&lt;/h4&gt;&lt;p&gt;중복성 제거, 정규
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>11. DAO</title>
    <link href="http://KKimSangHeon.github.io/2017/08/22/database11/"/>
    <id>http://KKimSangHeon.github.io/2017/08/22/database11/</id>
    <published>2017-08-22T04:48:18.000Z</published>
    <updated>2017-08-22T10:08:51.122Z</updated>
    
    <content type="html"><![CDATA[<h4 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h4><p>Data Access Object<br>데이터베이스 접근 부분을 캡슐화하여 메소드를 이용하여 데이터베이스에 접근한다. 이때 결과는 VO객체를 통해 얻는다.<br><figure class="highlight java"><figcaption><span>AuthorDao.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.bigdata2017.jdbc.bookshop.vo.AuthorVo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorDao</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			conn = DriverManager.getConnection(url, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(  )</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span> ;</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 객체 생성</span></div><div class="line">			stmt = conn.createStatement();</div><div class="line"></div><div class="line">			<span class="comment">//4. SQL문 실행</span></div><div class="line">			String sql =<span class="string">"DELETE FROM AUTHOR"</span>;</div><div class="line">			count = stmt.executeUpdate(sql);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( rs != <span class="keyword">null</span> ) &#123;</div><div class="line">					rs.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					stmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">( AuthorVo vo )</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span>;</div><div class="line">		PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 준비</span></div><div class="line">			String sql =</div><div class="line">				<span class="string">" insert"</span> +</div><div class="line">				<span class="string">"   into author"</span> +</div><div class="line">				<span class="string">" values (seq_author.nextval, ?, ?)"</span>;			</div><div class="line">			pstmt = conn.prepareStatement( sql );</div><div class="line"></div><div class="line">			<span class="comment">//4. binding</span></div><div class="line">			pstmt.setString( <span class="number">1</span>, vo.getName() );</div><div class="line">			pstmt.setString( <span class="number">2</span>, vo.getProfile() );</div><div class="line"></div><div class="line">			<span class="comment">//5. SQL문 실행</span></div><div class="line">			count = pstmt.executeUpdate();</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error :"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3.자원 정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( pstmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					pstmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;		</div><div class="line"></div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;AuthorVo&gt; <span class="title">getList</span><span class="params">()</span></span>&#123;</div><div class="line">		List&lt;AuthorVo&gt; list = <span class="keyword">new</span> ArrayList&lt;AuthorVo&gt;();</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 객체 생성</span></div><div class="line">			stmt = conn.createStatement();</div><div class="line"></div><div class="line">			<span class="comment">//4. SQL문 실행</span></div><div class="line">			String sql =<span class="string">"SELECT NO, NAME, PROFILE FROM AUTHOR ORDER BY NO"</span>;</div><div class="line">			rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"connection 성공"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//5. 결과 사용하기</span></div><div class="line">			<span class="keyword">while</span>( rs.next() ) &#123;</div><div class="line">				Long no = rs.getLong( <span class="number">1</span> );</div><div class="line">				String name = rs.getString( <span class="number">2</span> );</div><div class="line">				String profile = rs.getString( <span class="number">3</span> );</div><div class="line"></div><div class="line">				AuthorVo vo = <span class="keyword">new</span> AuthorVo();</div><div class="line">				vo.setNo(no);</div><div class="line">				vo.setName(name);</div><div class="line">				vo.setProfile(profile);</div><div class="line">				list.add(vo);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( rs != <span class="keyword">null</span> ) &#123;</div><div class="line">					rs.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					stmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>AuthorDaoTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.jdbc.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.bigdata2017.jdbc.bookshop.dao.AuthorDao;</div><div class="line"><span class="keyword">import</span> com.bigdata2017.jdbc.bookshop.vo.AuthorVo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorDaoTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		testInsert();</div><div class="line">		testGetList();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGetList</span><span class="params">()</span> </span>&#123;</div><div class="line">		AuthorDao dao = <span class="keyword">new</span> AuthorDao();</div><div class="line">		List&lt;AuthorVo&gt; list = dao.getList();</div><div class="line">		<span class="keyword">for</span>(AuthorVo vo: list) &#123;</div><div class="line">			System.out.println(vo);</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</div><div class="line">			AuthorDao dao = <span class="keyword">new</span> AuthorDao();</div><div class="line"></div><div class="line">			AuthorVo vo = <span class="keyword">new</span> AuthorVo();</div><div class="line"></div><div class="line">			vo.setName( <span class="string">"공자"</span> );</div><div class="line">			vo.setProfile( <span class="string">"...."</span> );</div><div class="line"></div><div class="line">			<span class="keyword">new</span> AuthorDao().insert(vo);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;DAO&quot;&gt;&lt;a href=&quot;#DAO&quot; class=&quot;headerlink&quot; title=&quot;DAO&quot;&gt;&lt;/a&gt;DAO&lt;/h4&gt;&lt;p&gt;Data Access Object&lt;br&gt;데이터베이스 접근 부분을 캡슐화하여 메소드를 이용하여 데이터베이스에 접근한다. 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>10. JDBC</title>
    <link href="http://KKimSangHeon.github.io/2017/08/22/database10/"/>
    <id>http://KKimSangHeon.github.io/2017/08/22/database10/</id>
    <published>2017-08-22T00:08:22.000Z</published>
    <updated>2017-08-22T04:48:07.239Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>-자바를 이용한 데이터베이스 접속과 SQL 문장의  실행, 그리고  실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약<br>-자바 프로그램내에서 SQL문을 실행하기 위한 자바 API<br>-SQL과 프로그래밍 언어의 통합 접근 중 한 형태</p>
<h4 id="Class-forName메소드란"><a href="#Class-forName메소드란" class="headerlink" title="Class.forName메소드란?"></a>Class.forName메소드란?</h4><p>클래스를 로딩하는 메소드이다.<br>//왜 new OralcDriver()을 하지 않고 forName() 메소드를 사용할 까?<br>//new 를 이용할 경우 벤더별로 다를것이므로!</p>
<figure class="highlight java"><figcaption><span>MyDriver.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.jdbc;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDriver</span> <span class="keyword">implements</span> <span class="title">Driver</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println( <span class="string">"static code area"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//외부에서 드라이버 접근이 가능토록 드라이버 등록</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			DriverManager.registerDriver(<span class="keyword">new</span> MyDriver());</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acceptsURL</span><span class="params">(String arg0)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Connection <span class="title">connect</span><span class="params">(String url, Properties info)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">		System.out.println( url );</div><div class="line">		System.out.println( info );</div><div class="line">		<span class="comment">//이작업은 DB마다 다를것이다.</span></div><div class="line">		<span class="comment">/*연결 작업*/</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyConnection();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>ConnectionTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line"><span class="comment">//			Class.forName( "oracle.jdbc.driver.OracleDriver" );</span></div><div class="line">			Class.forName( <span class="string">"com.bigdata2017.jdbc.MyDriver"</span> );</div><div class="line">			<span class="comment">//클래스를 강제 로딩</span></div><div class="line">			<span class="comment">//왜 new OralcDriver()을 하지 않고 forName() 메소드를 사용할 까?</span></div><div class="line">			<span class="comment">//new 를 이용할 경우 벤더별로 다를것이므로!</span></div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			DriverManager.getConnection(url, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"연결실패"</span> + e );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>MyConnection.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.jdbc;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span></span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><p>프로젝트 우클릭 - 자바 빌드 패스 - 라이브러리탭- add library - user library 선택 -new - jdbc(아무거나 가능) - add external jar - ojdbc 파일 찾기 - apply - finish</p>
<h4 id="SelectTest"><a href="#SelectTest" class="headerlink" title="SelectTest"></a>SelectTest</h4><figure class="highlight java"><figcaption><span>SelectTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line">			Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			conn = DriverManager.getConnection(url, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 객체 생성</span></div><div class="line">			stmt = conn.createStatement();</div><div class="line"></div><div class="line">			<span class="comment">//4. SQL문 실행</span></div><div class="line">			String sql = <span class="string">"select EMPLOYEE_ID,"</span></div><div class="line">					+ <span class="string">"	  FIRST_NAME,"</span></div><div class="line">					+ <span class="string">"   LAST_NAME,"</span></div><div class="line">					+ <span class="string">"   SALARY "</span></div><div class="line">					+ <span class="string">"   from employees"</span>;</div><div class="line">			rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"connection 성공"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//5. 결과 사용하기</span></div><div class="line">			<span class="keyword">while</span>( rs.next() ) &#123;</div><div class="line">				Long employee_id = rs.getLong( <span class="number">1</span> );</div><div class="line">        <span class="comment">//rs.getLong( "employee_id" )   도 가능</span></div><div class="line">				String first_Name = rs.getString( <span class="number">2</span> );</div><div class="line">				String last_Name = rs.getString( <span class="number">3</span> );</div><div class="line">				<span class="keyword">int</span> salary = rs.getInt(<span class="number">4</span>);</div><div class="line">				System.out.println( employee_id+</div><div class="line">						first_Name +</div><div class="line">						last_Name +</div><div class="line">						salary);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( rs != <span class="keyword">null</span> ) &#123;</div><div class="line">					rs.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					stmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="UpdateTest"><a href="#UpdateTest" class="headerlink" title="UpdateTest"></a>UpdateTest</h4><p>Statement를 사용함. 아래 Insert에서는 Prepared Statement를 사용 한다.<br>비교해보자<br><figure class="highlight java"><figcaption><span>UpdateTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Connection conn = <span class="keyword">null</span> ;</div><div class="line">	Statement stmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line">		Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//2. Connection 얻어오기</span></div><div class="line">		String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">		conn = DriverManager.getConnection(url, <span class="string">"dev"</span>, <span class="string">"dev"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//3. Statement 객체 생성</span></div><div class="line">		stmt = conn.createStatement();</div><div class="line"></div><div class="line">		<span class="comment">//4. SQL문 실행</span></div><div class="line">		String name = <span class="string">"도우넛"</span>;</div><div class="line">		Long no = <span class="number">12L</span>;</div><div class="line"></div><div class="line">		String sql = <span class="string">"update author "</span></div><div class="line">				+ <span class="string">"      set name = '"</span>+ name +<span class="string">"'"</span></div><div class="line">				+ <span class="string">"	  where no = "</span>+ no;</div><div class="line"></div><div class="line">		<span class="comment">//쿼리문이 복잡한데 Prepared Statement를 통해 좀더 수월하게 할 수 있다.</span></div><div class="line"></div><div class="line">		<span class="keyword">int</span> count = stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">		<span class="comment">//5. 성공유무</span></div><div class="line">		System.out.println( count == <span class="number">1</span> ? <span class="string">"성공"</span> : <span class="string">"실패"</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">		System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">		System.out.println( <span class="string">"error"</span> + e );</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">//3. 자원정리</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">				stmt.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="InsertTest"><a href="#InsertTest" class="headerlink" title="InsertTest"></a>InsertTest</h4><p>보통 PreparedStatement를 많이 쓴다.<br>select의 경우 바인드만 안하면 되니까!<br><figure class="highlight java"><figcaption><span>InsertTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Connection conn = <span class="keyword">null</span> ;</div><div class="line">	PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line">		Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//2. Connection 얻어오기</span></div><div class="line">		String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">		conn = DriverManager.getConnection(url, <span class="string">"dev"</span>, <span class="string">"dev"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//3. Statement 준비</span></div><div class="line">		String sql = <span class="string">"insert"</span></div><div class="line">				+ <span class="string">"into author"</span></div><div class="line">				+ <span class="string">"values(seq_author.nextval,?,?)"</span>;</div><div class="line"></div><div class="line">		pstmt = conn.prepareStatement(sql);</div><div class="line"></div><div class="line">		<span class="comment">//4. 바인딩</span></div><div class="line">		pstmt.setString( <span class="number">1</span>, <span class="string">"공자"</span>);</div><div class="line">		pstmt.setString( <span class="number">2</span>, <span class="string">"어쩌구저쩌구"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//5. SQL문 실행</span></div><div class="line">		<span class="keyword">int</span> count = pstmt.executeUpdate();	<span class="comment">//파라미터로 sql이 들어가면 안된다.</span></div><div class="line"></div><div class="line">		<span class="comment">//5. 성공유무</span></div><div class="line">		System.out.println( count == <span class="number">1</span> ? <span class="string">"성공"</span> : <span class="string">"실패"</span>);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">		System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">		System.out.println( <span class="string">"error"</span> + e );</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">//3. 자원정리</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>( pstmt != <span class="keyword">null</span> ) &#123;</div><div class="line">				pstmt.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC&quot;&gt;&lt;/a&gt;JDBC&lt;/h4&gt;&lt;p&gt;-자바를 이용한 데이터베이스 접속과 SQL 문장의  실행, 그리고  실행 결과로 얻어진 데이터의 핸들링을 제공하
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>9. Data Dictionary, DCL, ROLE</title>
    <link href="http://KKimSangHeon.github.io/2017/08/21/database9/"/>
    <id>http://KKimSangHeon.github.io/2017/08/21/database9/</id>
    <published>2017-08-21T05:17:43.000Z</published>
    <updated>2017-08-22T00:43:10.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Data-Dictionary란"><a href="#Data-Dictionary란" class="headerlink" title="Data Dictionary란?"></a>Data Dictionary란?</h4><p>모든 스키마 객체 정보, 스키마 객체의 공간 정보, 컬럼의 기본값, 제약조건 정보, 오라클 사용자 정보, 권한 및 롤 정보, 기타 데이터베이스 정보 …</p>
<p>SELECT * FROM DICTIONARY;<br>–데이터 딕셔너리 조회</p>
<p>SELECT * FROM USER_OBJECTS;</p>
<p>SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE = ‘TABLE’;</p>
<p>SELECT * FROM DICTIONARY;<br>–데이터 딕셔너리 조회</p>
<p>SELECT * FROM USER_OBJECTS;</p>
<p>SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE = ‘TABLE’;</p>
<p>SELECT * FROM USER_USERS;<br>–로그인한 유저만 보여줌</p>
<p>SELECT * FROM ALL_USERS;<br>–전체 유저 보여줌</p>
<p>SELECT * FROM DBA_USERS;<br>–CONN /AS SYSDBA로 로그인 후 가능</p>
<p>SELECT *<br>FROM USER_CONSTRAINTS<br>WHERE TABLE_NAME = ‘BOOK’;<br>–제약조건 조회</p>
<p>SELECT * FROM USER_USERS;</p>
<h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><p>–사용자 생성<br>CREATE USER SHKIM IDENTIFIED BY “SHKIM”;</p>
<p>–접속권한<br>GRANT CREATE SESSION TO SHKIM;</p>
<p>–SELECT 권한 부여 (DEV에 있는 BOOK테이블에 SELECT 할수있는..)<br>GRANT SELECT ON DEV.BOOK TO SHKIM;</p>
<p>–접속권한 없애기<br>REVOKE CREATE SESSION FROM SHKIM;</p>
<p>–롤 단위<br>이렇게만 해도 접속 가능<br>GRANT CONNECT, RESOURCE TO SHKIM;</p>
<p>REVOKE CONNECT RESOURCE FROM SHKIM;</p>
<h4 id="ROLE-생성"><a href="#ROLE-생성" class="headerlink" title="ROLE 생성"></a>ROLE 생성</h4><p>여러개의 권한을 묶어놓은것!<br>CONN /AS SYSDBA<br>CREATE ROLE VIEWER;<br>GRANT CREATE SESSION TO VIEWER;<br>GRANT SELECT ON DEV.BOOK TO VIEWER;<br>GRANT VIEWER TO SHKIM;<br>CONN SHKIN/SHKIM;<br>SELECT * FROM DEV.BOOK;</p>
<p>CONN /AS SYSDBA;<br>REVOKE VIWER FROM SHKIM;</p>
<h4 id="transaction"><a href="#transaction" class="headerlink" title="transaction"></a>transaction</h4><p>트랜잭션은 DML의 집합으로 이루어진다.<br>논리적 작업단위, 일련의 연산 집합을 의미한다.</p>
<p>–DML<br>–암시적(컬럼 지정X) 인 경우에는 순서와 , 개수 정확해야 함<br>INSERT INTO AUTHOR VALUES(SEQ_AUTHOR.NEXTVAL, ‘둘리’,NULL);</p>
<p>–명시적(컬럼 지정O)인 경우 지정한 순서와 개수 대로 입력해야 한다.<br>INSERT INTO AUTHOR(NAME, NO) VALUES(‘둘리’,SEQ_AUTHOR.NEXTVAL);</p>
<p>트랜잭션은 다음과 같은 특징을 가져야 한다.<br>Atomicity: all or nothing. 하나의 단위로 처리되어야 함. (중간까지만 처리됨은 불가)<br>Consistency: 데이터베이스의 일관성(무결성)을 깨지 않아야 함<br>Isolation: 다른 transaction과 동시에 수행되더라도 독립적으로 영향을 받지 않아야 함<br>Durability: 한번 수행 완료(commit)되면 영원히 반영되어 있어야 함 (시스템 crash에서라도)</p>
<p>DDL이나 DCL은 한 문장이 트랜잭션으로 처리됨</p>
<h4 id="DeadLock"><a href="#DeadLock" class="headerlink" title="DeadLock"></a>DeadLock</h4><p>둘 이상의 트랜잭션이 서로 상대방의 Lock을 순환 대기하여 어떤 트랜잭션도 더 이상 진행할 수 없는 상태</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Data-Dictionary란&quot;&gt;&lt;a href=&quot;#Data-Dictionary란&quot; class=&quot;headerlink&quot; title=&quot;Data Dictionary란?&quot;&gt;&lt;/a&gt;Data Dictionary란?&lt;/h4&gt;&lt;p&gt;모든 스키마 객체 정보
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>8. Commit, Transaction, Delete, Update, CONSTRAINT</title>
    <link href="http://KKimSangHeon.github.io/2017/08/21/database8/"/>
    <id>http://KKimSangHeon.github.io/2017/08/21/database8/</id>
    <published>2017-08-21T00:23:06.000Z</published>
    <updated>2017-08-21T06:32:45.704Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h4><p>일련의 과정을 거친 후 커밋을 해줘야 데이터베이스에 반영이 된다.<br>오라클의 경우 DDL은 자동으로 커밋이 되며 DML은 직접 커밋을 해줘야 한다.<br>커밋의 과정중 에러가 나면 롤백시킨다.</p>
<h4 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h4><p>여러개의 job를 묶어 놓은것을 Transaction이라 한다.</p>
<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>DELETE<br>FROM BOOK<br>WHERE NO = 1;</p>
<p>COMMIT;   // 커밋한다.<br>ROLLBACK;   //다시 롤백한다.</p>
<h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><p>UPDATE BOOK<br>SET TITLE = ‘토지2’<br>WHERE NO = 1;</p>
<h4 id="Subquery를-이용한-테이블-생성"><a href="#Subquery를-이용한-테이블-생성" class="headerlink" title="Subquery를 이용한 테이블 생성"></a>Subquery를 이용한 테이블 생성</h4><p>백업용 테스트용으로 많이 쓰인다.</p>
<p>Subquery의 결과와 동일한 테이블 생성됨<br>질의 결과 레코드들이 포함됨<br>NOT NULL 제약 조건 만 상속됨</p>
<p>CREATE TABLE EMPLOYEES_BAK01<br>AS ( SELECT *<br>     FROM EMPLOYEES<br>     WHERE JOB_ID = ‘FI_ACCOUNT’<br>);</p>
<h4 id="char-varchar"><a href="#char-varchar" class="headerlink" title="char, varchar"></a>char, varchar</h4><p>char - 10바이트를 만들고 ‘ab’를 입력하면 10바이트 할당됨<br>varchar - 10바이트를 만들고 ‘ab’를 입력하면 2바이트 할당됨</p>
<p>모든 데이터가 고정크기일 때 (ex 주민번호, 학번) - char<br>모든 데이터가 고정크기가 아닐 때 (ex 이메일) - varchar</p>
<h4 id="varchar-varchar2"><a href="#varchar-varchar2" class="headerlink" title="varchar, varchar2"></a>varchar, varchar2</h4><p>기능상의 다른점은 없지만 varchar2에서 성능개선이 이뤄짐.<br>varchar는 곧 없어질 것이라 예고를 하고있다.</p>
<h4 id="NUMBER-x-y"><a href="#NUMBER-x-y" class="headerlink" title="NUMBER(x,y)"></a>NUMBER(x,y)</h4><p>y는 실수부분을 의미한다.</p>
<h4 id="varchar2-5-nvarchar2-5"><a href="#varchar2-5-nvarchar2-5" class="headerlink" title="varchar2(5), nvarchar2(5)"></a>varchar2(5), nvarchar2(5)</h4><p>varchar2(5)는 5바이트를 할당<br>nvarchar2(5) 는 5글자를 할당<br>한글은 UTF-8을 사용하기 떄문에 문제가 된다.</p>
<p>–NVARCHAR2 , VARCHAR2와 비교</p>
<p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(120),<br>    AUTHOR VARCHAR2(5), –MAX 4000 BYTE<br>    TEST NVARCHAR2(2000), –MAX 2000자( 내부적으로 6000 BYTE )<br>    PUB_DTAE DATE<br>);</p>
<p>INSERT INTO BOOK VALUES(1, ‘토지’, ‘가나’, SYSDATE);<br>– 가나가 6바이트라 에러가 발생..</p>
<p>INSERT INTO BOOK VALUES(1, ‘토지’, ‘가’, SYSDATE);<br>– 정상적으로 INSERT 가능</p>
<h4 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h4><p>ALTER TABLE BOOK ADD(PUBS VARCHAR(120));<br>–컬럼추가<br>ALTER TABLE BOOK MODIFY(PUBS VARCHAR(200));<br>–컬럼 변경<br>ALTER TABLE BOOK RENAME COLUMN PUBS TO PUBLISHINGS;<br>–컬럼명 변경<br>ALTER TABLE BOOK DROP(PUBLISHINGS);<br>–컬럼 제거<br>ALTER TABLE BOOK MODIFY(AUTHOR VARCHAR(300) NOT NULL);<br>–컬럼 변경<br>ALTER TABLE BOOK SET UNUSED(AUTHOR);<br>–컬럼을 보이지 않게 만듦<br>ALTER TABLE BOOK DROP UNUSED COLUMNS;<br>–보이지 않게 만든 컬럼을 삭제함</p>
<h4 id="SEQUENCE"><a href="#SEQUENCE" class="headerlink" title="SEQUENCE"></a>SEQUENCE</h4><p>값이 1씩 증가한다<br>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR VARCHAR2(50) NOT NULL, –MAX 4000 BYTE<br>    PUB_DATE DATE,</p>
<pre><code>PRIMARY KEY(NO)
</code></pre><p>);</p>
<p>CREATE SEQUENCE SEQ_BOOK<br>START WITH 1    –1부터 시작<br>INCREMENT BY 1  –1씩 증가<br>MAXVALUE 999999999  –MAX가 다차면 1로 돌아감<br>–PRIMARY KEY 자동증가</p>
<p>SELECT SEQ_BOOK.NEXTVAL FROM DUAL;  –증가<br>SELECT SEQ_BOOK.CURRVAL FROM DUAL;  –최근값</p>
<p>INSERT INTO BOOK VALUES(<br>    SEQ_BOOK.NEXTVAL,<br>    ‘토지2’,<br>    ‘박경리’,<br>    SYSDATE<br>);<br>–INSERT 문에서의 시퀀스 활용</p>
<h4 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h4><p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR VARCHAR2(50) NOT NULL, –MAX 4000 BYTE<br>    PUB_DATE DATE,<br>    STATE VARCHAR2(12) NOT NULL,<br>    PRIMARY KEY(NO),<br>    CONSTRAINT C_BOOK_CHECK CHECK(STATE IN (‘대여중’, ‘대여가능’))<br>);</p>
<p>INSERT INTO BOOK VALUES(<br>    SEQ_BOOK.NEXTVAL,<br>    ‘토지2’,<br>    ‘박경리’,<br>     SYSDATE,<br>    ‘대여가능’   –대여중, 대여가능만 들어갈 수 있다.<br>    );   </p>
<h4 id="외부키"><a href="#외부키" class="headerlink" title="외부키"></a>외부키</h4><p>CREATE SEQUENCE SEQ_AUTHOR<br>START WITH 1<br>INCREMENT BY 1<br>MAXVALUE 999999999<br>–시퀀스 생성</p>
<p>CREATE TABLE AUTHOR(<br>    NO NUMBER(10),<br>    NAME VARCHAR2(200) NOT NULL,<br>    PROFILE VARCHAR2(2000),<br>    PRIMARY KEY(NO)<br>)</p>
<p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR_NO NUMBER(10) , –MAX 4000 BYTE<br>    STATE VARCHAR2(12) NOT NULL,<br>    PUB_DATE DATE,<br>    PRIMARY KEY(NO),<br>    CONSTRAINT C_BOOK_FK FOREIGN KEY (AUTHOR_NO) REFERENCES AUTHOR(NO)<br>    ON DELETE CASCADE  , –AUTHOR 테이블의 박경리 데이터가 삭제도면 BOOK테이블의 토지 데이터도 삭제된다.<br>    ON DELETE SET NULL, –AUTHOR 테이블의 박경리 데이터가 삭제도면 BOOK테이블의 AUTHOR_NO는 NULL이 된다..<br>    CONSTRAINT C_BOOK_CHECK CHECK(STATE IN (‘대여중’, ‘대여가능’))<br>);</p>
<p>INSERT INTO AUTHOR VALUES(<br>SEQ_AUTHOR.NEXTVAL,<br>‘박경리’,<br>NULL);</p>
<p>INSERT INTO BOOK VALUES(<br>SEQ_BOOK.NEXTVAL,<br>‘토지’,<br>1,<br>‘대여가능’,<br>SYSDATE);</p>
<h4 id="CONSTRAINT"><a href="#CONSTRAINT" class="headerlink" title="CONSTRAINT"></a>CONSTRAINT</h4><p>제약조건은 보통 ALTER테이블을 통해 모아서 준다.<br>아래와 같이..<br>CREATE TABLE AUTHOR(<br>    NO NUMBER(10),<br>    NAME VARCHAR2(200) NOT NULL,<br>    PROFILE VARCHAR2(2000)<br>)</p>
<p>ALTER TABLE AUTHOR<br>ADD CONSTRAINT C_AUTHOR_PK<br>PRIMARY KEY(NO);</p>
<p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR_NO NUMBER(10) NOT NULL, –MAX 4000 BYTE<br>    STATE VARCHAR2(12) NOT NULL,<br>    PUB_DATE DATE<br>);</p>
<p>ALTER TABLE BOOK<br>ADD CONSTRAINT C_BOOK_PK<br>PRIMARY KEY(NO);</p>
<p>ALTER TABLE BOOK<br>ADD CONSTRAINT C_BOOK_CHECK<br>CHECK(STATE IN (‘대여중’, ‘대여가능’));</p>
<p>ALTER TABLE BOOK<br>ADD CONSTRAINT C_BOOK_FK<br>FOREIGN KEY (AUTHOR_NO) REFERENCES AUTHOR(NO) ON DELETE CASCADE ;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Commit&quot;&gt;&lt;a href=&quot;#Commit&quot; class=&quot;headerlink&quot; title=&quot;Commit&quot;&gt;&lt;/a&gt;Commit&lt;/h4&gt;&lt;p&gt;일련의 과정을 거친 후 커밋을 해줘야 데이터베이스에 반영이 된다.&lt;br&gt;오라클의 경우 DDL은 자
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>7. TOP - K</title>
    <link href="http://KKimSangHeon.github.io/2017/08/18/database7/"/>
    <id>http://KKimSangHeon.github.io/2017/08/18/database7/</id>
    <published>2017-08-18T04:04:24.000Z</published>
    <updated>2017-08-18T04:36:18.826Z</updated>
    
    <content type="html"><![CDATA[<p>– TOP -K<br>SELECT ROWNUM,EMPLOYEE_ID, SALARY<br>  FROM EMPLOYEES<br> WHERE HIRE_DATE LIKE ‘06%’<br> ORDER BY SALARY<br>원하는대로 출력이 되지 않을 것이다.</p>
<p>이를 원하는대로 출력하기 위해서는 다음과 같이!<br>SELECT ROWNUM, EMPLOYEE_ID, SALARY<br>FROM (<br>      SELECT EMPLOYEE_ID, SALARY<br>      FROM EMPLOYEES<br>      WHERE HIRE_DATE LIKE ‘06%’<br>      ORDER BY SALARY<br>      );</p>
<p>SELECT ROWNUM, EMPLOYEE_ID, SALARY<br>FROM (<br>      SELECT EMPLOYEE_ID, SALARY<br>      FROM EMPLOYEES<br>      WHERE HIRE_DATE LIKE ‘06%’<br>      ORDER BY SALARY<br>      )<br> WHERE ROWNUM &lt;= 3     ;<br>–앞에서 3개 뽑는것</p>
<p>SELECT ROWNUM, EMPLOYEE_ID, SALARY<br>FROM (<br>      SELECT EMPLOYEE_ID, SALARY<br>      FROM EMPLOYEES<br>      WHERE HIRE_DATE LIKE ‘06%’<br>      ORDER BY SALARY<br>      )<br> WHERE 6 &gt;= ROWNUM AND ROWNUM &lt;= 10;<br>–이것은 원하는 결과가 나오지 않는다.<br>1이  찍히지 않으므로 그렇다. 이로인해 ROWNUM이 증가하지 않음</p>
<p>SELECT * FROM<br>        (<br>        SELECT ROWNUM AS RN, EMPLOYEE_ID, SALARY<br>        FROM (<br>              SELECT EMPLOYEE_ID, SALARY<br>              FROM EMPLOYEES<br>              WHERE HIRE_DATE LIKE ‘06%’<br>              ORDER BY SALARY<br>              )<br>         )<br> WHERE RN &gt;=6 AND RN &lt;=10;<br> – 위의 문제를 이렇게 해결함.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;– TOP -K&lt;br&gt;SELECT ROWNUM,EMPLOYEE_ID, SALARY&lt;br&gt;  FROM EMPLOYEES&lt;br&gt; WHERE HIRE_DATE LIKE ‘06%’&lt;br&gt; ORDER BY SALARY&lt;br&gt;원하는대로 출력이 되지 않을 것
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>6. SUBQUERY</title>
    <link href="http://KKimSangHeon.github.io/2017/08/18/database6/"/>
    <id>http://KKimSangHeon.github.io/2017/08/18/database6/</id>
    <published>2017-08-18T01:22:43.000Z</published>
    <updated>2017-08-18T04:04:17.946Z</updated>
    
    <content type="html"><![CDATA[<h4 id="서브쿼리"><a href="#서브쿼리" class="headerlink" title="서브쿼리"></a>서브쿼리</h4><p>Lex보다 많이 받는 사원 구하기</p>
<p>SELECT FIRST_NAME, SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY &gt; (SELECT<br>                    SALARY<br>                 FROM EMPLOYEES<br>                 WHERE FIRST_NAME = ‘Lex’);</p>
<p>SELECT A.FIRST_NAME, B.SALARY<br>FROM   EMPLOYEES A,<br>       (SELECT<br>           SALARY<br>        FROM EMPLOYEES<br>        WHERE FIRST_NAME = ‘Lex’) B<br>WHERE A.SALARY &gt; B.SALARY;<br>– 조인으로도 처리 가능                </p>
<p>SELECT FIRST_NAME, SALARY<br>FROM   EMPLOYEES<br>WHERE   SALARY &gt; (SELECT AVG(SALARY)<br>                  FROM EMPLOYEES );         </p>
<p>–SINGLE LOW SUB QUERY</p>
<hr>
<p>– 문_ JOB_ID가 ‘IT_PROG’인 직원이 받는 월급보다 많이 받고 있는 직원의 이름과 월급</p>
<p>SELECT FIRST_NAME,<br>       SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY &gt; ALL (SELECT SALARY<br>                     FROM EMPLOYEES<br>                     WHERE JOB_ID = ‘IT_PROG’)</p>
<p>– MULTI ROW SUB QUERY</p>
<hr>
<p>–문) 각 부서별로 최고 월급을 받는 직원의 이름과 직원의 이름과 월급 출력</p>
<p>WHERE을 활용</p>
<p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  (SALARY,DEPARTMENT_ID) IN (<br>                                SELECT MAX(SALARY),DEPARTMENT_ID<br>                                FROM EMPLOYEES<br>                                GROUP BY DEPARTMENT_ID<br>                                );</p>
<p>FROM을 활용<br>SELECT A.DEPARTMENT_ID, FIRST_NAME, SALARY<br>FROM   EMPLOYEES A,<br>    ( SELECT DEPARTMENT_ID,<br>             MAX(SALARY) AS MAX_SALARY<br>      FROM EMPLOYEES<br>      GROUP BY DEPARTMENT_ID<br>    ) B<br>WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID<br>AND   A.SALARY = B.MAX_SALARY;        </p>
<p>CORELATED 활용<br>SELECT DEPARTMENT_ID, FIRST_NAME, SALARY<br>FROM EMPLOYEES A<br>WHERE SALARY = ( SELECT MAX(SALARY)<br>                 FROM EMPLOYEES<br>                 WHERE A.DEPARTMENT_ID = DEPARTMENT_ID);</p>
<p>– CORELATED SUBQUERY</p>
<hr>
<p>자기 부서의 평균월급 보다 적은 월급을 받는 사원을 구하라</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;서브쿼리&quot;&gt;&lt;a href=&quot;#서브쿼리&quot; class=&quot;headerlink&quot; title=&quot;서브쿼리&quot;&gt;&lt;/a&gt;서브쿼리&lt;/h4&gt;&lt;p&gt;Lex보다 많이 받는 사원 구하기&lt;/p&gt;
&lt;p&gt;SELECT FIRST_NAME, SALARY&lt;br&gt;FROM   
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>5. ROLLUP, CUBE</title>
    <link href="http://KKimSangHeon.github.io/2017/08/18/database5/"/>
    <id>http://KKimSangHeon.github.io/2017/08/18/database5/</id>
    <published>2017-08-18T00:05:47.000Z</published>
    <updated>2017-08-18T01:22:37.148Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ROWNUM"><a href="#ROWNUM" class="headerlink" title="ROWNUM"></a>ROWNUM</h4><p>SELECT ROWNUM, EMPLOYEE_ID<br>FROM EMPLOYEES;</p>
<h4 id="트리-형태-구조를-추출하기-위한-질의"><a href="#트리-형태-구조를-추출하기-위한-질의" class="headerlink" title="트리 형태 구조를 추출하기 위한 질의"></a>트리 형태 구조를 추출하기 위한 질의</h4><p>– START WITH ~ CONNECT BY 절<br>SELECT LEVEL MANAGER_ID, EMPLOYEE_ID<br>FROM EMPLOYEES<br>START WITH MANAGER_ID IS NULL<br>CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID<br>ORDER BY LEVEL, MANAGER_ID, EMPLOYEE_ID;</p>
<h4 id="ROLLUP"><a href="#ROLLUP" class="headerlink" title="ROLLUP"></a>ROLLUP</h4><p>부서별 직책별 평균월급, 사원수 평균월급을 출력하시오<br>ROLLUP (A, B):  group by (A, B) &amp; group by (A) &amp; ALL</p>
<p>SELECT CASE GROUPING(DEPARTMENT_ID)<br>            WHEN 1 THEN ‘모든 부서’<br>            ELSE NVL(TO_CHAR(DEPARTMENT_ID),’없음’)<br>       END AS “부서”,</p>
<pre><code>CASE GROUPING(JOB_ID)
     WHEN 1 THEN &apos;모든 직업&apos;
     ELSE NVL(TO_CHAR(JOB_ID),&apos;없음&apos;)
END AS &quot;직업&quot;

,COUNT(*),ROUND(AVG(SALARY),0)
</code></pre><p>FROM EMPLOYEES<br>GROUP BY ROLLUP(DEPARTMENT_ID, JOB_ID)<br>ORDER BY DEPARTMENT_ID, JOB_ID</p>
<h4 id="GROUPING"><a href="#GROUPING" class="headerlink" title="GROUPING"></a>GROUPING</h4><p>SELECT CASE GROUPING(DEPARTMENT_ID)<br>            WHEN 1 THEN ‘모든 부서’<br>            ELSE NVL(TO_CHAR(DEPARTMENT_ID),’없음’)<br>       END AS “부서”,</p>
<pre><code>CASE GROUPING(JOB_ID)
     WHEN 1 THEN &apos;모든 직업&apos;
     ELSE NVL(TO_CHAR(JOB_ID),&apos;없음&apos;)
END AS &quot;직업&quot;

,COUNT(*),ROUND(AVG(SALARY),0)
</code></pre><p>FROM EMPLOYEES<br>GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)<br>ORDER BY DEPARTMENT_ID, JOB_ID</p>
<h4 id="CUBE"><a href="#CUBE" class="headerlink" title="CUBE"></a>CUBE</h4><p>group by (A,B) &amp; group by (A) &amp; group by (B) &amp; ALL<br>SELECT CASE GROUPING(DEPARTMENT_ID)<br>            WHEN 1 THEN ‘모든 부서’<br>            ELSE NVL(TO_CHAR(DEPARTMENT_ID),’없음’)<br>       END AS “부서”,</p>
<pre><code>CASE GROUPING(JOB_ID)
     WHEN 1 THEN &apos;모든 직업&apos;
     ELSE NVL(TO_CHAR(JOB_ID),&apos;없음&apos;)
END AS &quot;직업&quot;

,COUNT(*),ROUND(AVG(SALARY),0)
</code></pre><p>FROM EMPLOYEES<br>GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)<br>ORDER BY DEPARTMENT_ID, JOB_ID</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ROWNUM&quot;&gt;&lt;a href=&quot;#ROWNUM&quot; class=&quot;headerlink&quot; title=&quot;ROWNUM&quot;&gt;&lt;/a&gt;ROWNUM&lt;/h4&gt;&lt;p&gt;SELECT ROWNUM, EMPLOYEE_ID&lt;br&gt;FROM EMPLOYEES;&lt;/p&gt;
&lt;h4 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>4. CASE, DECODE, GROUP BY</title>
    <link href="http://KKimSangHeon.github.io/2017/08/17/database4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/17/database4/</id>
    <published>2017-08-17T01:59:31.000Z</published>
    <updated>2017-08-18T00:05:05.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h4><p>SELECT EMPLOYEE_ID,<br>       SALARY,<br>       JOB_ID,<br>       CASE JOB_ID<br>            WHEN ‘AC_ACCOUNT’ THEN SALARY + SALARY <em> 0.5<br>            WHEN ‘AC_MGR’ THEN SALARY + SALARY </em> 0.3<br>            WHEN ‘AD_VP’ THEN SALARY + SALARY * 0.2<br>            ELSE  SALARY<br>       END AS SALARY<br>FROM EMPLOYEES;        </p>
<h4 id="DECODE"><a href="#DECODE" class="headerlink" title="DECODE"></a>DECODE</h4><p>SELECT EMPLOYEE_ID,<br>       SALARY,<br>       JOB_ID,<br>       DECODE( JOB_ID ,<br>                ‘AC_ACCOUNT’ , SALARY + SALARY <em> 0.5 ,<br>                ‘AC_MGR’ ,SALARY + SALARY </em> 0.3 ,<br>                ‘AD_VP’ , SALARY + SALARY * 0.2 ,<br>                 SALARY) AS “이번달 월급”<br>FROM EMPLOYEES;        </p>
<p>SELECT EMPLOYEE_ID,AVG(SALARY) , MAX(SALARY)<br>FROM EMPLOYEES;<br>– ERROR<br>– 집계함수 이외의 칼럼은 프로젝션 될 수 없다</p>
<h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>SELECT JOB_ID,AVG(SALARY), MAX(SALARY)<br>FROM   EMPLOYEES<br>WHERE  MANAGER_ID IS NOT NULL<br>GROUP BY JOB_ID;<br>– GROUP BY 절에 참여하고 있는 컬럼은 프로젝션 할 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;CASE&quot;&gt;&lt;a href=&quot;#CASE&quot; class=&quot;headerlink&quot; title=&quot;CASE&quot;&gt;&lt;/a&gt;CASE&lt;/h4&gt;&lt;p&gt;SELECT EMPLOYEE_ID,&lt;br&gt;       SALARY,&lt;br&gt;       JOB_ID,&lt;br&gt;   
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>3. 함수 NVL,SYSDATE,IN,BETWEEN,IS NULL,LIKE,LOWER,INITCAP,LPAD,TRIM,REPLACE,CEIL,FLOOR,ROUND,TRUNC,MOD,POWER,SIGN,ADD_MONTHS,TO_CHAR</title>
    <link href="http://KKimSangHeon.github.io/2017/08/16/database3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/16/database3/</id>
    <published>2017-08-16T04:19:24.000Z</published>
    <updated>2017-08-17T02:29:49.538Z</updated>
    
    <content type="html"><![CDATA[<p>SELECT FIRST_NAME || ‘ ‘ || LAST_NAME AS NAME FROM EMPLOYEES;<br>                           ||은 CONCAT</p>
<p>SELECT SALARY AS “본봉”, SALARY + SALARY * 0.3 AS “보너스”<br>FROM EMPLOYEES;</p>
<p>SELECT -SALARY FROM EMPLOYEES;</p>
<h4 id="NVL-NVL2"><a href="#NVL-NVL2" class="headerlink" title="NVL, NVL2"></a>NVL, NVL2</h4><p>SELECT EMPLOYEE_ID,<br>       NVL(MANAGER_ID,’0’)<br>FROM EMPLOYEES;<br>        NVL함수 내의 두 형태는 같아야함</p>
<p>SELECT NVL(NULL, ‘0’) FROM DUAL;</p>
<p>SELECT NVL2(NULL,10, 20) FROM DUAL;<br>–NULL이면 10</p>
<p>SELECT NVL2(0, 10, 20) FROM DUAL;<br>–NULL이 아니면 20</p>
<p>SELECT SALARY AS “본봉”,<br>       SALARY + SALARY * NVL(COMMISSION_PCT,0)<br>       AS “보너스”<br>FROM EMPLOYEES;</p>
<p>SELECT SALARY AS “본봉”,<br>       NVL2(COMMISSION_PCT,SALARY + SALARY * COMMISSION_PCT, SALARY)<br>       AS “보너스”<br>FROM EMPLOYEES;</p>
<h4 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h4><p>SELECT NULLIF( 10 , 5 + 5 ) FROM DUAL;</p>
<h4 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h4><p>SELECT COALESCE(NULL, NULL,1,2,3) FROM DUAL;<br>– 1출력</p>
<h4 id="SYSDATE"><a href="#SYSDATE" class="headerlink" title="SYSDATE"></a>SYSDATE</h4><p>SELECT SYSDATE FROM DUAL;</p>
<p>SELECT JOB_ID<br>FROM EMPLOYEES<br>WHERE JOB_ID = ‘AD_PRES’<br>   OR JOB_ID = ‘AD_VP’;</p>
<h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>SELECT JOB_ID<br>FROM EMPLOYEES<br>WHERE JOB_ID IN(‘AD_PRES’,’AD_VP’);</p>
<h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><p>SELECT EMPLOYEE_ID,<br>         SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY BETWEEN 10000  AND SALARY  ;</p>
<h4 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h4><p>SELECT EMPLOYEE_ID,<br>       COMMISSION_PCT<br>FROM   EMPLOYEES<br>WHERE  COMMISSION_PCT IS NULL;        </p>
<h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  FIRST_NAME LIKE ‘A%’;<br>–A로 시작하는 문자열에 대해서</p>
<p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  FIRST<em>NAME LIKE ‘A</em>‘;<br>–A로시작하는 두글자 검색</p>
<p>SELECT EMPLOYEE_ID,<br>       FIRST_NAME<br>FROM   EMPLOYEES<br>ORDER BY FIRST_NAME DESC;</p>
<p>SELECT EMPLOYEE_ID, HIRE_DATE<br>FROM   EMPLOYEES;</p>
<h4 id="LOWER"><a href="#LOWER" class="headerlink" title="LOWER"></a>LOWER</h4><p>SELECT FIRST_NAME<br>FROM EMPLOYEES<br>WHERE LOWER(FIRST_NAME) LIKE ‘al%’;</p>
<h4 id="INITCAP"><a href="#INITCAP" class="headerlink" title="INITCAP"></a>INITCAP</h4><p>SELECT INITCAP(‘database managemaent system’) from dual;<br>–맨앞만 대문자로</p>
<p>SELECT INSTR( ‘DATABASE MANAGEMENT SYSTEM’ , ‘BASE’ ) FROM DUAL;<br>– BASE의 위치 찾기 (DB는 대부분 시작 인덱스가 1이다. )<br>SELECT CEIL( 4.99) FROM DUAL;<br>SELECT CEIL( 4.01) FROM DUAL;<br>– 해당 수보다 큰 정수값 (5 출력됨)</p>
<p>SELECT FLOOR( 4.99 ) FROM DUAL;<br>SELECT FLOOR( 4.00001) FROM DUAL;<br>– 해당 수보다 작은 정수값</p>
<p>SELECT ROUND(3.3364,3) FROM DUAL;<br>– 넷째자리에서 반올림함(3.336 출력됨)</p>
<p>SELECT MOD (9999,6) FROM DUAL;<br>– 나머지<br>SELECT POWER ( 2,10) FROM DUAL;<br>–2의 10승</p>
<h4 id="LPAD"><a href="#LPAD" class="headerlink" title="LPAD"></a>LPAD</h4><p>SELECT EMPLOYEE_ID, LPAD(SALARY, 10 , ‘<em>‘) FROM EMPLOYEES;<br>– 10칸을만들되 왼쪽 나머지는 </em>로 채울것</p>
<h4 id="TRIM"><a href="#TRIM" class="headerlink" title="TRIM"></a>TRIM</h4><p>SELECT TRIM( ‘#’ FROM ‘####DATA#BASE####’) FROM DUAL;<br>– 앞뒤 특정문자 제거</p>
<p>SELECT TRIM( ‘ ‘ FROM ‘  DATA  BASE    ‘) FROM DUAL;<br>– 앞뒤 공백 제거</p>
<p>SELECT  LTRIM(‘   DATA BASE   ‘,’ ‘) FROM DUAL;<br>– 왼쪽 공백 제거</p>
<h4 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h4><p>SELECT REPLACE(‘  DATA BASE  ‘, ‘ ‘ ,’’) FROM DUAL;<br>– 공백 제거</p>
<h4 id="CEIL"><a href="#CEIL" class="headerlink" title="CEIL"></a>CEIL</h4><p>SELECT CEIL( 4.99) FROM DUAL;<br>SELECT CEIL( 4.01) FROM DUAL;<br>– 해당 수보다 큰 정수값 (5 출력됨)</p>
<h4 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR"></a>FLOOR</h4><p>SELECT FLOOR( 4.99 ) FROM DUAL;<br>SELECT FLOOR( 4.00001) FROM DUAL;<br>– 해당 수보다 작은 정수값</p>
<h4 id="ROUND"><a href="#ROUND" class="headerlink" title="ROUND"></a>ROUND</h4><p>SELECT ROUND(3.3364,3) FROM DUAL;<br>– 넷째자리에서 반올림함(3.336 출력됨)</p>
<h4 id="TRUNC"><a href="#TRUNC" class="headerlink" title="TRUNC"></a>TRUNC</h4><p>SELECT TRUNC( 3.3864,1) FROM DUAL;<br>– 1자리만 남기고 버림(3.3나옴)</p>
<h4 id="MOD"><a href="#MOD" class="headerlink" title="MOD"></a>MOD</h4><p>SELECT MOD (9999,6) FROM DUAL;<br>– 나머지</p>
<h4 id="POWER"><a href="#POWER" class="headerlink" title="POWER"></a>POWER</h4><p>SELECT POWER ( 2,10) FROM DUAL;<br>–2의 10승</p>
<h4 id="SIGN"><a href="#SIGN" class="headerlink" title="SIGN"></a>SIGN</h4><p>SELECT SIGN(9999) FROM DUAL;<br>–   1나옴</p>
<p>SELECT SIGN(-9999) FROM DUAL;<br>–  -1나옴</p>
<p>SELECT SIGN(0) FROM DUAL;<br>–  0나옴</p>
<h4 id="ADD-MONTHS"><a href="#ADD-MONTHS" class="headerlink" title="ADD_MONTHS"></a>ADD_MONTHS</h4><p>SELECT ADD_MONTHS( SYSDATE, 3 ) FROM DUAL;<br>SELECT ADD_MONTHS( ‘15/01/01’,3 ) FROM DUAL;</p>
<p>SELECT LAST_DAY( SYSDATE ) FROM DUAL;<br>–해당월에 마지막 일</p>
<p>SELECT MONTHS_BETWEEN( ADD_MONTHS(SYSDATE,3), SYSDATE) FROM DUAL;</p>
<p>SELECT EMPLOYEE_ID,<br>       JOB_ID,<br>       ROUND(MONTHS_BETWEEN( END_DATE, START_DATE))<br>FROM   JOB_HISTORY;</p>
<p>SELECT NEXT_DAY( SYSDATE, 7) FROM DUAL;<br>–    1-&gt;SUN  7-&gt;SAT</p>
<h4 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR"></a>TO_CHAR</h4><p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘99999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자<br>– 5자리가 넘어가면 #####으로 표시된다.</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘000099999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자<br>–앞에 0000으로 채운다.</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘999,999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자</p>
<p>SELECT TO_CHAR( 3.141592, ‘9.99’) FROM DUAL;<br>– 3.14 나옴</p>
<p>SELECT TO_CHAR( 3.141592, ‘9999.9999’) FROM DUAL;<br>–     3.1416 나옴</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FM99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡겨준다</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FM$99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡겨준다</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FML99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡기고 원화를 넣어준다.</p>
<p>SELECT TO_CHAR(-12345,’99999MI’) FROM DUAL;<br>– 12345-  </p>
<p>SELECT TO_CHAR(-12345,’S99999’) FROM DUAL;<br>– -12345 출력</p>
<p>SELECT TO_CHAR(12345,’S99999’) FROM DUAL;<br>– +12345 출력</p>
<p>SELECT TO_CHAR(-12345,’99999PR’) FROM DUAL;<br>– <12345> 출력</12345></p>
<p>SELECT TO_CHAR(12345,’99999PR’) FROM DUAL;</p>
<p>SELECT TO_CHAR( 1234, ‘RN’) FROM DUAL;<br>–로마자로 표기</p>
<p>SELECT TO_CHAR( 1234, ‘XXXX’ ) FROM DUAL;<br>–16진수 대문자로 표기</p>
<p>SELECT TO_CHAR( 1234, ‘xxxx’ ) FROM DUAL;<br>–16진수 소문자로 표기</p>
<p>SELECT TO_NUMBER( ‘1234567’,’99999999’) FROM DUAL;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy-mm-dd’)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일”‘)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일” hh24”시”:mi:ss’)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일” day pm hh:mi:ss’)<br>FROM EMPLOYEES;</p>
<p>SELECT<br>TO_CHAR(SYSDATE, ‘yyyy”년”-mm”월”-dd”일” ddd”일째 되는날”‘)<br>FROM DUAL;</p>
<p>SELECT TO_CHAR(SYSDATE, ‘RR’)<br>FROM DUAL;</p>
<p>SELECT TO_CHAR(TO_DATE(‘30’,’RR’), ‘YYYY’) FROM DUAL;<br>– 현재 세기</p>
<p>SELECT TO_CHAR(TO_DATE(‘60’,’RR’), ‘YYYY’) FROM DUAL;<br>– 이전 세기</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SELECT FIRST_NAME || ‘ ‘ || LAST_NAME AS NAME FROM EMPLOYEES;&lt;br&gt;                           ||은 CONCAT&lt;/p&gt;
&lt;p&gt;SELECT SALARY AS “본봉”, SALA
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>2. 데이터베이스 기본</title>
    <link href="http://KKimSangHeon.github.io/2017/08/16/database2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/16/database2/</id>
    <published>2017-08-16T00:05:42.000Z</published>
    <updated>2017-08-16T04:19:06.546Z</updated>
    
    <content type="html"><![CDATA[<h4 id="데이터베이스의-기본개념-정의"><a href="#데이터베이스의-기본개념-정의" class="headerlink" title="데이터베이스의 기본개념 (정의)"></a>데이터베이스의 기본개념 (정의)</h4><p>-데이터의 집합 ( a Set of Data )<br>-여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) 데이터의 집합<br>-효율적으로 저장, 검색, 갱신할 수 있도록 데이터 집합들끼리 연관시키고 조직화되어야 한다.</p>
<h4 id="DBMS가-하는일"><a href="#DBMS가-하는일" class="headerlink" title="DBMS가 하는일"></a>DBMS가 하는일</h4><p>데이터 통합, 저장, 운영, 공유 기능 담당. 이를 위해 조직화 되어있어야 함.</p>
<h4 id="데이터베이스의-특성"><a href="#데이터베이스의-특성" class="headerlink" title="데이터베이스의 특성"></a>데이터베이스의 특성</h4><p>-실시간 접근성(Real-time Accessability)<br>    사용자의 요구를 즉시 처리할 수 있다.<br>-계속적인 변화(Continuous Evolution)<br>    정확한 값을 유지하려고 삽입·삭제·수정 작업 등을 이용해 데이터를 지속적으로 갱신할 수 있다.<br>-동시 공유성(Concurrent Sharing)<br>     사용자마다 서로 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근하고 이용할 수 있다.<br>-내용 참조(Content Reference)<br>     저장한 데이터 레코드의 위치나 주소가 아닌 사용자가 요구하는 데이터의 내용, 즉 데이터 값에 따라 참조할 수 있어야 한다.</p>
<h4 id="데이터베이스-관리-시스템-장점"><a href="#데이터베이스-관리-시스템-장점" class="headerlink" title="데이터베이스 관리 시스템 장점"></a>데이터베이스 관리 시스템 장점</h4><p>데이터 중복이 최소화<br>데이터의 일관성 및 무결성 유지<br>데이터 보안 보장</p>
<h4 id="데이터-베이스의-종류"><a href="#데이터-베이스의-종류" class="headerlink" title="데이터 베이스의 종류"></a>데이터 베이스의 종류</h4><p>객체 관계형 데이터베이스 (  Object Relation DataBase = ORDB )<br>     -관계형 데이터베이스에서 사용하는 데이터를 확장<br>     -관계형 데이터베이스를 객체 지향 모델링과 데이터를 관리하는 기능을 갖도록 확장한 것<br>NoSQL(Not Only SQL - SQL문 만을 이용하지 않아도 된다.)<br>     -대용량 데이터의 웹 서비스와 SNS, 클라우드 컴퓨팅의 확대 보급과 대중화로  최근 주목 받는 데이터베이스 기술      </p>
<h4 id="PK"><a href="#PK" class="headerlink" title="PK"></a>PK</h4><p>다른 행과 구분하기 위해 필요.<br>PK를 설정할 땐 비즈니스와 상관없는 컬럼을 지정하는것이 좋다.(비즈니스 변경시 귀찮아 질 수 있다.)<br>PK는 인덱싱이 자동으로 잡혀 빠르다.<br>릴레이션에서 튜플(행)을 구분하기 위하여 사용하는 기본 키<br>하나의 애트리뷰트, 또는 애트리뷰트의 집합(복합키) 가능<br>관리자에 의해 릴레이션 생성시 정의됨 (자동으로 Index생성됨)<br>동일한 PK를 지닌 레코드가 존재할 수 없음</p>
<h4 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h4><p>Candidate Key (후보키): 튜플을 식별할 수 있는 최소한의 애트리뷰트 집합<br>하나의 릴레이션에는 PK가 될 수 있는 키가 여러 개 있을 수 있음<br>유일성과 최소성이 있으면 candidate key가 될 수 있음.<br>Alternative Key (대체키): 후보키 중 기본키가 아닌것<br>Composite key (복합키): 둘 이상의 애트리뷰트가 하나의 Key를 이루는 경우</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;데이터베이스의-기본개념-정의&quot;&gt;&lt;a href=&quot;#데이터베이스의-기본개념-정의&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스의 기본개념 (정의)&quot;&gt;&lt;/a&gt;데이터베이스의 기본개념 (정의)&lt;/h4&gt;&lt;p&gt;-데이터의 집합 ( a S
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
</feed>
