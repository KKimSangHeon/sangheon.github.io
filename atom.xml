<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2019-02-08T06:49:24.432Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TR-069</title>
    <link href="http://KKimSangHeon.github.io/2019/02/08/TR-069/"/>
    <id>http://KKimSangHeon.github.io/2019/02/08/TR-069/</id>
    <published>2019-02-08T05:52:45.000Z</published>
    <updated>2019-02-08T06:49:24.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TR-069"><a href="#TR-069" class="headerlink" title="TR-069"></a>TR-069</h3><p>TR-069 (Technical Report 069 의 약자)는 DSL 포럼 (이후 Broadband 포럼으로 변경)의 기술 명세서이다. 이 문서의 정식 명칭은 CPE WAN Management Protocol (CWMP)이다. 이 문서는 말단 사용자 장치를 관리하기 위한 사용자 계층 프로토콜을 정의하고 있다.</p>
<p><code>TR-069 프로토콜은 양방향 SOAP/HTTP 을 기반으로 customer-premises equipment (CPE, 말단 사용자 장치) 와 Auto Configuration Servers (ACS,자동 설정 서버) 간 통신을 가능하게 한다.</code> 또한 안전한 자동 설정 기능을 제공하며 통합 환경 내에서 다른 CPE 관리 함수를 제어하고 동작시킬 수 있도록 해준다.</p>
<h3 id="TR-069-등장배경"><a href="#TR-069-등장배경" class="headerlink" title="TR-069 등장배경"></a>TR-069 등장배경</h3><p> 브로드밴드 시장이 활성화 되면서 여러개의 다른 종류의 인터넷 접속 또한 많이 생겨났다. ( 모뎀, 라우터, 게이트웨이, 세트톱박스, VoIP-phone 등). <code>또한 동시에 이러한 장비들을 설정하는 것은 더욱 복잡해졌다. 말단 사용자에게는 이러한 설정이 더욱 어려운데 이러한 이유로 TR-069 표준이 개발되었다. TR-069 표준은 여러가지 접속 방법에 대한 자동 설정을 제공한다.</code> 이에대한 구체적인 기술적인 사항은 Broadband 포럼에서 관리하고 발행하고 있다.<code>TR-069을 이용해서 말단 장비들은 자동 설정 서버 (Auto Configuration Servers) (ACS)에 접속하고 필요한 설정을 자동으로 받아오게 된다. 이렇게 함으로써 사용자가 따로 설정하지 않아도 필요한 서비스를 사용하는 것이 가능해진다.</code> TR-069는 DSL broadband 시장에서 터미널을 활성화하기 위해 현재 사용중인 표준이다.</p>
<h4 id="ACS-연결방식"><a href="#ACS-연결방식" class="headerlink" title="ACS 연결방식"></a>ACS 연결방식</h4><p>ACS와 연결하기 위해서는 다음의 데이터가 필요하다.</p>
<ul>
<li>ACS URL : ACS에 접속하기 위한 URL</li>
<li>주기적인 알림 : ACS와 주기적인 소통이 정의되어야 한다.</li>
<li>Username and password - 옵션데이터이나 보안을 위해 하는것이 좋다.</li>
</ul>
<h3 id="전송방식"><a href="#전송방식" class="headerlink" title="전송방식"></a>전송방식</h3><p>CWMP는 텍스트 기반 프로토콜입니다. 장치 (CPE)와 자동 구성 서버 (ACS)간에 전송 된 주문은 HTTP 혹은 HTTPS 를 통해 전송됩니다. 이 수준 (HTTP)에서 CPE는 클라이언트 역할을하며 ACS는 HTTP 서버 역할을합니다.</p>
<hr>
<h2 id="별첨"><a href="#별첨" class="headerlink" title="별첨"></a>별첨</h2><h4 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h4><p>SOAP(Simple Object Access Protocol)은 일반적으로 널리 알려진 HTTP, HTTPS, SMTP 등을 통해 XML 기반의 메시지를 컴퓨터 네트워크 상에서 교환하는 프로토콜이다. SOAP은 웹 서비스에서 기본적인 메시지를 전달하는 기반이 된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TR-069&quot;&gt;&lt;a href=&quot;#TR-069&quot; class=&quot;headerlink&quot; title=&quot;TR-069&quot;&gt;&lt;/a&gt;TR-069&lt;/h3&gt;&lt;p&gt;TR-069 (Technical Report 069 의 약자)는 DSL 포럼 (이후 Broadba
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="IOT" scheme="http://KKimSangHeon.github.io/categories/CS/IOT/"/>
    
    
  </entry>
  
  <entry>
    <title>OMA-DM</title>
    <link href="http://KKimSangHeon.github.io/2019/02/08/oma-dm/"/>
    <id>http://KKimSangHeon.github.io/2019/02/08/oma-dm/</id>
    <published>2019-02-08T01:29:08.000Z</published>
    <updated>2019-02-08T07:22:37.351Z</updated>
    
    <content type="html"><![CDATA[<h4 id="OMA-Open-Mobile-Alliance"><a href="#OMA-Open-Mobile-Alliance" class="headerlink" title="OMA(Open Mobile Alliance)"></a>OMA(Open Mobile Alliance)</h4><p>이동통신 서비스 애플리케이션 표준화 기구이며 일부 애플리케이션 프로토콜을 다루고 있는 산업 포럼의 증진에 응하기 위해 2002년 6월 설립되었다.</p>
<h4 id="Device-Management-DM"><a href="#Device-Management-DM" class="headerlink" title="Device Management(DM) ?"></a>Device Management(DM) ?</h4><p><code>장치 관리 기술이란 직접 수익을 창출하는 기술은 아니지만, 사업자가 응용 서비스를 시작하고 개선하고 관리하는 과정에서 겪는 문제점들을 해결해 줄 수 있는 효과적인 기술로서 이들 서비스를 통한 수익 창출에 효과적인 솔루션이다.</code><br>WAP, 3G Partnership Project(3GPP), Open Service Gateway Initiative(OSGi), Telemanagement Forum(TMF)등은 그들이 개발한 응용 서비스를 관리해 줄 수 있는 기술, 그들이 개발한 서비스 관리 기법을 가능하게 해줄 기술을 필요로 하게 되었다.</p>
<h4 id="OMA-DA"><a href="#OMA-DA" class="headerlink" title="OMA-DA"></a>OMA-DA</h4><p><code>장치(단말기) 안에 존재하는 데이터를 서버가 원격으로 접근할 수 있도록 하는 Technology와 규격을 OMA가 제정함</code></p>
<p>OMA 장치 관리 기술은 범세계적인 이동 통신 시장의 특별한 Use Case와 요구 사항을 고려하여 개발되고 있으며, 특히 이동 단말기의 종류, 운영체제, 지역, 네트워크 기술에 제한되지 않은 열린 기술이기 때문에 결국 기존의 일부 특정 네트워크와 단말기에 국한된 장치 관리 기술들을 통합하거나 대체할 수 있는 기술이다.</p>
<p>OMA-DM 은 초기 설정, 소프트웨어 및 펌웨어 관리, 원 격 제어, 진단 및 모니터링 등의 기능을 가지고 있으며, 스마트폰 등의 모바일 단말을 대 상으로 관리 서비스를 제공한다.</p>
<h4 id="OMA-DA-프로토콜"><a href="#OMA-DA-프로토콜" class="headerlink" title="OMA-DA 프로토콜"></a>OMA-DA 프로토콜</h4><p>두 통신 상대가 장치 관리 서비스를 제공하는 서버와 장치 관리 서비스를 받아 처리하는 클라이언트의 관계를 갖는다는 관점에서 비대칭 구조를 갖는 프로토콜이다.<br>장치 관리 서버의 역할은 클라이언트에게 장치 관리 명령을 내리는 것이고 클라이언트의 역할은 주어진 명령을 수행하는 것이다. 장치 관리 서버는 장치 관리 명령을 통해 장치에 설치된 응용 서비스의 파라미터를 변경할 수 있으며, 새로운 파라미터를 생성하도록 할 수 있으며, 장치 내부의 정보를 읽어낼 수 있으며, 응용 소프트웨어를 장치에 설치하고, 그것들의 실행을 원격으로 제어할 수 있을 뿐 아니라 운용체제(OS)를 다시 설치할 수도 있다. <u>결국, OMA Device Management 프로토콜이란 장치의 자원을 장치 관리 서버가 원격으로 접근할 수 있게하는 프로토콜이며, 장치 관리 프로토콜을 통해 관리할 수 있는 이러한 자원을 관리 객체(Management Object) 라고 부른다</u></p>
<p>서버와 클라이언트간의 장치 관리 <u>명령과 결과는 원격으로 XML에 기반한 마크업(Markup) 언어인 SyncML 메시지를 HTTP, WSP, OBEX 등의 유선, 무선, 또는 적외선 전송 프로토콜을 통해 서로 전송된다</u>. 뿐만 아니라, Device Management(DM) Tree라는 장치 관리 프로토콜만의 파일 시스템을 정의하고 각 노드를 URI를 통해 접근할 수 있도록 하였다. 그리고, 장치 고유의 데이터 베이스 또는 파일 시스템은 DM Tree와 메핑을 통해 장치 관리 서버에게 투사된다. 그러므로 어떤 장치는 결국 장치 관리 서버에게 있어서 하나의 DM Tree로 나타나게 되는 셈이다. 또한 동일한 장치라도 주어진 접근 권한에 따라 서로 다른 서버에게 다른 형태로 나타나게 된다.</p>
<h4 id="OMA-Device-Management-기술-규격의-구성"><a href="#OMA-Device-Management-기술-규격의-구성" class="headerlink" title="OMA Device Management 기술 규격의 구성"></a>OMA Device Management 기술 규격의 구성</h4><p>아래 그림의 규격 구성에 깔린 의도는 첫째로, <u>기본 규격(Base Protocol)을 다른“Silo”규격들과 분리함으로써 기본 규격이 오랜 기간동안 변하지 않고 꾸준한 안정화 과정을 지날 수 있도록 한다는 것이다.</u> 안정적인 기본 프로토콜의 바탕 위에 변화하는 이동 통신 시장의 요구를 충족시키기 위한 독립적인“Silo”프로토콜들을 정의하도록 함으로써 최소한의 노력으로 안정된 토대 위에서 시장이 필요로 하는 규격을 공급할 수 있는 방안을 마련하였다. 이것은, 각“Silo”규격들이 오직 기본 프로토콜에만 의존적이면서 서로 간에 독립적인 구조를 갖는 프로토콜이기 때문이기도 하다. 둘째로, <u>자료 동기 프로토콜과 SyncML 파서와 SyncML Toolkit을 공유함으로써 기존 SyncML Toolkit에 기반한 네트워크 인프라를 보호하고 재활용할 수 있도록 하기 위함이다.</u></p>
<img src="/2019/02/08/oma-dm/image1.PNG" alt="OMA Device Management 규격의 구성" title="OMA Device Management 규격의 구성">
<h4 id="Management-Object-MO"><a href="#Management-Object-MO" class="headerlink" title="Management Object (MO)"></a>Management Object (MO)</h4><p>OMA-DA의 관리 서버는 기기 내의 관리 객체(Management Object: MO)를 액세스함으로써 장치를 관리하도록 되어 있다. MO 에는 다음과 같은 것들이 있다.</p>
<p><code>FUMO(Firmware Update Management Object):</code> 펌웨어 업데이트 관리<br><code>SCOMO(Software Management):</code> 소프트웨어 컴포넌트 설치, 삭제, 관리<br><code>DiagMon MO(Diagnostics and Monitoring):</code> 배터리, 메모리, 라디오, QoS 파라메터 상태를 수집, 진단<br><code>ConnMo(Connectivity):</code> 베어러나 프록시 등 설정<br><code>DCMO(Device Capabilities):</code> 카메라, 블루투스, USB 등 주변기기를 원격으로 활성 화/비활성화하는 권한<br><code>LAWMO(Lock and Wipe):</code> 분실, 도난시 기기를 잠그거나 완전 삭제<br><code>BMO(Browser):</code> 브라우저 설정 관리: VirMO(Virtualization): 원격에 있는 가상 머신을 관리<br><code>Management Policy MO:</code> 어떤 이벤트가 발생하면 어떤 동작을 수행할 수 있도록 하는 정책을 배포 및 관리: OMA-DM 은 HTTP RESTful 메소드를 이용하며, XML 및 JSON 기반의 메시지를 이 용하고, SSL/TLS 보안 기술을 이용.</p>
<h4 id="OMA-DM의-가상시나리오"><a href="#OMA-DM의-가상시나리오" class="headerlink" title="OMA-DM의 가상시나리오"></a>OMA-DM의 가상시나리오</h4><p>어느 한 통신 사업자의 네트워크 관리자가 신규 가입자가 가입할 때 신청한 서비스 내역을 검토한 후 알맞은 응용 프로그램을 가입자 단말기에게 설치하도록 장치 관리 서버에게 요청한다. 장치 관리 서버는 Connectionless WAP Push방식으로 DM Notification메시지를 가입자 장치로 전송한다. DM Notification 메시지는 장치 관리 서버의 전자 서명이 포함된 메시지이며 보통 장치 관리 클라이언트에 의해 처리되고 장치 관리 클라이언트가 서버에게 장치 관리 세션을 요청하도록 한다. 장치 관리 세션이 만들어 지면 장치 관리 서버는 응용 프로그램을 장치 관리 명령을 통해 주어진 응용 프로그램을 장치로 다운로드 한 뒤 그 응용 프로그램이 정상적으로 동작할 수 있도록 사용자 계정, 비밀 번호 등 서비스에 필요한 설정값을 구성하여 사용자가 요구한 대로 동작할 수 있도록 한다. 마지막으로, 장치 관리 서버는 역시 장치 관리 명령을 통해 장치의 화면에 앞서 일어난 과정에 대해 설명하는 문구를 나타내어 사용자에게 알려 준다. 사용자는 설치된 응용 프로그램을 이용하여 서비스를 이용한다.</p>
<h4 id="OMA-DM의-ACL"><a href="#OMA-DM의-ACL" class="headerlink" title="OMA-DM의 ACL"></a>OMA-DM의 ACL</h4><p>OMA Device Management 프로토콜은 하나의 장치에 대해 여러 장치 관리 서버가 접근할 수 있도록 설계되었다. 예를 들어, 회사 업무용 소프트웨어를 설치한 단말기의 경우 그 회사의 장치 관리 서버를 구축하여 그 소프트웨어에 대한 사용자명, 비밀 번호, 게이트웨이 등 을 설정하여 회사 내 기밀 자원에 접근할 수 있도록 설정할 수 있으며, 다른 일반 서비스 즉, MMS 서비스 등의 관리를 위해선 외부 통신 사업자의 장치 관리 서버를 통해 장치에 접근하도록 하는 경우를 생각할 수 있다. 이를 위해 OMA Device management 프로토콜은 장치 내부에 존재하는 객체에 대한 관리 권한을 Access Control List(ACL)를 통해 제한하고 있다. ACL를 통해 클라이언트는 어떤 장치 관리 서버가 요청한 장치 관리 명령에 대한 수행 여부를 판단할 수 있다. 이러한 판단 기준은 특정 서버의 특정 장치 관리 명령에 대해 명시할 수가 있다.</p>
<h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><p>OMA 표준화 동향 - OMA Device Management [LG전자 이동통신기술연구소 김 태 현]<br>TTA저널 제 96호</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;OMA-Open-Mobile-Alliance&quot;&gt;&lt;a href=&quot;#OMA-Open-Mobile-Alliance&quot; class=&quot;headerlink&quot; title=&quot;OMA(Open Mobile Alliance)&quot;&gt;&lt;/a&gt;OMA(Open Mobi
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="IOT" scheme="http://KKimSangHeon.github.io/categories/CS/IOT/"/>
    
    
  </entry>
  
  <entry>
    <title>oneM2M</title>
    <link href="http://KKimSangHeon.github.io/2019/02/07/onem2m/"/>
    <id>http://KKimSangHeon.github.io/2019/02/07/onem2m/</id>
    <published>2019-02-07T11:46:50.000Z</published>
    <updated>2019-02-08T06:55:46.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="M2M-Machine-to-Machine"><a href="#M2M-Machine-to-Machine" class="headerlink" title="M2M(Machine to Machine)"></a>M2M(Machine to Machine)</h3><ul>
<li>사물 또는 지능화된 기기들이 사람을 대신해 통신의 양쪽 모두를 맡고 있는 기술을 의미</li>
<li>센서 등을 통해 전달, 수집, 가공된 위치, 시각, 날씨 등의 데이터를 다른 장비나 기기 등에 전달하기 위한 통신을 의미</li>
<li>M2M은 개별 장치들에 대한 연결성을 제공하는 것이 기본 목적</li>
</ul>
<hr>
<h3 id="M2M"><a href="#M2M" class="headerlink" title="M2M"></a>M2M</h3><h4 id="기구-설명"><a href="#기구-설명" class="headerlink" title="기구 설명"></a>기구 설명</h4><p>1.에너지, 교통, 국방, 공공서비스 등 산업별로 종속적이고 폐쇄적으로 운영되는, 파편화된 서비스 플랫폼 개발 구조를 벗어나 응용서비스 인프라(플랫폼) 환경을 통합하고 공유하기위한 사물인터넷 공동서비스 플랫폼 개발을 위해 발족된 사실상 표준화 단체임</p>
<p>2.oneM2M의 기술 워킹그룹(6개)은 요구사항을 다루는 Requirement(WG1), 시스템 구조를 다루는 Architecture(WG2), 프로토콜과 관련한 Protocols(WG3), 보안관련 Security(WG4), 장치관리 및 추상화, 시멘틱과 관련된 Management, Abstraction and Semantics(WG5), 테스킹 규격을 위한 Test(WG6)로 구성되어 있음</p>
<img src="/2019/02/07/onem2m/image1.PNG" alt="oneM2M표준 적용 후" title="oneM2M표준 적용 후">
<hr>
<h3 id="oneM2M-Release-1"><a href="#oneM2M-Release-1" class="headerlink" title="oneM2M Release 1"></a>oneM2M Release 1</h3><p><code>15.01월 Minimum Deployeable Solution을 모토로 Release 1 규격을 공개하여 다양한 IoT 서비스에서 필요한 공통 기능을 oneM2M 플랫폼의 RESTful API로 지원</code></p>
<ul>
<li>oneM2M 플랫폼이 제공하는 기능을 공통 서비스 기능(CSF, Common Services Function) 으로 정의함</li>
<li>공통 기능은 사물인터넷 서비스 애플리케이션에서 자주 사용되는 기능을 정의한 것으로 데이터 저장/공유, 장치 관리, 그룹 관리, 구독/통지(Subscription/Notification), 위치 정보, 과금 등의 기능을 포함하며, 보안 기능은 기본적인 인증, 접근 제어 등의 기능을 제공</li>
<li>또한, oneM2M 코어 프로토콜 메시지(Primitive)는 CoAP, HTTP 및 MQTT 프로토콜 메시지를 통해 전송됨. oneM2M의 코어 프로토콜은 향후 추가 프로토콜 바인딩(Binding)을 지원할 수 있도록 특정 메시지 프로토콜에 종속성을 가지지 않도록 개발되었음</li>
</ul>
<hr>
<h3 id="oneM2M-Release-2"><a href="#oneM2M-Release-2" class="headerlink" title="oneM2M Release 2"></a>oneM2M Release 2</h3><p><code>16.07월 다양한 IoT 기술과의 연동성을 강조하여 Release 2 규격을 공개하여 OCF, AllJoyn, LwM2M, 3GPP Rel-13 등의 기술과의 연동성을 제공하고 가전 기기에 대한 정보 모델 표준을 제공 및 다양한 추가 기능을 제공</code></p>
<ul>
<li>다양한 인더스트리 사물인터넷 플랫폼 및 네트워크 연동이 주 목적</li>
<li>사물인터넷 연동으로는 AllJoyn, OCF(Open Connectivity Foundation) 및 Lightweight M2M 기술과의 연동 규격을 제공함</li>
<li>네트워크 연동으로는 3GPP Rel-13 네트워크와 연동을 위한 트래픽 패턴 설정(Traffic Pattern Configuration) 기능을 정의하고 있으며 릴리즈 3에 모니터링 등의 연동 기능을 추가하기 위한 기술 보고서를 작업을 지속하고 있음</li>
<li>높은 디바이스 및 애플리케이션의 호환성을 보장하기 위해 우선적으로 가전 디바이스에 대한 데이터 모델을 정의함<ul>
<li>릴리즈 1에서는 가전 제어 및 센싱 정보를 교환하기 위해 사전에 애플리케이션 간 정의한 데이터 모델을 container 및 contentInstance 자원 타입을 이용했다. 이에 비해 릴리즈 2에서는 oneM2M 플랫폼을 이용하는 모든 애플리케이션이 표준에 정의된 가전 디바이스 데이터 모델을 사용함으로써 가전 제조사 및 애플리케이션 개발자 간에 별도의 데이터 모델을 정의하는 번거로움을 없애고 제품과 애플리케이션 간의 호환성을 보장한다.</li>
</ul>
</li>
<li>프로토콜 바인딩은 동시 송수신(Full-duplex)을 지원하는 WebSocket이 추가됨</li>
</ul>
<hr>
<h3 id="oneM2M-Release-3"><a href="#oneM2M-Release-3" class="headerlink" title="oneM2M Release 3"></a>oneM2M Release 3</h3><p><code>Release 3 표준은 기존 연동, 시맨틱, 보안 등의 기능을 향상하고, oneM2M 시장 확대를 위한 개발자 가이드, Product Profile을 추가 개발</code></p>
<p>1.3GPP Rel-13/14 네트워크 연동</p>
<ul>
<li>UE Reachability Schedule, Location Update, Roaming, Schedule sync 지원 등</li>
</ul>
<p>2.Interworking</p>
<ul>
<li>추가된 Proximal IoT 연동 규격(TS-0033)에서 oneM2M 시스템이 아닌 디바이스나 서비스를 연동하기 위한 범용적인 연동 기술을 정의</li>
<li>OSGi, Modbud, DDS, OPC-UA에 대한 연동 기술 스터디 진행</li>
</ul>
<p>3.Transaction 지원</p>
<ul>
<li>어플리케이션의 다중 리소스 엑세스(Create, Retrieve,Update, Delete)에 대한 oneM2M 플랫폼의 트랜잭션 관리<br>(Execute, Commit, Abort, Lock) 기능 제공</li>
</ul>
<p>4.Semantics 지원 기능 향상</p>
<ul>
<li>시맨틱 매쉬업, 트리플(Triple) 쿼리, 트리플 데이터 검증 기능 추가</li>
</ul>
<p>5.멀티캐스트 기반 그룹 관리</p>
<ul>
<li>기존 그룹 관리 기능을 IP 멀티캐스트 및 3GPP MBMS (Multimedia Broadcast Multicast Service)를 활용할 수 있도록 기능 확장</li>
</ul>
<p>6.기타 추가 기능</p>
<ul>
<li>멀티미디어 스트리밍, 다중 리소스 구독(Cross-resource Subscription),AE Reachability Management, Distributed Authorization 등 개발자 가이드 추가</li>
<li>HTTP, CoAP, MQTT 프로토콜 바인딩, Long polling, device managment, semantics 기능 구현 개발자 가이드 작성 완료</li>
<li>보안 기능 개발자 가이드 작성 중</li>
</ul>
<p>7.Product Profile</p>
<ul>
<li>oneM2M 플랫폼 기능을 요약한 Feature Catalogue (TS-0031) 과 연계하여 oneM2M 제품 개발 시 구현할 기능을 프로파일 화로 정의하고 해당 기능들은 시험인증 규격에 반영됨</li>
</ul>
<hr>
<h3 id="oneM2M-공통-플랫폼-기능-모델"><a href="#oneM2M-공통-플랫폼-기능-모델" class="headerlink" title="oneM2M 공통 플랫폼 기능 모델"></a>oneM2M 공통 플랫폼 기능 모델</h3><img src="/2019/02/07/onem2m/image2.PNG" alt="oneM2M 공통 플랫폼 기능 모델" title="oneM2M 공통 플랫폼 기능 모델">
<p><code>Application Entity (AE) :</code> <u>M2M 서비스를 제공하기 위한 어플리케이션 기능 로직을 포함하는 논리적인 엔티티를 의미하며</u> 각각의 AE는 유일한 AE 식별자인 AE-ID로 구별된다. AE에 대한 예로서는 관제 시스템, 스마트그리드 시스템, 헬스케어 시스템을 위한 어플리케이션 등이 고려되어질 수 있다.</p>
<p><code>Common Service Entity (CSE) :</code> <u>oneM2M 서비스 플랫폼에서 공통적으로 제공되어야 하는 공통 서비스 기능을 제공하는 부분</u>으로서, <u>oneM2M 에서 정의한 CSE에는 총 12개의 Common Service Function (CSF) 공통 서비스 기능을 포함</u>하고 있다. CSF는 CSE에서 제공되어져야 하는 기능들 중 비슷한 기능들을 그룹화 한 논리적인 그룹으로, 각각의 CSF 들은 이후에 설명되어질 리소스를 통해서 외부에 노출되어 서비스를 제공할 수 있다. 해당 CSE는 AE를 구별하는 방식과 마찬가지로 CSE의 식별자인 CSE-ID를 통해서 유일하게 식별 가능하다.</p>
<p><code>Network Service Entity (NSE) :</code> CSE가 위치한 미들웨어의 <u>하부 네트워크 서비스에 대한 추상화 영역으로 CSE에게 네트워크 서비스를 제공한다</u>. 제공 가능한 네트워크 서비스의 예로서는 디바이스 관리, 위치관리, 3GPP 이동통신망에 연결되어있는 IoT 디바이스 트리거링 서비스 등이며 해당 서비스를 위해서는 네트워크 서비스가 관여되어진다.</p>
<p><code>Mca (M2M Communication with AE) 참조 포인트 :</code> <u>AE 와 CSE 간의 포인트를 가리키며</u>, 해당 AE가 CSE에서 제공하는 공통 서비스 기능을 이용하기 위한 API 의 연결 포인트이고, CSE 와 AE간의 통신을 위한 연결 포인트이다.</p>
<p><code>Mcc (M2M Communication with CSE) 참조 포인트</code> : <u>두 개의 CSE간의 포인트를 가리키며</u>, CSE와 다른 CSE간의 서비스 공개 및 통신을 가능하게 하는 연결 포인트이다.</p>
<p><code>Mcn (M2M Communication with NSE) 참조 포인트 :</code><u>CSE와 NSE간의 포인트를 가리키며</u>, CSE가 NSE에서 제공되는 네트워크 서비스 기능을 이용할 수 있는 연결 포인트이면서 네트워크 망으로의 데이터 전달 연결 포인트이다.</p>
<p><code>Mcc’(M2M Commmunication with CSE of different M2M Service Provider) 참조 포인트 :</code> <u>서로 다른 서비스 프로바이더에 종속적인 CSE간의 포인트를 가리키며</u>, 서비스 프로바이더 간 CSE사이의 서비스 공개 및 통신을 지원하는 연결 포인트이다.</p>
<h3 id="oneM2M-노드-구성모델-아키텍처"><a href="#oneM2M-노드-구성모델-아키텍처" class="headerlink" title="oneM2M 노드 구성모델 아키텍처"></a>oneM2M 노드 구성모델 아키텍처</h3><img src="/2019/02/07/onem2m/image3.PNG" alt="노드 구성모델" title="노드 구성모델">
<p>oneM2M의 노드 구성모델은 다음과 같다.</p>
<p><code>Infrastructure Node (IN) :</code> <u>인프라스트럭쳐 도메인에 위치하고 있는 IN-CSE를 포함하는 서버단에 위치하는 기기를 의미한다. 해당 IN은 서비스 프로바이더 당 한 개의 IN을 지원하는 것으로 정의되며 IN은 한 개의 CSE로만 구성이 되거나 1개 이상의 AE를 포함하는 형태로 구성되어질 수 있다.</u> 논리적 기기인 IN에 매칭되는 물리적 기기로는 서버를 예로 들 수 있다. IN은 Mcc 참조 포인트를 통해서 한 개 이상의 MN과 한 개 이상의 ASN과 연동되며 Mca 참조 포인트를 통해서 한 개 이상의 ADN과 연동될 수 있다. Mcc’을 통한 연동은 다른 서비스 프로바이더 영역에 위치한 IN노드와 연동된다.</p>
<p><code>Middle Node (MN) :</code> <u>필드 도메인에 위치한 MN-CSE를 포함하는 논리적 기기로 일반적으로 여러 센서나 엑추에이터들이 연결되는 게이트웨이가 이에 해당한다고 보면 된다. MN은 한 개의 CSE로 구성이 되거나, 하나의 CSE에 1개 이상의 AE 를 포함하는 형태로 구성되어질 수 있다.</u> MN은 Mcc참조 포인트를 통해서 적어도 하나의 IN 또는 MN과 연동되며 Mcc 참조 포인트를 통해서 ASN과 연동 및 Mca 참조 포인트를 통한 ADN과 연동될 수 있다.</p>
<p><code>Application Service Node (ASN) :</code> <u>필드 도메인에 위치한 ASN-CSE와 ASN-AE를 포함하고 있는 논리적 기기이다. 해당 ASN은 한 개의 CSE와 1개 이상의 AE를 포함하는 형태로 구성되며 논리적 ASN에 매칭되는 물리적 기기로는 M2M 디바이스를 예로 들 수 있다. ASN 은 Mcc 참조 포인트를 통해서 한 개의 MN 또는 한 개의 IN에 연동된다.</u></p>
<p><code>Application Dedicated Node (ADN) :</code> <u>필드 도메인에 위치한 ADN-AE를 포함하고 CSE를 포함하지 않는 논리적 기기이다.</u> 즉 해당 ADN는 CSE가 없고, 1개 이상의 AE를 포함한다. 논리적 ADN에 매칭되는 물리적 기기로는 센서 및 액츄에이터와 같은 자원제약적인 M2M 디바이스를 예로 들 수 있다. ADN은 Mca 참조 포인트를 통해서 MN 또는 IN과 연동되는 구조를 갖는다.</p>
<hr>
<h3 id="oneM2M-공통-서비스-기능"><a href="#oneM2M-공통-서비스-기능" class="headerlink" title="oneM2M 공통 서비스 기능"></a>oneM2M 공통 서비스 기능</h3><p><u>oneM2M 공통 서비스 플랫폼 개발과 관련하여 아키텍처 표준 문서에서 다루고 있는 부분은 Common Service Entity (CSE)에 대한 기능들을 표준화하는 것이다.</u> 그리고 해당 기능들은 oneM2M이 지향하고 있는 리소스 기반 아키텍처 구조를 기반으로 각각의 리소스 타입으로 해당 공통 서비스 기능들이 표현되고 있다. oneM2M 표준화 작업 진행방식은 전체적으로 유스케이스 및 요구사항을 다루고, 이를 통해 필요한 기능들을 도출해 내어 시스템 아키텍처를 디자인하고, 상세 프로토콜을 개발하는 3GPP 표준화 방식에서 취한 Stage 기반의 접근 방식으로 표준 개발을 진행하였다.</p>
<p>각각의 기능은 리소스 타입으로 표현되고 Mcc, Mca, Mcn 참조 포인트를 통해서 서비스가 제공된다.<br><img src="/2019/02/07/onem2m/image4.PNG" alt="공통 서비스 기능" title="공통 서비스 기능"></p>
<p><code>Common Service Function (CSF) :</code> 기능설명<br><code>Registration (REG) :</code> REG CSF는 AE와 CSE 또는 CSE와 CSE간의 등록을 담당하며, 이러한 등록 관계를 통해서 oneM2M 엔티티간의 접속 및 접근이 가능하며 oneM2M 엔티티간의 데이터 전달을 통한 oneM2M 서비스 구성이 가능해진다<br><code>Discovery (DIS) :</code> DIS CSF는 기본적으로 oneM2M 리소스 및 어트리뷰트에 담긴 서비스 정보에 대한 검색 기능을 제공한다. 기본적으로 텍스트 기반의 검색이 제공 되어지며, 그 이외에도 특징 기반의 검색 등이 제공되어질 수 있다.<br><code>Security (SEC) :</code> SEC CSF는 oneM2M 공통 서비스 플랫폼의 공통 기능으로서 접근권한, 키 관리와 같은 보안 메커니즘을 제공하는 기능을 담당한다.<br><code>Group Management (GMG) :</code> GMG CSF는 리소스들을 그룹으로 관리할 수 있도록 하는 기능을 담당한다. 이를 통해, 비슷한 역할을 하거나, 공동으로 관리되어져야 하는 리소스들을 그룹으로 관리할 수 있다.<br><code>Data Management &amp; Repository (DMR) :</code>DMR CSF는 기본적으로 데이터 저장소의 기능을 제공하는 것이다. 또한 데이터의 타입, 시맨틱 정보, 시간, 위치와 관련한 데이터의 분류 및 데이터 포맷의 변경 및 데이터 처리 기능을 제공한다.<br><code>Subscription &amp; Notification (SUB) :</code> SUB CSF는 리소스에 대한 구독정보를 관리하고 리소스 및 어트리뷰트에 대한 업데이트 발생, Child 리소스의 생성, 삭제 등 해당 리소스에 대한 트랙킹 및 관련된 변화 정보를 통지하는 역할을 담당한다.<br><code>Device Management (DMG) :</code> DMG CSF는 디바이스 관리 기능을 제공하는 공통 서비스 기능이다. 디바이스 관리라고 함은 디바이스에 설치된 펌웨어에 대한 관리, 디바이스 하드웨어 리소스 관리, 디바이스 동작 설정 관리, 진단을 포함한다.<br><code>Application &amp; Service Management (ASM) :</code> ASM CSF는 ADN, ASN, MN, IN에 위치한 AE와 CSE 소프트웨어에 대한 관리 기능을 담당한다. 해당 기능은 AE와 CSE의 재설치, 업데이트, 고장탐지, 설정에 관한 기능을 제공한다.<br><code>Communication Management &amp; Delivery Handling (CMDH) :</code> CSE간, AE와 CSE간, 데이터 전달 시에 NSE를 통한 데이터 전달 서비스를 제공하는 기능을 담당한다. CMDH CSF는 메시지 전달을 위해서 언제 보낼건지, 어떤 네트워크 연결을 활용하여 보낼지를 결정한다.<br><code>Network Service Exposure, Service Execution &amp; Triggering (NSSE) :</code>NSSE CSF는 기저 네트워크와 관련된 통신을 관리하며 Mcn 참조 포인트를 통한 네트워크 접근 서비스를 제공한다.<br><code>Location (LOC):</code> LOC CSF는 AE의 위치 정보 요청에 대해서 ASN, MN과 관련된 위치정보를 획득하기 위한 방법을 제공하는 CSF이다.<br><code>Service Charging &amp; Accounting (SCA) :</code> SCA CSF는 oneM2M 공통 서비스 플랫폼을 통해서 제공되는 서비스에 대한 과금 체계 및 방법에 대한 기능을 제공한다.</p>
<hr>
<h3 id="별첨"><a href="#별첨" class="headerlink" title="별첨"></a>별첨</h3><h4 id="LwM2M-Lightweight-M2M"><a href="#LwM2M-Lightweight-M2M" class="headerlink" title="LwM2M(Lightweight M2M)"></a>LwM2M(Lightweight M2M)</h4><p>LwM2M(Lightweight M2M)은 M2M 또는 IoT 장치 관리를 위하여 LwM2M 서버와 LwM2M 장치에 있는 LwM2M 클라이언트 간의 응용 프로그램 계층 통신 프로토콜을 정의함. 소형기기를 포함하여 다양한 사물인터넷 기기를 지원하기 위한 기기 관리 표준임.<br>1)센서 또는 셀룰러 네트워크를 통한 장치 관리 기능 제공<br>2)네트워크에서 장치로 서비스 데이터 전송<br>3)대부분의 모든 응용 프로그램의 요구사항을 충족하도록 확장 을 위하여 설계됨. 자원이 제한된 LwM2M 디바이스를 감안하여 효율적인 리소스 데이터 모델을 기반으로 가볍고 간결한 프로토콜로 IETF CoAP을 사용하고 있음</p>
<h4 id="REST-Representational-State-Transfer"><a href="#REST-Representational-State-Transfer" class="headerlink" title="REST(Representational State Transfer)"></a>REST(Representational State Transfer)</h4><p>웹 상의 자료를 HTTP위에서 별도의 전송 계층 없이 전송하기 위한 아주 간단한 인터페이스이다. URI는 자원을 표현하는 데에 집중하고 행위에 대한 정의는 HTTP METHOD를 통해 하는 것이 REST한 API를 설계하는 중심 규칙이다.</p>
<h4 id="CoAP"><a href="#CoAP" class="headerlink" title="CoAP"></a>CoAP</h4><ul>
<li>Internet에서 IoT device처럼 제한된 computing 성능을 갖는 device들의 통신을 위해 IETF의 CoRE(Constrained RESTful Environment) working-group에서 표준화한 protocol</li>
<li>신뢰성 있는 동기 수송 방식의 TCP와 그 위의 HTTP는 많은 resource제약을 가진 IoT 환경에서는 적합하지 않아 비동기 수송 방식의 UDP상에서 <u>UDP의 단점을 보완하는 개념을 포함한 통신 protocol</u></li>
</ul>
<h4 id="OCF"><a href="#OCF" class="headerlink" title="OCF"></a>OCF</h4><p><code>사물인터넷 구현 시 REST 구조 기반으로 경량형 CoAP 프로토콜로 사물인터넷 장치들을 연결하고 장치에 존재하는 자원들을 상호제어 할 수 있게 하는 표준 플랫폼 기술</code></p>
<ul>
<li>OCF 아키텍처는 클라이언트-서버의 방식으로 RESTful 아키텍처를 기반으로 리소스를 관리하는 모델</li>
<li>사물인터넷 디바이스의 제한된 성능을 고려하여 CoAP(Constrained Application Protocol)을 활용하여 경량 기기에서의 동작도 고려함</li>
</ul>
<hr>
<h4 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h4><p>MQTT(Message Queue for Telemetry Transport)는 M2M 또는 IoT 기기와 G/W의 연동을 위해 정의된 프로토콜입니다. 경량 프로토콜로 저전력 장비에서도 운용 가능하며 network bandwidth가 작은 곳에서도 충분히 운용 가능하도록 설계된 프로토콜입니다.</p>
<h4 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h4><p><a href="http://www.iotocean.org/common/download.asp?pach=/upload/Board/&amp;file=6VXFR20174271377.pdf" target="_blank" rel="external">http://www.iotocean.org/common/download.asp?pach=/upload/Board/&amp;file=6VXFR20174271377.pdf</a><br>(IoT 표준/기술 동향 2017-9호) 2017-9호_oneM2M Release 3 표준<br><a href="http://www.iotforum.kr/board1/read.asp?bdNum=101&amp;sc_field=&amp;sc_word=&amp;bdCode=13350" target="_blank" rel="external">http://www.iotforum.kr/board1/read.asp?bdNum=101&amp;sc_field=&amp;sc_word=&amp;bdCode=13350</a><br><a href="http://woowabros.github.io/experience/2017/08/11/ost_mqtt_broker.html" target="_blank" rel="external">http://woowabros.github.io/experience/2017/08/11/ost_mqtt_broker.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;M2M-Machine-to-Machine&quot;&gt;&lt;a href=&quot;#M2M-Machine-to-Machine&quot; class=&quot;headerlink&quot; title=&quot;M2M(Machine to Machine)&quot;&gt;&lt;/a&gt;M2M(Machine to Mach
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="IOT" scheme="http://KKimSangHeon.github.io/categories/CS/IOT/"/>
    
    
  </entry>
  
  <entry>
    <title>1.1 테이블과 인덱스의 분리</title>
    <link href="http://KKimSangHeon.github.io/2019/02/07/db/"/>
    <id>http://KKimSangHeon.github.io/2019/02/07/db/</id>
    <published>2019-02-07T11:29:44.000Z</published>
    <updated>2019-02-07T11:31:59.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-테이블과-인덱스의-분리"><a href="#1-1-테이블과-인덱스의-분리" class="headerlink" title="1.1 테이블과 인덱스의 분리"></a>1.1 테이블과 인덱스의 분리</h3><p>테이블과 인덱스가 분리되어 있는것은 관계형 DB의 일반적인 형태이다.<br>과거엔 키와 데이터가 붙어있었다면 현재는 키를 통해 데이터를 한번 더 찾아가야한다.</p>
<h4 id="1-1-1-분리형-테이블의-구조-7p"><a href="#1-1-1-분리형-테이블의-구조-7p" class="headerlink" title="1.1.1 분리형 테이블의 구조 7p"></a>1.1.1 분리형 테이블의 구조 7p</h4><p>활용가능한 블록을 Free List에 기록했다가 데이터를 저장할 때 제공한다.<br>로우가 끊어지게 될 경우 Free Space를 활용하여 재배치를 하도록 한다.</p>
<p>테이블스페이스 : 논리적인 저장공간을 의미하며 이는 물리적인 데이터 파일로 구성된다.<br>세그먼트 : 테이블 스페이스를 용도별로 나눈것<br>오브젝트 : 세그먼트에 들어올 수 있는것.<br>단위 오브젝트 : 테이블이나 인덱스의 파티션들 파티션된 테이블의 각 파티션이 서로 다른 테이블 스페이스에 존재할 수 있다.<br>ROW ID : 해당값을 통해 물리적인 저장 위치를 찾아낼 수 있다. 이는 논리적인 값으로서 블록 내에서 로우의 위치가 이동하더라도 변하지 않는다.<br>로우의 이주(Migration) : 블록 밖으로 로우가 이동할 경우 이전 블록에 옮긴 주소를 넣어놓는 방법이 있는데 이에 따른 오버헤드를 감수해야한다. 이를 로우의 이주라 한다.<br>체인 : 로우의 길이가 블록을 넘을 때 블록을 연결해서 저장해야하는데 이를 체인이 발생했다라고 한다.</p>
<h4 id="1-1-2-클러스터링-팩터"><a href="#1-1-2-클러스터링-팩터" class="headerlink" title="1.1.2 클러스터링 팩터"></a>1.1.2 클러스터링 팩터</h4><p>클러스터링 팩터 : 인덱스 로우의 순서와 테이블에 저장되어있는 데이터 로우의 위치가 얼마나 비슷한 순서로 저장되어 있느냐에 대한 정도를 의미.<br>클러스터링 팩터는 액세스 효율에 직접적인 영향 : 클러스터링 팩터가 좋은 인덱스로 액세스를 하면 적은 블록을 액세스 하게 되므로<br>클러스터링 팩터를 향상시키는 방법</p>
<ol>
<li>임의의 위치에 저장하는 방식.</li>
<li>주기적으로 테이블 재생성.</li>
</ol>
<h4 id="1-1-3-분리형-테이블의-액세스-영향-요소"><a href="#1-1-3-분리형-테이블의-액세스-영향-요소" class="headerlink" title="1.1.3 분리형 테이블의 액세스 영향 요소"></a>1.1.3 분리형 테이블의 액세스 영향 요소</h4><h5 id="가-넓은-범위의-액세스-처리에-대한-대처방안"><a href="#가-넓은-범위의-액세스-처리에-대한-대처방안" class="headerlink" title="가) 넓은 범위의 액세스 처리에 대한 대처방안"></a>가) 넓은 범위의 액세스 처리에 대한 대처방안</h5><p>이는 임의의 영역에 데이터가 저장되는 형태로서 액세스할 경우 대가가 크다.</p>
<ul>
<li>소형테이블의 경우 : 임의로 저장해도 액세스 할 때도 큰 영향이 없다.</li>
<li>중형테이블의 경우 : 어느컬럼에 맞추어 저장할것인지 결정</li>
<li>대형테이블의 경우 :<ol>
<li>단순 저장형(ex: log) : 신속한 저장이 요구되므로 분리형이 가장 적절하다. 또한 데이터의 양이 많으므로 파티션과 같은 조치 필요</li>
<li>주로 랜덤액세스이며 다양하지 않은 액세스 형태(ex: 고객): 분리형 구조가 적당. 한번에 대량의 급격히 들어오는 경우가 드물고 범위처리를 자주 하지도 않음.</li>
<li>데이터가 지속적으로 증가 및 다양하 형태의 액세스(ex: 매출) : 파티션을 진행하고 인덱스를 전략적으로 구성하고 SQL 실행계획 최적화.</li>
</ol>
</li>
</ul>
<h5 id="나-클러스터링-팩터-향상-전략"><a href="#나-클러스터링-팩터-향상-전략" class="headerlink" title="나) 클러스터링 팩터 향상 전략"></a>나) 클러스터링 팩터 향상 전략</h5><p>주기적으로 테이블을 재성성시켜주는 방법이 최고! (이때는 관련 인덱스를 모두 제거하거나 비활성화 할것- 저장속도 저하유발 및 인덱스 분할로 인한 저장밀도가 나빠짐)<br>이를 위해 가장 유리한 형태로 저장되도록 하고 자주 범위처리를 하는 컬럼들로 정렬하자!  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-테이블과-인덱스의-분리&quot;&gt;&lt;a href=&quot;#1-1-테이블과-인덱스의-분리&quot; class=&quot;headerlink&quot; title=&quot;1.1 테이블과 인덱스의 분리&quot;&gt;&lt;/a&gt;1.1 테이블과 인덱스의 분리&lt;/h3&gt;&lt;p&gt;테이블과 인덱스가 분리되어
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/CS/Data-Base/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo command not found 에러 발생시</title>
    <link href="http://KKimSangHeon.github.io/2019/01/22/hexoerr/"/>
    <id>http://KKimSangHeon.github.io/2019/01/22/hexoerr/</id>
    <published>2019-01-21T15:12:31.000Z</published>
    <updated>2019-01-21T15:14:38.104Z</updated>
    
    <content type="html"><![CDATA[<p>npm이 global로 설치한 것을 찾지 못할 때 발생한다.</p>
<p>환경변수에 아래의 경로를 추가해 주도록 하자</p>
<p><code>C:\Users\SangHeon\AppData\Roaming\npm</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm이 global로 설치한 것을 찾지 못할 때 발생한다.&lt;/p&gt;
&lt;p&gt;환경변수에 아래의 경로를 추가해 주도록 하자&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\Users\SangHeon\AppData\Roaming\npm&lt;/code&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>StringBuffer, StringBuilder</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java4/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java4/</id>
    <published>2018-11-20T00:37:37.000Z</published>
    <updated>2018-11-20T00:43:28.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String-클래스"><a href="#String-클래스" class="headerlink" title="String 클래스"></a>String 클래스</h3><p>String은 내부의 문자열을 수정할 수 없다. StringBuffer()메소드는 내부의 문자를 대치하는 것이 아니라, 대치된 새로운 문자열을 리턴한다.<br>문자열을 결합하는 + 연산을 많이 사용하면 할수록 그만큼 String 객체의 수가 ㅇ늘어나기 때문에 프로그램 성능을 느리게 한다. 문자열을 변경하는 작업이 많을 경우 StringBuffer, StringBuilder클래스를 사용하는것이 좋다. 이 두 클래스는 내부 버퍼에 문자열을 저장해두고 그 안에서 추가, 수정, 삭제 작업을 할 수 있도록 설계되어 있기 때문이다.<br>StringBuffer는 멀티 스레드 환경에서 사용할 수 있도록 동기화가 적용되어 있어 스레드에 안전하지만 StringBuilder는 단일 스레드 환경에서만 사용하도록 설계되어 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;String-클래스&quot;&gt;&lt;a href=&quot;#String-클래스&quot; class=&quot;headerlink&quot; title=&quot;String 클래스&quot;&gt;&lt;/a&gt;String 클래스&lt;/h3&gt;&lt;p&gt;String은 내부의 문자열을 수정할 수 없다. StringBuffe
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>리플렉션</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java3/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java3/</id>
    <published>2018-11-20T00:37:34.000Z</published>
    <updated>2018-11-20T00:43:01.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="리플렉션"><a href="#리플렉션" class="headerlink" title="리플렉션"></a>리플렉션</h3><p>java.lang.reflect 패키지에 소속되어있는 메소드들로 getDeclaredConstructors(), getDeclaredFields(), getDeclaredMethods()가 있다.<br>getDeclaredFields(), getDeclaredMethods()는 클래스에 선언된 멤버만 가져오고 상속된 멤버는 가져오지 않는다. 상속된 멤버도 얻고 싶다면 getFields(), getMethods()를 이용해야 한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;리플렉션&quot;&gt;&lt;a href=&quot;#리플렉션&quot; class=&quot;headerlink&quot; title=&quot;리플렉션&quot;&gt;&lt;/a&gt;리플렉션&lt;/h3&gt;&lt;p&gt;java.lang.reflect 패키지에 소속되어있는 메소드들로 getDeclaredConstructors(),
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>익명클래스</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java2/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java2/</id>
    <published>2018-11-20T00:37:31.000Z</published>
    <updated>2018-11-20T00:42:29.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="익명클래스"><a href="#익명클래스" class="headerlink" title="익명클래스"></a>익명클래스</h3><p>익명객체는 이름이 없는 객체를 말한다. 이는 단독으로 생성할 수 없고 클래스를 상속하거나 인터페이스를 구현해야만 생성할 수 있다. UI 이벤트 처리 객체나 스레드 객체를 간편하게 생성할 목적으로 많이 활용된다.<br>익명클래스는 생성자를 선언할 수 없다는 특징이 있으며 클래스가 재사용되지 않을 때 사용하는것이 좋다.<br>익명 자식 객체에 새롭게 정의된 필드와 메소드는 익명자식 객체 내부에서만 사용되고, 외부에서는 필드와 메소드에 접근할 수 없다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"7시 인남"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annoymous</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//필드 초기값으로 대입</span></div><div class="line">	Person field = <span class="keyword">new</span> Person() &#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">( )</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"출근~"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"6시 인남"</span>);</div><div class="line">			work( );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">( )</span> </span>&#123;</div><div class="line">	<span class="comment">//로컬 변수값으로 대입</span></div><div class="line">		Person localVar = <span class="keyword">new</span> Person( ) &#123;</div><div class="line">			<span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">( )</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"산책 고고"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"7시에 인남"</span>);</div><div class="line">				walk( );</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">//로컬변수 사용</span></div><div class="line">		localVar.wake( );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		person.wake();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위에 정의한 클래스를 활용해보자</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Anoymous anony = <span class="keyword">new</span> Anonymous();</div><div class="line"></div><div class="line">		<span class="comment">//익명객체 필드 사용</span></div><div class="line">		anony.field.wake();</div><div class="line"></div><div class="line">		<span class="comment">//anony.filed.walk(); 는 에러가 발생한다. 이유가 뭘까?</span></div><div class="line">		<span class="comment">//익명자식 객체는 부모 타입 변수에 대입되므로 부모타입에 선언된 것만 사용할 수 있기 때문인다.</span></div><div class="line"></div><div class="line">		<span class="comment">//익명 객체 로컬변수 사용</span></div><div class="line">		anony.method1();</div><div class="line"></div><div class="line">		<span class="comment">//익명 객체 매개값 사용</span></div><div class="line">		anony.method2(</div><div class="line">			<span class="keyword">new</span> Person( ) &#123;</div><div class="line">				<span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">( )</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"공부~"</span>);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"8시에인남"</span>);</div><div class="line">					study( );</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;익명클래스&quot;&gt;&lt;a href=&quot;#익명클래스&quot; class=&quot;headerlink&quot; title=&quot;익명클래스&quot;&gt;&lt;/a&gt;익명클래스&lt;/h3&gt;&lt;p&gt;익명객체는 이름이 없는 객체를 말한다. 이는 단독으로 생성할 수 없고 클래스를 상속하거나 인터페이스를 구
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>중첩클래스의 접근제한</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java1/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java1/</id>
    <published>2018-11-20T00:37:20.000Z</published>
    <updated>2018-11-20T00:48:18.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="중첩클래스의-접근-제한"><a href="#중첩클래스의-접근-제한" class="headerlink" title="중첩클래스의 접근 제한"></a>중첩클래스의 접근 제한</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> field1;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">( )</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> field2;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">( )</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span> <span class="params">( )</span> </span>&#123;</div><div class="line">			field1 = <span class="number">10</span>;</div><div class="line">			method1( );</div><div class="line"></div><div class="line">			field2 = <span class="number">10</span>;</div><div class="line">			method2( );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">			<span class="comment">//filed1 = 10;	//접근 불가</span></div><div class="line">			<span class="comment">//method1( );	//접근 불가</span></div><div class="line"></div><div class="line">			field2 = <span class="number">10</span>;</div><div class="line">			method2( );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>로컬클래스(메소드 안에 클래스 생성)에서 사용 가능한 것은 final로 선언된 매개 변수와 로컬 변수뿐이다. 자바 7 이전에는 final이 붙어있지 않은 매개변수 혹은 변수를 로컬 클래스안에서 사용하고자 하면 컴파일 에러가 발생하였다. 하지만 자바 8부터는 컴파일 에러가 발생하지 않는다. 즉 내부적으로는 final의 특성(값을 변경할 수 없는)을 갖으며 final의 유무로 로컬클래스 내 복사 위치가 결정된다.(복사위치에 대해선 아래 설명)<br>다음은 7,8버전의 final 유무에 따른 접근관련 이슈이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</div><div class="line">	<span class="comment">//자바7 이전</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> localVariable = <span class="number">1</span>;</div><div class="line">		<span class="comment">//arg = 100;	//불가능</span></div><div class="line">		<span class="comment">//localVariable = 100 //불가능</span></div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">				<span class="keyword">int</span> result = arg + localVariable;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">//자바8 이후</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> localVariable = <span class="number">1</span>;</div><div class="line">		<span class="comment">//arg = 100;	//불가능</span></div><div class="line">		<span class="comment">//localVariable = 100 //불가능</span></div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">				<span class="keyword">int</span> result = arg + localVariable;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>위의 코드와 같이 final이 없더라도 값 변경은 허용하지 않는다는것이다.</p>
<p>※ final의 유무로 로컬클래스 내 복사 위치가 결정된다?<br>먼저 다음과 같은 코드가 있다고 가정하자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">outMethod</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> var1 = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> var2 = <span class="number">2</span>;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">LocalClass</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">int</span> result = arg1+arg2+var1+var2;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>위의 LocalClass에 복사된 변수를 보면 다음과 같다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalClass</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> arg2 = 매개값;	<span class="comment">//final이 붙지 않아 필드로 복사</span></div><div class="line">	<span class="keyword">int</span> var2 = <span class="number">2</span>;	<span class="comment">//final이 붙지 않아 필드로 복사</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> arg1 = 매개값;	<span class="comment">//final이 붙은것은 로컬 변수로 복사</span></div><div class="line">		<span class="keyword">int</span> var1 = <span class="number">1</span>;	<span class="comment">//final이 붙은것은 로컬 변수로 복사</span></div><div class="line">		<span class="keyword">int</span> result = arg1 + arg2+ var1+ var2;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><br>복사된 영역을 신경쓸 필요는 없으나 알고 있는것이 좋겠다!</p>
<h3 id="중첩클래스에서-바깥-클래스-참조-얻기"><a href="#중첩클래스에서-바깥-클래스-참조-얻기" class="headerlink" title="중첩클래스에서 바깥 클래스 참조 얻기"></a>중첩클래스에서 바깥 클래스 참조 얻기</h3><p>중첩 클래스 내부에서 this키워드를 사용하면 어떻게 될까? 말 그대로 중첩클래스가 this가 되게된다. 그렇다면 바깥 클래스를 가르키기 위해선 어떻게 해야될까.<br>정답은 바깥클래스.this 를 활용하면 된다. 아래를 참고하자</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</div><div class="line">	String field = <span class="string">"Outter-filed"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Outter-method"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</div><div class="line">		String field = <span class="string">"Nested-field"</span>;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Nested-method"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">( )</span> </span>&#123;</div><div class="line">		System.out.println(<span class="keyword">this</span>.field);		<span class="comment">//중첩객체 참조</span></div><div class="line">		<span class="keyword">this</span>.method( );			<span class="comment">//중첩객체 참조</span></div><div class="line"></div><div class="line">		System.out.println(Outter.<span class="keyword">this</span>.field);	<span class="comment">//바깥객체 참조</span></div><div class="line">		Outter.<span class="keyword">this</span>.method( );		<span class="comment">//바깥객체 참조</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutterExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Outter outter = <span class="keyword">new</span> Outter( );</div><div class="line">		outter.Nested nested = outter.new Nested( );</div><div class="line">		nested.print( );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;중첩클래스의-접근-제한&quot;&gt;&lt;a href=&quot;#중첩클래스의-접근-제한&quot; class=&quot;headerlink&quot; title=&quot;중첩클래스의 접근 제한&quot;&gt;&lt;/a&gt;중첩클래스의 접근 제한&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>알지피코리아(요기요,배달통) 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:17:48.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 7월</p>
<p>사실 서류자체는 무난하게 복붙이 가능할 정도로 간단했다. 자소서를 작성하면서 정말 감사했던 기억이 난다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>편안한 분위기속에서 면접관 두분과 면접을 진행했다. 난이도가 높은 면접은 아니었던걸로 기억한다.<br>질문내용은 다음과 같다.</p>
<p>인터페이스 추상클래스 차이<br>가장인상깊었던 문제<br>개발하다 막히면 어떻게하나<br>비동기로 처리하는 방법<br>jap hibernate 차이</p>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>평범한 회사였고 자유로운 분위기를 느낄 수 있었다. 면접 후 신세계 상품권과 요기요 할인쿠폰을 잘 이용했다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 7월&lt;/p&gt;
&lt;p&gt;사실 서류자체는 무난하게 복붙이 가능할 정도로 간단했다. 자소서를 작성하면서 정말 감사했던 기억이
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="알지피코리아" scheme="http://KKimSangHeon.github.io/tags/%EC%95%8C%EC%A7%80%ED%94%BC%EC%BD%94%EB%A6%AC%EC%95%84/"/>
    
      <category term="요기요 배달통" scheme="http://KKimSangHeon.github.io/tags/%EC%9A%94%EA%B8%B0%EC%9A%94-%EB%B0%B0%EB%8B%AC%ED%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>알티캐스트 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview2/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview2/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:25:27.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 6월</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접관 두분과 지원자 두명 다대다 면접으로 진행된다.<br>경력에 대한 질문, 프로젝트에 대한 질문이 주를 이루며 자기소개서 내용이 거짓이 아니라면 충분히 대답이 가능한 수준이었다.</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>2차면접은 따로 없이 최종 합격통보를 받았다.<br>편안한 분위기속에서 진행되었으며 사옥을 이전한지 얼마되지 않아 깨끗한 느낌을 많이받았다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 6월&lt;/p&gt;
&lt;h3 id=&quot;1차면접&quot;&gt;&lt;a href=&quot;#1차면접&quot; class=&quot;headerlink&quot; title=&quot;1
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="알티캐스트" scheme="http://KKimSangHeon.github.io/tags/%EC%95%8C%ED%8B%B0%EC%BA%90%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>줌인터넷 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview3/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview3/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-24T00:02:11.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 7월</p>
<h3 id="코딩시험"><a href="#코딩시험" class="headerlink" title="코딩시험"></a>코딩시험</h3><p>문제의 난이도는 크게 어렵지 않은수준이었다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접 때 코딩시험 내용을 질문한다는 후기를 많이 봐 와서 작성했던 코드를 철저하게 분석하여 갔지만 관련 내용은 질문하지 않으셨다.<br>면접관 다섯분과 지원자 한명 다대일 방식으로 면접이 진행되었다.</p>
<p>면접 질문은 다음과 같다.</p>
<p>자바8<br>자바 몇까지 써봄<br>프로미스<br>프로토타입<br>http 송신 수신시 헤더<br>di<br>aop<br>쿠키 세션<br>rest api?<br>예외의 종류 Error에 대한질문<br>stringbuffer stringbuilder 차이<br>인터페이스 staitc default<br>resultful api설계해본적<br>암호화기법<br>양방향 단방향</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>정말 많이많이 어려웠던 면접이었던것 같다. 지금까지 봤던 면접 중 가장 어려웠고 많은것을 다시한번 생각해볼 수 있었던 기회였다. 면접관 분들은 친절하셨지만 내 실력이 불친절했던것 같다.   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 7월&lt;/p&gt;
&lt;h3 id=&quot;코딩시험&quot;&gt;&lt;a href=&quot;#코딩시험&quot; class=&quot;headerlink&quot; title=&quot;코
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="줌인터넷" scheme="http://KKimSangHeon.github.io/tags/%EC%A4%8C%EC%9D%B8%ED%84%B0%EB%84%B7/"/>
    
  </entry>
  
  <entry>
    <title>웍스모바일 인턴 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:25:14.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 3월</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접은 한번뿐이었으며 기본적인 전공지식 그리고 경험에 대한 질문이 다수였다.</p>
<p>ide뭐 쓰는지<br>asyn<br>서치<br>정렬되지않은 데이터 접근<br>http https차이<br>블로킹 논블로킹 차이<br>트랜잭션<br>데드락<br>dns<br>설계패턴<br>동기비동기 차이<br>string stringbuffer차이</p>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>합격해서 인턴까지 잘 마무리 지을 수 있었고 그린팩토리에서 일한다는 자부심을 느낄 수 있었다. 좋은분들과 함께 근무했던것 같아 좋았었다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 3월&lt;/p&gt;
&lt;h3 id=&quot;1차면접&quot;&gt;&lt;a href=&quot;#1차면접&quot; class=&quot;headerlink&quot; title=&quot;1
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="웍스모바일" scheme="http://KKimSangHeon.github.io/tags/%EC%9B%8D%EC%8A%A4%EB%AA%A8%EB%B0%94%EC%9D%BC/"/>
    
  </entry>
  
  <entry>
    <title>비트 빅데이터 전문가 양성과정 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview5/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview5/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-24T00:07:41.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2017년 6월</p>
<p>국비지원 교육을 받기위해 필기시험, 면접을 진행한다. 보통 다른과정은 면접이 없지만 전문가 과정이라 회장님과의 면접이 있다고 들었다.</p>
<h3 id="필기시험"><a href="#필기시험" class="headerlink" title="필기시험"></a>필기시험</h3><p>자바 필기시험을 진행하였으며 난이도는 쉬운편이었다. 오버라이딩, 인터페이스 수준정도의 개념까지만 잘 이해하고 있다면 쉽게 풀 수 있다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>비트컴퓨터 회장님과 지원자들과 면접을 진행한다.<br>많은 지원자를 대상으로 면접을 진행하기 때문에 자신이 진행했던 프로젝트가 뭐가있는지 물어보고 기술력을 판단하신다. 당락은 그 자리에서 결정되는데 합격률이 생각보다 많이 낮았던 것이 인상깊었다.</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>합격하여 국비지원을 받으며 교육을 수강할 수 있었다. 강사님께서 정말 고수라 많은것을 배울 수 있었고 실무에서 인턴경험 이상으로 값진 경험이었다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2017년 6월&lt;/p&gt;
&lt;p&gt;국비지원 교육을 받기위해 필기시험, 면접을 진행한다. 보통 다른과정은 면접이 없지만 전문가 과정이
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="비트" scheme="http://KKimSangHeon.github.io/tags/%EB%B9%84%ED%8A%B8/"/>
    
      <category term="국비지원" scheme="http://KKimSangHeon.github.io/tags/%EA%B5%AD%EB%B9%84%EC%A7%80%EC%9B%90/"/>
    
  </entry>
  
  <entry>
    <title>KT SW개발직무 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview4/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview4/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:37:44.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 8월 ~ 2018년 10월</p>
<h3 id="채용공고"><a href="#채용공고" class="headerlink" title="채용공고"></a>채용공고</h3><img src="/2018/10/22/interview4/kt.jpg" alt="공고" title="공고">
<h3 id="필기시험"><a href="#필기시험" class="headerlink" title="필기시험"></a>필기시험</h3><p>적성이 아닌 전공, 인성검사로서 진성여중에서 시험을 치뤘었다. 정말 많은사람들이 왔었고 문제의 난이도는 평소 CS에 대한 공부만 충실했다면 무난한 난이도였다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접관 3분과 지원자 1명의 면접형태로서 면접 전 간단한 코딩 테스트를 본다. 푼 문제를 복사하여 면접관분들께 설명드리면서 면접이 시작된다. 이후엔 자기소개서 위주의 프로젝트, 경력관련 질문들이 주를 이뤘다. 여기서 자신감을 갖고 대답했던것이 좋게 작용했던것 같다.</p>
<h3 id="2차면접"><a href="#2차면접" class="headerlink" title="2차면접"></a>2차면접</h3><p>마찬가지로 면접관 3분과 면접을 본다. 정말 많이 떨렸지만 충분히 준비하고 또 준비했기에 떨지않고 잘 대답할 수 있었다. 주로 경력에 관한 질문이 많았으며 인성질문도 있었다.</p>
<h3 id="건강검진"><a href="#건강검진" class="headerlink" title="건강검진"></a>건강검진</h3><p>건강검진 이틀전 술을 마신탓에 약간 걱정은 됐으나 다행히 별 탈 없이 통과할 수 있었다.</p>
<h3 id="합격"><a href="#합격" class="headerlink" title="합격"></a>합격</h3><p>두달간의 긴 여정을 잘 마무리 짓고 최종합격할 수 있었다.<br><img src="/2018/10/22/interview4/kt2.jpg" alt="합격!" title="합격!"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 8월 ~ 2018년 10월&lt;/p&gt;
&lt;h3 id=&quot;채용공고&quot;&gt;&lt;a href=&quot;#채용공고&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="KT" scheme="http://KKimSangHeon.github.io/tags/KT/"/>
    
  </entry>
  
  <entry>
    <title>프로토타입 디자인 패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/22/Prototype-Pattern/"/>
    <id>http://KKimSangHeon.github.io/2018/09/22/Prototype-Pattern/</id>
    <published>2018-09-22T06:26:34.000Z</published>
    <updated>2018-10-22T01:47:04.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="프로토타입-디자인-패턴"><a href="#프로토타입-디자인-패턴" class="headerlink" title="프로토타입 디자인 패턴"></a>프로토타입 디자인 패턴</h3><p>프로토타입 패턴은 객체를 복사품을 만드는것을 의미하는 것이다. 복제된 객체는 호출되는 객체의 현재 상태를 갖고 초기화 되는데 이는 얕은복사 혹은 깊은복사에 기반하여 이뤄진다.</p>
<h4 id="얕은복사-vs-깊은복사"><a href="#얕은복사-vs-깊은복사" class="headerlink" title="얕은복사 vs 깊은복사"></a>얕은복사 vs 깊은복사</h4><p>얕은복사는 단지 참조의 사본을 만든다고 볼 수 있다.<br>깊은복사는 사본을 새로 생성하여 복사대상이 변경되어도 복사한 데이터는 변경되지 않는다.</p>
<figure class="highlight c"><figcaption><span>Prototype</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quotation</span>&#123;</span></div><div class="line">  <span class="keyword">protected</span>:</div><div class="line">    <span class="built_in">string</span> type;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">  <span class="keyword">public</span>:</div><div class="line">      <span class="function"><span class="keyword">virtual</span> Quotation* <span class="title">clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">      <span class="function"><span class="built_in">string</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;        </div><div class="line">      &#125;        </div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure>
<p>CarQuotation, BikeQuotation 는 Quotation클래스를 상속한다.<br><figure class="highlight c"><figcaption><span>Prototype</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarQuotation</span>:</span> <span class="keyword">public</span> Quotation &#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">   CarQuotation(<span class="keyword">int</span> number) &#123;</div><div class="line">     type = <span class="string">"Car"</span>;</div><div class="line">     value = number;</div><div class="line">  &#125;</div><div class="line">  <span class="function">Quotation* <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CarQuotation(*<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BikeQuotation</span> :</span> <span class="keyword">public</span> Quotation &#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    BikeQuotation(<span class="keyword">int</span> number) &#123;</div><div class="line">      type = <span class="string">"Bike"</span>;</div><div class="line">      value = number;      </div><div class="line">    &#125;</div><div class="line">    <span class="function">Quotation* <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BikeQuotation(*<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>사용예<br><figure class="highlight c"><figcaption><span>Prototype</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">QuotationFactory</span> &#123;</span></div><div class="line">    <span class="keyword">private</span> :</div><div class="line">      Quotation *carQuotation;</div><div class="line">      Quotation *bikeQuotation;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> :</div><div class="line">      QuotationFacory() &#123;</div><div class="line">        carQuotation = <span class="keyword">new</span> CarQuotation(<span class="number">10</span>);</div><div class="line">        bikeQuotation = <span class="keyword">new</span> BikeQuotation(<span class="number">20</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ~QuotationFactory() &#123;</div><div class="line">        <span class="keyword">delete</span> bikeQuotation;</div><div class="line">        <span class="keyword">delete</span> carQuotation;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function">Quotation* <span class="title">createQuotation</span><span class="params">(<span class="keyword">int</span> typeId)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>( typeID ==<span class="number">1</span> )</div><div class="line">          <span class="keyword">return</span> carQuotation-&gt;clone();</div><div class="line">        <span class="keyword">else</span></div><div class="line">          <span class="keyword">return</span> bikeQuotation-&gt;clone();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  QuotationFacory* qf = <span class="keyword">new</span> QuotationFactory();</div><div class="line"></div><div class="line">  Quotation* q;</div><div class="line">  q = qf-&gt;createQuotation(<span class="number">1</span>);</div><div class="line">  <span class="keyword">delete</span> q;</div><div class="line"></div><div class="line">  q = qf-&gt;createQuotation(<span class="number">2</span>);</div><div class="line">  <span class="keyword">delete</span> q;</div><div class="line">  <span class="keyword">delete</span> qf;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>프로토타입 패턴에서 복사한다는 것이 무슨뜻인지 이해가 잘 안됐지만 이젠 이해가 간다. 미리 특정형태(프로토타입)을 만들어 놓고 팩토리패턴으로 호출할 때 그 프로토타입을 반환하여 활용할 수 있도록 하는 패턴인것이다.</p>
<h4 id="자바에서의-프로토타입-패턴"><a href="#자바에서의-프로토타입-패턴" class="headerlink" title="자바에서의 프로토타입 패턴"></a>자바에서의 프로토타입 패턴</h4><p>C++같은 경우엔 위와같이 코드를 작성해야 되지만 Java의 경우 최상위 클래스 Object가 clone() 메소드가 정의되어 있으므로 이를 오버라이딩해서 활용하면 된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;프로토타입-디자인-패턴&quot;&gt;&lt;a href=&quot;#프로토타입-디자인-패턴&quot; class=&quot;headerlink&quot; title=&quot;프로토타입 디자인 패턴&quot;&gt;&lt;/a&gt;프로토타입 디자인 패턴&lt;/h3&gt;&lt;p&gt;프로토타입 패턴은 객체를 복사품을 만드는것을 의미하는 
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>팩토리 메서드 디자인 패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/22/factory-method/"/>
    <id>http://KKimSangHeon.github.io/2018/09/22/factory-method/</id>
    <published>2018-09-22T04:25:51.000Z</published>
    <updated>2018-09-27T17:40:56.718Z</updated>
    
    <content type="html"><![CDATA[<h3 id="팩토리-메서드-패턴"><a href="#팩토리-메서드-패턴" class="headerlink" title="팩토리 메서드 패턴"></a>팩토리 메서드 패턴</h3><p>공장처럼 팩토리 메서드의 일은 객체를 생성하는것이다. 이는 생성패턴으로 클래스들 중 하나의 객체를 인스턴스화 하는데 사용된다. 생성자에 비해 많은장점을 갖으며 상황에 따라 생성자 대신 혹은 기존의 생성자에 덧붙여 제공하는것이 좋다.</p>
<figure class="highlight c"><figcaption><span>Factory</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 팩토리 메서드 패턴으로 인스턴스화될 형으로 제공될 기본 클래스</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span></div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">petSound</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 팩토리 메서드 패턴에 의해 인스턴스를 얻게 될 첫 번째 파생 클래스</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet&#123;</div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">petSound</span><span class="params">( )</span> </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Bow Bow..."</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 팩토리 메서드 패턴에 의해 인스턴스를 얻게 될 두번째 파생 클래스</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Pet &#123;</div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">petSound</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="built_in">cout</span>&lt;&lt; <span class="string">"Meaw Meaw..."</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 로직에 기반해서 객체들을 인스턴스화하는 팩토리 메서드 패턴 구현</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PetFactory</span> &#123;</span></div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function">Pet* <span class="title">getPet</span><span class="params">(<span class="keyword">int</span> petType)</span> </span>&#123;</div><div class="line">      Pet pet = <span class="literal">NULL</span>;</div><div class="line">      <span class="comment">// 비즈니스 로직에 기반한 객체의 인스턴스화</span></div><div class="line">      <span class="keyword">if</span> (petType == <span class="number">1</span>)</div><div class="line">          pet = <span class="keyword">new</span> Dog();</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(petType ==<span class="number">2</span>)</div><div class="line">          pet = <span class="keyword">new</span> Cat();</div><div class="line"></div><div class="line">      <span class="keyword">return</span> pet;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>다음은 생성한 팩토리메소드를 활용하여 인스턴스를 생성하는 방식이다.</p>
<figure class="highlight c"><figcaption><span>Factory</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  PetFactory *PetFactory = <span class="keyword">new</span> PetFactory();</div><div class="line"></div><div class="line">  Pet pet = petFactory-&gt;getPet(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="built_in">cout</span>&lt;&lt; <span class="string">"Pet Sound"</span>;</div><div class="line">  pet-&gt;petSound();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;팩토리-메서드-패턴&quot;&gt;&lt;a href=&quot;#팩토리-메서드-패턴&quot; class=&quot;headerlink&quot; title=&quot;팩토리 메서드 패턴&quot;&gt;&lt;/a&gt;팩토리 메서드 패턴&lt;/h3&gt;&lt;p&gt;공장처럼 팩토리 메서드의 일은 객체를 생성하는것이다. 이는 생성패턴으
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>제주도 여행</title>
    <link href="http://KKimSangHeon.github.io/2018/09/18/travel/"/>
    <id>http://KKimSangHeon.github.io/2018/09/18/travel/</id>
    <published>2018-09-18T08:18:54.000Z</published>
    <updated>2018-09-21T10:59:58.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-13-9-17-제주도-여행"><a href="#9-13-9-17-제주도-여행" class="headerlink" title="9.13 ~ 9.17 제주도 여행"></a>9.13 ~ 9.17 제주도 여행</h3><p>휴식을 취하고자 웅상 파트너인 웅형과 제주도를 다녀왔다. 사진을 조금밖에 못찍어 아쉽지만 있는대로 올려본다.</p>
<img src="/2018/09/18/travel/13.jpg" alt="image" title="image">
<p>거의 10여년만에 비행기를 타는거라 비행기를 타기까지 너무 오래걸렸던것 같다. 체크인, 수화물.. 너무 헷갈렸지만 어떻게 어떻게 비행기에 탑승하긴 했다.<br>창가자리에 앉아 밖을 구경하는데 좋긴 좋았던것 같다. 날씨가 좋지 않았던 탓에 흔들렸던것만 빼고는….</p>
<img src="/2018/09/18/travel/1.jpg" alt="image" title="image">
<p>도착 첫날 스즈라는 초밥집에 가서 점식특선을 먹었다. 사진에 보이는것 외에도 호박죽, 야채 샐러드가 나왔는데 맛있었다. 제주도에서 먹은 음식중 Top3안에 들어간다.</p>
<h4 id="사려니숲길"><a href="#사려니숲길" class="headerlink" title="사려니숲길"></a>사려니숲길</h4><p>유명한 숲길이 있대서 방문해봤다. 정말 나무가 많고 조용한 숲이었다. 이쁘기도 많이 이뻣던것 같다.<br><img src="/2018/09/18/travel/2.jpg" alt="image" title="image"><br>카메라를 하늘로 향해 찍어보았다.</p>
<img src="/2018/09/18/travel/3.jpg" alt="image" title="image">
<p>이유는 모르겠는데 많은 돌탑이 있었다. 그중 신기하게 쌓여진 돌탑이 있어 내가 쌓은척을 해봤다.</p>
<img src="/2018/09/18/travel/4.jpg" alt="image" title="image">
<p>웅형이 우연찮게 찍어준 사진이 저렇게 나왔다. 여행하다 만난 사진전공하시는 분도 놀라워 해주셔서 만족스러웠다.</p>
<img src="/2018/09/18/travel/5.jpg" alt="image" title="image">
<p>둘째날 묵은 빨간지붕게스트하우스라는 곳인데 3개월된 강아지가 정말 귀여웠다. 가만히 있는 사진을 찍기가 힘들정도로 활발했던것 같다. 다음에 또 제주도를 간다면 한번 더 방문해보고 싶다.</p>
<img src="/2018/09/18/travel/9.jpg" alt="image" title="image">
<p>산굼부리라는 곳을 갔는데 비가 올듯 말듯 한 날씨였다. 구름또한 반은 어둡고 반은 밝은걸 느낄 수 있다.</p>
<h4 id="우도"><a href="#우도" class="headerlink" title="우도"></a>우도</h4><p>여행을 하며 만난 사진전공하시는 분과 함께 우도를 갔다. 나는 전기자전거를 탔고 면허가 있는 두 사람은 2인오토바이 비슷한걸 빌렸다.<br><img src="/2018/09/18/travel/88.jpg" alt="image" title="image"><br>우도가는 배를 타기 전 기다리는 중..</p>
<img src="/2018/09/18/travel/7.jpg" alt="image" title="image">
<p>혹시 비가 올까 걱정이 되는 날씨였다.</p>
<img src="/2018/09/18/travel/8.jpg" alt="image" title="image">
<p>우도에 도착할때 쯤 하늘이 맑아지기 시작했다.</p>
<img src="/2018/09/18/travel/10.jpg" alt="image" title="image">
<p>사진을 전공하시는 분이 찍어주신 사진이다. 사진알못이라 잘은 모르겠지만 뭔가 다른거같긴하다. 전공자라 다르긴한거같다.</p>
<h4 id="넥슨-컴퓨터방물관"><a href="#넥슨-컴퓨터방물관" class="headerlink" title="넥슨 컴퓨터방물관"></a>넥슨 컴퓨터방물관</h4><p>그래도 개발잔데… 라며 방문해봤던 넥슨 박물관이다.<br>신기한 물건도 많고 체험해볼것도 다양했다. 하지만 많은 초중고등학교의 현장학습과 겹친나머지 제대로 이용해보진 못했던게 아쉽다.<br><img src="/2018/09/18/travel/11.jpg" alt="image" title="image"><br>입구에서부터 넥슨이라는걸 느낄 수 있었다. 사진엔 보이진 않지만 캐릭터 풍선부터 사진찍을만한 요소가 많았지만 비가와서 얼른 들어갔다.</p>
<img src="/2018/09/18/travel/12.jpg" alt="image" title="image">
<p>얼굴을 트래킹하며 표정을 따라하는 여우다.</p>
<h4 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h4><p>정말 많이먹고 좋은사람들을 많이 만날 수 있었던 좋은 여행이었다.<br>날씨도 좋았고 사람도 좋았고 분위기도 좋았다. 아무생각 없이 편히 쉴 수 있었던것같아 좋았다.<br>일상으로 돌아온게 아쉽진 하지만 다음 여행을 기약해야겠다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;9-13-9-17-제주도-여행&quot;&gt;&lt;a href=&quot;#9-13-9-17-제주도-여행&quot; class=&quot;headerlink&quot; title=&quot;9.13 ~ 9.17 제주도 여행&quot;&gt;&lt;/a&gt;9.13 ~ 9.17 제주도 여행&lt;/h3&gt;&lt;p&gt;휴식을 취하고자 웅
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Travel" scheme="http://KKimSangHeon.github.io/categories/About-Me/Travel/"/>
    
    
      <category term="여행" scheme="http://KKimSangHeon.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>Singleton 디자인패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/11/pattern2/"/>
    <id>http://KKimSangHeon.github.io/2018/09/11/pattern2/</id>
    <published>2018-09-11T07:42:21.000Z</published>
    <updated>2018-09-27T19:05:02.359Z</updated>
    
    <content type="html"><![CDATA[<h3 id="싱글톤패턴"><a href="#싱글톤패턴" class="headerlink" title="싱글톤패턴"></a>싱글톤패턴</h3><p>클래스에 대한 오직 하나의 인스턴스 만이 허용되는 패턴이다.<br>이를위해 생성자를 private로 선언하여 외부에서 인스턴스를 생성하는것을 방지한다.<br>싱글톤 패턴을 사용할땐 다중 스레드에 주의해야 한다.</p>
<p>스레드에 안전한 코드는 다음과 같다.</p>
<figure class="highlight java"><figcaption><span>Singleton</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> Singleton* getInstance() &#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="number">0</span>) &#123;</div><div class="line">            Lock lock;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="number">0</span> )&#123;</div><div class="line">              instance = <span class="keyword">new</span> Singleton;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>:</div><div class="line">      Singleton() &#123;&#125;</div><div class="line">      <span class="keyword">static</span> Singleton* instance;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>클래스가 적재되는순간 즉 더 빠르게 인스턴스화를 하기 위해서는 아래와 같이 코드를 작성하면 된다. 이 또한 스레드에 주의해서 작성해야 한다는것을 잊지말자.</p>
<figure class="highlight java"><figcaption><span>Singleton</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">  Singleton() &#123;&#125;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;싱글톤패턴&quot;&gt;&lt;a href=&quot;#싱글톤패턴&quot; class=&quot;headerlink&quot; title=&quot;싱글톤패턴&quot;&gt;&lt;/a&gt;싱글톤패턴&lt;/h3&gt;&lt;p&gt;클래스에 대한 오직 하나의 인스턴스 만이 허용되는 패턴이다.&lt;br&gt;이를위해 생성자를 private로 선언
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>디자인패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/07/pattern1/"/>
    <id>http://KKimSangHeon.github.io/2018/09/07/pattern1/</id>
    <published>2018-09-07T09:31:43.000Z</published>
    <updated>2018-09-27T19:05:00.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="디자인패턴"><a href="#디자인패턴" class="headerlink" title="디자인패턴"></a>디자인패턴</h3><p>소프트웨어 설계에서 공통적으로 발생하는 문제를 다루는 보편적이고 반복해서 사용할 수 있는 방법. 문제를 해결하기 위한 설명이나 템플릿으로 보면 된다.</p>
<h3 id="디자인패턴을-사용할-때-장점"><a href="#디자인패턴을-사용할-때-장점" class="headerlink" title="디자인패턴을 사용할 때 장점"></a>디자인패턴을 사용할 때 장점</h3><p>개발 절차의 속도를 높일 수 있다.<br>재사용 가능한 구조적 개념으로 구성되어 있기 때문에 믿을 수 있다.</p>
<h3 id="디자인-패턴을-사용하기-위한-조건"><a href="#디자인-패턴을-사용하기-위한-조건" class="headerlink" title="디자인 패턴을 사용하기 위한 조건"></a>디자인 패턴을 사용하기 위한 조건</h3><ol>
<li>주어진 문제를 명확, 세밀하게 이해한다.</li>
<li>디자인 패턴이 문제에 일치하는지 다시한번 확인해본다.</li>
<li>다른 패턴들 사이에서 관계성을 찾고 변경해야할 사항을 결정한다.</li>
</ol>
<h3 id="패턴-여러가지의-디자인-패턴은-3가지의-범주로-분류된다"><a href="#패턴-여러가지의-디자인-패턴은-3가지의-범주로-분류된다" class="headerlink" title="패턴 여러가지의 디자인 패턴은 3가지의 범주로 분류된다."></a>패턴 여러가지의 디자인 패턴은 3가지의 범주로 분류된다.</h3><p>범주는 아래와 같다.</p>
<ol>
<li><p>생성패턴 : 객체생성 메커니즘을 다룬다. 객체의 생성을 다루는 객체 생성 패턴, 클래스 인스턴스 생성을 다루는 클래스 생성 패턴으로 분류된다.<br>ex: Factory, Abstract Factory, Builder, Protype, Singleton 패턴.</p>
</li>
<li><p>구조패턴: 객체들과 클래스들이 커다란 구조를 형성하기 위해 결합될 수 있는 방법을 설명한다. 클래스패턴은 상속의 도움을 받아 추상화를 설명하고 어떻게 프로그램에 더 유용한 인터페이스를 제공할 수 있는지 설명하는것이고, 객체 패턴은 객체들이 크고 더 복잡한 구조를 형성하기 위해 연결되고 구성되는지 설명한다.<br>ex: Adapter, Bridge, Composite, Decorator, Flyweight, Proxy 패턴</p>
</li>
<li><p>행위패턴: 객체 사이의 상호 작용과 관련된 것들이다. 이들은 객체간에 공통의 통신 패턴을 파악하고 이러한 패턴을 실현한다.<br>ex: Chain of Responsibility, Command, Interpreter, iterator, Mediator, Memento, Observer, State, Strategy,Template, Vistor 패턴</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;디자인패턴&quot;&gt;&lt;a href=&quot;#디자인패턴&quot; class=&quot;headerlink&quot; title=&quot;디자인패턴&quot;&gt;&lt;/a&gt;디자인패턴&lt;/h3&gt;&lt;p&gt;소프트웨어 설계에서 공통적으로 발생하는 문제를 다루는 보편적이고 반복해서 사용할 수 있는 방법. 문제를 
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
</feed>
