<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-10-17T05:05:28.633Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ablethon</title>
    <link href="http://KKimSangHeon.github.io/2017/10/17/ablethon/"/>
    <id>http://KKimSangHeon.github.io/2017/10/17/ablethon/</id>
    <published>2017-10-17T05:05:28.000Z</published>
    <updated>2017-10-17T05:05:28.633Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>모듈</title>
    <link href="http://KKimSangHeon.github.io/2017/10/10/python4/"/>
    <id>http://KKimSangHeon.github.io/2017/10/10/python4/</id>
    <published>2017-10-10T06:11:53.000Z</published>
    <updated>2017-10-10T06:14:23.167Z</updated>
    
    <content type="html"><![CDATA[<p>파이썬 모듈이란?</p>
<p>1) 파이썬 프로그램  파일로 따로  함수나 변수를 정의한다.<br>2) 모듈안에는 어떤 코드도 작성 가능하다.(함수, 클래스, 변수등)<br>3) 다른 모듈에 의해서 호출되고 사용된다.<br>4) 표준모듈, 사용자 생성 모듈, 서드 파티 모듈 등으로 나눌 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;파이썬 모듈이란?&lt;/p&gt;
&lt;p&gt;1) 파이썬 프로그램  파일로 따로  함수나 변수를 정의한다.&lt;br&gt;2) 모듈안에는 어떤 코드도 작성 가능하다.(함수, 클래스, 변수등)&lt;br&gt;3) 다른 모듈에 의해서 호출되고 사용된다.&lt;br&gt;4) 표준모듈, 사용자
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>인천~부산 국토종주</title>
    <link href="http://KKimSangHeon.github.io/2017/10/06/riding1/"/>
    <id>http://KKimSangHeon.github.io/2017/10/06/riding1/</id>
    <published>2017-10-06T07:51:55.000Z</published>
    <updated>2017-10-06T11:14:44.985Z</updated>
    
    <content type="html"><![CDATA[<p>오래전부터 버킷리스트였던 국토종주를 완료하였다. 4박5일의 기간동안 혼자 고군분투하며 유일한 친구 네이버 지도와 함께했던 기억.. 잊지않기 위해 사진위주로 정리해본다.</p>
<h3 id="출발전"><a href="#출발전" class="headerlink" title="출발전"></a>출발전</h3><img src="/2017/10/06/riding1/0.jpg" alt="출발전" title="출발전">
<p>필요한 짐만 챙겼는데도 불구하고 뒤의 가방의 무게가 상당하다.. 약 8kg정도 되는것 같다.</p>
<h3 id="1일차-5월3일"><a href="#1일차-5월3일" class="headerlink" title="1일차 5월3일"></a>1일차 5월3일</h3><h5 id="인천아라뱃길-여주보"><a href="#인천아라뱃길-여주보" class="headerlink" title="인천아라뱃길 ~ 여주보"></a>인천아라뱃길 ~ 여주보</h5><img src="/2017/10/06/riding1/1.jpg" alt="굴포천의 개" title="굴포천의 개">
<p>오전 7시 부천에서 출발해서 아라뱃길로 가기위해서는 굴포천을 통과해야한다. 가는 도중에 만났던 2마리의 개님들.. 나를 반겨주길래 사진찍으려 하니 도망가버린다. 귀여워서 뒷모습이라도 찍었다..</p>
<img src="/2017/10/06/riding1/2.jpg" alt="굴포천의 오리" title="굴포천의 오리">
<p>조금 더 가다보니 이번엔 오리?를 만나게 되었다. 꽥꽥거리는게 기여워서 한컷찍었다. 참새는 짹짹..</p>
<img src="/2017/10/06/riding1/3.jpg" alt="꽉찬헬멧" title="꽉찬헬멧">
<p>부천, 인천을 거쳐 드디어 한강에 도착했다. 날씨가 좋아서 달리기 좋았는지 찍은사진은 이것뿐이다.. 꽉찬 헬멧이 보기좋다..</p>
<img src="/2017/10/06/riding1/4.jpg" alt="팔당대교" title="팔당대교">
<p>한강을 달리고 달려 한강의 거의 끝지점인 팔당대교에 도착했다. 편의점에서 파워에이드와 스니커즈를 사먹었다.. 군대이후로 스니커즈가 이렇게 맛있는건 처음이었다..</p>
<img src="/2017/10/06/riding1/5.jpg" alt="팔당댐" title="팔당댐">
<p>조금 더 가니 팔당댐에 도착하였다.</p>
<img src="/2017/10/06/riding1/6.jpg" alt="터널" title="터널">
<p>팔당댐 옆에는 터널이 있었다. 들어가면 추울정도로 시원했다.</p>
<img src="/2017/10/06/riding1/7.jpg" alt="철길" title="철길">
<p>터널을 나와 달리다 보니 철길이 등장하였다. 아직까진 힘들진 않았지만 어릴때부터 이유없이 철길을 좋아했던 나는 여기서 잠깐 쉬어갔다.</p>
<img src="/2017/10/06/riding1/8.jpg" alt="양평" title="양평">
<p>아무생각없이 달리다보니 양평에 도착하였다.! MT의 장소로서 기차로만 갈 수있다고 생각한 곳을 자전거타고 오니 새로웠다.</p>
<img src="/2017/10/06/riding1/9.jpg" alt="폐철길" title="폐철길">
<p>이제 폐 철길을 개조한 자전거길이 펼쳐졌다. 지나갈때마다 드르륵 거리는게 뭔가 듣기 좋았다.</p>
<img src="/2017/10/06/riding1/10.jpg" alt="용담 아트터널" title="용담 아트터널">
<p>철길을 지나니 아트터널이 등장하였다.</p>
<img src="/2017/10/06/riding1/11.jpg" alt="갓트터널" title="갓트터널">
<p>역시 용담 아트터널이다.</p>
<img src="/2017/10/06/riding1/12.jpg" alt="갓트터널" title="갓트터널">
<p>형형색색의<br><img src="/2017/10/06/riding1/13.jpg" alt="갓트터널" title="갓트터널"><br>화려한 불빛들이<br><img src="/2017/10/06/riding1/14.jpg" alt="갓트터널" title="갓트터널"><br>나를 반겨준다.. 갓트터널..<br>4박5일간 일정중 여기가 제일 최고였던것 같다.<br>이 후 양평을 지나 7시쯤 여주에 도착하여 인근 모텔에서 치킨을 먹고 기절했다. 친절한 모텔주인 아저씨는 익숙한듯이 자전거를 방까지 옮겨다 주셨던게 인상깊었다.</p>
<h3 id="2일차-5월-4일"><a href="#2일차-5월-4일" class="headerlink" title="2일차 5월 4일"></a>2일차 5월 4일</h3><h5 id="강천보-문경-불정역"><a href="#강천보-문경-불정역" class="headerlink" title="강천보 ~ 문경 불정역"></a>강천보 ~ 문경 불정역</h5><img src="/2017/10/06/riding1/15.jpg" alt="아침" title="아침">
<p>숙소에서 6시반에 출발하여 자전거 도로로 진입했을 때가 6시 50분쯤이었다. 해가 뜨기 시작하고 물안개가 이뻣었다. 상쾌한 공기가 좋긴했지만 전날의 휴유증으로 엉덩이, 허벅지, 등, 종아리 아프지 않은곳이 없었다. 비상용으로 사간 타이레놀을 먹을까 고민했지만 몸을 생각해서 몸을 혹사시켰다?.</p>
<img src="/2017/10/06/riding1/21.jpg" alt="통과의례" title="통과의례">
<p>많은 분들의 국토종주 후기를 보면 이 구간이 등장한다. 나 또한 사진을 찍어보았다. 자전거에 내려서 가라는 의미로 장애물을 설치해 두었을 것이다. 자전거를 끌고가도 자전거를 제어하기 힘든 경사구간이었다..</p>
<img src="/2017/10/06/riding1/16.jpg" alt="대단하신분들" title="대단하신분들">
<p>사진을 찍은 부분이 경사진 구간이라 자전거에서 내려 걸어가고 있는데 뒤에서 50대 정도로 보이는 동호회분들께서 앞질러 나가셨다.. 그리고는 사진속의 경사진 구간도 낙오자 없이 통과하셨다.. 체력좀 많이 길러야겠다고 뼈저리게 느꼈다.(나는 가방무게 때문에 힘든거였을거야)</p>
<img src="/2017/10/06/riding1/18.jpg" alt="반반치킨" title="반반치킨">
<p>해가 뜨고 그림자가 진 모습이 이뻐보여서 찍었다. 문득 어제 먹은 양념반 후라이드 반의 치킨이 생각났다..</p>
<img src="/2017/10/06/riding1/17.jpg" alt="점점 더 멀어져간다" title="점점 더 멀어져간다">
<p>열심히 달리다 보니 앞서나간 분들을 따라잡았지만 빠르게 멀어져갔다…</p>
<img src="/2017/10/06/riding1/19.jpg" alt="힘듦" title="힘듦">
<p>아침이라 그런지 힘들어서 그런지는 모르겠지만 많이 힘들어보인다.</p>
<img src="/2017/10/06/riding1/20.jpg" alt="아름다운 충북" title="아름다운 충북">
<p>조금 더 가니 아름다운 충북, 도민이 행복한 충북에 도착하였다.</p>
<img src="/2017/10/06/riding1/22.jpg" alt="외국인들" title="외국인들">
<p>출발 전 후기들을 통해 접했던 죽음의 구간인 백두대간이화령의 시작점이다. 이름부터가 “넌 못올라 올껄?” 이라는 느낌이 뿜어져 나온다. 역시나 나는 걸어서 올라가고 있고 외국인 커플이 가볍게 날 앞질러 나간다.</p>
<img src="/2017/10/06/riding1/23.jpg" alt="이화령.." title="이화령..">
<p>자전거에서 내려서 열심히 올라가던준 반사경이 있어 내모습을 담아봤다..</p>
<img src="/2017/10/06/riding1/24.jpg" alt="이화령....." title="이화령.....">
<p>많이 올라왔다. 금방끝나겠지 라는 생각으로 열심히 페달을.. 아니 걸었다.</p>
<img src="/2017/10/06/riding1/25.jpg" alt="이화령........." title="이화령.........">
<p>금방 끝날것이라는 나의 경기도 오산 아래 경치를 잠깐 즐기며 사진을 찍었다.</p>
<img src="/2017/10/06/riding1/26.jpg" alt="이화령.........!!" title="이화령.........!!">
<p>역시 경기도 오산은 오산이었다. 이런 언덕이 끝도없이 펼쳐진다. 한시간이면 끝날줄 알았지만 끝이없다..</p>
<img src="/2017/10/06/riding1/27.jpg" alt="이화령.." title="이화령..">
<p>정말 많이 올라왔다. 날씨가 선선해서 다행이었다.. 여름이였으면 큰일날 뻔 했다.</p>
<img src="/2017/10/06/riding1/28.jpg" alt="이화령.." title="이화령..">
<p>땀으로 머리가 다 젖었다.. 하루사이에 살이 빠졌는지 턱끈이 느슨해졌다..ㅋㅋㅋㅋㅋ</p>
<img src="/2017/10/06/riding1/29.jpg" alt="도착" title="도착">
<p>드디어 이화령을 정복했다.. 이틀차에 맛본 지옥이었다.</p>
<img src="/2017/10/06/riding1/30.jpg" alt="백두대간이화령" title="백두대간이화령">
<p>친구로 보이는 50대 아저씨 두분께 사진을 부탁하여 사진을 찍었다.. 국토종주를 하다보면 젊은사람보다 50대 60대 분들이 더 많은것 같다.</p>
<img src="/2017/10/06/riding1/31.jpg" alt="폭포" title="폭포">
<p>4시간 가량 걸어서 올라간 거리를 자전거 타고 15분만에 내려왔다. 뭔가 힘들게 완성한 도미노를 무너뜨리는것만큼 시원하고 쾌감이 넘쳤다. 자전거 도로를 따라 달리다 보니 폭포가 등장하였다. 처음보는 폭포가 신기해서 찍어보았다.</p>
<img src="/2017/10/06/riding1/32.jpg" alt="불정역" title="불정역">
<p>조금 더 가니 불정역에 도착하였다. 불정역에는 이화령에서 사진찍어주신 두분이 계셨다. 인사를 건네고 이런저런 이야기를 나누었다. 혼자온것에 대해 칭찬과 격려를 많이 해주셔서 힘이 많이 났었다.</p>
<img src="/2017/10/06/riding1/33.jpg" alt="불정역" title="불정역">
<p>불정역에는 저런 기차도 있었다. 도착시간이 늦어서 들어가보지는 못하였다.</p>
<img src="/2017/10/06/riding1/34.jpg" alt="숙소" title="숙소">
<p>불정역에서 숙소로 출발하여 도착 후 짐을 내팽겨치고 간단하게 밥을 먹고 8시쯤 잠에들었다.</p>
<h3 id="3일차-5월5일"><a href="#3일차-5월5일" class="headerlink" title="3일차 5월5일"></a>3일차 5월5일</h3><h5 id="문경불정역-강정-고령보"><a href="#문경불정역-강정-고령보" class="headerlink" title="문경불정역 ~ 강정 고령보"></a>문경불정역 ~ 강정 고령보</h5><img src="/2017/10/06/riding1/35.jpg" alt="오르막" title="오르막">
<p>마찬가지로 6시쯤 출발하였다. 처음부터 만난 오르막에 당황하였지만 이번에는 끝까지 잘 타고 올라왔다. 오르막의 끝에선 지쳐 내가 올라온 오르막을 감상하며 휴식을 취해주었다.</p>
<img src="/2017/10/06/riding1/36.jpg" alt="벽화" title="벽화">
<p>반사경이 있어서 사진을 한번 더 찍어주었다. 반사경 작가미상의 벽화?가 눈에 띈다.</p>
<img src="/2017/10/06/riding1/37.jpg" alt="리쌍길아님ㅎ" title="리쌍길아님ㅎ">
<p>3일차는 지루했다고 느낀점이 자전거 도로는 좋으나 이런 길이 쭉 반복이다..</p>
<p>이날은 오후3시부터 6시까지 비가 많이왔다.. 우비를 입을까 하다 걸리적거릴까 입지는 않고 살기위해 달렸다. 덕분에 덥지는 않았으나 많이 찝찝했던 기억이 난다. 비로인해 더이상 찍은 사진이 존재하지 않는다.. 근처 여관에 도착하여 이날도 7시쯤 일정을 마무리하고 잠에 들었다.</p>
<h3 id="4일차-5월6일"><a href="#4일차-5월6일" class="headerlink" title="4일차 5월6일"></a>4일차 5월6일</h3><h5 id="강정고령보-양산물문화관"><a href="#강정고령보-양산물문화관" class="headerlink" title="강정고령보 ~ 양산물문화관"></a>강정고령보 ~ 양산물문화관</h5><img src="/2017/10/06/riding1/38.jpg" alt="갈때 가더라도 담배 한대 정도는 괜찮잖아" title="갈때 가더라도 담배 한대 정도는 괜찮잖아">
<p>갈대가 이뻐보여서 사진을 찍었다. 신세계의 이중구의 대사가 생각나기도 한 구간이었다.<br>찍을때는 몰랐는데 허벅지가 많이 탄 것을 사진을 통해 알수있다..</p>
<img src="/2017/10/06/riding1/39.jpg" alt="리쌍길아님2ㅎ" title="리쌍길아님2ㅎ">
<p>또 다시 길의 반복<br>바로옆에 낙동강이 있는데 역풍으로 인해 페달밟기가 매우 힘들었다.</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/Ygweu5vVQQY" frameborder="0" allowfullscreen></iframe></div>
<p>길을 반복하다 만나게된 고라니다.. 정말 빠르다.. 나도모르게 감탄사가 나왔다.</p>
<img src="/2017/10/06/riding1/39.jpg" alt="리쌍길아님2ㅎ" title="리쌍길아님2ㅎ">
<p>또 다시 길의 반복</p>
<img src="/2017/10/06/riding1/40.jpg" alt="또 언덕" title="또 언덕">
<p>이화령의 두려움이 채 가시기도 전에 산이 등장하였다. 그나마 이화령보다는 수월하고 구간도 그나마 짧았었다.</p>
<img src="/2017/10/06/riding1/41.jpg" alt="공기" title="공기">
<p>잠깐 휴식시간에 경치를 찍어보았다.</p>
<img src="/2017/10/06/riding1/42.jpg" alt="소" title="소">
<p>이번에는 소를 만났다.. 신기해서 찍어보았다..</p>
<img src="/2017/10/06/riding1/43.jpg" alt="해질녘" title="해질녘">
<p>해가 점점 저물어간다. 사진을 찍은 시간이 6시반. 밀양이었다.</p>
<img src="/2017/10/06/riding1/44.jpg" alt="두마리의 새" title="두마리의 새">
<p>앞만 보다 위를 한번보니 구름이 신기했다. 두 마리의 새가 싸우는 형상을 하고 있었고</p>
<img src="/2017/10/06/riding1/45.jpg" alt="천사" title="천사">
<p>반대편에는 천사가 날개짓 하는 구름이 있었다.. 이건 약간 억지같긴 하다..</p>
<img src="/2017/10/06/riding1/46.jpg" alt="강력한 아버지" title="강력한 아버지">
<p>길을 따라가다 만난 가족이다. 아버지, 딸(첫째),아들(둘째) 로 추정되는데 아버지는 킥보드 딸은 MTB, 아들은 미니벨로를 타고있었다. 아버지는 가벼운 몸을 이끌고 저 멀리가고있었고 남매는 옥신각신하며 달리고 있었다. 남매가 매우 귀여웠고 아버지가 남매를 강력하게 키우는 것이 인상깊었다. 간식이라도 줄걸그랬다..</p>
<p>마지막 종점인 부산 낙동강 하굿둑까지 약 50KM남은 곳에서 휴식을 취했다.</p>
<h3 id="5일차-5월-7일"><a href="#5일차-5월-7일" class="headerlink" title="5일차 5월 7일"></a>5일차 5월 7일</h3><h5 id="양산-물문화관-부산-낙동강-하굿둑"><a href="#양산-물문화관-부산-낙동강-하굿둑" class="headerlink" title="양산 물문화관 ~ 부산 낙동강 하굿둑"></a>양산 물문화관 ~ 부산 낙동강 하굿둑</h5><p>대망의 마지막날 아침 7시에 출발하여 갈대밭을 지나<br><img src="/2017/10/06/riding1/47.jpg" alt="여자의 마음은 갈대랍니다." title="여자의 마음은 갈대랍니다."></p>
<img src="/2017/10/06/riding1/48.jpg" alt="낙동강 하굿둑 인증센터에 도착하였다" title="낙동강 하굿둑 인증센터에 도착하였다">
<p>마지막이라 생각하니 페달이 더욱 무겁게 느껴졌다..</p>
<img src="/2017/10/06/riding1/49.jpg" alt="인증샷" title="인증샷">
<p>혼자오신 아저씨께 사진을 부탁하고</p>
<img src="/2017/10/06/riding1/50.jpg" alt="인증샷" title="인증샷">
<p>여기서도 찍어야 된다며 강제로 한장을 더 찍어주셨다. 참 감사했다.<br>역시나 인천에서 출발한점에 대해 칭찬을 많이해주셨다.</p>
<img src="/2017/10/06/riding1/51.jpg" alt="인증샷" title="인증샷">
<p>기념촬영 후 인증센터에 들어가 금뱃지를 받고 메달을 신청하였다.<br>이로서 4박5일간의 국토종주는 끝났고 부산 터미널의 모텔에서 4시간 정도 휴식을 취하다 버스를 타고 부천으로 올라왔다.</p>
<img src="/2017/10/06/riding1/53.jpg" alt="국가의 부름" title="국가의 부름">
<p>그리고 얼마지나지 않아 어김없이 찾아온 국가의 부름 하하하하</p>
<img src="/2017/10/06/riding1/52.jpg" alt="메달" title="메달">
<p>또 얼마지나지 않아 인증메달과 인증서가 도착하였다.</p>
<h3 id="인상깊었던점"><a href="#인상깊었던점" class="headerlink" title="인상깊었던점"></a>인상깊었던점</h3><p> 맞은편에서 달려오는 사람들의 안녕하세요, 수고하세요 라는 인사말은 참 많은 힘이되었던것 같다. 가는 방향도 다른 1초의 인연이지만 서로 힘내자는 무언의 메세지가 느껴졌다. 4박5일의 짧은 기간이었지만 많은 사람들의 따듯함을 느낄수 있었다. 그 분들의 말 한마디 한마디가 힘을 낼 수있는 좋은 원동력이었고 그 덕분에 탈 없이 완주할 수 있었던것 같다.<br> 그리고 가장 인상깊었던 사건이 하나 있다. 자전거 길이 쭉 나있는 저멀리서 내 또래로 보이는 사람이 휠체어를 끌고 걸어오고 있었다. 휠체어엔 그 누구도 타고있지 않아 멀리서부터 궁금증을 유발하였다. 멀쩡한 내 또래가 왜 휠체어를 끌고오지라는 궁금증을 갖고 점점 맞은편의 휠체어와 가까워 졌을 때 뭉클함을 느끼지 않을 수 없었다. 아버지로 추정되는 사진이 휠체어 위에 올려져있었다. 그 친구의 말못할 사정을 알지는 못하지만 정말 착하구나라는 생각과 동시에 나를 돌아볼 수 있었던 기회가 되었던것 같다.</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p> 우선 내 오랜 버킷리스트를 완료한것에 대해 뿌듯했고 시간이 된다면 긴 기간동안 경치를 즐기며 다시한번 도전하고 싶다. 이번에는 완주를 목표로 주변 경치를 즐기지 못한것이 매우 아쉬웠다. 4박5일이라는 기간동안 많은 것을 배우고 느낄 수 있었던 좋은 기회였으며 나 자신에 대해 다시한번 평가할 수 있었던 좋은기회였던것 같다.   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;오래전부터 버킷리스트였던 국토종주를 완료하였다. 4박5일의 기간동안 혼자 고군분투하며 유일한 친구 네이버 지도와 함께했던 기억.. 잊지않기 위해 사진위주로 정리해본다.&lt;/p&gt;
&lt;h3 id=&quot;출발전&quot;&gt;&lt;a href=&quot;#출발전&quot; class=&quot;head
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Travel" scheme="http://KKimSangHeon.github.io/categories/About-Me/Travel/"/>
    
    
      <category term="국토종주" scheme="http://KKimSangHeon.github.io/tags/%EA%B5%AD%ED%86%A0%EC%A2%85%EC%A3%BC/"/>
    
  </entry>
  
  <entry>
    <title>Spring 기반 그룹웨어 개발</title>
    <link href="http://KKimSangHeon.github.io/2017/10/04/groupware/"/>
    <id>http://KKimSangHeon.github.io/2017/10/04/groupware/</id>
    <published>2017-10-03T17:55:55.000Z</published>
    <updated>2017-10-03T21:01:24.012Z</updated>
    
    <content type="html"><![CDATA[<h3 id="그룹웨어-개발"><a href="#그룹웨어-개발" class="headerlink" title="그룹웨어 개발"></a>그룹웨어 개발</h3><p>그룹웨어는 회원가입, 로그인, 게시판, 일정관리, 사원조회, 쪽지, 마이페이지 기능을 갖고있다.</p>
<h4 id="ERD"><a href="#ERD" class="headerlink" title="ERD"></a>ERD</h4><img src="/2017/10/04/groupware/ERD.PNG" alt="ERD" title="ERD">
<p>그룹웨어에서 사용하는 ERD는 위과 같다.</p>
<h4 id="보안"><a href="#보안" class="headerlink" title="보안"></a>보안</h4><p>그룹웨어 내의 모든 페이지이동은 INTERCEPTOR을 활용하여 페이지 이동 전 권한을 확인한다. 로그인하지 않은 회원이 URL로 페이지 이동을 할 경우 다음과 같은 화면이 출력된다.<br><img src="/2017/10/04/groupware/잘못된_접속.PNG" alt="올바르지 않은 접근" title="올바르지 않은 접근"></p>
<h4 id="회원가입"><a href="#회원가입" class="headerlink" title="회원가입"></a>회원가입</h4><p>그룹웨어를 이용하기 위해서는 회원가입을 거쳐야 한다. 회원가입 후 관리자의 승인 후 로그인이 가능하다.<br><img src="/2017/10/04/groupware/초기화면.PNG" alt="초기화면" title="초기화면"><br>위의 화면에서 회원가입 버튼을 누르면 다음과 같은 폼이 출력된다.</p>
<img src="/2017/10/04/groupware/에두_회원가입.PNG" alt="회원가입" title="회원가입">
<p>정보를 입력하고 가입 요청하기 버튼을 클릭하자.</p>
<img src="/2017/10/04/groupware/회원가입_성공.PNG" alt="회원가입 성공" title="회원가입 성공">
<p>정상적으로 가입이 완료되면 다음과 같은 화면이 출력된다. 해당 아이디로 로그인이 불가능하나 관리자의 승인 후 로그인이 가능해진다.</p>
<img src="/2017/10/04/groupware/미승인로그인.PNG" alt="승인되지않은 로그인" title="승인되지않은 로그인">
<p>승인되지 않은 아이디로 로그인 할 경우 위와 같은 화면이 출력된다.</p>
<h4 id="관리자의-가입-승인"><a href="#관리자의-가입-승인" class="headerlink" title="관리자의 가입 승인"></a>관리자의 가입 승인</h4><p>사전에 지정해 놓은 아이디로 로그인 하여 관리자 화면에 접속하여 신규 가입한 회원에 한해 승인을 해줄 수 있다.</p>
<img src="/2017/10/04/groupware/관리자_로그인.PNG" alt="관리자 로그인" title="관리자 로그인">
<p>관리자 계정으로 로그인을 할 경우 우측 상단에 관리페이지가 출력된다. 이는 EMPLOYEE 테이블의 ROLE 컬럼값을 통해 판단한다. ROLE컬럼의 값은 USER, ADMIN으로 나뉜다. 관리자가 아님에도 불구하고 URL로 관리자 페이지로 접속할 경우 다음과 같은 화면이 출력된다.<br><img src="/2017/10/04/groupware/관리자페이지접속시도.PNG" alt="관리자가 아닌 사용자가 접근" title="관리자가 아닌 사용자가 접근"></p>
<p>다시 돌아와서 관리자가 로그인을 하고 우측상단의 관리페이지를 접속할 경우 다음과 같은 화면이 출력된다.</p>
<img src="/2017/10/04/groupware/관리자페이지.PNG" alt="관리자페이지" title="관리자페이지">
<p>관지자는 가입 승인하기 버튼을 클릭하여 가입승인을 할 수 있다. 이후 해당 사용자는 로그인이 가능해진다.</p>
<img src="/2017/10/04/groupware/가입승인.PNG" alt="가입승인" title="가입승인">
<p>가입승인 버튼을 누를 경우 alert창이 생성되며 가입이 승인된다.</p>
<h4 id="로그인"><a href="#로그인" class="headerlink" title="로그인"></a>로그인</h4><p>이전에 생성한 아이디로 로그인을 진행하자.</p>
<img src="/2017/10/04/groupware/에두_초기화면.PNG" alt="초기화면" title="초기화면">
<p>위와 같이 로그인이 되었다.</p>
<h4 id="게시판"><a href="#게시판" class="headerlink" title="게시판"></a>게시판</h4><p>게시판은 공지사항, 자유게시판, 팀 게시판이 존재한다.<br>게시판 테이블(BOARD)에는 BOARD_AUTHORITY, IS_TEAM 컬럼이 존재하는데 BOARD_AUTHORITY는 글쓰기 권한을 의미한다. 해당 게시판의 BOARD_AUTHORITY가 3일경우 POSITION_ID가 3(전무) 이상인 회원만 게시물 작성이 가능하다.<br>IS_TEAM 컬럼은 팀게시판 유무이며 TEAM_ID가 같은 즉 같은팀이 작성한 글만 볼 수 있도록 하는 역할이다.</p>
<img src="/2017/10/04/groupware/공지사항게시판.PNG" alt="공지사항" title="공지사항">
<p>조금전 가입한 에두는 직급이 사원(POSITION_ID = 10)이므로 공지사항 게시판에 글쓰기 버튼이 나타나지 않는다.</p>
<img src="/2017/10/04/groupware/자유게시판.PNG" alt="자유게시판" title="자유게시판">
<p>자유게시판에는 글씨기 버튼이 나타나며 글 작성이 가능하다.<br>글 쓰기 버튼을 누를 경우 다음과 같은 화면이 출력된다.</p>
<img src="/2017/10/04/groupware/자유게시판_글쓰기.PNG" alt="글쓰기" title="글쓰기">
<p>위와 같이 글을 작성하는 폼을 통해 글작성이 가능하다.</p>
<img src="/2017/10/04/groupware/글쓰기완료.PNG" alt="글쓰기 완료" title="글쓰기 완료">
<p>글을 작성하게되면 게시판으로 돌아오며 위와같이 출력된다.</p>
<img src="/2017/10/04/groupware/글상세보기.PNG" alt="글 상세보기" title="글 상세보기">
<p>해당 글을 클릭하여 위와같이 자세히 볼 수 있으며 자신의 글인경우 삭제하기 버튼이 보인다.</p>
<h4 id="일정관리"><a href="#일정관리" class="headerlink" title="일정관리"></a>일정관리</h4><p>자신의 일정을 추가하여 관리할 수 있는 페이지이다.</p>
<img src="/2017/10/04/groupware/일정관리메인.PNG" alt="일정관리페이지" title="일정관리페이지">
<p>full callendar 라는 오픈소스를 사용하여 구현하였다.</p>
<img src="/2017/10/04/groupware/일정등록.PNG" alt="일정등록" title="일정등록">
<p>위와같이 일정등록이 가능하다</p>
<img src="/2017/10/04/groupware/일정등록완료.PNG" alt="일정등록완료" title="일정등록완료">
<p>일정을 등록하게 되면 위와 같이 일정이 달력에 표시된다.</p>
<img src="/2017/10/04/groupware/여러개의일정.PNG" alt="여러개의일정" title="여러개의일정">
<p>여러개의 일정을 등록할 경우 다음과같이 한눈에 파악이 가능하다.</p>
<h4 id="사원조회"><a href="#사원조회" class="headerlink" title="사원조회"></a>사원조회</h4><p>모든 사원의 조회가 가능한 페이지이다. jqgrid라는 오픈소스를 활용하였다.<br><img src="/2017/10/04/groupware/사원조회화면.PNG" alt="사원조회" title="사원조회"><br>디폴트로 전체 사원이 검색된다. 또한 메세지 보내기 버튼을 통해 메세지 전송이 가능하다.</p>
<img src="/2017/10/04/groupware/개발2팀검색.PNG" alt="개발2팀검색" title="개발2팀검색">
<p>팀명 또는 이름으로 조회가 가능하며 위는 팀명으로만 조회한 경우이다.</p>
<img src="/2017/10/04/groupware/김상헌조회.PNG" alt="김상헌조회" title="김상헌조회">
<p>위는 김상헌을 조회한 경우이다. 메세지 보내기 버튼을 누르면</p>
<img src="/2017/10/04/groupware/메세지보내기.PNG" alt="메세지보내기" title="메세지보내기">
<p>위와 같은 팝업창이 생성된다.</p>
<img src="/2017/10/04/groupware/에두_메세지보내기.PNG" alt="메세지보내기" title="메세지보내기">
<p>위와 같이 메세지를 입력후 전송하기 버튼을 누르면 메세지가 전송된다.</p>
<h4 id="쪽지"><a href="#쪽지" class="headerlink" title="쪽지"></a>쪽지</h4><p>김상헌의 계정으로 로그인하여 쪽지 탭으로 들어갈 경우 다음과 같이 화면이 출력된다.<br><img src="/2017/10/04/groupware/쪽지.PNG" alt="쪽지" title="쪽지"><br>글자수가 23자 이상일 경우 …이 붙게되며 내용이 생략된다.<br>해당 메세지를 눌러 자세한 내용을 확인할 수 있으며 답장버튼을 눌러 답장할 수 있으며, 삭제 또한 가능하다.</p>
<img src="/2017/10/04/groupware/자세히보기.PNG" alt="쪽지 자세히 보기" title="쪽지 자세히 보기">
<p>위와 같이 쪽지의 내용이 자세히 보인다.</p>
<img src="/2017/10/04/groupware/답장.PNG" alt="답장" title="답장">
<p>답장 버튼을 누를 경우 위와같이 화면이 출력되며 답장이 가능하다.</p>
<img src="/2017/10/04/groupware/답장보내기.PNG" alt="답장보내기" title="답장보내기">
<p>위와 같이 답장을 보내고 에두의 계정으로 로그인 할 경우</p>
<img src="/2017/10/04/groupware/에두_확인.PNG" alt="답장확인" title="답장확인">
<p>위와 같이 메세지가 온 것을 확인할 수 있다.</p>
<h4 id="마이페이지"><a href="#마이페이지" class="headerlink" title="마이페이지"></a>마이페이지</h4><p>개인정보를 수정할 수 있는 마이페이지이다.<br>사번, 소속, 직급은 수정 불가능하며 비밀번호, 사진, 이름, 이메일이 수정가능하다.<br><img src="/2017/10/04/groupware/마이페이지.PNG" alt="마이페이지" title="마이페이지"><br>비밀번호를 제외한 모든 데이터는 마이페이지에 접속할 경우 입력되어 있다.</p>
<h4 id="소스코드-Github-Repository"><a href="#소스코드-Github-Repository" class="headerlink" title="소스코드 (Github Repository)"></a>소스코드 (Github Repository)</h4><p><a href="https://github.com/KKimSangHeon/groupware" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;그룹웨어-개발&quot;&gt;&lt;a href=&quot;#그룹웨어-개발&quot; class=&quot;headerlink&quot; title=&quot;그룹웨어 개발&quot;&gt;&lt;/a&gt;그룹웨어 개발&lt;/h3&gt;&lt;p&gt;그룹웨어는 회원가입, 로그인, 게시판, 일정관리, 사원조회, 쪽지, 마이페이지 기능을 갖고
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Spring Framework" scheme="http://KKimSangHeon.github.io/tags/Spring-Framework/"/>
    
      <category term="Java Script" scheme="http://KKimSangHeon.github.io/tags/Java-Script/"/>
    
  </entry>
  
  <entry>
    <title>3. 리스트</title>
    <link href="http://KKimSangHeon.github.io/2017/09/29/python3/"/>
    <id>http://KKimSangHeon.github.io/2017/09/29/python3/</id>
    <published>2017-09-29T02:30:31.000Z</published>
    <updated>2017-09-29T07:29:24.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="리스트"><a href="#리스트" class="headerlink" title="리스트"></a>리스트</h3><p>순서를 가지는 객체들의 집합, 파이썬 자료형들 중에서 가장 많이 사용한다.<br>시퀀스 자료형이기 때문에 시퀀스의 연산(인덱싱, 슬라이싱, 연결(+), 반복(*), len(), in, not in) 등의 연산이 가능하다. 특히, list는 del() 함수를 통한 삭제도 가능하다.</p>
<figure class="highlight java"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">'python'</span>]</div><div class="line"></div><div class="line">print(l[-<span class="number">2</span>], l[-<span class="number">1</span>], l[<span class="number">0</span>], l[<span class="number">1</span>], l[<span class="number">2</span>])</div><div class="line">print(l[<span class="number">1</span>:<span class="number">3</span>])</div><div class="line">print(l * <span class="number">2</span>)</div><div class="line">print(l + [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">print(len(l))</div><div class="line">print(<span class="number">2</span> in l)</div><div class="line"></div><div class="line">del l[<span class="number">0</span>]</div><div class="line">print(l)</div><div class="line"></div><div class="line">리스트는 변경 가능(Mutable)한 자료형이다.</div><div class="line">a = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="number">10</span>, <span class="number">20</span>]</div><div class="line">a[<span class="number">2</span>] = a[<span class="number">2</span>] + <span class="number">90</span></div><div class="line">print(a)</div><div class="line"></div><div class="line">슬라이스를 통한 치환</div><div class="line">a = [<span class="number">1</span>, <span class="number">12</span>, <span class="number">123</span>, <span class="number">1234</span>]</div><div class="line"></div><div class="line">a[<span class="number">0</span>:<span class="number">2</span>] = [<span class="number">10</span>, <span class="number">20</span>]</div><div class="line">print(a)</div><div class="line"></div><div class="line">a[<span class="number">0</span>:<span class="number">2</span>] = [<span class="number">10</span>]</div><div class="line">print(a)</div><div class="line"></div><div class="line">a[<span class="number">1</span>:<span class="number">2</span>] = [<span class="number">20</span>]</div><div class="line">print(a)</div><div class="line"></div><div class="line">a[<span class="number">2</span>:<span class="number">3</span>] = [<span class="number">30</span>]</div><div class="line">print(a)</div><div class="line"></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;리스트&quot;&gt;&lt;a href=&quot;#리스트&quot; class=&quot;headerlink&quot; title=&quot;리스트&quot;&gt;&lt;/a&gt;리스트&lt;/h3&gt;&lt;p&gt;순서를 가지는 객체들의 집합, 파이썬 자료형들 중에서 가장 많이 사용한다.&lt;br&gt;시퀀스 자료형이기 때문에 시퀀스의 연산
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Python" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Python/"/>
    
    
      <category term="Python" scheme="http://KKimSangHeon.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>2. 제어문</title>
    <link href="http://KKimSangHeon.github.io/2017/09/29/python2/"/>
    <id>http://KKimSangHeon.github.io/2017/09/29/python2/</id>
    <published>2017-09-29T02:24:02.000Z</published>
    <updated>2017-09-29T02:30:51.820Z</updated>
    
    <content type="html"><![CDATA[<p>If문<br><figure class="highlight java"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span></div><div class="line"><span class="keyword">if</span> a &gt; <span class="number">5</span>:</div><div class="line">    print(<span class="string">"big"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"small"</span>)</div><div class="line"></div><div class="line"></div><div class="line">n = -<span class="number">2</span></div><div class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span>:</div><div class="line">    print(<span class="string">'양수'</span>)</div><div class="line">elif n &lt; <span class="number">0</span>:</div><div class="line">    print(<span class="string">'음수'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'0'</span>)</div><div class="line"></div><div class="line">order = <span class="string">'spam'</span></div><div class="line"><span class="keyword">if</span> order == <span class="string">'spam'</span>:</div><div class="line">    price = <span class="number">1000</span></div><div class="line">elif order == <span class="string">'egg'</span>:</div><div class="line">    price = <span class="number">500</span></div><div class="line">elif order == <span class="string">'spagetti'</span>:</div><div class="line">    price = <span class="number">2000</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    price = <span class="number">0</span></div><div class="line"></div><div class="line">print(price)</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>For문</p>
<figure class="highlight java"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = [<span class="string">'cat'</span>, <span class="string">'cow'</span>, <span class="string">'tiger'</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> animal in a:</div><div class="line">    print(animal)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">range</span><span class="params">(<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="title">print</span><span class="params">(x, end=<span class="string">" "</span>)</span></div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>while문<br><figure class="highlight java"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">count = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> count &lt; <span class="number">11</span>:</div><div class="line">    print(count, end=<span class="string">' '</span>)</div><div class="line">    count += <span class="number">1</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">''</span>)</div></pre></td></tr></table></figure></p>
<p>break, continue, else<br><figure class="highlight java"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</div><div class="line">    i += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> i &lt; <span class="number">5</span>:</div><div class="line">        <span class="function"><span class="keyword">continue</span></span></div><div class="line">    <span class="title">print</span><span class="params">(i, end=<span class="string">' '</span>)</span></div><div class="line">    <span class="keyword">if</span> i &gt; 10:</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="title">print</span><span class="params">(<span class="string">'else block'</span>)</span></div><div class="line"></div><div class="line"><span class="title">print</span><span class="params">(<span class="string">'done'</span>)</span></div><div class="line"></div><div class="line"></div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> True:</div><div class="line">    print(i)</div><div class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    i += <span class="number">1</span></div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If문&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;PythonExam.pi&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Python" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Python/"/>
    
    
      <category term="Python" scheme="http://KKimSangHeon.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>1. 변수명과 예약어</title>
    <link href="http://KKimSangHeon.github.io/2017/09/27/python/"/>
    <id>http://KKimSangHeon.github.io/2017/09/27/python/</id>
    <published>2017-09-27T04:43:58.000Z</published>
    <updated>2017-10-03T20:37:05.439Z</updated>
    
    <content type="html"><![CDATA[<h3 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h3><p>1991년 귀도 반 로섬( Guido van Rossum ) 이 발표한 인터프리터 언어<br>귀도가 구글에 입사하고 구글의 3대 개발언어 중 하나로 채택되면서 유명세를 탔다.</p>
<h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><p>대화 기능의 인터프리터 언어<br>동적타이핑(동적인 데이터 타입 결정 지원)<br>플랫폼 독립적 언어(Unix, Linux, Window9x/NT 계열, DOS, OS/2, Mac OS, Nokia 등)</p>
<p>간단하고 쉬운 문법<br>가독성(  코드블러의 들여쓰기 구분 )<br>비교적 짧은 개발 시간<br>고수준의 내장 객체 자료형 제공(List, Dictionary, String, Turple 등의 자료구조)<br>메모리 자동 관리<br>무료(비영리의 파이썬 소프트웨어 재단이 관리하는 개방형, 공동체 기반 개발 모델)<br>많은 수의 풍부한 라이브러리 제공<br>높은 확장성(접착성, Glue Language)<br>유니코드</p>
<h3 id="파이선의-종류"><a href="#파이선의-종류" class="headerlink" title="파이선의 종류"></a>파이선의 종류</h3><h4 id="Cpython"><a href="#Cpython" class="headerlink" title="Cpython"></a>Cpython</h4><p>C로 작성된 파이썬 인터프리터</p>
<h4 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h4><p>Java로 작성된 파이썬 인터프리터</p>
<h4 id="IronPython"><a href="#IronPython" class="headerlink" title="IronPython"></a>IronPython</h4><p>.Net  플랫폼 용 파이썬 인터프리터, C#으로 구현</p>
<h4 id="PyPy"><a href="#PyPy" class="headerlink" title="PyPy"></a>PyPy</h4><p>파이썬으로 작성된 파이썬 인터프리터</p>
<figure class="highlight"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">가장 바깥쪽에 있는 블록의 코드는 1열부터 시작해야 한다.</div><div class="line">&gt;&gt;&gt; a=1</div><div class="line">&gt;&gt;&gt;  a=1</div><div class="line">SyntaxError: unexpected indent</div><div class="line"></div><div class="line"></div><div class="line">내부 블록은 같은 거리만큼 들여 쓰기를 해야 한다.</div><div class="line">&gt;&gt;&gt; if( a &gt; 1 ):</div><div class="line">	print( "big" )</div><div class="line">		print( "really?" )</div><div class="line">SyntaxError: unexpected indent</div><div class="line"></div><div class="line">from __future__ import print_function</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"># 치환문의 예</div><div class="line"></div><div class="line">a = 1</div><div class="line">b = a + 1</div><div class="line">print(a , b, sep=',')</div><div class="line"></div><div class="line"># 여러 변수를 한번에 치환</div><div class="line"></div><div class="line">e, f =3, 7</div><div class="line">print(e ,f )</div><div class="line"></div><div class="line"># 하나의 값을 여러 변수에 할당</div><div class="line">x = y = z = 1</div><div class="line"></div><div class="line"># 값 교환</div><div class="line">f, e = e, f</div><div class="line">print(e, f)</div><div class="line"></div><div class="line"># 동적 타이핑</div><div class="line">a = 1</div><div class="line">print(type(a))</div><div class="line">a = 'hell'</div><div class="line">print(type(a))</div><div class="line"></div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"></div><div class="line">import keyword</div><div class="line"></div><div class="line"></div><div class="line"># 변수 이름은 문자, 숫자, _ 로 구성해야 한다.</div><div class="line">friend = 1</div><div class="line">a = 10</div><div class="line">my_name = '김상헌'</div><div class="line">_yourName = '둘리'</div><div class="line">member1 = '도우넛'</div><div class="line"></div><div class="line"># 에러</div><div class="line"># $friend = 2</div><div class="line"># a! = 1</div><div class="line"># 1abc = 10</div><div class="line"></div><div class="line"># 에러: 예약어는 사용할 수 없다.</div><div class="line"># def = 10</div><div class="line">print(keyword.kwlist)</div><div class="line"></div><div class="line"># 한글 이름의 변수도 가능하다.</div><div class="line">가격1 = 2000</div><div class="line">print(가격1 - 200)</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="파이썬-변수-이름-규칙"><a href="#파이썬-변수-이름-규칙" class="headerlink" title="파이썬 변수 이름 규칙"></a>파이썬 변수 이름 규칙</h4><p>1)문자(유니코드), 숫자, 밑줄(_)로 구성<br>2)숫자는 처음에 올 수 없다.<br>3)대소문자 구분<br>4)예약어 사용 불가<br>5)함수 이름, 클래스 이름도 같은 규칙이 적용된다.<br><figure class="highlight"><figcaption><span>PythonExam.pi</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 참이나 거짓을 나타내는 True, False 두 상수를 갖는다</div><div class="line"></div><div class="line">a = 1</div><div class="line">b = a &lt; 10</div><div class="line">print(b,type(b),sep=",")</div><div class="line"></div><div class="line">b1 = True</div><div class="line">b2 = False</div><div class="line"></div><div class="line">print(b1 + 10)</div><div class="line">print(b2 + 10)</div><div class="line">print(True + True )</div><div class="line"></div><div class="line">if a &lt; 10:</div><div class="line">    print(a)</div><div class="line"></div><div class="line"></div><div class="line">a = 23</div><div class="line">print(type(a))</div><div class="line">print(isinstance(a,int))</div><div class="line">print(isinstance(a,bool))</div><div class="line"></div><div class="line">b = 0b1101</div><div class="line">c = 0o23</div><div class="line">d = 0x23</div><div class="line"></div><div class="line">print(a, b, c, d, sep=' ')</div><div class="line"></div><div class="line"># 3.x 에서는 int 와 long이 합쳐졌다</div><div class="line"># 따라서 표현 범위가 굉장히 크다</div><div class="line"></div><div class="line">e = 2 ** 1024</div><div class="line">print(e)</div><div class="line">print(type(e))</div><div class="line"></div><div class="line"># 변환 함수</div><div class="line">print(oct(38))</div><div class="line">print(hex(38))</div><div class="line">print(bin(38))</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;소개&quot;&gt;&lt;a href=&quot;#소개&quot; class=&quot;headerlink&quot; title=&quot;소개&quot;&gt;&lt;/a&gt;소개&lt;/h3&gt;&lt;p&gt;1991년 귀도 반 로섬( Guido van Rossum ) 이 발표한 인터프리터 언어&lt;br&gt;귀도가 구글에 입사하고 구글의 3
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Python" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Python/"/>
    
    
      <category term="Python" scheme="http://KKimSangHeon.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>13. Logging, IoC / DI</title>
    <link href="http://KKimSangHeon.github.io/2017/09/18/spring5/"/>
    <id>http://KKimSangHeon.github.io/2017/09/18/spring5/</id>
    <published>2017-09-18T00:26:03.000Z</published>
    <updated>2017-09-18T05:08:58.826Z</updated>
    
    <content type="html"><![CDATA[<h4 id="로깅이란"><a href="#로깅이란" class="headerlink" title="로깅이란?"></a>로깅이란?</h4><p>-비 기능적 요구사항  ( Non Functional Requirement )<br>하지만,  프로그램 개발 중 디버깅 및 개발완료 후 문제점 추적 및 분석을 위해 필수적으로 갖추어야 할 요구 조건<br>,로그(Log) 는  프로그램 개발이나 운영 시 발생하는 문제점을 추적 하거나  운영 상태를 모니터링 하는 정보<br>,로깅(logging)이란  로그(log)를  생성하도록  시스템을 작성하는 활동<br>-얻을 수 있는 것<br>1.재현하기 힘든 (  테스트 환경이 아닌 개발 완료된 환경에서 발생하는 )  버그에 대한  유용한 정보를 제공<br>2.성능에 관한 통계와 정보를 제공할 수 있다.</p>
<p>Inversion of Control( 제어역전 ) 이란 프로그램 코드 내에서 참조하려는 객체를 직접 생성  하지 않고  외부의 다른 존재가  생성하여 제공한다는 개념<br>외부의 다른 존재(객체) 를  Container 라고 하며  IoC 오브젝트 또는 IoC Container 라고 한다</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;로깅이란&quot;&gt;&lt;a href=&quot;#로깅이란&quot; class=&quot;headerlink&quot; title=&quot;로깅이란?&quot;&gt;&lt;/a&gt;로깅이란?&lt;/h4&gt;&lt;p&gt;-비 기능적 요구사항  ( Non Functional Requirement )&lt;br&gt;하지만,  프로그램 개발
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>12.AOP</title>
    <link href="http://KKimSangHeon.github.io/2017/09/15/spring4/"/>
    <id>http://KKimSangHeon.github.io/2017/09/15/spring4/</id>
    <published>2017-09-15T00:11:03.000Z</published>
    <updated>2017-09-18T00:28:25.075Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AOP-개요"><a href="#AOP-개요" class="headerlink" title="AOP 개요"></a>AOP 개요</h4><p>(A)spect (O)riented (P)rogramming : 관점 지향 프로그래밍<br>가장 기초가 되는 개념은 관심의 분리(Separation of Concern)<br>AOP는 OOP를 수정하는 것이라 보면 된다.<br>가장 기초가 되는 개념은 관심의 분리(Separation of Concern)<br>1.핵심관심 : 시스템의 핵심 가치와 목적이 그대로 드러난 관심영역</p>
<p>2.횡단관심: 핵심관심 전반에 걸쳐 반복적으로 나오게 되는 로깅, 트랜잭션, 보안, 인증, 리소스 풀링, 에러체크 등의 관심영역</p>
<p>3.관심의 분리: 여러 핵심관심에 걸쳐 등장하는 횡단관심을 분리하여 독립적인 모듈로 만들고 핵심관심이 실행되는 동안 횡단관심을 호출하는 코드를 직접 명시하지 않고 선언적으로 처리</p>
<p>4.핵심관심 모듈의 중간중간에서 필요한 횡단관심 모듈을 직접 호출하지 않고 위빙(Weaving)이라 불리는 작업을 이용하여 횡단관심 코드가 삽입되도록 만든다.</p>
<p>5.핵심관심모듈에서는 횡단관심모듈이 무엇인지 조차 인식할 필요가 없음</p>
<h4 id="AOP의-구성요소"><a href="#AOP의-구성요소" class="headerlink" title="AOP의 구성요소"></a>AOP의 구성요소</h4><p>1) JoinPoint(언제)<br>-횡단관심모듈은 코드의 아무 때나 삽입이 되는 건 아니다.<br>-조인포인트라 불리는 특정 시점에서만 삽입이 가능하다.</p>
<p>2) PointCut (어디에서)<br>-어느 조인포인트에 횡단관심모듈을 삽입할지를 결정하는 기능<br>-횡단관심이 삽입될 특정 클래스의 특정 메소드를 선택하는 방법 정의</p>
<p>3) Advice(or Interceptor, 무엇을 )<br>횡단관심모듈(로깅, 보안, 트랜잭션 등)</p>
<p>4) Weaving(위빙)<br>-어드바이스(횡단관심)를 삽입하는 과정<br>-위빙작업이 일어나는 시간<br>컴파일 시  - 특별한 컴파일러 필요<br>클래스 로딩시 - 특별한 클래스로더 필요<br>런타임시 - 프록시를 이용한 방법(스프링)</p>
<p>####실습<br>project 생성 - new maven project - 다음 - quick start 다음 - 그룹ID:com.bigdata2017   /  아티클아이디:aoptest</p>
<p>프로젝트 우클릭 - 프로퍼티스- 자바빌드패스 - JRE 수정<br>프로젝트 우클릭 - 프로퍼티스- project facets - Runtimes탭 - jre 선택 후 어플라이</p>
<p>아래와 같이 수정<br><figure class="highlight"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">  &lt;groupId&gt;com.bigdata2017&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;aoptest&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">  &lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">  &lt;name&gt;aoptest&lt;/name&gt;</div><div class="line">  &lt;url&gt;http://maven.apache.org&lt;/url&gt;</div><div class="line"></div><div class="line">  &lt;properties&gt;</div><div class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">    &lt;org.springframework-version&gt;4.1.1.RELEASE&lt;/org.springframework-version&gt;</div><div class="line">  &lt;/properties&gt;</div><div class="line"></div><div class="line">  &lt;dependencies&gt;</div><div class="line">		  &lt;!-- spring context --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		  &lt;!-- spring aspect --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">		    	&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">		    	&lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</div><div class="line">		    	&lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line"></div><div class="line">	    &lt;dependency&gt;</div><div class="line">	      &lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">	      &lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">	      &lt;version&gt;3.8.1&lt;/version&gt;</div><div class="line">	      &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">	    &lt;/dependency&gt;</div><div class="line">  &lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>프로젝트 우클릭-  뉴 - 소스폴더 -src/main/resource<br>생성된 소스폴더안에 config패키지 추가<br>패키지 안에 applicationContext.xml</p>
<figure class="highlight"><figcaption><span>applicationContext.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">	xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">	&lt;!-- AOP AutoProxy --&gt;</div><div class="line">	&lt;aop:aspectj-autoproxy /&gt;</div><div class="line"></div><div class="line">	&lt;context:annotation-config /&gt;</div><div class="line"></div><div class="line">	&lt;context:component-scan base-package="com.bigdata2017.aoptest"&gt;</div><div class="line">		&lt;context:include-filter type="annotation"</div><div class="line">			expression="org.springframework.stereotype.Repository" /&gt;</div><div class="line">		&lt;context:include-filter type="annotation"</div><div class="line">			expression="org.springframework.stereotype.Service" /&gt;</div><div class="line">		&lt;context:include-filter type="annotation"</div><div class="line">			expression="org.springframework.stereotype.Component" /&gt;</div><div class="line">	&lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>App.java에 입력</p>
<figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.aoptest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line">    	ApplicationContext ac =</div><div class="line">    			<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"config/applicationContext.xml"</span>);</div><div class="line"></div><div class="line">    	ProductService ps =</div><div class="line">    	ac.getBean( ProductService.class );</div><div class="line"></div><div class="line">    	ProductVo vo = ps.find( <span class="string">"camera"</span> );</div><div class="line">    	<span class="comment">//System.out.println( vo );</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>ProductService.java 생성</p>
<figure class="highlight java"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.aoptest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> ProductVo <span class="title">find</span><span class="params">( String keyword )</span> </span>&#123;</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"finding...."</span>);</div><div class="line"></div><div class="line"><span class="comment">//		if( 1 == 2-1 ) &#123;</span></div><div class="line"><span class="comment">//			throw new RuntimeException( "exceptionoccrs" );</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ProductVo( keyword );</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>ProductVo생성</p>
<figure class="highlight java"><figcaption><span>ProductVo.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.aoptest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVo</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProductVo</span><span class="params">( String name )</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"ProductVo [name="</span> + name + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyAspect생성<br><figure class="highlight java"><figcaption><span>MyAspect.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.aoptest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Before</span>( <span class="string">"execution(public ProductVo com.bigdata2017.aoptest.ProductService.find(..))"</span> )</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"beforeAdvice() called"</span> );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@After</span>( <span class="string">"execution(* com.bigdata2017.aoptest.*.find(..))"</span> )</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterAdvice</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"afterAdvice() called"</span> );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@AfterReturning</span>( <span class="string">"execution(* *..ProductService.find(..))"</span> )</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"afterReturning() called"</span> );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@AfterThrowing</span>( value=<span class="string">"execution(* *..*.*(..))"</span>, throwing=<span class="string">"ex"</span> )</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">( Throwable ex )</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"afterThrowing() called:"</span> + ex );</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AOP-개요&quot;&gt;&lt;a href=&quot;#AOP-개요&quot; class=&quot;headerlink&quot; title=&quot;AOP 개요&quot;&gt;&lt;/a&gt;AOP 개요&lt;/h4&gt;&lt;p&gt;(A)spect (O)riented (P)rogramming : 관점 지향 프로그래밍&lt;br&gt;가장 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>11.Spring. annotation의 활용</title>
    <link href="http://KKimSangHeon.github.io/2017/09/11/spring3/"/>
    <id>http://KKimSangHeon.github.io/2017/09/11/spring3/</id>
    <published>2017-09-11T00:15:08.000Z</published>
    <updated>2017-09-18T00:28:25.075Z</updated>
    
    <content type="html"><![CDATA[<p>-JDBC를 통해 DB를 사용하려면, Connection 타입의 DB 연결 객체가 필요하다.<br>-엔터프라이즈 환경에서는 각 요청마다 Connection을 새롭게 만들고 종료시킨다.<br>-애플리케이션과  DB사이의 실제 커넥션을 매번 새롭게 만드는 것은 비효율적이고 성능저하<br>-풀링(pooling) 기법 사용<br>    정해진 개수의 DB Connection Pool에 준비하고 애플리케이션 요청때 마다 꺼내서 할당하고 돌려받아  pool에 저장.<br> -Spring에서는 DataSource를 하나의 독립된 빈으로 등록하도록 강력하게 권장.<br> -엔터프라이즈 시스템에서는 반드시 DB 연결 풀 기능을 지원하는 DataSource를 사용해야 한다.                                   </p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>쿼리를 보내는것보다 연결하는데 더 많은 자원이 사용된다. 그래서 사용한는것이 Connection Pool이다. 이는 커넥션을 만들어 놓고 요청이 있을 때 마다 하나 빼서 쓰고 반납하고 쓰고 반납하고 하는 방식이다. 이를 통해 성능이 좋아진다.<br>여기서 Connection Pool을 Datasource라 한다.</p>
<h4 id="JREBEL의-활용"><a href="#JREBEL의-활용" class="headerlink" title="JREBEL의 활용"></a>JREBEL의 활용</h4><p>소스코드가 변경되면 서버를 다시시작해야되는 번거로움이 존재하지만 JREBEL로 극복 가능하다<br><a href="https://my.jrebel.com/" target="_blank" rel="external">https://my.jrebel.com/</a> 에 접속하여 가입하고 라이센스키를 받아서 활용하자</p>
<p>Window-Preferences-JRebel에 접속해서 설정하자!</p>
<h4 id="인터셉터"><a href="#인터셉터" class="headerlink" title="인터셉터"></a>인터셉터</h4><p>스피링에서 서블릿 디스패처와 컨트롤러 사이에 존재하여 가로채는 역할을 한다. Servlet의 앞과 뒤에서 HTTP Request와  HTTP Response를 가로채는 필터와 유사하며 Interceptor를 구현하기 위해서는 HandlerInterceptor 인터페이스를 구현하여야 한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;-JDBC를 통해 DB를 사용하려면, Connection 타입의 DB 연결 객체가 필요하다.&lt;br&gt;-엔터프라이즈 환경에서는 각 요청마다 Connection을 새롭게 만들고 종료시킨다.&lt;br&gt;-애플리케이션과  DB사이의 실제 커넥션을 매번 새롭게 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>10.Spring. annotation의 활용</title>
    <link href="http://KKimSangHeon.github.io/2017/09/07/spring2/"/>
    <id>http://KKimSangHeon.github.io/2017/09/07/spring2/</id>
    <published>2017-09-07T02:29:09.000Z</published>
    <updated>2017-09-18T00:28:25.075Z</updated>
    
    <content type="html"><![CDATA[<p>리턴 은 주로 String, ModelActivew, Object로 한다.<br>메소드 단독매핑<br><figure class="highlight java"><figcaption><span>MainController.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.springex.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//	request mapping	(method 단독 매핑)</span></div><div class="line">	<span class="comment">//	접속시 MainController:main 출력됨</span></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/main"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"MainController:main"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/main2/a/b/c"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">main2</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> sendMessage(<span class="string">"main2"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">sendMessage</span><span class="params">( String message)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"MainController:"</span>+message;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>타입+ 메소드 메핑<br><figure class="highlight java"><figcaption><span>UserController.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.springex.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="comment">/* request mapping( type + method) */</span></div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/joinform"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">joinform</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"UserController:joinfrom"</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span>(&#123;<span class="string">"/join"</span>,<span class="string">"/doJoin"</span>&#125;)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">join</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"UserController:join"</span>;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span>( value = <span class="string">"/loginform"</span>, method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">loginform</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"UserController:loginform"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span>( value = <span class="string">"/login"</span>, method=RequestMethod.GET)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"UserController:login"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>타입단독 메핑<br><figure class="highlight java"><figcaption><span>GuestbookController.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.springex.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="comment">//Request Mapping (type 단독 매핑)</span></div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/guestbook/*"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuestbookController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"GuestbookController:list"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@ResponseBody</span></div><div class="line">	<span class="meta">@RequestMapping</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"GuestbookController:insert"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>타입+메소드 매핑이 가장 많이 쓰인다.!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;리턴 은 주로 String, ModelActivew, Object로 한다.&lt;br&gt;메소드 단독매핑&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MainController.java&lt;/span&gt;&lt;/fig
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>9.Spring이란? helloSpring실습</title>
    <link href="http://KKimSangHeon.github.io/2017/09/06/spring/"/>
    <id>http://KKimSangHeon.github.io/2017/09/06/spring/</id>
    <published>2017-09-06T05:01:31.000Z</published>
    <updated>2017-09-18T00:28:25.072Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링이란"><a href="#스프링이란" class="headerlink" title="스프링이란?"></a>스프링이란?</h3><p>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크</p>
<h4 id="프레임워크"><a href="#프레임워크" class="headerlink" title="프레임워크?"></a>프레임워크?</h4><p>소프트웨어를  만드는  데  기본이 되는 골격 코드<br>반제품<br>완전한 애플리케이션 소프트웨어가 아니다.<br>문제 영역(도메인)을 해결하기 위한 잘 설계된 재사용 가능한 모듈<br>확장하여 비즈니스 요구사항에 맞는 완전한 애플리케이션으로 완성이 요구된다.</p>
<p>스프링을 이용하여 웹을 만들면 Spring MVC를 사용<br>DB어플리케이션 프레임 워크는 MyBatis,Spring DAO가 존재<br>기타(지원) 프레임워크로는 로깅(Log4J),  빌드/배포(Ant),  단위테스트(JUnit)가 존재     </p>
<p>객체에 대한 의존성,생성,소멸 등에 대한 것을 스프링 컨테이너에게 넘긴다. 이로 인해 개발자는 비즈니스만 잘 만들면 된다. 이로인해 생산성이 향상된다.</p>
<h4 id="EJB"><a href="#EJB" class="headerlink" title="EJB"></a>EJB</h4><p>Enterprise Java Bean의 약자.<br>자바 빈즈 스펙에 맞게 구현된 자바코드를 웹에서 쉽게 이용하기 위해 JSP 표준액션 태그 지원<br>인터페이스 구현 등 불편한 점이 많았다.</p>
<h4 id="POJO-Plain-Old-Java-Object"><a href="#POJO-Plain-Old-Java-Object" class="headerlink" title="POJO(Plain Old Java Object)"></a>POJO(Plain Old Java Object)</h4><p>EJB를 대체하여 특정클래스를 상속하거나 인터페이스를 구현하지 않는 평범한 자바 클래스(느슨한 Java Bean, Spring Bean)를 이용하며 단순하지만 EJB에서 제공하는 고급 기술을  제공한다.<br>-자바 언어와  꼭 필요한  API외에는 특정 규약에 종속되지 않는다.<br>-특정 환경에 종속되지 않는다. (기술과 비즈니스 분리)(서블릿은 서블릿 컨테이너에 종속적이였음)<br>-스프링에서는 스프링에 특화된 인터페이스 구현을 요구하지 않음<br>-스프링 자체에 의존성이 높은 클래스 확장을  거의 요구 하지 않음</p>
<h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p>1.POJO를 이용한 가볍고(lightweight) 비침투적(non-invasive) 개발<br>2.DI와 인터페이스 지향을 통한 느슨한 결합도(loose coupling)<br>3.Aspect와 공통 규약을 통한 선언적(declarative) 프로그래밍<br>4.Aspect와 템플릿(template)을 통한 반복적이고 상투적인(boilerplate) 코드 제거</p>
<p>AOP는 OOP를 더 OOP답게 쓰는것</p>
<h4 id="3-1-IoC-제어역전-Inverse-of-Control-Object-과-DI-의존관계-주입"><a href="#3-1-IoC-제어역전-Inverse-of-Control-Object-과-DI-의존관계-주입" class="headerlink" title="3.1 IoC( 제어역전 ,Inverse of Control (Object) ) 과 DI( 의존관계 주입)"></a>3.1 IoC( 제어역전 ,Inverse of Control (Object) ) 과 DI( 의존관계 주입)</h4><p>Spring Container = IoC(DI) Container = Bean Container = Application Context<br>new를 하지 않아도 컨테이너가 알아서 만들고 소멸해주고 다한다!!</p>
<h4 id="AOP-Aspect-Oriented-Programming"><a href="#AOP-Aspect-Oriented-Programming" class="headerlink" title="AOP (Aspect Oriented Programming)"></a>AOP (Aspect Oriented Programming)</h4><p>클래스의 관심에 따라 클래스를 구성하게되는데(ex:DAO는 DB접근에 관심)</p>
<p>횡단관심: 여러곳에서 공통으로 필요한 모듈<br>횡단관심은 클래스로 빼내서 모듈로 만든다.<br>관심의 분리 ( Separation of Concern )<br>횡단 관심( Crosscutting Concern )과  핵심관심(  Core Concern )<br>핵심관심  모듈과  횡단 관심 모듈이 긴밀하게 결합 ( 핵심 모듈이 필요한 시점에..)<br>OOP 문제점 : 중복코드,  지저분한 코드,  생산성 저하,  재활용성의 문제점<br>필요한 시점에  횡단 관심 모듈을 삽입하여 동작하게 하는 기술.</p>
<p>EJB AOP, JDK Dynamic Proxy, AspectJ, Spring AOP      </p>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><h5 id="다이나믹-웹-프로젝트를-생성해서-메이븐으로-바꿔줄것이다"><a href="#다이나믹-웹-프로젝트를-생성해서-메이븐으로-바꿔줄것이다" class="headerlink" title="다이나믹 웹 프로젝트를 생성해서 메이븐으로 바꿔줄것이다."></a>다이나믹 웹 프로젝트를 생성해서 메이븐으로 바꿔줄것이다.</h5><p>1.dynamic web project - next - src를 remove 하고 src/main/java 추가 -next - directory를 webapp로 변경하고 체크하고 finish<br>2.프로젝트 우클릭 configure- convert to maven project -그룹 id에 com.bigdata2017입력<br>작업이 끝나고 나면 프로젝트 옆 이미지에 m이 생긴다.</p>
<h5 id="라이브러리-의존성을-추가하자"><a href="#라이브러리-의존성을-추가하자" class="headerlink" title="라이브러리 의존성을 추가하자"></a>라이브러리 의존성을 추가하자</h5><p>1.pom.xml을 열자. 다음과 같이 수정하자</p>
<figure class="highlight"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</div><div class="line">	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">	&lt;groupId&gt;com.bigdata.2017&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;springex&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">	&lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line"></div><div class="line">	&lt;properties&gt;</div><div class="line">	     &lt;org.springframework-version&gt;4.1.1.RELEASE&lt;/org.springframework-version&gt;</div><div class="line">	&lt;/properties&gt;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;dependencies&gt;</div><div class="line">		&lt;!-- Spring Core --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-context&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring Web --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-web&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">		&lt;!-- Spring MVC --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;$&#123;org.springframework-version&#125;&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">    &lt;!-- jstl --&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;jstl&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">	&lt;/dependencies&gt;</div><div class="line"></div><div class="line">	&lt;build&gt;</div><div class="line">		&lt;plugins&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;3.6.1&lt;/version&gt;</div><div class="line">				&lt;configuration&gt;</div><div class="line">					&lt;source&gt;1.8&lt;/source&gt;</div><div class="line">					&lt;target&gt;1.8&lt;/target&gt;</div><div class="line">				&lt;/configuration&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">			&lt;plugin&gt;</div><div class="line">				&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</div><div class="line">				&lt;version&gt;3.0.0&lt;/version&gt;</div><div class="line">				&lt;configuration&gt;</div><div class="line">					&lt;warSourceDirectory&gt;webapp&lt;/warSourceDirectory&gt;</div><div class="line">				&lt;/configuration&gt;</div><div class="line">			&lt;/plugin&gt;</div><div class="line">		&lt;/plugins&gt;</div><div class="line">	&lt;/build&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure>
<h5 id="web-xml을-수정하자"><a href="#web-xml을-수정하자" class="headerlink" title="web.xml을 수정하자"></a>web.xml을 수정하자</h5><p>webapp/WEB-INF/web.xml</p>
<figure class="highlight"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">	xmlns="http://java.sun.com/xml/ns/javaee"</div><div class="line">	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</div><div class="line">	id="WebApp_ID" version="3.0"&gt;</div><div class="line">	&lt;display-name&gt;springex&lt;/display-name&gt;</div><div class="line">	&lt;welcome-file-list&gt;</div><div class="line">		&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;</div><div class="line">		&lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;</div><div class="line">		&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">		&lt;welcome-file&gt;default.html&lt;/welcome-file&gt;</div><div class="line">		&lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;</div><div class="line">		&lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;</div><div class="line">	&lt;/welcome-file-list&gt;</div><div class="line"></div><div class="line">	&lt;servlet&gt;</div><div class="line">		&lt;servlet-name&gt;spring&lt;/servlet-name&gt;</div><div class="line">		&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</div><div class="line">	&lt;/servlet&gt;</div><div class="line"></div><div class="line">	&lt;servlet-mapping&gt;</div><div class="line">		&lt;servlet-name&gt;spring&lt;/servlet-name&gt;</div><div class="line">		&lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">	&lt;/servlet-mapping&gt;</div><div class="line"></div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
<h5 id="spring-servlet-xml-생성"><a href="#spring-servlet-xml-생성" class="headerlink" title="spring-servlet.xml 생성"></a>spring-servlet.xml 생성</h5><p>WEB-INF 폴더내에 생성하자<br><figure class="highlight"><figcaption><span>spring-servlet.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans</div><div class="line">	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">	xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">	xmlns="http://www.springframework.org/schema/beans"</div><div class="line">	xmlns:p="http://www.springframework.org/schema/p"</div><div class="line">	xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">	xmlns:mvc="http://www.springframework.org/schema/mvc"</div><div class="line">	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</div><div class="line">	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</div><div class="line">	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line"></div><div class="line">	&lt;context:annotation-config /&gt;</div><div class="line">	&lt;context:component-scan base-package="com.bigdata2017.springex.controller" /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<h5 id="javaResource에-com-bigdata2017-springex-controller-패키지-추가"><a href="#javaResource에-com-bigdata2017-springex-controller-패키지-추가" class="headerlink" title="javaResource에 com.bigdata2017.springex.controller 패키지 추가"></a>javaResource에 com.bigdata2017.springex.controller 패키지 추가</h5><p>패키지에 다음 파일 추가<br><figure class="highlight java"><figcaption><span>HelloController.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.springex.controller;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"/WEB-INF/views/hello.jsp"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="WEB-INF에-views폴더-추가-후-hello-jsp-추가"><a href="#WEB-INF에-views폴더-추가-후-hello-jsp-추가" class="headerlink" title="WEB-INF에 views폴더 추가 후 hello.jsp 추가"></a>WEB-INF에 views폴더 추가 후 hello.jsp 추가</h5><figure class="highlight"><figcaption><span>hello.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;Hello Spring&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="추가적으로-해준-것들"><a href="#추가적으로-해준-것들" class="headerlink" title="추가적으로 해준 것들"></a>추가적으로 해준 것들</h4><p>1) pom.xml 구성</p>
<p>2) DispatcherServlet 등록( web.xml )</p>
<p>3) 서블릿 애플리케이션 컨텍스트 설정 (spring-servlet.xml)</p>
<p>4) Controller 작성</p>
<h4 id="생략된-것들"><a href="#생략된-것들" class="headerlink" title="생략된 것들"></a>생략된 것들</h4><p>1) 서블릿 작성</p>
<p>2) 파라미터 처리 request.getParameter()</p>
<p>3) forwarding</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링이란&quot;&gt;&lt;a href=&quot;#스프링이란&quot; class=&quot;headerlink&quot; title=&quot;스프링이란?&quot;&gt;&lt;/a&gt;스프링이란?&lt;/h3&gt;&lt;p&gt;자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크&lt;/p&gt;
&lt;h4 id=&quot;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>8.Ajax</title>
    <link href="http://KKimSangHeon.github.io/2017/09/06/ajax/"/>
    <id>http://KKimSangHeon.github.io/2017/09/06/ajax/</id>
    <published>2017-09-06T00:10:29.000Z</published>
    <updated>2017-09-18T00:28:25.075Z</updated>
    
    <content type="html"><![CDATA[<p>Asynchronous Javascript XML</p>
<p>AJAX는 비동기 통신이다.</p>
<h4 id="동기"><a href="#동기" class="headerlink" title="동기"></a>동기</h4><p>클라이언트가 리퀘스트를 보내면 그에 대한 리스폰스가 와야 다른 리퀘스트를 보낼 수 있다.<br>서버에서 리퀘스트에 대한 응답이 오지 않으면 block상태에 빠진다는 단점 존재.</p>
<h4 id="비동기"><a href="#비동기" class="headerlink" title="비동기"></a>비동기</h4><p>리퀘스트에 대한 응답을 기다리지 않고 다른 동작을 처리할 수 있다.<br>단점은 어느 요청이 어느 요청에 대한 응답인지 알기 어려울 수 있다. 도착순서도 정해져있지 않고 많은 응답이 있기 때문에..<br><figure class="highlight java"><figcaption><span>ajax를 이용하지 않고 통신</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(<span class="string">"button"</span>).click(function()&#123;</div><div class="line"></div><div class="line">		<span class="comment">//1.XMLHttpRequest 객체 생성</span></div><div class="line">		var xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">		<span class="comment">//2. 통신 상태 변화에 따른 콜백함수 정의</span></div><div class="line">		xhr.onreadystatechange = function()&#123;</div><div class="line">			<span class="keyword">if</span>( <span class="keyword">this</span>.readyState == <span class="number">0</span> )&#123;</div><div class="line">			<span class="comment">//open() 호출 전</span></div><div class="line">			console.log( <span class="string">"readyState(0) - unset"</span> );</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">1</span>)&#123;</div><div class="line">				<span class="comment">//open() 호출 후</span></div><div class="line">			console.log( <span class="string">"readyState(1) - set"</span> );</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">2</span>)&#123;</div><div class="line">				<span class="comment">//send() 호출 후</span></div><div class="line">			console.log( <span class="string">"readyState(2) - sent"</span> );</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">3</span>)&#123;</div><div class="line">				<span class="comment">//loading...</span></div><div class="line">			console.log( <span class="string">"readyState(3) - loading"</span> );</div><div class="line"></div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.readyState ==<span class="number">4</span>)&#123;</div><div class="line">				<span class="comment">//done</span></div><div class="line">			console.log( <span class="string">"readyState(4) - done"</span> );</div><div class="line"></div><div class="line">			console.log( xhr.responseText);</div><div class="line"></div><div class="line">			var response = eval(xhr.responseText);</div><div class="line">			console.log(response);</div><div class="line">			$.each(response,function(index,vo)&#123;</div><div class="line">				console.log( index +<span class="string">":"</span> + vo.name)</div><div class="line"></div><div class="line">			&#125;)</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		<span class="comment">//3. open</span></div><div class="line">		xhr.open(<span class="string">"GET"</span>,<span class="string">"/wp_js2/sample.json"</span>)</div><div class="line"></div><div class="line">		<span class="comment">//4. send request</span></div><div class="line">		xhr.send();</div><div class="line"></div><div class="line">	&#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>ajax를 이용하여 통신</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(<span class="string">"button"</span>).click(function()&#123;</div><div class="line">		$.ajax( &#123;</div><div class="line">			async: <span class="keyword">true</span>,</div><div class="line">			url : <span class="string">"/wp_js2/sample.json"</span>,</div><div class="line">			type: <span class="string">"get"</span>,</div><div class="line">			dataType: <span class="string">"json"</span>,</div><div class="line">			data: <span class="string">""</span>,</div><div class="line">			contentType: <span class="string">'application/json'</span>,</div><div class="line">			success: function(response)&#123;</div><div class="line">				$.each (response,function(index,vo)&#123;</div><div class="line">					console.log(vo.name)</div><div class="line">				&#125;)</div><div class="line">			&#125;,</div><div class="line">			error: function( jqXHR, status, e )&#123;</div><div class="line">				alert( status + <span class="string">" : "</span> + e );</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Asynchronous Javascript XML&lt;/p&gt;
&lt;p&gt;AJAX는 비동기 통신이다.&lt;/p&gt;
&lt;h4 id=&quot;동기&quot;&gt;&lt;a href=&quot;#동기&quot; class=&quot;headerlink&quot; title=&quot;동기&quot;&gt;&lt;/a&gt;동기&lt;/h4&gt;&lt;p&gt;클라이언트가 리퀘스트를
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Ajax" scheme="http://KKimSangHeon.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>7.jquery</title>
    <link href="http://KKimSangHeon.github.io/2017/09/05/jquery1/"/>
    <id>http://KKimSangHeon.github.io/2017/09/05/jquery1/</id>
    <published>2017-09-05T00:09:56.000Z</published>
    <updated>2017-09-18T00:28:25.076Z</updated>
    
    <content type="html"><![CDATA[<p>2006년 Mozila의 자바스크립트 에반젤리스 Jhon Resig에 의해 개발 / 공개<br>여러 자바스크립트 라이브러리 ( prototype.js, Mootool.js 등) 중에 가장 주목 받고 있다.<br>jQuery로 코딩하면 자바스크립트 코드가  간결해 진다.<br>가볍다 ( 90KB)<br>IE6.0 이상,  Firefox2.0 이상,  Safari 3 이상, Opera 9이상,  Google Chrome등의 주요 브라우저를 지원하여 클로스브라우징을 가능케 한다.</p>
<figure class="highlight java"><figcaption><span>엘리먼트를 골라야 하는 시점들</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 1(Vanilla JS)</span></div><div class="line">window.onload = function()&#123;</div><div class="line">	console.log(document.getElementBy(<span class="string">"my-p"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 2 (jQuery)</span></div><div class="line">jQuery( document ).ready( function()&#123;</div><div class="line">	console.log( document.getElementById(<span class="string">"my-p"</span>));</div><div class="line"></div><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 3 (jQuery)</span></div><div class="line">$( document ).ready( function()&#123;</div><div class="line">	console.log(document.getElementById(<span class="string">"my-p"</span>));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//엘리먼트를 골라야 하는 시점 4 (jQuery)</span></div><div class="line">$(function()&#123;</div><div class="line">	console.log(document.getElementById(<span class="string">"my-p"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>jQuery 함수를 이용한 색 변경</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">  setTimeout( function()&#123;</div><div class="line">  var $li = $(<span class="string">"li"</span>);</div><div class="line">  $li.css(<span class="string">"color"</span>,<span class="string">"#f00"</span> );</div><div class="line"></div><div class="line">  <span class="comment">//jQuery Object 뭐냐?</span></div><div class="line">  console.log($li.length);</div><div class="line">  console.log($li[<span class="number">0</span>]); <span class="comment">//HTMLElement Object</span></div><div class="line"></div><div class="line">  <span class="comment">//에러유발</span></div><div class="line">  <span class="comment">//$li[0].css("font-weigth","bold")</span></div><div class="line"></div><div class="line">  $li[<span class="number">0</span>].style.fontWeight = <span class="string">"bold"</span>;</div><div class="line"></div><div class="line">  <span class="comment">//jQuery API를 호출 하고 싶으면</span></div><div class="line">  <span class="comment">//jQuery 함수(=$)로 매핑한다</span></div><div class="line">  $($li[<span class="number">0</span>]).css(<span class="string">"text-decoration"</span>,<span class="string">"underline"</span>)</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">//get api함수를 사용해서 HTMLElement 가져오기</span></div><div class="line"></div><div class="line">  $($li.get(<span class="number">1</span>)).css(<span class="string">"backgroundColor"</span>,<span class="string">"#ccc"</span>);</div><div class="line"></div><div class="line">  &#125;,<span class="number">2000</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>jQuery 활용방법</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#first"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"#secnod"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>);</div><div class="line">$(<span class="string">"#second"</span>).css(<span class="string">"fontWeight"</span>,<span class="string">"bold"</span>);</div><div class="line"></div><div class="line">var $li3 = $(<span class="string">"#third"</span>);</div><div class="line">$li3.css(<span class="string">"color"</span>,<span class="string">"blue"</span>);</div><div class="line">$li3.css(<span class="string">"fontWeigth"</span>,<span class="string">"bold"</span>);</div><div class="line"></div><div class="line"><span class="comment">//메소드 체인</span></div><div class="line">$(<span class="string">"#third"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>).css(<span class="string">"fontWeight"</span>,<span class="string">"bold"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 파라미터로 JSON을 사용하는 방법</span></div><div class="line">$(<span class="string">"#fifth"</span>).css(&#123;</div><div class="line">  <span class="string">"color"</span>:<span class="string">"blue"</span>,</div><div class="line">  <span class="string">"fontWeight"</span>:<span class="string">"bold"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>다양한 선택방법</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".red strong"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).text(<span class="string">"text"</span>);</div><div class="line"></div><div class="line">$(<span class="string">".blue #s1"</span>).css(<span class="string">"color"</span>,<span class="string">"blue"</span>);	<span class="comment">//자손 선택</span></div><div class="line">$(<span class="string">".blue &gt; #s2"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//자식선택 (바로아래)</span></div><div class="line">$(<span class="string">"#second + li"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//인접선택</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"li:first-child"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//첫번째 자식</span></div><div class="line">$(<span class="string">"li:last-child"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//마지막 자식</span></div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"li[id]"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//id 속성이 있는 애만</span></div><div class="line">$(<span class="string">"li[class]"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);	<span class="comment">//class속성이 있는애만</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2006년 Mozila의 자바스크립트 에반젤리스 Jhon Resig에 의해 개발 / 공개&lt;br&gt;여러 자바스크립트 라이브러리 ( prototype.js, Mootool.js 등) 중에 가장 주목 받고 있다.&lt;br&gt;jQuery로 코딩하면 자바스크립트
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="JQuery" scheme="http://KKimSangHeon.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>6.웹표준</title>
    <link href="http://KKimSangHeon.github.io/2017/08/30/servlet6/"/>
    <id>http://KKimSangHeon.github.io/2017/08/30/servlet6/</id>
    <published>2017-08-30T00:00:10.000Z</published>
    <updated>2017-09-18T00:26:28.666Z</updated>
    
    <content type="html"><![CDATA[<p>초창기 웹은 넷스케이프가 독주하는 상황이었지만,  윈도우98 부터 IE브라우저가  기본 탑재되어  IE6.0는 브라우저 시장의 90%를 점유 했었다.</p>
<p>IE의 ActiveX (자사 기술 독점)에 따른 웹 환경의 폐해<br>MS는 COM(Component Object Model)이라는 기술 제공한다. 이 중 UI가 있는 컴포넌트를 ActiveX라 한다.  </p>
<p>IE이외의 사파리, 크롬, 파이어폭스, 오페라 등  다양한 브라우저가  데스트탑  환경에서 영향력이  커졌다<br>특히,  모바일 환경에서는 사파리,  크롬,  파이어폭스가  주도권을 잡았다.<br>특정 웹 브라우저에  종속되는 웹 페이지는 더 이상 설 자리가 없음을  의미<br>웹 페이지 제작 기술에  표준의 필요성이 대두</p>
<h4 id="웹-표준을-주도하는-W3C-World-Wide-Web-Consortium"><a href="#웹-표준을-주도하는-W3C-World-Wide-Web-Consortium" class="headerlink" title="웹 표준을 주도하는 W3C( World Wide Web Consortium )"></a>웹 표준을 주도하는 W3C( World Wide Web Consortium )</h4><p>-<a href="http://www.w3.org" target="_blank" rel="external">http://www.w3.org</a><br>-웹 기술의 표준화를 담당하는 기구<br>-HTML, CSS, XML 등 웹과 관련된 다양한 기술에 대해  논의하며 관련기술 표준 재정<br>-웹 표준은 W3C의 목표와 비전에 따라 연구한 결과를  웹에 반영시키기 위한 권고 사항</p>
<h4 id="웹-접근성"><a href="#웹-접근성" class="headerlink" title="웹 접근성"></a>웹 접근성</h4><p>어떤 장비, 어떤 브라우저를 사용하던지 해당 사이트를 얼마나 볼 수 있는냐를 의미<br>일반인이건 장애인이건 어떤 사용자도 해당 사이트 사용에 어려움이 없어야 한다는 의미<br>웹 표준을 지켜 작성한 HTML 문서는 웹 접근성을 준수하는 데 비표준 문서들 보다 쉽다.<br>표현을 CSS로 분리 시킨 HTML 문서는 웹 접근성을 준수하는 데  표현과 정보가 섞여 있는 문서들 보다 쉽다.</p>
<h4 id="웹-2-0의-개념"><a href="#웹-2-0의-개념" class="headerlink" title="웹 2.0의 개념"></a>웹 2.0의 개념</h4><p>-웹2.0이란 이용자가 적극적으로 참여하여 정보/지식을 만들고 공유하는 열린 인터넷을 의미한다<br>-웹 2.0은 웹과 관련된 새로운 기술, 문화, 그리고 경제 현상의 복합적인 변화를 포함하는 개념이다. 즉, 사용자 편의성을 강화한 새로운 기술의 활용, 정보의 생성 및 개방/ 공유를 통한 직접적 가치 창출, 이를 통해 만들어진 새로운 문화 및 경제 현상을 통틀어 웹2.0으로 이해할 수 있다</p>
<h4 id="웹-2-0의-목표"><a href="#웹-2-0의-목표" class="headerlink" title="웹 2.0의 목표"></a>웹 2.0의 목표</h4><p>앞서 웹2.0의 개념을 살펴보았습니다. 그렇다면 웹2.0은 어떤 배경에서 등장하게 되었고, 이 새로운 패러다임으로 이루고자하는 것은 무엇일까요? 웹2.0의 기본적인 목적은 ‘사람들을 다양하고 새로운 방식으로 연결하고 연결 된 사람들의 집단지성을 활용하는 것’입니다.<br><img src="/2017/08/30/servlet6/web2.png" alt="web1.0 web2.0의 차이" title="web1.0 web2.0의 차이"></p>
<p>웹 2.0 출처 : <a href="http://visualize.tistory.com/267" target="_blank" rel="external">http://visualize.tistory.com/267</a></p>
<h4 id="웹언어-HTML"><a href="#웹언어-HTML" class="headerlink" title="웹언어 ( = HTML )"></a>웹언어 ( = HTML )</h4><pre><code>-웹페이지를 만들기 위해 HTML(Hyper Text Markup Language)를 사용하여 파일을 생성하고, 웹 서버에 그 파일을 올려 놓아야 한다.
-HTML은 페이지를 보여주기 위해서 알아야 할 필요가 있는 모든 것을 브라우저에게 알려준다.
</code></pre><h4 id="하이퍼텍스트-HTML"><a href="#하이퍼텍스트-HTML" class="headerlink" title="하이퍼텍스트 (HTML)"></a>하이퍼텍스트 (HTML)</h4><p>-웹 전체의 기초가 되는 것<br>-단일 페이지에서 벗어나 다른 페이지와 연결할 수 있게 해주는 것<br>-<a> 엘리멘트에 의해 구현<br>-<a href="‘’">콘텐츠</a>  이런 식으로 링크가 걸리며, href 속성은 목적지를 명시    </a></p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>Document Object Model로 웹페이지를 자바스크립트로 제어하기 위한 객체 모델을 의미한다. window 객체의 document 프로퍼티를 통해서 사용할 수 있다. Window 객체가 창을 의미한다면 Document 객체는 윈도우에 로드된 문서를 의미한다고 할 수 있다. DOM의 하위 수업에서는 문서를 제어하는 방법에 대한 내용을 다룬다.</p>
<p>DOM 출처 : <a href="https://opentutorials.org/course/1375/6655" target="_blank" rel="external">https://opentutorials.org/course/1375/6655</a></p>
<h4 id="시맨틱-검색"><a href="#시맨틱-검색" class="headerlink" title="시맨틱 검색"></a>시맨틱 검색</h4><p>시맨틱 검색은 검색로봇이 검색어 의미를 스스로 분석하고 추리해 원하는 정보를 더 정교하게 찾아주는 검색방식</p>
<h4 id="시맨틱-마크업"><a href="#시맨틱-마크업" class="headerlink" title="시맨틱 마크업"></a>시맨틱 마크업</h4><p>시맨틱 마크업이란 HTML의 태그를 사용하여 문서 안의 내용이 담고 있는 의미가 무엇인지 표현할 수 있도록 구조를 작성하는 것을 말함</p>
<p><a href="http://www.greeneclipse.com/eclipsepalette.html" target="_blank" rel="external">http://www.greeneclipse.com/eclipsepalette.html</a> 에 접속해서 설치하면</p>
<h4 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h4><p>-DOCTYPE은 html의 태그는 아니지만 웹페이지에서 맨 처음에 선언되어 어떤 종류의 html을 사용할지 웹브라우저에게 알려줄 목적으로 사용<br>-브라우저는 DOCTYPE 선언을 확인하고 브라우저 모드를 결정한다.<br>-브라우저 모드는 표준 호환 모드,  비표준 호환 모드<br>-웹 표준에서는 웹 페이지를 제대로 표현하기 위해서는 올바른 문서 형태를 정의해주어야 한다.<br>-가장 많이 사용되고 있는 HTML 버전은 HTML4.01  과  XHTML1.0<br>-최신 버전인 HTML5를 문서형식으로 사용하는 웹사이트도 증가 추세</p>
<h4 id="CSS-Cascading-Style-Sheet-이해"><a href="#CSS-Cascading-Style-Sheet-이해" class="headerlink" title="CSS ( Cascading Style Sheet ) 이해"></a>CSS ( Cascading Style Sheet ) 이해</h4><p>-워드프로세스의 스타일 적용과 유사<br>-cascading : ‘계단형’ 의 의미로  스타일 적용에 특정도, 또는 우선순위가  있고 우선 순위가 정해지는 것이 계단식 스타일 시트라는 의미<br>무조건 맨 아래 있는게 적용되는게 아니라 P{…}   body P{….}   body P.aaa{…} 일 경우 가장 길이가 긴 body P.aaa{…} 가 적용됨</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;초창기 웹은 넷스케이프가 독주하는 상황이었지만,  윈도우98 부터 IE브라우저가  기본 탑재되어  IE6.0는 브라우저 시장의 90%를 점유 했었다.&lt;/p&gt;
&lt;p&gt;IE의 ActiveX (자사 기술 독점)에 따른 웹 환경의 폐해&lt;br&gt;MS는 COM
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>5. EL, JSTL</title>
    <link href="http://KKimSangHeon.github.io/2017/08/28/servlet5/"/>
    <id>http://KKimSangHeon.github.io/2017/08/28/servlet5/</id>
    <published>2017-08-28T05:13:23.000Z</published>
    <updated>2017-08-30T00:15:16.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="EL"><a href="#EL" class="headerlink" title="EL"></a>EL</h4><p>기존에 사용하는 스크립트릿을 &lt;%= %&gt;를 대체할 수 있따.<br>&lt;%= vo.getName %&gt;를</p>
<p>$ { vo.name } 으로 대체 가능하다</p>
<p>이를 EL(Expression Language)이라 한다.<br>웹 페이지에  값을  표시(표현),하는 데 사용되는 태그<br>JSP의 출력 문법을 보완하는 역할<br>${} 를 사용한다.<br>표현언어의 식을 계산해서 출력한다.<br>null 는 공백으로  출력한다.</p>
<figure class="highlight"><figcaption><span>스클릿틀릿 사용예시</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    if( null == session.getAttribute( "authUser" ) ) &#123;</div><div class="line">%&gt;</div><div class="line">    &lt;p&gt;로그인을 하지 않았습니다.&lt;/p&gt;</div><div class="line">&lt;%</div><div class="line">    &#125;</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<p>위의 코드는 다음과 같다<br><figure class="highlight"><figcaption><span>EL의 사용예시</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:if test="$&#123; empty authUser &#125;"&gt;</div><div class="line">    &lt;p&gt;로그인을 하지 않았습니다.&lt;/p&gt;</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure><br>EL로 내장객체  접근하기<br>-pageScope             :  페이지 범위에 빈을 저장<br>-requestScope          :  요청 범위에서 빈을 저장<br>-sessionScope          :  세션 범위에서 빈을 저장<br>-applicationScope     :  어플리케이션 범위에서 빈을 저장</p>
<h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><p>JSP에서 사용 가능한 표준 태그 라이브러리<br>JSP 코드가 깔끔해지고 가독성이 좋아진다.<br>JSTL 라이브러리<br>    -기본기능 ( core )<br>    -형식화(format)<br>    -데이터베이스(sql)<br>    -XML 처리(xml)<br>    -함수처리(function)</p>
<p>jstl.jar 파일을 구해서 프로젝트 우클릭 후 자바빌드패스의 라이브러리탭에서 추가하고 deployment assembly에 추가</p>
<p>아래 3개는 추가해놓고 사용하여야 한다.<br>-기본기능 ( core ) :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="external">http://java.sun.com/jsp/jstl/core</a>“ prefix=”c”%&gt;</p>
<p>-형식화(format) :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="external">http://java.sun.com/jsp/jstl/fmt</a>“ prefix=”fmt”%&gt;</p>
<p>-함수처리(function) :<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="external">http://java.sun.com/jsp/jstl/functions</a>“ prefix=”fn”%&gt;  </p>
<p>JSTL은 if문을 제공하나 else if , else를 제공하지 않는다. 이를 대체하여 사용할 수 있는것이 choose이다.</p>
<figure class="highlight"><figcaption><span>choose사용예시</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;c:choose&gt;</div><div class="line">  &lt;c:when test="$&#123;param.color == 1&#125;"&gt;</div><div class="line">    &lt;span style="color: red"&gt;빨강&lt;/span&gt;</div><div class="line">  &lt;/c:when&gt;</div><div class="line"></div><div class="line">  &lt;c:when test="$&#123;param.color == 2&#125;"&gt;</div><div class="line">    &lt;span style="color: green"&gt;초록&lt;/span&gt;</div><div class="line">  &lt;/c:when&gt;</div><div class="line"></div><div class="line">  &lt;c:when test="$&#123;param.color == 3&#125;"&gt;</div><div class="line">    &lt;span style="color: blue"&gt;파랑&lt;/span&gt;</div><div class="line">  &lt;/c:when&gt;</div><div class="line"></div><div class="line">  &lt;c:otherwise&gt;</div><div class="line">    &lt;span style="color: black"&gt;검정&lt;/span&gt;		</div><div class="line">  &lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<p>-변수에  값을  설정한다.</p>
<c:set var="count" value="10" scope="page">
</c:set>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;EL&quot;&gt;&lt;a href=&quot;#EL&quot; class=&quot;headerlink&quot; title=&quot;EL&quot;&gt;&lt;/a&gt;EL&lt;/h4&gt;&lt;p&gt;기존에 사용하는 스크립트릿을 &amp;lt;%= %&amp;gt;를 대체할 수 있따.&lt;br&gt;&amp;lt;%= vo.getName %&amp;gt;를&lt;/p
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>4. 서블릿의 Life Cicle, MVC, Model1</title>
    <link href="http://KKimSangHeon.github.io/2017/08/25/servlet4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/25/servlet4/</id>
    <published>2017-08-25T00:07:35.000Z</published>
    <updated>2017-08-30T00:15:18.375Z</updated>
    
    <content type="html"><![CDATA[<p>첫번째 호출 때는<br>init() called<br>service() called<br>doGet() called<br>순으로 이어진다.</p>
<p>두번 째 호출때는<br>service() called<br>doGet() called<br>순으로 이어진다</p>
<p>즉 변수를 선언 할 때는 init() 메소드 안에 선언해주는것이 좋으나 동기화를 잘 해줘야하는단점이 있다.</p>
<h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>아키텍쳐 패턴 중에 하나로 GUI 기반 Application 설계, 패턴<br>클라이언트 요청을 받아 처리하여 응답하는 로직을  Model, View, Controller 로 나누어 설계하고 구현</p>
<h5 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h5><p>애플리케이션 정보(데이터) 또는 정보를 처리하는 모듈(객체)<br>ex) DAO</p>
<h5 id="View"><a href="#View" class="headerlink" title="View"></a>View</h5><p>텍스트,  체크박스,  입력창 등과 같은 사용자 인터페이스 요소를 나타냄<br>ex) HTML</p>
<h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><p>클라이언트 요청,  Model,  View 사이의  상호동작을 관리 한다. 라우팅만 한다고 생각하자<br>ex) java로직</p>
<h4 id="Model1"><a href="#Model1" class="headerlink" title="Model1"></a>Model1</h4><p>M + VC 이라고 생각하면 된다.<br>※모델1은 컨트롤 뷰가 하나로 이루어짐.</p>
<p>모델1은 요청마다 서블릿이 만들어져 관리해야할 jsp가 많아진다.</p>
<h4 id="Model2"><a href="#Model2" class="headerlink" title="Model2"></a>Model2</h4><p>M(DAO) + V(JSP) + C(Servlet)<br>주로 복잡한 요구사항을 처리하는 웹 애플리케이션에서 MVC(Model-View-Controller pattern) 패턴을 사용한다. MVC 패턴은 코딩과 유지보수를 쉽게 하고, Model 2 아키텍처라고도 불린다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;첫번째 호출 때는&lt;br&gt;init() called&lt;br&gt;service() called&lt;br&gt;doGet() called&lt;br&gt;순으로 이어진다.&lt;/p&gt;
&lt;p&gt;두번 째 호출때는&lt;br&gt;service() called&lt;br&gt;doGet() called&lt;br&gt;순
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>3. Servlet &amp; JSP 응용실습</title>
    <link href="http://KKimSangHeon.github.io/2017/08/24/servlet3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/24/servlet3/</id>
    <published>2017-08-24T02:07:50.000Z</published>
    <updated>2017-08-30T00:15:18.922Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><p>jsp파일은 내부적으로 서블릿으로 변환 된다는 점을 잊지말자.<br>톰캣이 자동으로 해준다.</p>
<h4 id="리다이렉트-포워드의-차이"><a href="#리다이렉트-포워드의-차이" class="headerlink" title="리다이렉트 포워드의 차이"></a>리다이렉트 포워드의 차이</h4><p>포워드  -  새로운 페이지는 이전 페이지에서 처리하던 것과 같은 요청을 처리하게 하고 응답하여 브라우저는 하나 이상의 페이지가 연관 된 것을 알 수 없다.</p>
<p>리다렉트 -  첫번째 페이지는 브라우저에게 새로운 페이지로 다시 요청해야 한다는  내용의 응답을 보낸다.  브라우저는 이 응답을 받으면 즉시 새로운 페이지로 다시 요청을 보낸다.</p>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><p>다이나믹 웹 프로젝트 생성<br>-서버우클릭 add and remove 프로젝트 추가</p>
<p>프로젝트 우클릭 후 - 프로퍼티스 -JAVA BUILD PATH - add library 후 ojdbc 추가<br>프로젝트 우클릭 후 - 프로퍼티스 -deployment assembly - add -jdbc 추가 후 apply</p>
<p>JSTL<br>jsp standard tag library</p>
<figure class="highlight java"><figcaption><span>EmailListDao.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.emaillist.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.bigdata2017.emaillist.vo.EmailListVo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailListDao</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">( EmailListVo vo)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">		Connection conn= <span class="keyword">null</span>;</div><div class="line">		PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line">			String sql = <span class="string">"INSERT "</span></div><div class="line">						+<span class="string">"INTO EMAILLIST "</span> +</div><div class="line">						 <span class="string">"VALUES (SEQ_EMAILLIST.NEXTVAL,?,?,?)"</span>;</div><div class="line"></div><div class="line">			pstmt = conn.prepareStatement(sql);</div><div class="line">			pstmt.setString(<span class="number">1</span>, vo.getFirstName());</div><div class="line">			pstmt.setString(<span class="number">2</span>, vo.getLastName());</div><div class="line">			pstmt.setString(<span class="number">3</span>, vo.getEmail());</div><div class="line"></div><div class="line">			count = pstmt.executeUpdate();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( pstmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					pstmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;EmailListVo&gt; <span class="title">getList</span><span class="params">()</span></span>&#123;</div><div class="line">		List&lt;EmailListVo&gt; list = <span class="keyword">new</span> ArrayList&lt;EmailListVo&gt;();</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			conn = getConnection();</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 객체 생성</span></div><div class="line">			stmt = conn.createStatement();</div><div class="line"></div><div class="line">			<span class="comment">//4. SQL문 실행</span></div><div class="line">			String sql =<span class="string">"SELECT NO,FIRST_NAME,LAST_NAME,EMAIL\r\n"</span> +</div><div class="line">						<span class="string">"FROM EMAILLIST ORDER BY NO DESC"</span>;</div><div class="line">			rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"connection 성공"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//5. 결과 사용하기</span></div><div class="line">			<span class="keyword">while</span>( rs.next() ) &#123;</div><div class="line">				Long no = rs.getLong( <span class="number">1</span> );</div><div class="line">				String firstName = rs.getString(<span class="number">2</span>);</div><div class="line">				String lastName = rs.getString(<span class="number">3</span>);</div><div class="line">				String email = rs.getString(<span class="number">4</span>);</div><div class="line"></div><div class="line">				EmailListVo vo = <span class="keyword">new</span> EmailListVo();</div><div class="line">				vo.setNo(no);</div><div class="line">				vo.setFirstName(firstName);</div><div class="line">				vo.setLastName(lastName);</div><div class="line">				vo.setEmail(email);</div><div class="line">				list.add(vo);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( rs != <span class="keyword">null</span> ) &#123;</div><div class="line">					rs.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					stmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			conn = DriverManager.getConnection(url, <span class="string">"webdb"</span>, <span class="string">"webdb"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> conn;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>form.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;메일 리스트 가입&lt;/h1&gt;</div><div class="line">	&lt;p&gt;</div><div class="line">		메일 리스트에 가입하려면,&lt;br&gt;</div><div class="line">		아래 항목을 기입하고 등록 버튼을 클릭하세요.</div><div class="line">	&lt;/p&gt;</div><div class="line">	&lt;form method="post" action="&lt;%=request.getContextPath() %&gt;/insert.jsp" &gt;</div><div class="line">	    First name: &lt;input type="text" name="fn" value="" /&gt;&lt;br&gt;</div><div class="line">	    Last name: &lt;input type="text" name="ln" value="" /&gt;&lt;br&gt;</div><div class="line">	    Email address: &lt;input type="text" name="email" value=""/&gt;&lt;br&gt;</div><div class="line">	    &lt;input type="submit" value="submit"&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">	&lt;p&gt;</div><div class="line">	&lt;a href = "&lt;%=request.getContextPath()%&gt;"&gt;리스트 바로가기&lt;/a&gt;</div><div class="line">	&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>index.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;%@page import="com.bigdata2017.emaillist.vo.EmailListVo"%&gt;</div><div class="line">&lt;%@page import="java.util.List"%&gt;</div><div class="line">&lt;%@page import="com.bigdata2017.emaillist.dao.EmailListDao"%&gt;</div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;%</div><div class="line"></div><div class="line">	EmailListDao dao = new EmailListDao();</div><div class="line">	List&lt;EmailListVo&gt; list = dao.getList();</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;메일 리스트에 가입되었습니다.&lt;/h1&gt;</div><div class="line">	&lt;p&gt;입력한 정보 내역입니다.&lt;/p&gt;</div><div class="line">	&lt;!-- 메일정보 리스트 --&gt;</div><div class="line">	&lt;%-- list에서 하나씩 빼서 테이블를 채운다--%&gt;</div><div class="line"></div><div class="line">	&lt;% for(EmailListVo vo : list )&#123; %&gt;</div><div class="line"></div><div class="line">	&lt;table border="1" cellpadding="5" cellspacing="2"&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td align=right&gt;First name: &lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;%=vo.getFirstName() %&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td align=right width="110"&gt;Last name: &lt;/td&gt;</div><div class="line">			&lt;td width="110"&gt;&lt;%=vo.getLastName()%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td align=right&gt;Email address: &lt;/td&gt;</div><div class="line">			&lt;td&gt;&lt;%=vo.getEmail()%&gt;&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">	&lt;%&#125; %&gt;</div><div class="line">	&lt;p&gt;</div><div class="line">		&lt;a href="&lt;%=request.getContextPath() %&gt;/form.jsp" &gt;추가메일 등록&lt;/a&gt;</div><div class="line">	&lt;/p&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight"><figcaption><span>insert.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;%@page import="com.bigdata2017.emaillist.dao.EmailListDao"%&gt;</div><div class="line">&lt;%@page import="com.bigdata2017.emaillist.vo.EmailListVo"%&gt;</div><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line"> &lt;%</div><div class="line">	 request.setCharacterEncoding( "utf-8");</div><div class="line">	 String firstName = request.getParameter( "fn" );</div><div class="line">	 String lastName = request.getParameter( "ln" );</div><div class="line">	 String email = request.getParameter("email");</div><div class="line"></div><div class="line">	 EmailListVo vo = new EmailListVo();</div><div class="line">	 vo.setFirstName(firstName);</div><div class="line">	 vo.setLastName(lastName);</div><div class="line">	 vo.setEmail(email);</div><div class="line"></div><div class="line">	 new EmailListDao().insert(vo);</div><div class="line"></div><div class="line">	 response.sendRedirect( request.getContextPath() );</div><div class="line"> %&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1&gt;성공적으로 등록되었습니다.&lt;/h1&gt;</div><div class="line">	&lt;a href="index.jsp"&gt;리스트 돌아가기&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h4&gt;&lt;p&gt;jsp파일은 내부적으로 서블릿으로 변환 된다는 점을 잊지말자.&lt;br&gt;톰캣이 자동으로 해준다.&lt;/p&gt;
&lt;h4 id=&quot;리다
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>2. Servlet &amp; JSP 기본실습</title>
    <link href="http://KKimSangHeon.github.io/2017/08/24/servlet2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/24/servlet2/</id>
    <published>2017-08-24T00:02:51.000Z</published>
    <updated>2017-08-30T00:15:19.427Z</updated>
    
    <content type="html"><![CDATA[<p>JSP도 곧 서블릿임을 잊지말자.</p>
<p>GET 방식 : <a href="http://naver.com?이름=shkim&amp;암호=1234" target="_blank" rel="external">http://naver.com?이름=shkim&amp;암호=1234</a></p>
<p>get방식으로 한글을 보낼경우 글이 깨지는데 이때는 server을 열고 server.xml을 열자. 65라인에 URIEncoding=”utf-8”을 추가해주자</p>
<p>WebContent에 form.jsp 생성<br>form , 절대경로, 상대경로에 대해 알아보자<br><figure class="highlight"><figcaption><span>form.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">	pageEncoding="UTF-8"%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;!-- h1태그는 블록 태그라 아래로 내려감 --&gt;</div><div class="line">	&lt;h1&gt;폼테스트&lt;/h1&gt;</div><div class="line">	&lt;h2&gt;폼테스트&lt;/h2&gt;</div><div class="line">	&lt;h3&gt;폼테스트&lt;/h3&gt;</div><div class="line">	&lt;h4&gt;폼테스트&lt;/h4&gt;</div><div class="line">	&lt;h5&gt;폼테스트&lt;/h5&gt;</div><div class="line"></div><div class="line">	&lt;!-- 상대경로(form.jsp의 위치부터) --&gt;</div><div class="line">	&lt;img src = "images/java.png"&gt;</div><div class="line"></div><div class="line">	&lt;!-- 절대경로 --&gt;</div><div class="line">	&lt;a href = "/helloweb/index.jsp"&gt;메인으로 가기&lt;/a&gt;</div><div class="line"></div><div class="line">	&lt;!-- 절대경로를 처리하는 안정적인 방법 --&gt;</div><div class="line">	&lt;a href = "&lt;%=request.getContextPath() %&gt;/index.jsp"&gt;메인으로 가기&lt;/a&gt;</div><div class="line"></div><div class="line">	&lt;!-- form 태그는 디폴트로 겟방식으로 날린다. --&gt;</div><div class="line">	&lt;form method="post" action="&lt;%= request.getContextPath() %&gt;/join"&gt;</div><div class="line"></div><div class="line">	&lt;!-- input 태그는 인라인 태그라 옆으로간다. --&gt;</div><div class="line">		&lt;input type="hidden" name="type" value="나쁜놈"/&gt;</div><div class="line"></div><div class="line">		이메일: &lt;input type="text" name="email" value=""&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		비밀번호: &lt;input type="password" name="password" value=""&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		이름: &lt;input type="text" name="name" &gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		성별:</div><div class="line">		&lt;!-- radio는 name속성을 같게 해줘야 하나만 선택된다. --&gt;</div><div class="line">		&lt;input type="radio" name="gender" value="female"/&gt; 여</div><div class="line">		&lt;input type="radio" name="gender" value="male checked=checked"/&gt; 남</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		생년:</div><div class="line">		&lt;select name = "birth-year"&gt;</div><div class="line">			&lt;option value="1995"&gt;1995&lt;/option&gt;</div><div class="line">			&lt;option value="1994"&gt;1994&lt;/option&gt;</div><div class="line">			&lt;option value="1993"&gt;1993&lt;/option&gt;</div><div class="line">			&lt;option value="1992"&gt;1992&lt;/option&gt;</div><div class="line">			&lt;option value="1991"&gt;1991&lt;/option&gt;</div><div class="line">			&lt;option value="1990" selected&gt;1990&lt;/option&gt;</div><div class="line">		&lt;/select&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		취미:</div><div class="line">		&lt;input type="checkbox" name="hobby" value="reading"/&gt;독서</div><div class="line">		&lt;input type="checkbox" name="hobby" value="sleeping"/&gt;잠자기</div><div class="line">		&lt;input type="checkbox" name="hobby" value="swimming"/&gt;수영</div><div class="line">		&lt;input type="checkbox" name="hobby" value="coding"/&gt;코딩</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		자기소개:</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line">		&lt;textarea rows="15" cols="80" name="self-intro"&gt;1234</div><div class="line">1234</div><div class="line">1234&lt;/textarea&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line"></div><div class="line">		&lt;input type="submit" value="가입"&gt;</div><div class="line">		&lt;br&gt;&lt;br&gt;</div><div class="line">	&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>Java Resource에 서블릿 파일 생성<br><figure class="highlight java"><figcaption><span>join.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.helloweb.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class join</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(<span class="string">"/join"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">join</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		request.setCharacterEncoding( <span class="string">"utf-8"</span>);</div><div class="line">		<span class="comment">//post 방식으로 데이터를 전달 받는 경우</span></div><div class="line">		<span class="comment">//encoidng charset를 지정</span></div><div class="line"></div><div class="line"></div><div class="line">		String type = request.getParameter(<span class="string">"type"</span>);</div><div class="line">		System.out.println(type);		</div><div class="line"></div><div class="line">		String email = request.getParameter(<span class="string">"email"</span>);</div><div class="line">		System.out.println(email);</div><div class="line"></div><div class="line">		String password = request.getParameter(<span class="string">"password"</span>);</div><div class="line">		System.out.println(password);</div><div class="line"></div><div class="line">		String name = request.getParameter(<span class="string">"name"</span>);</div><div class="line">		System.out.println(name);</div><div class="line"></div><div class="line">		String gender = request.getParameter(<span class="string">"gender"</span>);</div><div class="line">		System.out.println(gender);</div><div class="line"></div><div class="line">		String birthYear = request.getParameter(<span class="string">"birth-year"</span>);</div><div class="line">		System.out.println(birthYear);</div><div class="line"></div><div class="line">		String hobbies[] = request.getParameterValues( <span class="string">"hobby"</span> );</div><div class="line">		<span class="keyword">if</span>( hobbies != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">for</span>( String hobby : hobbies) &#123;</div><div class="line">				System.out.println( hobby );</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String selfIntro = request.getParameter(<span class="string">"self-intro"</span>);</div><div class="line">		System.out.println(selfIntro);</div><div class="line"></div><div class="line">		response.setContentType( <span class="string">"text/html; charset=utf-8"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//setContentType() 메소드를 호출하고 getWriter()을 호출해야 글이 안꺠진다.</span></div><div class="line">		PrintWriter out = response.getWriter();</div><div class="line">		out.println(<span class="string">"&lt;h1&gt;성공적으로 가입되었습니다&lt;/h1&gt;"</span>);</div><div class="line">		out.print(<span class="string">"&lt;a href='/helloweb/form.jsp'&gt;폼으로가기&lt;/a&gt;"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSP도 곧 서블릿임을 잊지말자.&lt;/p&gt;
&lt;p&gt;GET 방식 : &lt;a href=&quot;http://naver.com?이름=shkim&amp;amp;암호=1234&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://naver.com?이름=shk
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>1. servlet이란? 실습</title>
    <link href="http://KKimSangHeon.github.io/2017/08/23/servlet1/"/>
    <id>http://KKimSangHeon.github.io/2017/08/23/servlet1/</id>
    <published>2017-08-23T04:05:38.000Z</published>
    <updated>2017-08-30T00:15:20.033Z</updated>
    
    <content type="html"><![CDATA[<p>톰켓을 서블릿 콘테이너, WAS라 부른다.</p>
<p>JSP - HTML을 아는사람들이 쉽게 만들 수 있는것.<br>결국 이도 서블릿 클래스로 변한다.<br>톰캣은 web.xml파일의 매핑 정보를 보고 요청에 대한 응답을 날려준다.</p>
<p>서버 생성하고 - 프로젝트 익스플로러 탭에서 우클릭- web프로젝트 생성 - next-next-맨 아래 체크 - finish</p>
<p>이클립스가 프로젝트명.war파일을 올려놓으면 톰켓이 그것을 풀어서 활용한다.</p>
<p>web-info는 찾아갈 수 없다.</p>
<h4 id="실습-1"><a href="#실습-1" class="headerlink" title="실습 1"></a>실습 1</h4><p>서버 생성하고 - 프로젝트 익스플로러 탭에서 우클릭- web프로젝트 생성(이름:helloweb) - next-next-맨 아래 체크 - finish<br>이미지파일을 Web-Content안에 넣는다.<br>서버 우클릭<br>add and remove 클릭<br>서버실행 (에러난다 8080쓰고 있어서 에러남(오라클))<br>서버패키지의 server.xml 파일을 찾아가 65라인의 8080을 8088로 수정<br><a href="http://localhost:8088/helloweb/java.png" target="_blank" rel="external">http://localhost:8088/helloweb/java.png</a> 접속해보자</p>
<p>WebContent 우클릭 후 jsp 파일생성하고 접속해보자<br>hello.jsp 생성<br><a href="http://localhost:8088/helloweb/hello.jsp" target="_blank" rel="external">http://localhost:8088/helloweb/hello.jsp</a> 접속해보자</p>
<p>WebContent 우클릭 후 images 폴더생성<br>그안에 이미지 붙여넣자<br><a href="http://localhost:8088/helloweb/images/java.png" target="_blank" rel="external">http://localhost:8088/helloweb/images/java.png</a> 접속해보자</p>
<p>java Resource에 com.bigdata2017.helloweb.servlet패키지를 생성하자.<br>패키지 선택하고 우클릭 서블릿 생성 HelloServlet로 하고 next - URL mapping에 add 선택- /hello 입력- next - doget , dopost 선택 후 finish</p>
<figure class="highlight java"><figcaption><span>HelloServlet.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.helloweb.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Servlet implementation class HelloServlet</div><div class="line"> */</div><div class="line"><span class="meta">@WebServlet</span>(&#123; <span class="string">"/hello"</span> &#125;) <span class="comment">//얘는 표준은 아니다. web.xml을 열어서 해야함!</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		response.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</div><div class="line"></div><div class="line">		PrintWriter pw = response.getWriter();</div><div class="line">		pw.println(<span class="string">"&lt;h1&gt;Hello World&lt;/h1&gt;"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">		doGet(request, response);</div><div class="line">		<span class="comment">// doPost를 doGet로 처리</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p><a href="http://localhost:8088/helloweb/hello" target="_blank" rel="external">http://localhost:8088/helloweb/hello</a> 에 접속해보자</p>
<p>JSP 로만 짜는것 -모델1<br>JSP - servlet 를 혼용해서 짜는것을 모델2 MVC라고 한다.</p>
<h4 id="실습2"><a href="#실습2" class="headerlink" title="실습2"></a>실습2</h4><p>HelloServlet.java의 @WebServlet({ “/hello” })을 지우고 해보자<br>어노테이션을 이용한 것이 표준은 아니다.<br>web.xml파일을 열자</p>
<figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>helloweb<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	 <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bigdata2017.helloweb.servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="실습3"><a href="#실습3" class="headerlink" title="실습3"></a>실습3</h4><p>jsp는 서블릿 코드가 내장되어있다고 생각하면 된다.</p>
<p>WebContent의 우클릭 후 table.jsp 생성<br><figure class="highlight"><figcaption><span>table.jsp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language="java" contentType="text/html; charset=UTF-8"</div><div class="line">    pageEncoding="UTF-8"%&gt;</div><div class="line"> &lt;%</div><div class="line"> String sRow = request.getParameter( "r" );</div><div class="line"> String sCol = request.getParameter( "c" );</div><div class="line"></div><div class="line"> int nRow = Integer.parseInt( sRow );</div><div class="line"> int nCol = Integer.parseInt( sCol );</div><div class="line"> %&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;table border="1px" cellspacing=0 cellpadding="10px"&gt;</div><div class="line">		&lt;%</div><div class="line">			for(int i = 0; i&lt; nRow; i++)&#123;</div><div class="line">		%&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;%</div><div class="line">				for(int j=0; j&lt;nCol;j++) &#123;</div><div class="line">			%&gt;</div><div class="line">			&lt;td&gt;cell(&lt;%=j %&gt;,&lt;%=i %&gt;)&lt;/td&gt;</div><div class="line">			&lt;td&gt;cell(&lt;%=j %&gt;,&lt;%=i %&gt;)&lt;/td&gt;</div><div class="line">			&lt;td&gt;cell(&lt;%=j %&gt;,&lt;%=i %&gt;)&lt;/td&gt;</div><div class="line">		&lt;%</div><div class="line">			&#125;</div><div class="line">		%&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;%</div><div class="line">		&#125;</div><div class="line">		%&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h4 id="실습4"><a href="#실습4" class="headerlink" title="실습4"></a>실습4</h4><p>실습3과 동일한 코드를 서블릿으로 작성해보자<br><figure class="highlight java"><figcaption><span>TableServelt.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.helloweb.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="meta">@WebServlet</span>(&#123; <span class="string">"/table"</span> &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableServelt</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		 String sRow = request.getParameter( <span class="string">"r"</span> );</div><div class="line">		 String sCol = request.getParameter( <span class="string">"c"</span> );</div><div class="line"></div><div class="line">		 <span class="keyword">int</span> nRow = Integer.parseInt( sRow );</div><div class="line">		 <span class="keyword">int</span> nCol = Integer.parseInt( sCol );</div><div class="line"></div><div class="line">		 response.setContentType( <span class="string">"text/html; charset=utf-8"</span> );</div><div class="line">		 PrintWriter out = response.getWriter();</div><div class="line">		 out.println(<span class="string">"&lt;table border=\"1px\" cellspacing=0 cellpadding=\"10px\"&gt;"</span>);</div><div class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; nRow; i++) &#123;</div><div class="line">			 out.println(<span class="string">"&lt;tr&gt;"</span>);</div><div class="line">			 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nCol; j++) &#123;</div><div class="line">				 out.println(<span class="string">"&lt;td&gt;cell("</span>+j+<span class="string">","</span>+ i + <span class="string">")&lt;/td&gt;"</span>);</div><div class="line"></div><div class="line">			 &#125;</div><div class="line">			 out.println(<span class="string">"&lt;/tr&gt;"</span>);</div><div class="line"></div><div class="line">		 &#125;</div><div class="line">		 out.println(<span class="string">"&lt;/table&gt;"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">		doGet(request, response);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;톰켓을 서블릿 콘테이너, WAS라 부른다.&lt;/p&gt;
&lt;p&gt;JSP - HTML을 아는사람들이 쉽게 만들 수 있는것.&lt;br&gt;결국 이도 서블릿 클래스로 변한다.&lt;br&gt;톰캣은 web.xml파일의 매핑 정보를 보고 요청에 대한 응답을 날려준다.&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Web/"/>
    
    
      <category term="Servlet" scheme="http://KKimSangHeon.github.io/tags/Servlet/"/>
    
  </entry>
  
</feed>
