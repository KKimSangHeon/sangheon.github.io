<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2019-04-23T12:08:06.822Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernetes5</title>
    <link href="http://KKimSangHeon.github.io/2019/04/23/kubernetes5/"/>
    <id>http://KKimSangHeon.github.io/2019/04/23/kubernetes5/</id>
    <published>2019-04-23T12:08:06.000Z</published>
    <updated>2019-04-23T12:08:06.822Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kubernetes4</title>
    <link href="http://KKimSangHeon.github.io/2019/04/23/kubernetes4/"/>
    <id>http://KKimSangHeon.github.io/2019/04/23/kubernetes4/</id>
    <published>2019-04-23T12:08:01.000Z</published>
    <updated>2019-04-23T12:08:01.768Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kubernetes3</title>
    <link href="http://KKimSangHeon.github.io/2019/04/23/kubernetes3/"/>
    <id>http://KKimSangHeon.github.io/2019/04/23/kubernetes3/</id>
    <published>2019-04-23T12:07:56.000Z</published>
    <updated>2019-04-23T12:07:56.848Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kubernetes2</title>
    <link href="http://KKimSangHeon.github.io/2019/04/23/kubernetes2/"/>
    <id>http://KKimSangHeon.github.io/2019/04/23/kubernetes2/</id>
    <published>2019-04-23T12:07:53.000Z</published>
    <updated>2019-04-23T12:07:53.315Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>(K8s) 1. 쿠버네티스 개요</title>
    <link href="http://KKimSangHeon.github.io/2019/04/23/kubernetes1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/23/kubernetes1/</id>
    <published>2019-04-23T12:07:19.000Z</published>
    <updated>2019-04-23T12:09:25.350Z</updated>
    
    <content type="html"><![CDATA[<h4 id="쿠버네티스-개요"><a href="#쿠버네티스-개요" class="headerlink" title="쿠버네티스 개요"></a>쿠버네티스 개요</h4><p><a href="https://kubernetes.io/ko/docs/tutorials/kubernetes-basics/" target="_blank" rel="external">https://kubernetes.io/ko/docs/tutorials/kubernetes-basics/</a> 참고</p>
<p>컨테이너화된 애플리케이션들을 관리할 수 있게 해준다.</p>
<ul>
<li>컨테이너화 된 어플리케이션을 클러스터에 배포하는가. 즉 도커이미지로 만든것을 클러스터 배포하는가. 이번엔 스웜이 아닌 쿠버네티스라는 클러스터에 배포하는것.</li>
<li>어떻게 스케일할것인가.</li>
<li>어떻게 새 버전을 배포할것인가</li>
<li>어떻게 디버깅할것인지</li>
</ul>
<p>카타코드를 사용하여 가상머신을 웹에서 실행 할 수 있다.<br>미니큐브는 작게 만든 쿠버네티스이며 아무곳에서나 설치할 수 있다.</p>
<h4 id="쿠버네티스로-할수-있는것"><a href="#쿠버네티스로-할수-있는것" class="headerlink" title="쿠버네티스로 할수 있는것."></a>쿠버네티스로 할수 있는것.</h4><p>모던한 서비스는 24시간 7일동안 무정지를 기대한다. 개발자들도 새버전을 하루에 몇번씩 배포 할 수 있다는것을 기대한다. 즉 배포에 대한 수준이 높아졌다.</p>
<p>커테나이제이션을 통해 위의 높아진 수준에 부응할 수 있다. 쿠버네티스는 컨테나이저된 어플리케이션을 어디서든 실행할 수 있도록 도와준다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;쿠버네티스-개요&quot;&gt;&lt;a href=&quot;#쿠버네티스-개요&quot; class=&quot;headerlink&quot; title=&quot;쿠버네티스 개요&quot;&gt;&lt;/a&gt;쿠버네티스 개요&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/ko/docs/tutoria
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="MSA" scheme="http://KKimSangHeon.github.io/categories/CS/MSA/"/>
    
    
      <category term="kubernetes" scheme="http://KKimSangHeon.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>(Docker) 4. Stacks</title>
    <link href="http://KKimSangHeon.github.io/2019/04/21/docker4/"/>
    <id>http://KKimSangHeon.github.io/2019/04/21/docker4/</id>
    <published>2019-04-21T10:40:15.000Z</published>
    <updated>2019-04-21T10:53:13.101Z</updated>
    
    <content type="html"><![CDATA[<p>docker-machine start $(docker-machine ls -q)<br>를 입력하여 도커머신들을 띄우자</p>
<h4 id="Swarm"><a href="#Swarm" class="headerlink" title="Swarm?"></a>Swarm?</h4><p><code>스웜</code>은 <u>도커를 실행하는 머신들의 클러스터이며 애플리케이션을 배포할 수 있다. 컨테이너를 실행하고 여러머신에서 실행할 수 있다.</u></p>
<h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack?"></a>Stack?</h4><p>이번에는 구조중 가장 맨위에 있는 스택을 다루겠다. <code>스택</code>은 <u>의존성을 공유하고 있는 관련있는 서비스들의 집합이다. 스택은 전체 어플리케이션과 어떻게 조화를 이루어야하는지 짤 수 있다. 복잡한 어플리케이션의 경우 여러개의 스택을 사용할 수 있다.</u></p>
<p>docker-machine ssh myvm1 “docker swarm init –advertise-addr <myvm1의 ip="">“<br>을 입력하여 스웜 매니저로 띄워주자<br>위를 입력하면 docker swarm join –token …..이라고 출력되는데 이는 스웜에 워커를 추가하고 싶으면 이렇게 입력하라는 것이다,</myvm1의></p>
<p>두번째 머신에 아래와 같이 입력하여 워커를 추가하자<br>docker-machine ssh myvm2 “위에서 출력된값 복붙”</p>
<p>이제 머신 두개를 띄웠다.<br>즉 스웜 매니저, 워커로 띄움</p>
<p>여러개의 멀티 머신에서 띄워보자.</p>
<p>yml 파일을 아래와 같이 수정하자.<br>이전것에서 visualizer 라는 서비스가 추가됨.<br>추가된것은 호스트에 있는 파일을 컨테이너 안에다 집어넣어놨다.(dockersamples/visualizer:stable 안에 /var/run/docker.sock:/var/run/docker.sock 파일 넣음)<br><figure class="highlight"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">version: "3"</div><div class="line">services:</div><div class="line">  web:</div><div class="line">    # replace username/repo:tag with your name and image details</div><div class="line">    image: username/repo:tag</div><div class="line">    deploy:</div><div class="line">      replicas: 5</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">      resources:</div><div class="line">        limits:</div><div class="line">          cpus: "0.1"</div><div class="line">          memory: 50M</div><div class="line">    ports:</div><div class="line">      - "80:80"</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">  visualizer:</div><div class="line">    image: dockersamples/visualizer:stable</div><div class="line">    ports:</div><div class="line">      - "8080:8080"</div><div class="line">    volumes:</div><div class="line">      - "/var/run/docker.sock:/var/run/docker.sock"</div><div class="line">    deploy:</div><div class="line">      placement:</div><div class="line">        constraints: [node.role == manager]</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">networks:</div><div class="line">  webnet:</div><div class="line">  </div></pre></td></tr></table></figure></p>
<p>docker-machine ev myvm1<br>을 입력하여 매니저와 연결하자.</p>
<p> docker stack deploy -c docker-compose.yml getstartedlab<br> 를 입력하자. (이는 myvm1에서 실행하는것이다.)</p>
<p> docker-machine ls를 입력하여 머신의 ip를 입력하고 8080포트로 접속해보자.</p>
<p>아래를 입력하여 레디스를 추가하자<br><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">redis:</div><div class="line">  image: redis</div><div class="line">  ports:</div><div class="line">    - <span class="string">"6379:6379"</span></div><div class="line">  volumes:</div><div class="line">    - <span class="string">"/home/docker/data:/data"</span></div><div class="line">  deploy:</div><div class="line">    placement:</div><div class="line">      constraints: [node.role == manager]</div><div class="line">  command: redis-server --appendonly yes</div><div class="line">  networks:</div><div class="line">    - webnet</div><div class="line">    </div></pre></td></tr></table></figure></p>
<p> docker stack deploy -c docker-compose.yml getstartedlab<br> 를 입력하여 디플로이 하자.</p>
<p>레디스는 매니저에서만 실행되므로 동일한 파일 시스템을 쓴다.(워커것과 섞이지 않음)<br>영속화를 위해 볼륨파일을 로컬에서 갖다 쓰고 매니저에서만 돌린다.</p>
<p>docker service ls<br>를 입력해서 돌아가고 있는 서비스를 확인해보자.</p>
<p>docker container ls<br>를 입력해서 각 떠있는 컨테이너들을 확인하자.</p>
<h4 id="Deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h4><p>배포하는 방법은 CE(Cloud Provider),Enterprise(Cloud provier), Enterprise(On-Premise)가 있다</p>
<p>도커 클라우드를 써서 앱을 관리할 수 있다.<br>외부 클라우드에 배포하는 방법을 알아보자.</p>
<p>도커 클라우드는 스탠다드모드, 스웜모드로 쓸 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker-machine start $(docker-machine ls -q)&lt;br&gt;를 입력하여 도커머신들을 띄우자&lt;/p&gt;
&lt;h4 id=&quot;Swarm&quot;&gt;&lt;a href=&quot;#Swarm&quot; class=&quot;headerlink&quot; title=&quot;Swarm?&quot;&gt;&lt;
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="MSA" scheme="http://KKimSangHeon.github.io/categories/CS/MSA/"/>
    
    
      <category term="Docker" scheme="http://KKimSangHeon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>(Docker) 3. Swarms</title>
    <link href="http://KKimSangHeon.github.io/2019/04/17/docker3/"/>
    <id>http://KKimSangHeon.github.io/2019/04/17/docker3/</id>
    <published>2019-04-17T14:06:35.000Z</published>
    <updated>2019-04-21T10:49:24.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="이전강의에서는-만든-앱을-가져와서-어떻게-컴포즈로-정의해야-하는지-docker-compose-yml파일로-정의했었다"><a href="#이전강의에서는-만든-앱을-가져와서-어떻게-컴포즈로-정의해야-하는지-docker-compose-yml파일로-정의했었다" class="headerlink" title="이전강의에서는 만든 앱을 가져와서 어떻게 컴포즈로 정의해야 하는지 docker-compose.yml파일로 정의했었다."></a>이전강의에서는 만든 앱을 가져와서 어떻게 컴포즈로 정의해야 하는지 docker-compose.yml파일로 정의했었다.</h4><p>이번에는 애플리케이션을 클러스터에 배포한다. 멀티 컨테이너, 멀티 머신, 멀티 어플리케이션을 스웜이라 불리는 도커나이저 클러스터인 스웜에 배포할것이다.</p>
<h3 id="스웜"><a href="#스웜" class="headerlink" title="스웜?"></a>스웜?</h3><p>스웜은 도커로 실행하는 머신들의 그룹이고 클러스터로 조인되어있다. 도커 커맨드를 그대로 사용할 수 있고 클러스터에 있는 <u>스웜매니저</u>에 도커 커맨드를 쓰는것이다. 스웜에 있는 머신들을 물리적, 가상적이어도 되고 스웜에 들어가있는 머신들을 노드라고 한다.</p>
<p><code>스웜매니저</code> : 여러개의 컨테이너를 어떻게 실행할지에 대한 전략이 있다. empiiest node 전략을 사용하면 컨테이너를 띄우가 위해 최소한의 머신을 쓴다.golbal전략은 컨테이너가 하나의 인스턴스를 갖도록 해준다. 즉 모든서버가 컨테이너 하나는 갖도록 해준다. 이는 컴포즈 파일을 통해 스웜매니저에게 알려줘야 한다.<br>스웜에 들어간것은 노드라 하는데 이들에게 명령을 내릴수 있는건 스웜매니저라 하고 이러한 매니저들은 다른 스웜에 워커로 조인할 수 있도록 해준다. 워커는 컨테이너를 돌릴 수 있는 리소스를 제공해주고 다른머신에 작업을 명령할 권한은 없다.</p>
<p>도커는 스웜모드로 변경될 수 있다. 스웜모드로 바꾸면 현재의 머신이 스웜매니저가 되고 명령어는 현재머신에 시키는것이 아니라 스웜매니저에 시킨다.</p>
<p>스웜은 여러개의 물리 혹은 가상의 머신으로 이뤄진다.</p>
<p>docker swarm init으로 스웜모드를 실행시키면 현재 머신이 스웜 매니저가 된다.<br>docker swarm join을 다른 머신에서 사용하면 다른 머신에서 내가 만든 스웜매니저에 조인하게 된다.</p>
<p>docker-machine create –driver virtualbox myvm1<br>docker-machine create –driver virtualbox myvm2<br>을 입력해 도커 머신을 생성하자.</p>
<p>docker-machin ls 를 입력하면 생성된 머신을 확인할 수 있다.</p>
<p>이후<br>docker-machine start myvm1 을 입력하여 머신을 띄우자.</p>
<p>이제 myvm1을 스웜매니저로 만들고 myvm2을 워커로 만들것이다.</p>
<p>첫번째 머신을 매니저로 먼들기위해 도커에 명령을 보내야한다.<br>docker-machine ssh myvm1 “docker swarm init –advertise-addr <myvm1의 ip="">“<br>을 입력하면 docker swarm join –token …..이라고 출력되는데 이는 스웜에 워커를 추가하고 싶으면 이렇게 입력하라는 것이다,<br>두번째 머신에 아래와 같이 입력하여 워커를 추가하자<br>docker-machine ssh myvm2 “위에서 출력된값 복붙”</myvm1의></p>
<p>docker-machine ssh myvm1 “docker”</p>
<p>앱을 스웜클러스터에 배포<br>스웜매니저(myvm1)만 도커 커맨드를 실행할 수 있다는점을 잊지말자</p>
<p>지금까지는 ssh를 활용하여 가상머신에다 가상명령어를 실행했는데 다른방법으로는 docker-machine env <machine> 를 활용하여 쉘에서 도커데몬 vm을 연결하여 활용할 수 있다.<br>이는 로컬에 있는 docker-compose.yml을 쓸 수 있으므로 유용하게 쓸 수 있다.<br>다시설명하자면 이전에는 docker-compose.yml파일을 주고 디플로이를 해야했다. vm에는 해당 파일이 없으므로 vm에 떠있는 스웜매니저와 쉘을 연결하여 쉽게 사용할 수 있다.</machine></p>
<p>docker-machine env myvm1<br>을 입력하여 쉘이랑 머신을 붙이고 맨아래 나오는 커맨드를 입력하자.<br>그럼 myvm1에 들어온것과 같다.</p>
<p>docker node ls<br>를 입력하여 사용할 수 있는데 마치 myvm1이라는 스웜매니저에 들어온것같이 도커 커맨드를 사용할 수 있다.</p>
<p>즉 도커 디플로이를 하면서도 로컬에 있는 파일을 사용할 수 있게되었다! vm으로 파일을 옮기거나 하는 작업들이 필요없어졌다.</p>
<p>docker stack deploy -c docker-compose.yml getstartedlab<br>을 입력하여 배포 가능하다.</p>
<p>그러면 vm들에 컨테이너가 들어가게 된다.</p>
<p>docker stack ps getstartedlab을 입력하여 여러 노드에 깔린것을 확인할 수 있다.</p>
<p>쉘이 다른 머신에 붙도록 하고싶으면 docker-machine env 명령을 활용하면 된다. 하지만 myvm2는 도커 매니저가 아니라 워커이기 때문에 도커 명령어를 실행할 수 없다.</p>
<p>접속해보자. docker-machine ls를 입력하여 ip를 확인하고 들어가보자.</p>
<p>네트웍은 두 노드끼리 공유되고 로드밸런싱된다.</p>
<p>yml 파일의 replicas를 4로 바꾸고<br>docker stack deploy -c docker-compose.yml getstartedlab<br>을 입력하여 업데이트 하고<br>docker stack ps getstartedlab<br>을 입력하여 확인해보자</p>
<p>2개,2개씩 골고루 배치된것을 확인할 수 있다.</p>
<h3 id="cleanup-and-reboot"><a href="#cleanup-and-reboot" class="headerlink" title="cleanup and reboot"></a>cleanup and reboot</h3><p>docker stack rm getstartedlab<br>을 입력하여 도커를 내려보자,</p>
<p>docker-machine ssh myvm2 “docker swarm leave”<br>를 통해 도커 스웜에서 제거하자(워커는 이렇게 제거하면 된다.)</p>
<p>docker-machine ssh myvm1 “docker swarm leave –force”<br>를 통해 도커 스웜에서 제거하자(매니저는 이렇게 force를 넣어 제거하면 된다.)</p>
<p>eval $(docker-machine env -u)<br>env에 붙은 도커 머신 떼어내자.<br>쉘이 도커 머신에서 떨어져 나간다.<br>이제 로컬에 있는 도커 커맨드가 실행된다..</p>
<p>docker-machine stop<br>를 입력하여 도커 머신을 멈추자.</p>
<p><a href="https://www.youtube.com/watch?v=p58k2_HMWRM&amp;list=PLfI752FpVCS84hxOeCyI4SBPUwt4Itd0T&amp;index=2" target="_blank" rel="external">https://www.youtube.com/watch?v=p58k2_HMWRM&amp;list=PLfI752FpVCS84hxOeCyI4SBPUwt4Itd0T&amp;index=2</a><br>의 53분부터 보면 요약 잘해주신다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;이전강의에서는-만든-앱을-가져와서-어떻게-컴포즈로-정의해야-하는지-docker-compose-yml파일로-정의했었다&quot;&gt;&lt;a href=&quot;#이전강의에서는-만든-앱을-가져와서-어떻게-컴포즈로-정의해야-하는지-docker-compose-yml파
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="MSA" scheme="http://KKimSangHeon.github.io/categories/CS/MSA/"/>
    
    
      <category term="Docker" scheme="http://KKimSangHeon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>(Docker) 2. Docker Services</title>
    <link href="http://KKimSangHeon.github.io/2019/04/17/docker2/"/>
    <id>http://KKimSangHeon.github.io/2019/04/17/docker2/</id>
    <published>2019-04-17T14:05:48.000Z</published>
    <updated>2019-04-21T10:52:29.843Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker-Services"><a href="#Docker-Services" class="headerlink" title="Docker Services"></a>Docker Services</h4><p><a href="https://docs.docker.com/get-started" target="_blank" rel="external">https://docs.docker.com/get-started</a> 를 참고하여 진행</p>
<p>Compose를 설치하자. (보통 도커 설치하면 미리 깔린다.)</p>
<p>이번엔 어플리케이션을 로드밸런싱하고 스케일한다. 즉 컨테이너를 여러개 띄운다.</p>
<p>지난번엔 컨테이너를 했고 이번엔 서비스를 배운다.<br>이전에도 얘기했듯이 컨테이너 위에 서비스 서비스 위에 스택이 존재한다.</p>
<h4 id="서비스"><a href="#서비스" class="headerlink" title="서비스?"></a>서비스?</h4><p>분산된 앱에서는 각각을 서비스라 한다. 비디오 어플리케이션에서 데이터를 db에 저장하는 서비스, 비디오를 변환하는 서비스, 프론트엔드를 위한 서비스가 있을것이다. 서비스는 실제환경에서 쓰이는 컨테이너를 의미. 서비스는 오직 하나의 이미지만 실행한다. 서비스는 컨테이너들이 어떤 포트를 사용하고 얼마나 띄워야할지 씨피유는 얼마나 써야할지를 codify한다.</p>
<h4 id="스케일링"><a href="#스케일링" class="headerlink" title="스케일링?"></a>스케일링?</h4><p>서비스를 스케일링하는것은 실행할 컨테이너의 갯수를 변경하는것을 의미한다.<br>또한 더많은 컴퓨터 자원을 서비스에 할당하는것을 의미</p>
<p>이는 도커에서 매우 쉽다.<br>docker-compose.yml 파일을 사용하면 된다.<br>이는 도커컨테이너가 프로덕션 환경에서 어떻게 동작해야 하는지 정의한다.</p>
<h3 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h3><p>docker-compose.yml을 만들고<br><figure class="highlight"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">version: "3"</div><div class="line">services:</div><div class="line"># 서비스의 이름은 web이다.</div><div class="line">  web:</div><div class="line">    # replace username/repo:tag with your name and image details</div><div class="line">    # 아래의 이미지를 읽어와라</div><div class="line">    image: tkdgjs1501/get-started:part2</div><div class="line">    deploy:</div><div class="line">    #다섯개의 컨테이너를 만든다.</div><div class="line">      replicas: 5</div><div class="line">      resources:</div><div class="line">        limits:</div><div class="line">        #각각의 컨테이너는 10%의 CPU를 사용하고</div><div class="line">          cpus: "0.1"</div><div class="line">        #50M를 할당한다.</div><div class="line">          memory: 50M</div><div class="line">        #무언가 잘못되었을 때 컨테이너를 다시 띄운다.</div><div class="line">      restart_policy:</div><div class="line">        condition: on-failure</div><div class="line">        #컨테이너의 호스트의 4000번 컨테이너의 80번 포트를 연결</div><div class="line">    ports:</div><div class="line">      - "4000:80"</div><div class="line">      #다섯개의 컨테이는 로드밸런스를 통해 호스트의 80번 포트를 공유해야한다. 이를 위해 네트웍을 webnet 사용</div><div class="line">    networks:</div><div class="line">      - webnet</div><div class="line">      # webnet의 정의</div><div class="line">networks:</div><div class="line">  webnet:</div><div class="line">  </div></pre></td></tr></table></figure></p>
<p>  를 붙여넣음</p>
<p>위 파일은 도커한테 어떤 행동을 해야할지 알려주는것.</p>
<p>docker swarm init<br>을 입력하자</p>
<p>docker stack deploy -c docker-compose.yml getstartedlab<br>getstartedlab 라는 앱 네임으로</p>
<p>docker service ls<br>getstartedlab_web라는게 생성되는데 앱네임 뒤에 web이 붙여진것이다.</p>
<p>서비스안에 돌고있는 다섯개의 컨테이너를 태스크라 부르는데 태스크는 각각의 ID가 있고 순차적으로 증가한다.</p>
<p>docker service ps getstartedlab_web<br>를 입력하여 태스크를 나열해 볼 수 있다.<br>task에 대한 정보들</p>
<p><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>를 접속할 수 있는데 접속할때마다 호스트 네임이 바뀌는것을 확인할 수 있다.<br>호스트네임 == 컨테이너 ID</p>
<p>docker container ls<br>컨테이너에 대한 정보들</p>
<h4 id="스케일링-하기"><a href="#스케일링-하기" class="headerlink" title="스케일링 하기"></a>스케일링 하기</h4><p>docker-compose.yml 파일의 replicas를 수정하여 스케일링 할 수 있다.</p>
<p>replicas: 7<br>로 바꾸고<br>docker stack deploy -c docker-compose.yml getstartedlab<br>를 입력하면 업데이트를 한다.</p>
<p>docker service ps getstartedlab_web<br>를 입력하면 7개로 변경된것을 확인할 수 있다.</p>
<h4 id="정리하기"><a href="#정리하기" class="headerlink" title="정리하기"></a>정리하기</h4><p>docker stack rm getstartedlab<br>docker swarm leave –force</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Docker-Services&quot;&gt;&lt;a href=&quot;#Docker-Services&quot; class=&quot;headerlink&quot; title=&quot;Docker Services&quot;&gt;&lt;/a&gt;Docker Services&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://d
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="MSA" scheme="http://KKimSangHeon.github.io/categories/CS/MSA/"/>
    
    
      <category term="Docker" scheme="http://KKimSangHeon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>(Docker) 1. Docker Orientation, Container</title>
    <link href="http://KKimSangHeon.github.io/2019/04/17/docker1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/17/docker1/</id>
    <published>2019-04-17T14:04:15.000Z</published>
    <updated>2019-04-21T10:49:21.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker-Orientation-Container"><a href="#Docker-Orientation-Container" class="headerlink" title="Docker Orientation, Container"></a>Docker Orientation, Container</h3><h4 id="도커란"><a href="#도커란" class="headerlink" title="도커란?"></a>도커란?</h4><p>도커는 개발자, 시스템관리자를 위한 플랫폼이다. 애플리케이션을 컨테이너를 사용해 개발하고 배포할 수 있는 시스템.</p>
<h4 id="컨테이너"><a href="#컨테이너" class="headerlink" title="컨테이너?"></a>컨테이너?</h4><p>컨테이너는 이미지를 실행한 런타임 인스턴스</p>
<h4 id="이미지"><a href="#이미지" class="headerlink" title="이미지?"></a>이미지?</h4><p>이미지는 실행 가능한 패키지.</p>
<p><a href="https://blog.hanumoka.net/2018/04/28/docker-20180428-windows10pro-install-docker/" target="_blank" rel="external">https://blog.hanumoka.net/2018/04/28/docker-20180428-windows10pro-install-docker/</a></p>
<h4 id="도커의-구성"><a href="#도커의-구성" class="headerlink" title="도커의 구성"></a>도커의 구성</h4><p>하이라키의 맨아래는 컨테이너이고 그 위는 서비스 그위에는 스택이 있다,<br><code>스택</code> - 서비스들간 어떻게 동작해야 하는지 (yml 파일의미)<br><code>서비스</code> - 어떻게 컨테이너들이 프로덕트에서 동작하는지 정의 (yml안에서 정의됨 )<br><code>컨테이너</code>- 이미지를 실행한 런타임 인스턴스</p>
<p>과거엔 파이선을 시작할때 환경을 설치하는것 부터 시작했다. 이를 위해 로컬에 완벽한 환경을 세팅했어야헀다.<br>도커는 포터블한 파이썬 이미지를 가져와 빌드를 가능하게 했다. 이는 도커 파일로 정의한다.<br>도커파일은 컨테이너 안에 있는 파일들을 어떻게 구성해야하는지에 정의하는것이다. 네트워크 환경, 디스크 드라이브 등.<br>도커파일을 한번 세팅해서 빌드하면 어디서 하든 동일하게 동작한다.</p>
<p><a href="https://docs.docker.com/get-started" target="_blank" rel="external">https://docs.docker.com/get-started</a> 를 참고하여 진행</p>
<h3 id="도커-이미지-빌드-및-컨테이너-실행"><a href="#도커-이미지-빌드-및-컨테이너-실행" class="headerlink" title="도커 이미지 빌드 및 컨테이너 실행."></a>도커 이미지 빌드 및 컨테이너 실행.</h3><p>한 디렉토리에 app.py , Dockerfile, requirements.txt 를 만들고</p>
<p>docker build –tag=friendlyhello .<br>를 입력하여 이미지를 빌드한다.</p>
<p>docker image ls<br>를 입력하여 확인가능</p>
<p>docker run -p 4000:80 friendlyhello<br>를 입력하여 파이썬은 80번을 통해 서비스하고 로컬에서는 4000을 통해 접속할 수 있게된다.</p>
<p><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a><br>를 입력하여 접속하여 보자</p>
<p>docker run -d -p 4000:80 friendlyhello<br>detacth모드로 실행하는 것이다.</p>
<p>docker container ls<br>현재 돌아가고 있는 컨테이너를 확인할 수 있다.</p>
<p>docker container stop 1fa4ab2cf395<br>를 입력하여 돌아가고 있는 컨테이너를 중지시킬 수 있다.</p>
<p>docker container ls<br>를 입력하여 돌아가고 있는 컨테이너 확인</p>
<h3 id="이미지-publish"><a href="#이미지-publish" class="headerlink" title="이미지 publish"></a>이미지 publish</h3><p>docker login<br>을 통해 로그인</p>
<p>docker tag friendlyhello tkdgjs1501/get-started:part2<br>(docker tag image username/repository:tag) 형태<br>를 통해 도커 태그를 생성한다.</p>
<p>docker image ls<br>태그된 이미지 확인</p>
<p>docker push tkdgjs1501/get-started:part2<br>(docker push username/repository:tag) 형태<br>를 통해 push 진행</p>
<h3 id="컨테이너-이미지-제거"><a href="#컨테이너-이미지-제거" class="headerlink" title="컨테이너, 이미지 제거."></a>컨테이너, 이미지 제거.</h3><p>docker container rm <hash></hash></p>
<p>docker image rm <image id=""></image></p>
<h3 id="원격에서-레파지토리에서-pull받고-image-run하기"><a href="#원격에서-레파지토리에서-pull받고-image-run하기" class="headerlink" title="원격에서 레파지토리에서 pull받고 image run하기"></a>원격에서 레파지토리에서 pull받고 image run하기</h3><p>docker run -p 4000:80 tkdgjs1501/get-started:part2<br>(docker run -p 4000:80 username/repository:tag) 형태</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Docker-Orientation-Container&quot;&gt;&lt;a href=&quot;#Docker-Orientation-Container&quot; class=&quot;headerlink&quot; title=&quot;Docker Orientation, Container&quot;&gt;&lt;/a&gt;D
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="MSA" scheme="http://KKimSangHeon.github.io/categories/CS/MSA/"/>
    
    
      <category term="Docker" scheme="http://KKimSangHeon.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>규칙 17. 계승을 위한 설계와 문서를 갖추거나, 그럴 수 없다면 계승을 금지하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/14/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/04/14/effective/</id>
    <published>2019-04-14T07:39:51.000Z</published>
    <updated>2019-04-14T08:59:41.039Z</updated>
    
    <content type="html"><![CDATA[<h4 id="계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까"><a href="#계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까" class="headerlink" title="계승을 위한 설계와 문서를 갖춘다는것은 무슨의미일까?"></a>계승을 위한 설계와 문서를 갖춘다는것은 무슨의미일까?</h4><p><u>메서드를 재정의 하면 어떤일이 생기는 지 문서에 잘 남겨야 한다. 즉 재정의 가능 메소드가 내부적으로 어떻게 동작하는지 문서에 남기라는 것이다.</u> public, protected로 선언된 모든 메서드와 생성자에 대해 어떤 재정의 가능 메서드를 어떤 순서로 호출하는지 호출결과는 어떤 영향을 미치는지 남기라는 것이다.<br>예를들어 후면 스레드가 호출할 수도 있고 static 초기화 구문 안에서 호출할 수도 있다. 관습적으로는 재정의 가능 메서드를 어떤식으로 호출하는지 주석 마지막에 명시한다.</p>
<h4 id="좋은-API-문서는-메서드가-하는-일이-무엇인지-명시하지-어떻게-하는지-명시하면-안되지-않아"><a href="#좋은-API-문서는-메서드가-하는-일이-무엇인지-명시하지-어떻게-하는지-명시하면-안되지-않아" class="headerlink" title="좋은 API 문서는 메서드가 하는 일이 무엇인지 명시하지 어떻게 하는지 명시하면 안되지 않아?"></a>좋은 API 문서는 메서드가 하는 일이 무엇인지 명시하지 어떻게 하는지 명시하면 안되지 않아?</h4><p>그렇다. 이는 맞는말이다. 계승이 캡슐화 원칙을 침해하기 때문에 발생하는 결과로 볼 수 있다. 문서만 제대로 썼다고 계승에 적합한 설계가 되지는 않는다. 너무 애쓰지 않고도 효율적인 하위클래스를 정의하기 위해서는 <u>클래스 내부 동작에 개입할 수 있는 훅을 신중하게 고른 protected 메서드 형태로 제공해야 한다.</u></p>
<h4 id="그렇다면-클래스를-설계할-때-protected로-선언할-멤버는-어떻게-정해"><a href="#그렇다면-클래스를-설계할-때-protected로-선언할-멤버는-어떻게-정해" class="headerlink" title="그렇다면 클래스를 설계할 때 protected로 선언할 멤버는 어떻게 정해?"></a>그렇다면 클래스를 설계할 때 protected로 선언할 멤버는 어떻게 정해?</h4><p>딱히 정해진 방법은 없다. 생각하고 신중하게 고른 다음 실제로 하위 클래스를 만들어 보면서 테스트하는것이 최선이다. protected 멤버 개수는 가능한 한 줄여야 하는데 구현 세부사항에 대한 일종의 서약 구실을 하기 떄문이다.<br>즉 계승을 위해 설계할 클래스를 테스트할 유일한 방법은 하위 클래스를 직접 만들어 보는것이다. 만일 중요한 멤버를 protected로 선언하는것을 잊었다면 하위클래스에서 고통스러울 수 있다. 반대로 하위 클래스를 몇개 만들어봐도 사용할 일이 없는 protected 멤버는 private로 선언해야 한다.</p>
<h4 id="그렇게-까지-신중하게-정해야하나"><a href="#그렇게-까지-신중하게-정해야하나" class="headerlink" title="그렇게 까지 신중하게 정해야하나?"></a>그렇게 까지 신중하게 정해야하나?</h4><p>널리 사용될 클래스를 계승에 맞게 설계할 때는 문서에 명시한 내부 호출 패턴 뿐 아니라 메서드와 필드를 protected로 선언하는 과정에 함축된 구현 관련 결정들을 영원히 고수해야 한다는 점을 기억해야 한다. 따라서 다음 릴리스에 성능이나 기능을 개선하기 어려워진다.<br>또한 계승용 문서는 API문서를 어지럽힐 수 있다.</p>
<h4 id="계승을-허용하기-위해-따라야-할-제약사항"><a href="#계승을-허용하기-위해-따라야-할-제약사항" class="headerlink" title="계승을 허용하기 위해 따라야 할 제약사항."></a>계승을 허용하기 위해 따라야 할 제약사항.</h4><p>1.생성자는 직접적이건 간접적이건 재정의 가능 메서드를 호출해서는 안된다.<br><code>이유:</code>상위클래스 생성자는 하위클래스의 생성자보다 먼저 실행되므로, 하위클래스에서 재정의한 메서드는 하위클래스 생성가가 실행되기 전엔 호출될 것이다. 재정의한 메서드가 하위 클래스 생성자가 초기화한 결과에 의존할 경우 그 메서드는 원하는대로 실행되지 않을것이기 떄문에.</p>
<p>2.계승용 클래스가 Cloneable과 Serializable 와 같은 인터페이스를 구현하도록 하는것은 바람직하지 않다.<br><code>이유:</code>클래스를 계승할 프로그래머에게 과도한 책임을 지우기 때문이다. 하지만 하위 클래스 프로그래머가 이들 인터페이스를 선택적으로 구현할 수 있도록 하는 특별한 방법들이 있는데, 이런 조치들에 대해서는 규칙 11, 규칙 74에서 설명한다.<br>만약 계승용 클래스가 Cloneable과 Serializable 와 같은 인터페이스를 구현해야 한다면 clone이나 readObject 메서드 안에서 직접적이건 간접적이건 재정의 가능한 메서드를 호출하지 않도록 주의해야 한다.</p>
<p>3.Serializable 인터페이스를 구현하는 계승용 클래스에 readResolve와 writeReplace 메서드가 있다면 priavte가 아닌 protected로 선언해야 한다.<br><code>이유 :</code>private로 선언해 버리면 하위 클래스는 해당 메서드들을 조용히 무시하게 된다. 이것은 계승을 허용하기 위해 구현 세부사항을 클래스 API의 일부로 포함시켜야 하는 사례 가운데 하나다.</p>
<h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>계승에 맞도록 설계하고 문서화 하지 않은 클래스에 대한 하위클래스는 만들지 말라.<br>가장 쉬운 방법은 클래스를 final로 선언하거나 모든 생성자를 private나 package-private로 선언하고 생성자 대신 public 정적 팩터리 메서드를 추가하는것. 규칙 15에서 설명한 대로 이방법을 사용하면 클래스나 패키지 내부에서는 하위 클래스를 만들어 쓸수도 있으므로 편리하다.<br>계승을 반드시 허용해야 한다고 느껴지면 재정의 가능 메서드는 절대로 호출하지 않도록 하고 그 사실을 반드시 문서에 남겨라.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까&quot;&gt;&lt;a href=&quot;#계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까&quot; class=&quot;headerlink&quot; title=&quot;계승을 위한 설계와 문서를 갖춘다는것은 무슨의미일까?&quot;&gt;&lt;/a&gt;계
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 16.계승하는 대신 구성하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/07/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/07/effective1/</id>
    <published>2019-04-07T03:51:41.000Z</published>
    <updated>2019-04-21T10:52:11.245Z</updated>
    
    <content type="html"><![CDATA[<p>계승은 코드 재사용을 돕는 강력한 도구지만 항상 최선은 아니다. 계승을 적절히 사용하지 못한 소프트웨어는 깨지기 쉽다. 계승은 상위 클래스와 하위 클래스 구현을 같을 프로그래머가 통제하는 단일 패키지 안에서 사용하면 안전하다. 또한 계승을 고려하여 설계되고 그에 맞는 문서를 갖춘 클래스에 사용하는것도 안전하다. 일반적인 객체 생성 가능 클래스라면 해당클래스가 속한 패키지 밖에서 계승을 시도하는 것은 위험하다.</p>
<h4 id="계승은-캡슐화-원칙을-위반한다"><a href="#계승은-캡슐화-원칙을-위반한다" class="headerlink" title="계승은 캡슐화 원칙을 위반한다."></a>계승은 캡슐화 원칙을 위반한다.</h4><p>하위 클래스가 정상 동작하기 위해서는 상의 클래스의 구현에 의존할수밖에 없다. 상위 클래스는 릴리즈가 계속되면서 바뀔 수 있는데 이때 하위클래스는 망가질 수 있다. 또한 하위클래스는 상위클래스의 변화에 발맞춰 진화해야 한다.</p>
<h4 id="HashSet-를-계승하여-요소가-몇개나-추가되었는지에-대한-코드를-작성한다-가정해보자"><a href="#HashSet-를-계승하여-요소가-몇개나-추가되었는지에-대한-코드를-작성한다-가정해보자" class="headerlink" title="HashSet 를 계승하여 요소가 몇개나 추가되었는지에 대한 코드를 작성한다 가정해보자."></a>HashSet<e> 를 계승하여 요소가 몇개나 추가되었는지에 대한 코드를 작성한다 가정해보자.</e></h4><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentHashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">//요소 삽입횟수</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> addCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InstrumentedHashSet</span><span class="params">()</span></span>&#123;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InstrumentedHashSet</span><span class="params">(<span class="keyword">int</span> initCap, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(initCap, loadFactor);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">		addCount++;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.add(e);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">		addCount+= c.size();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.addAll(c);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddCount</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> addCount;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위의 코드는 제대로 동작하지 않는다. 가령 다음과같은 코드를 실행한다 해보자.<br>InstrumentedHashSet<string> s = new InstrumentedHashSet<string>();<br>s.addAll(Arrays.asList(“A”,”B”,”C”));</string></string></p>
<p><u>addAll은 3을 반환하는것이 아니라 6을 반환한다.</u></p>
<p>HashSet의 addAll 메소드는 add메서드를 통해 구현되어 있기 때문이다. 이는 HashSet 문서에는 나와있지 않은 내용이다.<br><u>하위클래스에서 재정의한 addAll 메서드를 삭제하거나 addAll메서드가 반복하며 add를 호출하도록 하여 해결할 수 있지만 이는 addAll 메소드가 add 위에서 구현되었다는 사실에 의존적이다. 이 또한 add메서드가 private일 경우 사용할 수 없다.</u><br>또한 <u>상위 클래스에 새로운 메서드가 추가될 경우 하위클래스의 구현을 망가뜨릴 수 있다.</u><br>예를들어 특정 리스트에 데이터를 삽입할 때 “ksh” 라는 문자열이 붙도록 하는 메소드가 어느순간 추가되었을 때 삽입 작업만 호출하는 부모클래스의 메소드만을 호출할 때 ..</p>
<p>즉 InstrumentedHashSet 클래스는 깨지기 쉬운 클래스일수밖에 없다.</p>
<h4 id="구성과-전달을-활용해-위의-문제를-해결하는-방법"><a href="#구성과-전달을-활용해-위의-문제를-해결하는-방법" class="headerlink" title="구성과 전달을 활용해 위의 문제를 해결하는 방법"></a>구성과 전달을 활용해 위의 문제를 해결하는 방법</h4><p>기존 클래스를 계승하는 대신, <u>새로운 클래스에 기존 클래스 객체를 참조하는 privae 필드를 하나 두는것</u>. 이를 구성이라 하며 기존클래스가 새 클래스의 일부가 되는것을 말한다.<br>새로운 클래스에 포함된 각각의 메서드는 기존 클래스에 있는 메서드 가운데 필요한 것을 호출해서 결과를 반환하면 된다. 이러한 구현 기법을 <u>전달(forwarding)이라고 하고 전달 기법을 사용해 구현된 메소드를 전달메서드(forwarding method)라고 부른다</u>.<br>구성기법을 통해 구현된 클래스는 기존 클래스의 구현 세부사항에 종속되지 않기 때문에 견고하다.(기존 클래스에 또다른 메서드가 추가되더라도 새로운 클래스에 영향이 없음)</p>
<figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//계승 대신 구성을 사용하는 포장(wrapper) 클래스</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">instrumentedSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">ForadingSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> addCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">InstrumentedSet</span><span class="params">(Set&lt;E&gt; s)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(s);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</div><div class="line">		addCount++;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.add(e);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Coolection&lt;? extends E&gt; c)</span></span>&#123;</div><div class="line">		addCount += c.size();</div><div class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.addAll(c);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddCount</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> addCount;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//재사용 가능한 전달(forwarding) 클래스</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingSet</span>&lt;<span class="title">E</span>&gt; <span class="title">implemetns</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;E&gt; s;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ForwardingSet</span><span class="params">(Set&lt;E&gt; s)</span> </span>&#123; <span class="keyword">this</span>.s = s; &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;s.clear();&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;<span class="keyword">return</span> s.contains(o);&#125;</div><div class="line">	.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>InstrumentedSet을 이렇게 설계할 수 있는것은 HashSet이 제공해야 할 기능을 규정하는 Set라는 인터페이스가 있기 때문이다. 이런 설계는 안정적일 뿐 아니라 유연성도 아주 높다.<br>이전의 예제중 계승을 한 것에서는 한 클래스에서만 적용이 가능하고 상위 클래스 생성자마다 별도의 생성자를 구현해야 했다.<br>하지만 포장 클래스 기법을 쓰면 어떤 Set 구현도 원하는대로 수정할 수 있고 이미 있는 생성자도 그대로 사용할 수 있다.</p>
<p>포장클래스의 단점이 별로 없으나 callback프레임워크와 함께 사용하기에는 적합하지 않다. 역호출 프레임워크에서 객체는 포장 객체에 대해서는 모르기 때문에, 자기 자신에 대한참조를 전달할 것이다. 따라서 역호출 과정에서 포장 객체는 제외된다. 이 문제는 SELF문제로 알려져있다.</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>계승은 강령하지만 캡슐화 원칙을 침해하므로 문제를 발생시킬 소지가 있다. 상위, 하위 클래스가 IS-A 관계일 때만 사용하는것이 좋고 그렇지 않을때는 구성과 전달기법을 사용하는것이 좋다. 포장 클래스 구현에 적당한 인터페이스가 있다면 더욱 그렇다.<br>포장 클래스는 하위 클래스보다 견고할 뿐 아니라 더 강력하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;계승은 코드 재사용을 돕는 강력한 도구지만 항상 최선은 아니다. 계승을 적절히 사용하지 못한 소프트웨어는 깨지기 쉽다. 계승은 상위 클래스와 하위 클래스 구현을 같을 프로그래머가 통제하는 단일 패키지 안에서 사용하면 안전하다. 또한 계승을 고려하
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 15.변경 가능성을 최소화하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/06/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/06/effective1/</id>
    <published>2019-04-06T04:39:07.000Z</published>
    <updated>2019-04-21T10:51:51.806Z</updated>
    
    <content type="html"><![CDATA[<p>변경 불가능 클래스는 그 객체를 수정할 수 없는 클래스이다. 객체 내부의 정보는 객체가 생성돌 때 주어진 것이며, 객체가 살아있는 동안 그대로 보존된다.<br>변경불가능 클래스를 만드는 이유는 변경 가능 클래스보다 설계하기 쉽고 구현하기 쉬우며, 사용하기도 쉽다. 오류 가능성도 적고, 더 안전하다.</p>
<h4 id="변경-불가능-클래스가-따라야-할-규칙"><a href="#변경-불가능-클래스가-따라야-할-규칙" class="headerlink" title="변경 불가능 클래스가 따라야 할 규칙"></a>변경 불가능 클래스가 따라야 할 규칙</h4><p>1.객체 상태를 변경하는 메서드를 제공하지 않는다.<br>2.계승(상속)할 수 없도록 한다. 보통 final을 붙인다.<br>3.모든 필드를 final로 선언한다. - 객체에 대한 참조가 동기화 없이 다른 스레드로 전달되어도 안전.<br>4.모든 필드를 private로 선언한다.<br>5.변경 가능 컴포넌트에 대한 독점적 접근권을 보장한다. - 클래스에 포함된 변경가능 객체에 대한 참조를 클라이언트는 획득할 수 없어야한다. 그런 필드는 클라이언트가 제공하는 객체로 초기화해서는 안되고 접근자 또한 그런 필드를 반환해서는 안된다. 따라서 생성자나 접근자, readObject 메서드 안에서는 방어적 복사본을 만들어야 한다.</p>
<h4 id="대부분의-변경-불가능-클래스는-함수형-접근법을-사용한다"><a href="#대부분의-변경-불가능-클래스는-함수형-접근법을-사용한다" class="headerlink" title="대부분의 변경 불가능 클래스는 함수형 접근법을 사용한다."></a>대부분의 변경 불가능 클래스는 함수형 접근법을 사용한다.</h4><p>특정 연산 후 this객체를 변경하는 대신 새로운 객체를 만들어 반환하는것을 함수형 접근법이라 한다. 이르 사용하는 이유는 피연산자를 변경하는 대신 연산을 적용한 결과를 새롭게 만들어 반환하기 때문이다.</p>
<h4 id="함수형-접근법의-장점"><a href="#함수형-접근법의-장점" class="headerlink" title="함수형 접근법의 장점"></a>함수형 접근법의 장점</h4><p>함수형 접근법은 불가능성을 보장하므로 장점이 많다.<br>1.변경불가능 객체는 단순하다. - 생성될 때 부여된 한 가지 상태만 갖는다. 따라서 생성자가 불변식을 확실히 따른다면 해당 객체는 불변식을 절대로 어기지 않게된다.</p>
<h4 id="변경-불가능-객체의-장단점"><a href="#변경-불가능-객체의-장단점" class="headerlink" title="변경 불가능 객체의 장단점"></a>변경 불가능 객체의 장단점</h4><p>1.변경 불가능 객체는 스레드에 안전할수밖에 없다. 어떤 동기화도 필요없으며 여러 스레드가 동시에 사용해도 상태가 훼손될 일이 없다. 그러므로 변경불가능한 객체는 자유롭게 공유할 수 있다.</p>
<p>변경 불가능 클래스는 클라이언트가 기존 객체를 재사용하도록 적극 장려해서 이런 장점을 충분히 살릴 필요가 있다. 그렇게 하는 가장 쉬운 한가지 방법은 자주 사용되는 값을 public static final 상수로 만들어 제공하는 것이다.<br>가령 Complex클래스는(변경 불가능클래스, 필드가 private final이며 생성자를 통해 한번만 초기화되고 setter또한 없다) 아래와 같이 제공될 수 있다.<br>public static final Complex ZERO = new Complex(0,0);</p>
<p>2.자주 사용하는 객체를 캐시하여 이미 있는 객체가 거듭 생성되지 않도록 하는 정적 팩터리를 제공할 수있다. - 기존 객체를 공유하므로 메모리 요구량,GC비용이 줄어든다.<br>3.변경 불가능 객체를 자유롭게 공유할 수 있다는점은 방어적 복사본을 만들 필요가 없다는 뜻이기도 하다. 사실 복사본을 만드는 메소드가 불필요하다.아니 만들면 안된다.(어차피 자기자신과 동일할테니)<br>4.변경 불가능한 객체는 그 내부도 공유할 수 있다. 다른 클래스가 변경불가능 객체내에 있는 배열필드를 사용해도 된다.<br>5.변경 불가능 객체는 다른 객체의 구성요소로도 훌륭하다. - 변경 불가능 객체는 맵의 키나 집합의 원소로 활용하기 좋다. (변하지 않으므로)</p>
<p>단점1.변경 불가능 객체의 유일한 단점은 값마다 별도의 객체를 만들어야 한다는 것이다.<br>이는 단계별로 새로운 객체를 만들고 결국에는 마지막 객체를 제외한 모든 객체를 버리는 연산을 수행해야 하는 경우 성능 문제는 커진다.<br>이를 해결하기 위한 방법은 두가지가 있다.<br>첫 번째 방법은 다단계 연산 가운데 자주 요구되는것을 기본연산으로 제공하는 것이다. (BigInteger클래스는 package-private로 선언된 변경 가능 동료클래스를 사용해 모듈라 멱승같은 연산의 속도를 높인다. 이는 다단계 연산이 어떻게 적용될지 확실하게 예측할 수 있을때 쓴다.)<br>두 번째 방법은 변경 가능한 public 동료 클래스를 제공하는것이다.</p>
<h4 id="변경-불가능-클래스의-두번째-구현방법"><a href="#변경-불가능-클래스의-두번째-구현방법" class="headerlink" title="변경 불가능 클래스의 두번째 구현방법"></a>변경 불가능 클래스의 두번째 구현방법</h4><p>보통은 하위 클래스 정의가 불가능하도록 하기 위해 final로 선언하지만 다른방법도 있다.<br>이는 모든 생성자를 private나 package-private로 선언하고 public 생성자 대신 public 정적 팩터리를 제공하는 것이다.</p>
<h4 id="방어적-복사"><a href="#방어적-복사" class="headerlink" title="방어적 복사?"></a>방어적 복사?</h4><p>BigInteger, BigDecimal은 클래스가 만들어질 당시 변경 불가능 클래스를 final로 선언해야 한다는 사실을 이해하지 못했기 때문에 final로 되어있지 않다. 즉 상속을 할 경우 해당 클래스는 변경이 가능할 수도 있다.<br>만일 신뢰할 수 없는 클라이언트가 전달한 BigInteger나 BigDecimal 인자의 변경 불가능성에 보안이 좌우되는 클래스를 작성할 때는 전달된 인자가 BigInteger나 BigDecimal의 하위 클래스가 아니라 진짜 BigInteger나 BigDecimal 클래스 인지 확인해야 한다. 만일 하위 클래스 객체라면 해당 객체가 변경 가능한 객체일지도 모른다는 가정하에 방어적복사를 시행해야 한다.<br><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title">safeInstace</span><span class="params">(BigInteger val)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span>(val.getClass() !=BigInteger.class)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> BigInteger(val.toByteArray());</div><div class="line">	<span class="keyword">return</span> val;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>변경 가능한 클래스로 만들 타당한 이유가 없다면 변경 불가능 클래스로 만들어라.<br>변경 불가능한 클래스로 만들 수 없다면, 변경 가능성을 최대한 제한하라.</p>
<p>특별한 이유가 없다면 생성자 이외의 public 초기화 메서드나 정적 팩터리 메서드를 제공하지 마라.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;변경 불가능 클래스는 그 객체를 수정할 수 없는 클래스이다. 객체 내부의 정보는 객체가 생성돌 때 주어진 것이며, 객체가 살아있는 동안 그대로 보존된다.&lt;br&gt;변경불가능 클래스를 만드는 이유는 변경 가능 클래스보다 설계하기 쉽고 구현하기 쉬우며,
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 14. public 클래스 안에는 public 필드를 두지 말고 접근자 메서드를 사용하라.</title>
    <link href="http://KKimSangHeon.github.io/2019/04/06/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/04/06/effective/</id>
    <published>2019-04-06T04:37:42.000Z</published>
    <updated>2019-04-21T10:51:44.200Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">double</span> x;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">double</span> y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>데이터 필드를 직접 조작할 수 있어서 캡슐화의 이점을 누릴 수 없다. API를 변경하지 않고서는 내부 표현을 변경할 수 없고, 불변식도 강제할 수 없고, 필드를 사용하는 순간에 어떤 동작이 실행되도록 만들수도 없다. <u>이는 private 필드와 public 접근자 메서드로 바꿔야 한다.</u></p>
<p>public 클래스의 데이터 필드를 공개하게 되면, 그 내부 표현을 변경할 수 없게 된다. 변경하면 이미 작성된 클라이언트 코드를 깨뜨리게 되게 때문이다. 하지만 package-private 클래스나 priavte 중첩 클래스는 데이터 필드를 공개하더라도 잘못이라 말할 수 없다.</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>public 클래스는 변경 가능 필드를 외부로 공개하면 안된다. 변경 불가능 필드인 경우에는 외부로 공개하더라도 많이 위험하진 않지만, 그럴 필요가 있을까? package-private나 private로 선언된 중첩 클래스의 필드는 그 변경 가능 여부와는 상관없이 외부로 공개하는것이 바람직할 때도 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;default&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 13. 클래스와 멤버의 접근 권한은 최소화하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/04/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/04/04/effective/</id>
    <published>2019-04-04T13:05:19.000Z</published>
    <updated>2019-04-21T10:51:39.143Z</updated>
    
    <content type="html"><![CDATA[<h4 id="정보은닉-캡슐화"><a href="#정보은닉-캡슐화" class="headerlink" title="정보은닉,캡슐화"></a>정보은닉,캡슐화</h4><p>잘 설계된 모듈과 그렇지 못한 모듈을 구분짓는 중요한 속성은 세부사항을 구현사항을 다른 모듈에 잘 감추느냐의 여부이다. 잘 설계된 모듈은 구현 세부사항을 전부 API 뒤쪽에 감춘다. 모듈들은 이를 API를 통해서만 서로 통신하며 각자 내부정으로 무슨짓을 하는지는 신경쓰지 않는다. 이를 바로 <u>정보은닉 또는 캡슐화</u>라고 알려져있다.. 이는 소프트웨어 설계의 기본적인 원칙 가운데 하나이다,.</p>
<h4 id="정보은닉의-중요성"><a href="#정보은닉의-중요성" class="headerlink" title="정보은닉의 중요성"></a>정보은닉의 중요성</h4><p>모듈사이의 의존성을 낮춰서(decouple), 각자 개별적으로 개발하고, 시험하고, 최적화하고, 이해하고, 변경할 수 있도록 한다는 사실에 기초한다. 이를통해 개발속도 향상, 병렬개발 가능, 유지보수 부담 저하, 모듈에 대한 쉬운이해가능, 다른 모듈에 영향없이 디버깅 진행가능이라는 장점이 있다. 또한 정보은닉 원칙이 좋은 성능을 자동적으로 보장하는 것은 안지만 효과적인 성능 튜닝을 가능하게 한다. 시스템이 완성된 다음에 어떤 모듈이 성능문제를 일으키는지 프로파일링 하기 용이하기 때문에,. 또한 이는 소프트웨어의 재사용 가능성을 높이고 대규모 시스템 과정의 위험성도 낮춘다(전체 시스템은 성공적이지 않더라도, 각각의 모듈은 성공적으로 구현 될수 있기 때문에)</p>
<h4 id="각-클래스와-멤버는-가능한-접근-불가능하도록-만들라"><a href="#각-클래스와-멤버는-가능한-접근-불가능하도록-만들라" class="headerlink" title="각 클래스와 멤버는 가능한 접근 불가능하도록 만들라."></a>각 클래스와 멤버는 가능한 접근 불가능하도록 만들라.</h4><p>개발중인 소프트웨어의 정상적인 동작을 보증하는 한도 내에서 가장 낮은 접근 권한을 설정할것.<br>최 상위 레벨 클래스와 인터페이스에 부여할 수 있는 접근 권한은 package-private(default)와 public 두 가지다.<br>최상위 레벨 클래스나 인터페이스에 public를 붙일 경우 해당 개체는 전역적 개체가 되고 public을 붙이지 않으면 해당패키지 안에서만 유효한 겍체가 된다. 최상위 레벨 클래스나 인터페잇는 가능한 package-private로 선언해야한다. 이를 통해 API 일부가 아니라 구현 세부사항에 속하게 되므로 다음번 릴리스에 클라이언트 코드를 깨뜨릴 걱정없이 자유로이 변경하거나 삭제하거나 대체할 수 있게된다. public으로 선언하게 되면 호환성을 보장하기 위해 해당객체를 계속 지원해야 한다.</p>
<p>package-private(default)로 선언된 최상위 레벨 클래스 혹은 인터페이스를 사용하는 클래스의 사용자 클래스가 하나라면 사용자 클래스의 private 중첩 클래스로 만들것을 고려해 보자. 이를 통해 하나의 클래스만이 해당 클래스의 접근 권한을 갖게된다.</p>
<h4 id="protected는-자제하자"><a href="#protected는-자제하자" class="headerlink" title="protected는 자제하자"></a>protected는 자제하자</h4><p>package-private에서 protected로 변경하면 멤버를 사용할수 있는 범위가 엄청 넓어진다. 이는 해당 protected멤버에 대해 해당클래스의 구현 세부사항에 대한 공개적 약속과도 같으며 공개 API로서 영원히 유지되어야 한다.</p>
<h4 id="원래-메서드의-접근보다-낮은-권한을-설정할-수없다"><a href="#원래-메서드의-접근보다-낮은-권한을-설정할-수없다" class="headerlink" title="원래 메서드의  접근보다 낮은 권한을 설정할 수없다."></a>원래 메서드의  접근보다 낮은 권한을 설정할 수없다.</h4><p>원래 안되는것이다. 넓힐순 있어도 좁힐 수는 없다. 이걸 어기면 컴파일 오류가 발생한다. 따라서 인터페이스를 구현하는 클래스를 만들 때는 인터페이스에 속한 모든 메서드를 해당 클래스의 public메서드로 선언해야 한다. 인터페이스의 모든 멤버는 원래 public이기 때문에</p>
<h4 id="겍체-필드는-절대로-public으로-하지마라"><a href="#겍체-필드는-절대로-public으로-하지마라" class="headerlink" title="겍체 필드는 절대로 public으로 하지마라"></a>겍체 필드는 절대로 public으로 하지마라</h4><p>public로 할 경우 메서드를 통해 값을 변경할 수 있게된다. 따라서 그 필드에 관계된 불변식을 강제할 수 없다. 또한 public 필드를 가진 필드는 다중 스레드에 안전하지도 않다.</p>
<h4 id="static으로-선언된-필드"><a href="#static으로-선언된-필드" class="headerlink" title="static으로 선언된 필드"></a>static으로 선언된 필드</h4><p>특정 상수들을 public static final 필드들로 선언하여 공개할 수 있다. 이런 필드들은 반드시 기본 자료형 값들을 갖거나, 변경 불가능한 객체를 참조해야 한다. 변경 불가능한 객체를 public static final 필드가 가르키게 되면 참조대상 객체가 변경될 경우 끔찍한 결과가 초래된다.</p>
<h4 id="public-static-final-배열필드는-정의하지-마라"><a href="#public-static-final-배열필드는-정의하지-마라" class="headerlink" title="public static final 배열필드는 정의하지 마라."></a>public static final 배열필드는 정의하지 마라.</h4><p>길이가 0이 아닌 배열은 언제나 변경 가능하므로 public static final 배열 필드를 두거나, 이를 반환하는 접근자를 정의하면 안된다. 이를 통해 배열 내용을 변경할 수 있게되므로, 보안에 문재가 생긴다.<br>public static final Thing[] VALUES={ … };     //보안 문제를 초래할 수 있는 코드<br>정의 했을경우 해결법.<br>1.public으로 선언했던 배열은 private로 바꾸고 변경이 불가능한 public 리스트를 하나 만든다,<br><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] VALUES=&#123; ... &#125;;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] values( )&#123;</div><div class="line">	Collection.unmodifiableList(Arrays.asList(PRIVATE_VALUES));</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>2.어느 자료형으로 반환해야 클라이언트가 성능을 낼 수 있을까를 생각해보자.</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>접근권한은 가능한 낮추고 최소한의 public API를 설계하고 다른 모든클래스, 인터페이스, 멤버는 API에서 제외하라. public static final 필드를 제외한 어느 필드도 public 필드로 선언하지 마라. 그리고 public static final 필드가 참조하는 객체는 변경 불가능 객체로 만들어라</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;정보은닉-캡슐화&quot;&gt;&lt;a href=&quot;#정보은닉-캡슐화&quot; class=&quot;headerlink&quot; title=&quot;정보은닉,캡슐화&quot;&gt;&lt;/a&gt;정보은닉,캡슐화&lt;/h4&gt;&lt;p&gt;잘 설계된 모듈과 그렇지 못한 모듈을 구분짓는 중요한 속성은 세부사항을 구현사항을 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙12. Comparable 구현을 고려하라.</title>
    <link href="http://KKimSangHeon.github.io/2019/04/02/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/02/effective1/</id>
    <published>2019-04-02T12:09:29.000Z</published>
    <updated>2019-04-21T10:51:26.853Z</updated>
    
    <content type="html"><![CDATA[<p>compareTo 메서드는 Comparable 인터페이스에 포함된 유일한 메서드이다. Object의 equals 메서드와 비슷하지만 단순한 동치성 검사 이외에 순서 비교가 가능하며 좀더 일반적이다.<br>compareTo 메서드의 일반 규약은 equals와 비슷하다.</p>
<h4 id="규약"><a href="#규약" class="headerlink" title="규약"></a>규약</h4><p>규약 <u>객체와 인자로 주어진 객체를 비교한다. 이 객체의 값이 인자로 주어진 객체보다 작으면 음수, 같으면 0, 크면 양수를 반환한다. </u>인자로 전달된 객체의 자료형이 비교불가능한 자료형일 땐 ClassCastException예외를 던진다.</p>
<p>규약1. compareTo를 구현할 때는 모든 x와 y에 대해 sgn(x.compareTo(y))== -sgn(y.compareTo(x))가 만족되도록 해야 한다. (y.compareTo(x)가 예외를 발생시킨다면 x.compareTo(y)도 그래야하고, 그 역도 성립해야 한다.<br>규약2. compareTo를 구현할 때는 추이성이 만족되도록 해야한다. (x.compareTo(y)&gt;0  &amp;&amp; y.compareTo(z) &gt;0 ) 이면 x.compareTo(z)&gt;0 이어야 한다.<br>규약3. 마지막으로 x.compareTo(y) == 0 이면 sgn(x.compareTo(z)) == sgn(y.compareTo(z))의 관계가 모든z에 대해 성립하도록 해야 한다.<br>sgn함수는 음수일때 -1, 0일때 0, 양수일때 1을 반환</p>
<p>또한 강력히 추천되지만 절대적으로 요구되는것이 아닌 조건으로 (x.compareTo(y) ==0) == (x.equals(y))이다. 일반적으로 <u>Compareble 인터페이스를 구현하면서 이 조건을 만족하지 않는 클래스는 반드시 그 사실을 명시해야 한다.</u></p>
<p><u>equals와 다르게 compareTo는 비교대상이 서로다를 경우 ClassCastException을 던지는것이 허용되어있다</u>. 그리고 통상적으로 반드시 이렇게 동작해야 한다. 규약에서 이를 강제하지는 않지만 1.6 에 속한 어떤 클래스도 이런 비교를 하지 않는다!</p>
<p>compareTo 규약을 준수하지 않는 클래스는 TreeSet, TreeMap, Arrays, Collection 같은 비교연산에 기반한 클래스들을 오작동 시킬 수 있다.</p>
<p><u>즉 compareTo 또한 반사성, 대칭성, 추이성을 만족해야 한다. 따라서 compareTo 규약을 만족하면서 클래스를 계승하여 새로운 값 컴포넌트를 추가할 방법은 없다.</u></p>
<p>Compareble 인터페이스를 구현하는 클래스에 값 요소를 추가하고 싶을 때는 원래 클래스를 계승하여 확장하는 대신, 원래 클래스 객체를 필드로 포함하는 새로운 클래스를 만들고, 원래 클래스의 객체를 반환하는 뷰메서드를 추가한다, 이렇게 하면 원하는대로 compareTo 메서드는 원하는 대로 정의할 수 있다.</p>
<h4 id="Comparable-인터페이스"><a href="#Comparable-인터페이스" class="headerlink" title="Comparable 인터페이스"></a>Comparable 인터페이스</h4><p>Comparable 인터페이스는 자료형을 인자로 받는 제네릭 인터페이스이므로 compareTo 메서드의 인자 자료형은 컴파일 시간에 정적으로 결정된다. 따라서 인자로 받은 객체의 자료형을 검사하거나 형 변환할 필요가 없다. 잘못된 자료형 객체를 인자로 넘길경우 컴파일이 불가능하기 호출이 불가능하다. 또한 null이 인자로들어왔을 때는 NullPointerException 예외를 발생시켜야 한다.<br>또한 객체참조 필드는 compareTo 메서드를 재귀적으로 호출하여 비교한다. 비교할 필드가 Comparable을 구현하지 않고 있거나 좀 특이한 순서 관계를 사용해야 할 경우에는 Comparator를 명시적으로 사용할 수 있다. Comparetor는 직접 작성할 수도 있고 아래의 compareTo 메서드에서처럼 이미 있는 Comparator를 사용할 수도 있다(String.CASE_INSENSITIVE_ORDER.compare(…..)같이).</p>
<h4 id="비교"><a href="#비교" class="headerlink" title="비교"></a>비교</h4><p>클래스에 선언된 중요 필드가 여러개인 경우 비교 순서가 중요하다. 가장 중요한 필드부터 차례로 비교해야 한다.<br>compareTo 메서드의 일반 규약이 반환값의 부호면 명시하고 그 크기에 대해서는 언급하고 있지않다. 이점을 이용해<br><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(PhoneNumber pn)</span></span>&#123;</div><div class="line">	...</div><div class="line">	<span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>와같이 정의하는게 코드를 단순화하고 보다 빠르게 동작하도록 할 수 있다.<br>하지만 i가 큰 int값이고 j가 큰 음수 int 값일 때 (i-j)는 오버플로 되어 음수가 되어버리므로 부적절한 결과가 나온다.치명적 시스템 문제를 발생시키도 있으므로 주의하자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;compareTo 메서드는 Comparable 인터페이스에 포함된 유일한 메서드이다. Object의 equals 메서드와 비슷하지만 단순한 동치성 검사 이외에 순서 비교가 가능하며 좀더 일반적이다.&lt;br&gt;compareTo 메서드의 일반 규약은 e
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 11. clone을 재정의할 떄는 신중하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/31/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/03/31/effective/</id>
    <published>2019-03-31T12:14:01.000Z</published>
    <updated>2019-04-02T12:09:01.959Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Cloneable의-괴상함"><a href="#Cloneable의-괴상함" class="headerlink" title="Cloneable의 괴상함"></a>Cloneable의 괴상함</h4><p>Cloneable은 어떤 객체가 복제를 허용한다는 사실을 알리는 데 쓰려고 고안된 믹스인(mixin) 인터페이스이다. 해당 인터페이스에는 clone 메서드가 없으며 Object의 clone 메서드는 protected로 선언되어 있다.<br>Cloneabledms protected로 선언된 Object의 clone 메소드가 어떻게 동작할지 결정한다. 어떤 클래스가 Clonable을 구현하면 Object의 clone메서드는 해당 객체를 필드 다누이로 복사한 객체를 반환하고 Cloneable을 구현하지 않은 클래스라면 clone 메서드는 CloneNotSupportedException을 던진다.</p>
<h4 id="clone-메서드의-일반-규약"><a href="#clone-메서드의-일반-규약" class="headerlink" title="clone 메서드의 일반 규약"></a>clone 메서드의 일반 규약</h4><p>객체의 복사본을 만들어서 반환한다. 그리고 다음을 따른다.<br>x.clone() != x 의 조건은 참이어야 한다,</p>
<p>x.clone().getClass() == x.getClass()<br>위의 조건은 참이겠지만 반드시 그래야 하는 것은 아니다.</p>
<p>x.clone().equals(x)<br>위의 코드를 실행한 결과도 true가 되겠지만 반드시 그래야하는것은 아니다.</p>
<p>위의 코드를 실행한 결과도 true가 되겠지만 반드시 그래야 하는 것은 아니다.<br>객체를 복사하면 보통 같은 클래스의 새로운 객체가 만들어지는데, 내부 자료 구조까지 복사해야 될 수도 있다. 어떤 생성자도 호출되지 않는다.</p>
<h4 id="규약의-문제점"><a href="#규약의-문제점" class="headerlink" title="규약의 문제점"></a>규약의 문제점</h4><p>어떠한 생성자도 호출되지 않는다는 점은 심하다. 복사본의 내부 객체는 생성자로 만들 수도있다. 클래스가 final로 선언되어 있다면, 생성자로 만든 객체를 반환하도록 clone을 구현할 수도 있다. 하지만 클래스가 final이든 아니든 생성자로 객체를 반환한다면 이 경우 원하는 클래스가 아닐것이다. 즉 clone를 재정의 할 때는 반드시 super.clone을 호출 해 얻은 객체를 반환해야 한다.</p>
<h4 id="제대로된-사용방법"><a href="#제대로된-사용방법" class="headerlink" title="제대로된 사용방법"></a>제대로된 사용방법</h4><p>1.Cloneable인터페이스를 구현하는 클래스는 제대로 동작하는 public clone 메서드를 제공해야 하고 이를 위해서는 상위클래스들이 제대로된 public 또는 protected clone 메서드를 제공해야 한다.</p>
<p>2.clone() 메소드의 반환형은 적절한 형태로 반환하여 라이브러리가 할 수 있는 일을 클라이언트에게 미루지 말자. 즉 라이브러리가 형변환을 하고 클라이언트는 변환하여 사용하지 않도록 하자.</p>
<p>3.복제할 객체가 변경가능 객체에 대한 참조 필드를 가지고 있을경우 deepCopy를 통해 극복하도록 하자.(ex 링크드 리스트의 배열!) 이방법이 싫다면 super.clone 호출 결과로 반환된 객체의 모든 필드를 초기상태로 되돌려 놓은 다음에 상위레벨 메서드를 호출해서 객체상태를 다시 만드는것이다.</p>
<ol>
<li>다중스레드에 안전해야 하는 thread-safe 클래스를 Cloneable로 만들려면, clone 메서드에도 동기화 메커니즘을 적용해야 한다. Object.clone 메서드에는 동기화 메커니즘이 적용되어 있지 않으므로 설사 Object.clone 이 대체로 만족스럽다고 하더라도 super.clone()을 호출하는 동기화된 clone 메서드를 만들어야 할 것이다.</li>
</ol>
<h4 id="clone의-주의사항"><a href="#clone의-주의사항" class="headerlink" title="clone의 주의사항"></a>clone의 주의사항</h4><p>1.clone 메서드는 또 다른 형태의 생성자이다. 원래 객체를 손상시키지 않아야 하며 복사본의 불변식도 만족시켜야 한다.<br>2.clone 메서드는 복사본의 비-final 메서드, 즉 <u>재정의 가능 메서드를 복사 도중에 호출해서는 안된다</u>. 만일 하위 클래스에서 재정의한 메서드를 clone 안에서 호출하면 해당 메서드는 복사본의 상태가 완성되기 전에 호출될 것이며 복사본의 상태를 망가뜨릴것이다.</p>
<h4 id="정리하자면"><a href="#정리하자면" class="headerlink" title="정리하자면"></a>정리하자면</h4><p>계승을 위해 설계된 클래스에 clone을 재정의 할 때 Object.clone을 그대로 흉내내야 한다. protected로 선언하고, CloneNotSupportedException 예외를 던지고, Cloneable 인터페이스는 구현하지 않아야한다. 그래야 Object 클래스를 직접 계승한 클래스가 그렇듯, 하위 클래스가 Cloneable 구현 여부를 마음대로 정할 수 있다.</p>
<p>또한 Cloneable을 구현하는 모든 클래스는 반환값 자료형이 자기 자신은 public clone 메서드를 재정의 해야한다. 또한 처음에 super.clone을 호출해야한다. 그렇게 해서 만들어진 객체를 두고 수정해야 하는 필드를 수정한다.(deepCopy 등을 활용)</p>
<h4 id="반전의-결론"><a href="#반전의-결론" class="headerlink" title="반전의 결론"></a>반전의 결론</h4><p>객체복제를 지원하는 좋은 방법은, 복사 생성자나 복사 팩터리를 제공하는 것이다. 복사 생성자는 단순히 같은 클래스의 객체 하나를 인자로 받는 생성자이다. 복사 팩터리 또한 같은 클래스의 객체 하나를 인자로 받는것이다.<br>이는 Cloneable/clone보다 좋은점이 많다. 언어 외적 객체생성 수단에 의존하지 않으며 , 규약에 충실할 것을 요구하지도 않으며, final 필드 용법과 충돌하지도 않으며, 불필요한 예외를 검사하도록 요구하지도 않으며 형 변환도 필요없다.<br>또한 해당 메서드가 정의된 클래스가 구현하는 인터페이스를 인자로 받을 수 있다.<br>즉 Cloneable은 단점이 너무많다.. 쓰는것을 지양하자.. 배열의 clone메소드는 어쩔수 없이 쓰는경우가 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Cloneable의-괴상함&quot;&gt;&lt;a href=&quot;#Cloneable의-괴상함&quot; class=&quot;headerlink&quot; title=&quot;Cloneable의 괴상함&quot;&gt;&lt;/a&gt;Cloneable의 괴상함&lt;/h4&gt;&lt;p&gt;Cloneable은 어떤 객체가 복제를 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 10. toString은 항상 재정의하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/29/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/03/29/effective/</id>
    <published>2019-03-29T11:30:46.000Z</published>
    <updated>2019-03-31T12:15:46.120Z</updated>
    
    <content type="html"><![CDATA[<p>java.lang.Object 클래스가 toString 메서드를 제공하긴 하지만 이 메서드가 반환하는 문자열은 일반적으로 사용자가 보려는 문자열이 아니다.</p>
<p>toStirng의 일반 규약에는 “모든 하위 클래스는 이 메서드를 재정의함이 바람직하다”라고 나와있다.<br>equals와 hashCode의 일반 규약을 지키는 것보다는 덜 중요하지만 toString을 잘 만들어놓으면 클래스를 좀 더 쾌적하게 사용할 수 있다.<br>toString메서드를 재정의하면 해당객체 뿐만아니라 이를 참조하는 특히 컬렉션 까지 혜택을 본다.</p>
<p>가능하다면 toString 메서드는 객체 내의 중요 정보를 전부 담아 반환해야 한다. 문자열에 담긴 내용은 척 보면 그 의미를 알 수 있도록 하는 것이 제일 바람직하다.<br>하지만 객체가 아주 크거나 문자열로 반환하기 까다로운 상태정보의 경우 전부 문자열로 반환하는것은 바람직하지 않다.</p>
<h3 id="문자열의-형식"><a href="#문자열의-형식" class="headerlink" title="문자열의 형식"></a>문자열의 형식</h3><p>toString의 반환값 즉 문자열의 형식을 지정(ex. xml) 해 둘 경우 프로그래머가 객체를 문자열로, 문자열을 객체로 자유로이 변환할 수 있어 편리하다. 하지만 문자열의 형식을 명시 해 둘 경우 해당클래스가 널리 쓰인다고 가정했을 때 그 형식을 바꾸지 못한다는 단점이 있다. 이를 파싱해서 쓰는 사람도 있을것이고 지속적으로 저장하려는 사람도 있을것이기 때문에 혹시라도 toString이 반환하는 형태를 바꾸게 되면 많은 문제점들이 야기될것을 뻔한일이다.</p>
<p>결국 toString이 반환하는 문자열의 형식을 명시하건 그렇지 않건 간에 어떤 의도인지는 문서에 분명하게 남겨야 한다.<br>또한 toString을 통해 갖고올 수 있는 정보들은 프로그래밍을 통해서도 갖고올 수 있어야한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java.lang.Object 클래스가 toString 메서드를 제공하긴 하지만 이 메서드가 반환하는 문자열은 일반적으로 사용자가 보려는 문자열이 아니다.&lt;/p&gt;
&lt;p&gt;toStirng의 일반 규약에는 “모든 하위 클래스는 이 메서드를 재정의함이 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 9. equals를 재정의 할 때는 반드시 hasCode도 재정의 하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/27/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/03/27/effective/</id>
    <published>2019-03-27T13:57:46.000Z</published>
    <updated>2019-03-27T13:58:47.028Z</updated>
    
    <content type="html"><![CDATA[<p>많은 버그는 hashCode 메서드를 재정의하지 않아서 생긴다. equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야한다. 그렇지 않을경우 HashMap,HashSet 등과 같은 해시기반 컬렉션과 함께 사용하면 오작동하게 된다.</p>
<h4 id="hashCode의-일반적인-규약은-다음과-같다"><a href="#hashCode의-일반적인-규약은-다음과-같다" class="headerlink" title="hashCode의 일반적인 규약은 다음과 같다."></a>hashCode의 일반적인 규약은 다음과 같다.</h4><p>1.응용프로그램 실행 중에 같은 객체의 hashCode를 여러 번 호출하는 경우 equals가 사용하는 정보들이 변경되지 않았다면 언제나 동일한 정수가 반환되어야 한다. 다만 프로그램이 종료되었다 실행되어도 같은 값이 나올 필요는 없다.<br>2.equals(Object) 메서드가 같다고 판정한 두 객체의 hashCode값은 같아야 ㅎ나다,<br>3.equals(Object) 메서드가 다르다고 판정한 두 객체의 hashCode값은 꼭 다를 필요는 없다. 그러나 서로 다른 hashCode 값이 나오면 해시테이블의 성능이 향상될 수 있다.</p>
<h4 id="Object의-hashCode"><a href="#Object의-hashCode" class="headerlink" title="Object의 hashCode"></a>Object의 hashCode</h4><p>equals메서드가 논리적으로 같다고 판단한 두 객체라 해도 Object의 hashCode입장에서 보면 공통점이 없는 객체일 뿐이므로 같은정수를 반환하는것이 아닌 무작위로 선택된것같은 수를 반환한다.</p>
<h4 id="좋은-해시함수"><a href="#좋은-해시함수" class="headerlink" title="좋은 해시함수"></a>좋은 해시함수</h4><p>좋은 해시함수는 다른 객체에서는 다른 해시코드를 반환하는 경향이 있다. 또한 이상적인 해시 함수는 서로 다른 객체들을 모든 가능한 해시 값에 균등하게 배분해야 한다.<br>이상적인 해시함수를 만들기 위해서는 아래의 규약을 따르면된다.<br>책 65p 참고</p>
<h4 id="참고사항"><a href="#참고사항" class="headerlink" title="참고사항"></a>참고사항</h4><ul>
<li>중복필드는 해시코드 계산 과정에서 제외해도 된다.</li>
<li>equals계산에 쓰이지 않는 필드는 반드시 제외해야 한다.</li>
<li>result를 계산할 때 초기값 17은 임의로 잡은값이다. 이를 통해 해시값(c)이 0인것들도 해시값에 영향을 주게 된다.</li>
<li>절차 2.B에 사용된 곱셈은 필드 순서에 따라 계산 결과가 달라지도록 한다. 따라서 유하한 필드가 여러개 있으면 더 좋은 해시값이 나온다.</li>
<li>31은 소수이면서 홀수이기 때문에 선택된 값이다.(전통적으로 소수가 널리 사용된다. 또한 &lt;&lt;5 -i 연산을 통해 더욱 빠른 성능을 낼 수 있다.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;많은 버그는 hashCode 메서드를 재정의하지 않아서 생긴다. equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야한다. 그렇지 않을경우 HashMap,HashSet 등과 같은 해시기반 컬렉션과 함께 사용하면 오
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 8. equals를 재정의 할 때는 일반 규약을 따르라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/26/effectivejava2/"/>
    <id>http://KKimSangHeon.github.io/2019/03/26/effectivejava2/</id>
    <published>2019-03-26T13:21:31.000Z</published>
    <updated>2019-03-27T13:58:49.642Z</updated>
    
    <content type="html"><![CDATA[<p>equals는 생각보다 재정의 하기 어렵다. 실수로 인한 결과는 끔찍해 질 수 있다.<br> 다음중 하나라도 만족할 경우에는 equals를 재정의 하지 않아도 된다.<br>1.각각의 객체가 고유하다.(ex. Thread 객체)<br>2.클래스에 논리적 동일성 검사방법이 있건 없건 상관없다(ex. Random class)<br>3.상위클래스에서 재정의한 equals가 하위 클래스에서 사용하기에도 적당하다.(ex. AbstractSet의 equals 메소드)<br>4.클래스가 private 또는 pakage-private로 선언되었고 , equals 메서드를 호출할 일이 없다.(필자는 실수로 equals를 호출할 수 있는 경우도 있으므로 재정의 해야 한다고 함)</p>
<h4 id="equals를-재정의하는게-바람직한-때"><a href="#equals를-재정의하는게-바람직한-때" class="headerlink" title="equals를 재정의하는게 바람직한 때?"></a>equals를 재정의하는게 바람직한 때?</h4><p>객체 동일성이 아닌 <u>논리적 동일성의 개념을 지원하는 클래스일 때</u>, <u>상위 클래서의 equals가 하위 클래스의 필요를 충족시키지 못할 때</u>이다.<br>대체로 값 클래스는 두 가지 요건을 충족시키지만 개체 통제 기능을 사용할 때, 열거형일때는 equals 메소드를 재정의 할 필요가 없다.</p>
<h4 id="equals-메서드를-재정의-할-때-준수해야-하는-일반규약"><a href="#equals-메서드를-재정의-할-때-준수해야-하는-일반규약" class="headerlink" title="equals 메서드를 재정의 할 때 준수해야 하는 일반규약"></a>equals 메서드를 재정의 할 때 준수해야 하는 일반규약</h4><p>메서드는 동치관계를 구현한다. 다음과 같은 관계를 동치 관계라 한다.<br><code>반사성</code> : null이 아닌 참조 x가 있을 때 x.equals(x)는 true를 반환한다.<br><code>대칭성</code> : null이 아닌 참조 x,y가 있을 때 x.equals(y)는 y.equals(x)가 true일 때만 true를 반환한다.<br><code>추이성</code> : null이 아닌 참조 x,y,z가 있을 때 x.equals(y)가 true이고 y.equals(z)가 true이면 x.equals(z)도 true이다.<br><code>일관성</code> : null이 아닌 참조 x와 y가 있을 때  equals를 통해 비교되는 정보에 아무 변화가 없다면, x.eqauls(y)호출 결과는 항상 같아야 한다.<br>null이 아닌 참조 x에 대해서 x.equals(null)은 항상 false이다.</p>
<p>컬렉션 클래스를 비롯한 상당수 클래스는 전달되는 객체가 equals 규칙을 따른다고 가정하고 구현되어 있으므로 equals 는 잘 구현해야 한다!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;equals는 생각보다 재정의 하기 어렵다. 실수로 인한 결과는 끔찍해 질 수 있다.&lt;br&gt; 다음중 하나라도 만족할 경우에는 equals를 재정의 하지 않아도 된다.&lt;br&gt;1.각각의 객체가 고유하다.(ex. Thread 객체)&lt;br&gt;2.클래스에 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 7. 종료자 사용을 피하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/26/effectivejava1/"/>
    <id>http://KKimSangHeon.github.io/2019/03/26/effectivejava1/</id>
    <published>2019-03-26T13:21:22.000Z</published>
    <updated>2019-03-26T13:24:26.546Z</updated>
    
    <content type="html"><![CDATA[<p>종료자는 예측 불가능하며 대체로 위험하고 일반적으로 불필요하다.</p>
<h3 id="종료자의-단점-및-주의할-점"><a href="#종료자의-단점-및-주의할-점" class="headerlink" title="종료자의 단점 및 주의할 점"></a>종료자의 단점 및 주의할 점</h3><p>1.C++의 소멸자와는 다른개념이다. 종료자는 즉시 실행되리라는 보장이 전혀 없다. 그러므로 긴급한 작업을 종료자 안에서 처리하면 안된다. 종료자의 실행시점은 GC 알고리즘에 좌우되는데 이는 JVM 구현마다 크게 다르다. 또한 클래스에 종료자를 붙여놓으면 객체 메모리 반환이 지연될 수 있다.<br>2.종료자는 즉시 실행되는것을 보장하지 않기때문에 <u>지속성이 보장되어야 하는 중요상태정보는 종료자로 갱신하면 안된다.</u><br>3.종료자를 사용하면 프로그램 성능이 떨어진다.<br><code>즉 종료자를 사용하지 말고 명시적인 종료메서드를 하나 정의하고 이를 호출해라! 또한 종료여부를 객체안에 private로 보관하라</code><br>명시적 종료의 예로 OutputStream, InputStream의 close 메서드가 있다. 주로 finally안에서 호출하여 예외가 발생해도 실행될 수 있도록 한다,</p>
<h3 id="종료자의-쓰임"><a href="#종료자의-쓰임" class="headerlink" title="종료자의 쓰임"></a>종료자의 쓰임</h3><p>1.명시적 종료메서드 호출을 잊을 경우에 대비하는 안전망으로의 역할</p>
<p>2.네이티브 피어와 연결된 객체를 다룰 때 - 일반 객체가 아니므로 GC가 알 수 없다.</p>
<h3 id="하위클래스에서의-종료자-생성"><a href="#하위클래스에서의-종료자-생성" class="headerlink" title="하위클래스에서의 종료자 생성"></a>하위클래스에서의 종료자 생성</h3><p>하위클래스에서 종료자를 오버라이딩 하면 상위클래스의 종료자를 호출 해 줘야 한다. 하지만 이를 잊어먹고 하지 않는경우 이로인한 문제가 발생한다.<br>이를 방지하기 위해 익명클래스 안에 종료자를 정의하여 사용하는 방법이 좋다. 이를 종료 보호자(finalizer guardian)라 함.<br>종료보호자에 대한 설명: 익명클래스로 finalize를 오버라이딩 하면 해당 스코프를 벗어나면 GC가 finalize를 호출하게 되어 상속받은 하위클래스가 super.finalize를 호출하지 않아도 된다.<br><a href="https://stackoverflow.com/questions/6872857/how-does-a-finalizer-guardian-work-in-java" target="_blank" rel="external">https://stackoverflow.com/questions/6872857/how-does-a-finalizer-guardian-work-in-java</a></p>
<p>즉 네이티브 자원을 종료시키려는것이 아니라면 종료자는 사용하지 말고 종료자를 불가피하게 사용해야할 경우에는 super.finalize()를 호출해라.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;종료자는 예측 불가능하며 대체로 위험하고 일반적으로 불필요하다.&lt;/p&gt;
&lt;h3 id=&quot;종료자의-단점-및-주의할-점&quot;&gt;&lt;a href=&quot;#종료자의-단점-및-주의할-점&quot; class=&quot;headerlink&quot; title=&quot;종료자의 단점 및 주의할 점&quot;&gt;&lt;/
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
