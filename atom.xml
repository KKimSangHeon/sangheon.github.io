<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2020-05-11T12:29:55.916Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ipvsadm 으로 udp proxy, load balance 구현</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux4/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux4/</id>
    <published>2020-05-11T12:14:38.000Z</published>
    <updated>2020-05-11T12:29:55.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Load-Balancer-Server-설정"><a href="#Load-Balancer-Server-설정" class="headerlink" title="Load Balancer Server 설정"></a>Load Balancer Server 설정</h3><p>설치<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ipvsadm</div></pre></td></tr></table></figure></p>
<p>/etc/sysctl.conf 에 아래 입력<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p>
<p>적용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sysctl -p		#적용</div><div class="line">touch /etc/sysconfig/ipvsadm   # 얘가 뭐하는애지 a모르것지만 해야지 켜진다.</div><div class="line"></div><div class="line"></div><div class="line">chkconfig ipvsadm on</div><div class="line">chkconfig --level 345 ipvsadm on</div><div class="line"></div><div class="line">systemctl start ipvsadm				//시작  </div><div class="line">systemctl enable ipvsadm.service	//상시가동</div><div class="line">systemctl status ipvsadm.service</div></pre></td></tr></table></figure></p>
<p>가상아이피 등록<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0:0 192.168.100.102 up</div><div class="line"></div><div class="line">ipvsadm -A -u 192.168.100.102:9131  # A:add virtual service with options  u:udp-service</div><div class="line">ipvsadm -a -u 192.168.100.102:9131 -r  192.168.100.198:9131 -m    # r:real-server   m:masquerading</div></pre></td></tr></table></figure></p>
<p>-m 대신 -g는 NAT 방식이냐, Direct Routing 방식이냐에 따른 차이<br>Direct Routing의 경우 수신한 서버에서 User에게 response를 직접 전달한다.<br>NAT 방식은 NAT 서버를 통해 User에게 response를 한다.</p>
<h3 id="Real-Server-받는쪽-설정"><a href="#Real-Server-받는쪽-설정" class="headerlink" title="Real Server(받는쪽) 설정"></a>Real Server(받는쪽) 설정</h3><p>/etc/sysctl.conf에 아래 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward = 0</div><div class="line"></div><div class="line">net.ipv4.conf.lo.arp_ignore = 1</div><div class="line">net.ipv4.conf.lo.arp_announce = 2</div><div class="line">net.ipv4.conf.all.arp_ignore = 1</div><div class="line">net.ipv4.conf.all.arp_announce = 2</div></pre></td></tr></table></figure></p>
<p>커널파라미터 적용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sysctl -p</div></pre></td></tr></table></figure></p>
<p>가상아이피 등록<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig eth0:0 192.168.100.102 up	# direct 방식일 경우에만 사용됨. 이부분 잊지말자 !!</div></pre></td></tr></table></figure></p>
<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p>실시간 분배 확인하기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">watch ipvsadm -ln</div></pre></td></tr></table></figure></p>
<p>서비스 초기화<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipvsadm -C</div></pre></td></tr></table></figure></p>
<p>서비스 상태조회<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipvsadm -L --stats</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">ipvsadm v1.27 2008/5/15 (compiled with popt and IPVS v1.2.1)</div><div class="line">Usage:</div><div class="line">  ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine] [-b sched-flags]</div><div class="line">  ipvsadm -D -t|u|f service-address</div><div class="line">  ipvsadm -C</div><div class="line">  ipvsadm -R</div><div class="line">  ipvsadm -S [-n]</div><div class="line">  ipvsadm -a|e -t|u|f service-address -r server-address [options]</div><div class="line">  ipvsadm -d -t|u|f service-address -r server-address</div><div class="line">  ipvsadm -L|l [options]</div><div class="line">  ipvsadm -Z [-t|u|f service-address]</div><div class="line">  ipvsadm --set tcp tcpfin udp</div><div class="line">  ipvsadm --start-daemon state [--mcast-interface interface] [--syncid sid]</div><div class="line">  ipvsadm --stop-daemon state</div><div class="line">  ipvsadm -h</div><div class="line"></div><div class="line">Commands:</div><div class="line">Either long or short options are allowed.</div><div class="line">  --add-service     -A        add virtual service with options</div><div class="line">  --edit-service    -E        edit virtual service with options</div><div class="line">  --delete-service  -D        delete virtual service</div><div class="line">  --clear           -C        clear the whole table</div><div class="line">  --restore         -R        restore rules from stdin</div><div class="line">  --save            -S        save rules to stdout</div><div class="line">  --add-server      -a        add real server with options</div><div class="line">  --edit-server     -e        edit real server with options</div><div class="line">  --delete-server   -d        delete real server</div><div class="line">  --list            -L|-l     list the table</div><div class="line">  --zero            -Z        zero counters in a service or all services</div><div class="line">  --set tcp tcpfin udp        set connection timeout values</div><div class="line">  --start-daemon              start connection sync daemon</div><div class="line">  --stop-daemon               stop connection sync daemon</div><div class="line">  --help            -h        display this help message</div><div class="line"></div><div class="line">Options:</div><div class="line">  --tcp-service  -t service-address   service-address is host[:port]</div><div class="line">  --udp-service  -u service-address   service-address is host[:port]</div><div class="line">  --fwmark-service  -f fwmark         fwmark is an integer greater than zero</div><div class="line">  --ipv6         -6                   fwmark entry uses IPv6</div><div class="line">  --scheduler    -s scheduler         one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,</div><div class="line">                                      the default scheduler is wlc.</div><div class="line">  --pe            engine              alternate persistence engine may be sip,</div><div class="line">                                      not set by default.</div><div class="line">  --persistent   -p [timeout]         persistent service</div><div class="line">  --netmask      -M netmask           persistent granularity mask</div><div class="line">  --real-server  -r server-address    server-address is host (and port)</div><div class="line">  --gatewaying   -g                   gatewaying (direct routing) (default)</div><div class="line">  --ipip         -i                   ipip encapsulation (tunneling)</div><div class="line">  --masquerading -m                   masquerading (NAT)</div><div class="line">  --weight       -w weight            capacity of real server</div><div class="line">  --u-threshold  -x uthreshold        upper threshold of connections</div><div class="line">  --l-threshold  -y lthreshold        lower threshold of connections</div><div class="line">  --mcast-interface interface         multicast interface for connection sync</div><div class="line">  --syncid sid                        syncid for connection sync (default=255)</div><div class="line">  --connection   -c                   output of current IPVS connections</div><div class="line">  --timeout                           output of timeout (tcp tcpfin udp)</div><div class="line">  --daemon                            output of daemon information</div><div class="line">  --stats                             output of statistics information</div><div class="line">  --rate                              output of rate information</div><div class="line">  --exact                             expand numbers (display exact values)</div><div class="line">  --thresholds                        output of thresholds information</div><div class="line">  --persistent-conn                   output of persistent connection info</div><div class="line">  --nosort                            disable sorting output of service/server entries</div><div class="line">  --sort                              does nothing, for backwards compatibility</div><div class="line">  --ops          -o                   one-packet scheduling</div><div class="line">  --numeric      -n                   numeric output of addresses and ports</div><div class="line">  --sched-flags  -b flags             scheduler flags (comma-separated)</div></pre></td></tr></table></figure>
<p>참고 : <a href="https://www.linux.co.kr/home/lecture/index.php?cateNo=1&amp;secNo=152&amp;theNo=&amp;leccode=10904" target="_blank" rel="external">https://www.linux.co.kr/home/lecture/index.php?cateNo=1&amp;secNo=152&amp;theNo=&amp;leccode=10904</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Load-Balancer-Server-설정&quot;&gt;&lt;a href=&quot;#Load-Balancer-Server-설정&quot; class=&quot;headerlink&quot; title=&quot;Load Balancer Server 설정&quot;&gt;&lt;/a&gt;Load Balancer Ser
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos FTP(vsftpd) 설치</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux3/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux3/</id>
    <published>2020-05-11T12:14:32.000Z</published>
    <updated>2020-05-11T12:24:30.225Z</updated>
    
    <content type="html"><![CDATA[<p>yum install vsftpd   //165kb 밖에 안되는데 성능이 좋다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vi /etc/vsftpd/vsftpd.conf</div><div class="line">29행 어나니머스가 업로드하는것을 허락한다. 주석해제</div><div class="line">33행 어나니머스가 디렉토리를 만드는것을 허락한다. 주석해제</div><div class="line"></div><div class="line">systemctl restart vsftpd</div><div class="line">yum install firewalld</div><div class="line">systemctl start firewalld</div><div class="line">systemctl enable firewalld</div><div class="line">ifconfig</div><div class="line">firewall-cmd --zone=public --permanent --add-port=21/tcp</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>참고 : <a href="https://kkimsangheon.github.io/2017/07/15/ThisIsLinux36/">https://kkimsangheon.github.io/2017/07/15/ThisIsLinux36/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;yum install vsftpd   //165kb 밖에 안되는데 성능이 좋다!&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos 개방 포트 확인</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux2/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux2/</id>
    <published>2020-05-11T12:08:35.000Z</published>
    <updated>2020-05-11T12:15:40.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP-포트확인"><a href="#TCP-포트확인" class="headerlink" title="TCP 포트확인"></a>TCP 포트확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nc -z -v 127.0.0.1 22</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">telnet 127.0.0.1 22</div></pre></td></tr></table></figure>
<h3 id="UDP-포트-확인"><a href="#UDP-포트-확인" class="headerlink" title="UDP 포트 확인"></a>UDP 포트 확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -z -v -u 127.0.0.1 22</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TCP-포트확인&quot;&gt;&lt;a href=&quot;#TCP-포트확인&quot; class=&quot;headerlink&quot; title=&quot;TCP 포트확인&quot;&gt;&lt;/a&gt;TCP 포트확인&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos tcp,udp 패킷덤프</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux1/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux1/</id>
    <published>2020-05-11T12:08:24.000Z</published>
    <updated>2020-05-11T12:15:44.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="udp-덤프"><a href="#udp-덤프" class="headerlink" title="udp 덤프"></a>udp 덤프</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tcpdump -i eth1 port 9129 -w packet.dump</div><div class="line">tcpdump udp -i eth1 port 9129 -w packet.dump</div></pre></td></tr></table></figure>
<h3 id="덤프-후-확인"><a href="#덤프-후-확인" class="headerlink" title="덤프 후 확인"></a>덤프 후 확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -Xqnr packet.dump</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;udp-덤프&quot;&gt;&lt;a href=&quot;#udp-덤프&quot; class=&quot;headerlink&quot; title=&quot;udp 덤프&quot;&gt;&lt;/a&gt;udp 덤프&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>20200404 한강</title>
    <link href="http://KKimSangHeon.github.io/2020/04/23/photography4/"/>
    <id>http://KKimSangHeon.github.io/2020/04/23/photography4/</id>
    <published>2020-04-23T14:09:03.000Z</published>
    <updated>2020-04-23T14:11:06.938Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/23/photography4/IMG_5147.jpg" alt="IMG_5147" title="IMG_5147">
<img src="/2020/04/23/photography4/IMG_5157.jpg" alt="IMG_5157" title="IMG_5157">
<img src="/2020/04/23/photography4/IMG_5188.jpg" alt="IMG_5188" title="IMG_5188">
<img src="/2020/04/23/photography4/IMG_5196.jpg" alt="IMG_5196" title="IMG_5196">
<img src="/2020/04/23/photography4/IMG_5197.jpg" alt="IMG_5197" title="IMG_5197">
<img src="/2020/04/23/photography4/IMG_5261.jpg" alt="IMG_5261" title="IMG_5261">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/04/23/photography4/IMG_5147.jpg&quot; alt=&quot;IMG_5147&quot; title=&quot;IMG_5147&quot;&gt;
&lt;img src=&quot;/2020/04/23/photography4/IMG_5157.jpg&quot; alt=&quot;IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>20200322 영종도하늘공원</title>
    <link href="http://KKimSangHeon.github.io/2020/04/23/photography3/"/>
    <id>http://KKimSangHeon.github.io/2020/04/23/photography3/</id>
    <published>2020-04-23T14:08:57.000Z</published>
    <updated>2020-04-23T14:10:38.864Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/23/photography3/IMG_4511.jpg" alt="IMG_4511" title="IMG_4511">
<img src="/2020/04/23/photography3/IMG_4565.jpg" alt="IMG_4565" title="IMG_4565">
<img src="/2020/04/23/photography3/IMG_4592.jpg" alt="IMG_4592" title="IMG_4592">
<img src="/2020/04/23/photography3/IMG_4603.jpg" alt="IMG_4603" title="IMG_4603">
<img src="/2020/04/23/photography3/IMG_4674.jpg" alt="IMG_4674" title="IMG_4674">
<img src="/2020/04/23/photography3/IMG_4703.jpg" alt="IMG_4703" title="IMG_4703">
<img src="/2020/04/23/photography3/IMG_4740.jpg" alt="IMG_4740" title="IMG_4740">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/04/23/photography3/IMG_4511.jpg&quot; alt=&quot;IMG_4511&quot; title=&quot;IMG_4511&quot;&gt;
&lt;img src=&quot;/2020/04/23/photography3/IMG_4565.jpg&quot; alt=&quot;IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>20200223 강릉</title>
    <link href="http://KKimSangHeon.github.io/2020/04/23/photography2/"/>
    <id>http://KKimSangHeon.github.io/2020/04/23/photography2/</id>
    <published>2020-04-23T14:00:57.000Z</published>
    <updated>2020-04-23T14:18:01.920Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/23/photography2/IMG_3695.jpg" alt="IMG_3695" title="IMG_3695">
<img src="/2020/04/23/photography2/IMG_3696.jpg" alt="IMG_3696" title="IMG_3696">
<img src="/2020/04/23/photography2/IMG_3699.jpg" alt="IMG_3699" title="IMG_3699">
<img src="/2020/04/23/photography2/IMG_3793.jpg" alt="IMG_3793" title="IMG_3793">
<img src="/2020/04/23/photography2/IMG_3815.jpg" alt="IMG_3815" title="IMG_3815">
<img src="/2020/04/23/photography2/IMG_3824.jpg" alt="IMG_3824" title="IMG_3824">
<img src="/2020/04/23/photography2/IMG_3885.jpg" alt="IMG_3885" title="IMG_3885">
<img src="/2020/04/23/photography2/IMG_4002.jpg" alt="IMG_4002" title="IMG_4002">
<img src="/2020/04/23/photography2/IMG_4006.jpg" alt="IMG_4006" title="IMG_4006">
<img src="/2020/04/23/photography2/IMG_4015.jpg" alt="IMG_4015" title="IMG_4015">
<img src="/2020/04/23/photography2/IMG_4068.jpg" alt="IMG_4068" title="IMG_4068">
<img src="/2020/04/23/photography2/IMG_4180.jpg" alt="IMG_4180" title="IMG_4180">
<img src="/2020/04/23/photography2/IMG_4202.jpg" alt="IMG_4202" title="IMG_4202">
<img src="/2020/04/23/photography2/IMG_4375.jpg" alt="IMG_4375" title="IMG_4375">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/04/23/photography2/IMG_3695.jpg&quot; alt=&quot;IMG_3695&quot; title=&quot;IMG_3695&quot;&gt;
&lt;img src=&quot;/2020/04/23/photography2/IMG_3696.jpg&quot; alt=&quot;IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>프로세스별 사용하는 포트확인하는 쉘</title>
    <link href="http://KKimSangHeon.github.io/2020/02/20/linux/"/>
    <id>http://KKimSangHeon.github.io/2020/02/20/linux/</id>
    <published>2020-02-20T11:40:41.000Z</published>
    <updated>2020-02-20T11:43:54.300Z</updated>
    
    <content type="html"><![CDATA[<p>특정서버에서 프로세스 별 사용하는 포트를 확인해야 했기에 처음으로 쉘 스크립트를 짜봤다..부끄러운 코드지만 추 후 쉘스크립트를 공부하고 돌아볼 용도로 업로드..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">unset process_info</div><div class="line">unset process_id</div><div class="line">unset program_name</div><div class="line">unset local_address</div><div class="line"></div><div class="line">rm -f sorttarget.txt</div><div class="line"></div><div class="line">fileter_program_list=(&quot;java&quot; &quot;redis&quot;)</div><div class="line"></div><div class="line">is_exist() &#123;</div><div class="line">	local needle array value</div><div class="line">	needle=&quot;$&#123;1&#125;&quot;; shift; array=(&quot;$&#123;@&#125;&quot;)</div><div class="line">	#for value in $&#123;array[@]&#125;; do [ $&#123;value&#125; == $&#123;needle&#125; ] &amp;&amp; echo &quot;true&quot; &amp;&amp; return; done</div><div class="line">	for value in $&#123;array[@]&#125;;</div><div class="line">  do [[ &quot;$&#123;needle&#125;&quot; == *&quot;$&#123;value&#125;&quot;* ]] &amp;&amp; echo &quot;true&quot; &amp;&amp; return; done</div><div class="line">	echo &quot;false&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">netstat -nltp | while read line</div><div class="line">do</div><div class="line">        process_info=`echo $line | cut -d &apos; &apos; -f7`              # get PID/Program name</div><div class="line"></div><div class="line">        process_id=`echo $process_info | cut -d &apos;/&apos; -f1`        # seprated by &apos;/&apos;</div><div class="line">        program_name=`echo $process_info | cut -d &apos;/&apos; -f2`</div><div class="line">        local_address=`echo $line | cut -d &apos; &apos; -f4`</div><div class="line"></div><div class="line">#       if [[ &quot;$program_name&quot; != *&quot;java&quot;* ]] &amp;&amp; [[ &quot;$program_name&quot; != *&quot;redis&quot;* ]]; then</div><div class="line">#                continue</div><div class="line">#        fi</div><div class="line"></div><div class="line">	program_checker=`is_exist $program_name $&#123;fileter_program_list[@]&#125;`</div><div class="line">	if [ &quot;$&#123;program_checker&#125;&quot; == &quot;false&quot; ]; then</div><div class="line">  continue</div><div class="line">	fi</div><div class="line"></div><div class="line">        echo $process_id &quot; &quot; $program_name &quot; &quot; $local_address &quot; &quot;  &gt;&gt; sorttarget.txt</div><div class="line">done</div><div class="line"></div><div class="line">unset current_process_id</div><div class="line">unset new_porcess_id</div><div class="line">unset new_program_name</div><div class="line">unset address_port</div><div class="line">unset command</div><div class="line"></div><div class="line">cat sorttarget.txt | sort -k 1 -t &quot; &quot; | while read line</div><div class="line">do</div><div class="line">        new_process_id=`echo $line | cut -d &apos; &apos; -f1`</div><div class="line">        if [[ &quot;$new_process_id&quot; != &quot;$current_process_id&quot; ]]; then</div><div class="line">                printf &quot;\n\n&quot;</div><div class="line">  new_program_name=`echo $line | cut -d &apos; &apos; -f2`</div><div class="line">                echo &quot;Pid/PName :&quot;  $new_process_id &quot;/&quot; $new_program_name</div><div class="line">                current_process_id=$new_process_id</div><div class="line">                ps -ef |grep $new_process_id | while read line</div><div class="line">                do</div><div class="line">                        command=`echo $line | cut -d &apos; &apos; -f8`</div><div class="line">                        if [[ &quot;$command&quot; == &quot;grep&quot; ]]; then</div><div class="line">                                continue</div><div class="line">                        fi</div><div class="line">                        echo $line</div><div class="line">                        break</div><div class="line">                done</div><div class="line">        fi</div><div class="line"></div><div class="line">        address_port=`echo $line | cut -d &apos; &apos; -f3`</div><div class="line">        echo &quot;   &quot; $address_port</div><div class="line">done</div><div class="line">rm -f sorttarget.txt</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;특정서버에서 프로세스 별 사용하는 포트를 확인해야 했기에 처음으로 쉘 스크립트를 짜봤다..부끄러운 코드지만 추 후 쉘스크립트를 공부하고 돌아볼 용도로 업로드..&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>20200209 벗고개</title>
    <link href="http://KKimSangHeon.github.io/2020/02/09/photograph/"/>
    <id>http://KKimSangHeon.github.io/2020/02/09/photograph/</id>
    <published>2020-02-09T04:26:01.000Z</published>
    <updated>2020-02-09T04:29:48.265Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/02/09/photograph/IMG_3353.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3346.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3341.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3339.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3328.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3326.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3320.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3312.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/02/09/photograph/IMG_3353.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2020/02/09/photograph/IMG_3346.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>18.Null-safety</title>
    <link href="http://KKimSangHeon.github.io/2020/02/06/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/06/spring/</id>
    <published>2020-02-06T10:36:34.000Z</published>
    <updated>2020-02-06T10:37:26.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Null-safety"><a href="#Null-safety" class="headerlink" title="Null-safety"></a>Null-safety</h3><p>컴파일타임에 널포인트 익셉션을 최소화</p>
<p>널을 허용하느냐 안하느냐에 따라 툴의 지원을 받아 컴파일타임에 널포인트 익셉션 발생을 방지할 수 있다.</p>
<p>Null-safety<br>스프링 프레임워크 5에 추가된 Null 관련 애노테이션<br>@NonNull, @Nullable, @NonNullApi (패키지 레벨 설정), @NonNullFields (패키지 레벨 설정) 을 설정하고 IDE에서 추가설정을 하고 아래처럼 코드를 작성하면 IDE상에서 null을 확인해준다,<br>목적<br>● (툴의 지원을 받아) 컴파일 시점에 최대한 NullPointerException을 방지하는 것</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public class EventService &#123;</div><div class="line">	@NonNull</div><div class="line">	public String createEvent(@NonNull String name) &#123;</div><div class="line">		return &quot;hello&quot; + name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	EventService eventService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">		eventService.createEvent(null);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>다음과 같이 패키지 레벨에서 NonNull을 설정하고 Null을 허용할 부분에만 Nullable를 붙여 활용할 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@NonNullApi</div><div class="line">package sangheon.spring</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Null-safety&quot;&gt;&lt;a href=&quot;#Null-safety&quot; class=&quot;headerlink&quot; title=&quot;Null-safety&quot;&gt;&lt;/a&gt;Null-safety&lt;/h3&gt;&lt;p&gt;컴파일타임에 널포인트 익셉션을 최소화&lt;/p&gt;
&lt;p&gt;널을 허용하
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>17.스프링 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/05/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/05/spring/</id>
    <published>2020-02-05T12:02:03.000Z</published>
    <updated>2020-02-05T12:28:02.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링-AOP"><a href="#스프링-AOP" class="headerlink" title="스프링 AOP"></a>스프링 AOP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public interface EventService &#123;</div><div class="line">	void createEvent();</div><div class="line">	void publishEvent();</div><div class="line">	void deleteEvent();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class SimpleEventServeice implemets EventService &#123;</div><div class="line">	@Override</div><div class="line">	public void createEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void publishEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void deleteEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Component</div><div class="line">public class AppRunner implemets ApplicationRunner &#123;</div><div class="line">	@Autowired</div><div class="line">	EventService eventService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(.....)&#123;</div><div class="line">		eventService.createEvent();</div><div class="line">		eventService.publishEvent();</div><div class="line">		eventService.deleteEvent();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와같이 코드를 작성하고 pom파일에 의존성을 추가하자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line"></div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>이제 해야할일(어드바이스) 어디에 적용할지(포인트컷)를 정하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">public class PerfAspect &#123;</div><div class="line"></div><div class="line">  @Around(&quot;execution(* com.sangheon.*.EventService.*())&quot;)</div><div class="line">  // com.sangheon으로 시작하는 EventService의 모든 메서드에 아래 행위를 적용하라</div><div class="line">  // 포인트컷을 여러곳에서 재사용할것이 아니라면 이렇게 사용하라.</div><div class="line"></div><div class="line">  public Object logPerf(ProceedingJoinPoint pjp) &#123;</div><div class="line">    //pjp는 어드바이스가 적용되는 대상 즉 메소드 자체로 보면된다.</div><div class="line">    long begin = System.currentTimeMills());</div><div class="line">    Object reVal = pjp.proceed();</div><div class="line">    return reVal;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위의 경우 모든 메소드에 적용된다. deleteEvent에는 적용되기를 원치 않을경우 @annotation 을 만들어서 사용해보자.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Retention(RetentionPolicy.CLASS)   //컴파일까지 해당 어노테이션을 유지.. 이 줄은 생략가능</div><div class="line">public @interface PerLogging &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이 후 적용되길 원하는 메소드에만 @PerLogging를 붙이자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@PerLogging</div><div class="line">@Override</div><div class="line">public void createEvent() &#123;</div><div class="line">  //로직</div><div class="line">&#125;</div><div class="line"></div><div class="line">@PerLogging</div><div class="line">@Override</div><div class="line">public void publishEvent() &#123;</div><div class="line">  //로직</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void deleteEvent() &#123;</div><div class="line">  //로직</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>그리고 아래처럼 @Around 어노테이션을 수정하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">public class PerfAspect &#123;</div><div class="line"></div><div class="line">  @Around(&quot;@annotation(PerLogging)&quot;)</div><div class="line">  // com.sangheon으로 시작하는 EventService의 모든 메서드에 아래 행위를 적용하라</div><div class="line">  // 포인트컷을 여러곳에서 재사용할것이 아니라면 이렇게 사용하라.</div><div class="line"></div><div class="line">  public Object logPerf(ProceedingJoinPoint pjp) &#123;</div><div class="line">    //pjp는 어드바이스가 적용되는 대상 즉 메소드 자체로 보면된다.</div><div class="line">    long begin = System.currentTimeMills());</div><div class="line">    Object reVal = pjp.proceed();</div><div class="line">    return reVal;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이제 돌려보면 deleteEvent외에만 적용되는것을 확인할 수있다.</p>
<p>어드바이스 정의는 @Around 뿐만 아니라 @Before ,@AfterReturning, @AfterThrowing이 가능하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링-AOP&quot;&gt;&lt;a href=&quot;#스프링-AOP&quot; class=&quot;headerlink&quot; title=&quot;스프링 AOP&quot;&gt;&lt;/a&gt;스프링 AOP&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>16.프록시 기반 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/04/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/04/spring/</id>
    <published>2020-02-04T11:31:16.000Z</published>
    <updated>2020-02-04T11:33:39.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="프록시-기반-AOP"><a href="#프록시-기반-AOP" class="headerlink" title="프록시 기반 AOP"></a>프록시 기반 AOP</h3><p>스프링 AOP: 프록시 기반 AOP<br>스프링 AOP 특징<br> 모든 AOP 기능을 제공하는 것이 목적이 아니라, 스프링 IoC와 연동하여 엔터프라이즈<br>애플리케이션에서 가장 흔한 문제에 대한 해결책을 제공하는 것이 목적.</p>
<p>프록시 패턴?<br>아래그림과 같이 인터페이스가 있고 클라이언트는 프록시 객체를 갖는다. 프록시는 타겟 객체를 원래해야할 일을 갖고있는 객체를 감싸 실체 클라이언트의 요청을 처리</p>
<img src="/2020/02/04/spring/Proxy.PNG" alt="Proxy" title="Proxy">
<p>프록시 패턴의 존재 이유?<br>(기존 코드 변경 없이) 접근 제어 또는 부가 기능 추가</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public interface EventService &#123;</div><div class="line">	void createEvent();</div><div class="line">	void publishEvent();</div><div class="line">	void deleteEvent();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class SimpleEventServeice implemets EventService &#123;</div><div class="line">	@Override</div><div class="line">	public void createEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void publishEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void deleteEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Component</div><div class="line">public class AppRunner implemets ApplicationRunner &#123;</div><div class="line">	@Autowired</div><div class="line">	EventService eventService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(.....)&#123;</div><div class="line">		eventService.createEvent();</div><div class="line">		eventService.publishEvent();</div><div class="line">		eventService.deleteEvent();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>위와같이 클래스가 있을 때     void createEvent(); / void publishEvent(); 두메소드의 내부 동작시간을 확인하고 싶을떄 어떻게 해야할까</code><br>SimpleEventServeice 내부에 currentTime 와 endTime를 빼는 로직을 추가할 순 있지만 프록시로 구현가능하다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@Primary	//EventService를 여러곳에서 impl했을 때 활용하는것이었다</div><div class="line">@Service</div><div class="line">public class ProxySimpleEvenService implements EventService &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	SimpleEventService simpleEventService;	//EventService simpleEventService; 도 가능</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void createEvent() &#123;</div><div class="line">		long begin = System.currentTimeMilliis();</div><div class="line">		simpleEventService.createEvent();</div><div class="line">		print(System.currentTimeMills()-begin);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void publishEvent() &#123;</div><div class="line">		long begin = System.currentTimeMilliis();</div><div class="line">		simpleEventService.publishEvent();</div><div class="line">		print(System.currentTimeMills()-begin);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void deleteEvent() &#123;</div><div class="line">		simpleEventService.deleteEvent();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와같이 할경우 프록시 기반으로 구현가능하다.<br>하지만 위의경우 중복코드 추가, 해당 클래스를 만드는 비용이 든다. 또한 해당기능(타임을 재는것)을 다른곳에도 추가해야 한다면 모든 클래스에 프록시를 만들고 중복 코드를 추가해야되나????</p>
<p><code>위의 문제점을 해결한것이 스프링AOP</code><br>동적으로 프록시 객체를 생성하는 방법이다. 이는 스프링 IoC컨테이너가제공하는 기반 시설과 다이나믹 프록시를 사용하여 문제를 해결함</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;프록시-기반-AOP&quot;&gt;&lt;a href=&quot;#프록시-기반-AOP&quot; class=&quot;headerlink&quot; title=&quot;프록시 기반 AOP&quot;&gt;&lt;/a&gt;프록시 기반 AOP&lt;/h3&gt;&lt;p&gt;스프링 AOP: 프록시 기반 AOP&lt;br&gt;스프링 AOP 특징&lt;br&gt; 
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>15.스프링 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/03/spring-1/"/>
    <id>http://KKimSangHeon.github.io/2020/02/03/spring-1/</id>
    <published>2020-02-03T12:21:26.000Z</published>
    <updated>2020-02-04T11:33:45.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링-AOP"><a href="#스프링-AOP" class="headerlink" title="스프링 AOP"></a>스프링 AOP</h3><p>AOP의 구현체를 제공하며 AspectJ와 연동하여 사용할 수 있으며 스프링 내부적으로 구현한 Spring AOP를 사용할 수 있음. 이를 기반으로 다양한 기능이 제공되고있다.</p>
<p><code>AOP?</code><br>흩어진 Aspect를 모듈화 하는 프로그래밍 기법이다. OOP와 서로 보완하는 관계이다. 즉 OOP를 더 잘할 수 있게 도와줌</p>
<p>AOP는 Aspect로 흩어져 있는것을 모은다. 모을 때는 관심별로 각각 독립적으로 만든다.<br>즉 해야할 일과 어디어디에 적용해야 할지 묶어둔것!</p>
<h3 id="AOP의-주요개념"><a href="#AOP의-주요개념" class="headerlink" title="AOP의 주요개념"></a>AOP의 주요개념</h3><p>Aspect : 공통적인것을 꺼내서 모듈화 한것.<br>Target: 적용이 되는 대상<br>Advice : 해야할 일<br>Joint Point : 메서드 실행시점. 즉 생성자 호출하기 직전, 생성자 호출했을때, 필드에 접근하기전, 필드에서 값을 가져갔을 때 등 여러가지의 합류접이 있다.<br>Pointcut : “A라는 클래스의 B라는 메소드를 호출할 때 만 해당 어디바이스를 적용할 것이다”라는것으로 즉 어디에 적용해야 하는지.</p>
<img src="/2020/02/03/spring-1/spring1.PNG" alt="AOP" title="AOP">
<h3 id="AOP-구현체"><a href="#AOP-구현체" class="headerlink" title="AOP 구현체"></a>AOP 구현체</h3><p>자바에는 대표적으로 AspectJ, Spring AOP가 있다.</p>
<h3 id="AOP-적용하는-방법"><a href="#AOP-적용하는-방법" class="headerlink" title="AOP 적용하는 방법"></a>AOP 적용하는 방법</h3><p><code>컴파일타임</code> : 자바파일을 클래스 파일로 만들 때 조작이된 바이트 코드를 생성해 내는것.<br>로드타임, 런타임때 성능 부하가 없지만 이렇게 만들기 위해서는 별도의 컴파일 과정을 거쳐야함</p>
<p><code>로드타임</code> : 컴파일은 아주 순수하게 됐다. 그런데 A라는 클래스를 로딩하는 시점에 뭔가를 끼워서 넣는것(로드타임 위빙이라 함)<br>클래스 로딩시점에 약간의 부하가 발생하며 로드타임 위버를 설정해줘야함. 다양한 문법을 사용할 수 있다(AspectJ)</p>
<p><code>런타임</code> : A라는 빈에  Aspect X를 적용해야 한다는것을 스프링이 알고있다.  A라는 빈을 만들 때 A 타입의 프록시 빈을 만들어서 이 프록시 빈이 A가 갖고있는 메소드를 호출하기 직전에 Aspect X의 요소를 호출한 후 A것을 호출한다.<br>스프링 AOP를 사용하는 방법으로 빈을 만드는 초기성능이 추가된다. 하지만 최초의 빈을 만들때만 비용이 들어가므로 로드타임 위빙이랑 비용이 비슷할것!</p>
<p>런타임이 가장 합리적이고 현실적이다. 경우에 따라 AspectJ가 제공하는 jopoint를 사용해야한다면 로드타임을 사용해야 한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링-AOP&quot;&gt;&lt;a href=&quot;#스프링-AOP&quot; class=&quot;headerlink&quot; title=&quot;스프링 AOP&quot;&gt;&lt;/a&gt;스프링 AOP&lt;/h3&gt;&lt;p&gt;AOP의 구현체를 제공하며 AspectJ와 연동하여 사용할 수 있으며 스프링 내부적으로 구
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>14.SpEL</title>
    <link href="http://KKimSangHeon.github.io/2020/02/03/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/03/spring/</id>
    <published>2020-02-03T11:35:26.000Z</published>
    <updated>2020-02-03T11:35:47.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>객체 그래프를 조회하고 조작하는 기능을 말한다.<br>Unified EL과 비슷하지만, 메소드 호출을 지원하며, 문자열 템플릿 기능도 제공한다.<br>스프링 3.0 부터 지원.</p>
<p>JSP에서 봤던 Unified EL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:if test=&quot;$&#123;sessionScope.cart.numberOfItems &gt; 0&#125;&quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure></p>
<h3 id="어떻게-사용하나"><a href="#어떻게-사용하나" class="headerlink" title="어떻게 사용하나"></a>어떻게 사용하나</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;1+1&#125;&quot;)</div><div class="line">	int value;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;&apos;hello&apos; +&apos;world&apos;&#125;&quot;)</div><div class="line">	String greeting;</div><div class="line"></div><div class="line">	@Value (&quot;#&#123;1 eq1&#125;&quot;)</div><div class="line">	boolean trueOrFalse;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;my.value&#125;&quot;)</div><div class="line">	int myValue</div><div class="line"></div><div class="line">	//표현식 안에 프로퍼티를 넣음</div><div class="line">	// 프로퍼티 안에 표현식은 넣을 수 없다.</div><div class="line">	//my.value는 application.properties에 정의되어있다.</div><div class="line">	@Value(&quot;#&#123;$&#123;my.value&#125; eq 100&#125;&quot;)</div><div class="line">	int isMyValue100;</div><div class="line"></div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run() throws Exception &#123;</div><div class="line">		print(value);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#은 표현식을 참고하는 방법 $는 프로퍼티를 참고하는 방법.</code></p>
<p><code>#{“표현식&quot;}</code><br><code>${“프로퍼티&quot;}</code></p>
<p>아래와 같이 빈도 가능하다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">public class Sample &#123;</div><div class="line">	private intdata = 200;</div><div class="line"></div><div class="line">	public int getData() &#123;</div><div class="line">		return data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setData(int data) &#123;</div><div class="line">		this.data = data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public AppRunner implements ApplicationRunner &#123;</div><div class="line">	@Value(&quot;#&#123;sample.data&#125;&quot;)</div><div class="line">	int sampleData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref" target="_blank" rel="external">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref</a></p>
<h3 id="실제로-어디서-쓰나"><a href="#실제로-어디서-쓰나" class="headerlink" title="실제로 어디서 쓰나?"></a>실제로 어디서 쓰나?</h3><p>@Value 애노테이션<br>@ConditionalOnExpression 애노테이션 : 선별적으로 빈 등록<br>스프링 시큐리티</p>
<ul>
<li>메소드 시큐리티, @PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter<br>@Query</li>
</ul>
<p>ExpressionParser으로 직접 활용할 수도 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run() throws Exception &#123;</div><div class="line"></div><div class="line">		ExpressionParser parser = new SpelExpressionParser();</div><div class="line">		Expression expression = parser.parseExpression(&quot;2+100&quot;);</div><div class="line">		Integer value = expression.getValue(Integer.class);		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpEL&quot;&gt;&lt;a href=&quot;#SpEL&quot; class=&quot;headerlink&quot; title=&quot;SpEL&quot;&gt;&lt;/a&gt;SpEL&lt;/h3&gt;&lt;p&gt;객체 그래프를 조회하고 조작하는 기능을 말한다.&lt;br&gt;Unified EL과 비슷하지만, 메소드 호출을 지원하며,
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>20200201 서울미술관</title>
    <link href="http://KKimSangHeon.github.io/2020/02/02/photograph/"/>
    <id>http://KKimSangHeon.github.io/2020/02/02/photograph/</id>
    <published>2020-02-02T10:51:10.000Z</published>
    <updated>2020-02-02T10:57:15.198Z</updated>
    
    <content type="html"><![CDATA[<p>서울미술관 - 보통의 거짓말<br><img src="/2020/02/02/photograph/IMG_3299_1.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3262.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3265.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3265_1.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3266.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3269.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3274.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3277.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3284.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3285.jpg" alt="1" title="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;서울미술관 - 보통의 거짓말&lt;br&gt;&lt;img src=&quot;/2020/02/02/photograph/IMG_3299_1.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/02/02/photograph/IMG_3262.jpg&quot; 
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>로그를 정제해보자</title>
    <link href="http://KKimSangHeon.github.io/2020/01/30/log/"/>
    <id>http://KKimSangHeon.github.io/2020/01/30/log/</id>
    <published>2020-01-30T12:12:30.000Z</published>
    <updated>2020-01-30T12:16:37.485Z</updated>
    
    <content type="html"><![CDATA[<p>사용하는 시스템에는 로그가 너무 많이 쌓여서 vi로 켜면 쉘이 꺼져버린다…<br>다음 방법을 사용하여 극복해보자</p>
<h3 id="뒷-부분-다른-파일로-추출"><a href="#뒷-부분-다른-파일로-추출" class="headerlink" title="뒷 부분 다른 파일로 추출"></a>뒷 부분 다른 파일로 추출</h3><p>tail -n 10000 server.log &gt; test.log<br>10000줄을 test.log로 생성</p>
<h3 id="뒷-부분-3줄만-보기"><a href="#뒷-부분-3줄만-보기" class="headerlink" title="뒷 부분 3줄만 보기"></a>뒷 부분 3줄만 보기</h3><p>tail -n 3 test.txt</p>
<h3 id="특정부분-찾고-그-이후-3줄-파일로-추출"><a href="#특정부분-찾고-그-이후-3줄-파일로-추출" class="headerlink" title="특정부분 찾고 그 이후 3줄 파일로 추출"></a>특정부분 찾고 그 이후 3줄 파일로 추출</h3><p>grep -A 3 “john” phonebook.txt<br>john 찾고 뒤에세줄출력<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;사용하는 시스템에는 로그가 너무 많이 쌓여서 vi로 켜면 쉘이 꺼져버린다…&lt;br&gt;다음 방법을 사용하여 극복해보자&lt;/p&gt;
&lt;h3 id=&quot;뒷-부분-다른-파일로-추출&quot;&gt;&lt;a href=&quot;#뒷-부분-다른-파일로-추출&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
      <category term="centos" scheme="http://KKimSangHeon.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>13.데이터 바인딩 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/30/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/30/spring/</id>
    <published>2020-01-30T12:08:56.000Z</published>
    <updated>2020-01-30T12:10:46.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="데이터-바인딩-추상화-Converter와Formatter"><a href="#데이터-바인딩-추상화-Converter와Formatter" class="headerlink" title="데이터 바인딩 추상화: Converter와Formatter"></a>데이터 바인딩 추상화: Converter와Formatter</h3><p>이전강의에서 봤던 PropertyEditor의 단점으로 인해 Converter와Formatter가 생겨났다</p>
<h3 id="PropertyEditor의-단점"><a href="#PropertyEditor의-단점" class="headerlink" title="PropertyEditor의 단점"></a>PropertyEditor의 단점</h3><ol>
<li>쓰레드 세이프하지 않음</li>
<li>무조건 스트링과 오브젝트의 관계이다. 즉 스트링을 오브젝트로 하거나 오브젝트를 스트링으로 변환하거나 밖에 못함.<br>getAsText() 메소드는 오브젝트를 문자열로<br>setAsText() 메소드는 문자열을 오브젝트로</li>
</ol>
<p>`바인딩은 조금 더 제너럴 해야한다.-&gt; Converter의 등장’</p>
<h3 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h3><p>아래는 앞에서 봤던 EventEditor 와 같은역할을 한다. 그리고 상태정보가 없기때문에 빈으로 등록하여 사용이 가능하다. ConverterRegistry에 등록하여 사용가능하다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class EventCoverter &#123;</div><div class="line"></div><div class="line">	@Component</div><div class="line">	public static StringToEventConverter implements Converter&lt;String, Event&gt; &#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public Event convert(String source) &#123;</div><div class="line">			return new Event(Integer.parseInt(source));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Component</div><div class="line">	public static class EventToStringConverter implements Converter&lt;Event, String&gt; &#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public String convert(Event source) &#123;</div><div class="line">			return source.getId().toString();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Component를 통해 빈으로 등록하지 않고 사용하려면. 아래를 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class WebConfig implements WebMvcConfigurer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void addFormatters(FormatterRegistry registry) &#123;</div><div class="line">		//ConverterRegistry에 등록하여 사용해야한다고 했지만 ConverterRegistry는 FormatterRegistry 를</div><div class="line">		//상속받기 때문에 FormatterRegistry로도 사용가능</div><div class="line">		registry.addConverter(new EventConverter.StringToEventConverter());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class EventController &#123;</div><div class="line">	@GetMapping(&quot;/event/&#123;event&#125;&quot;)</div><div class="line">	public String getEvent(@PathVariable Event event) &#123;</div><div class="line">		print(event);</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h3><p>PropertyEditor와 구현방식은 유사하다 implements 후 메소드 하나는 String 하나는 객체로 반환하여 사용.<br>얘 또한 마찬가지로 빈으로 등록되고 다른 빈을 주입받을 수 있다,</p>
<p>@Component<br>public class EventFormatter implements Formatter<event> {</event></p>
<pre><code>@Autowired
MessageSource messageSource;

@Override
public Event parse(String text, Locale locale) throws ParseException {
    Event event = new Event();
    int id = Integer.parseInt(text);
    event.setId(id);
    return event;
}

@Override
public String print(Event object, Locale locale) {
    return object.getId().toString();
}
</code></pre><p>}</p>
<p>@Component를 통해 빈으로 등록하지 않고 사용하려면. 아래를 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class WebConfig implements WebMvcConfigurer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void addFormatters(FormatterRegistry registry) &#123;</div><div class="line">		registry.addFormatter(new EventFormatter());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h3><p>이전까지  DataBinder(PropertyEditor이 상속)를 사용하여 데이터 변환을 했다면 이번챕터부터는 ConversionService를 사용하고 있는것이다.</p>
<p>addFormatters 메소드를 통해 등록되는 빈들은 Converter와Formatter들은 ConversionService에 등록되는 것이고 이를통해 실제 변환하는 작업을 한것.</p>
<p>ConversionService는 DefaultFormattingConversionService로 생성되는 경우가 많은데 DefaultFormattingConversionService는 FormatterRegistry/ConversionService 두 가지의 역할을 한다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ConversionService conversionService ;</div><div class="line"></div><div class="line">...</div><div class="line">conversionService. xxxxx를 활용하여 등록된 빈들을 활용가능</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>위와같이 사용가능하다.</p>
<p>하지만 스프링 부트에서는 addFormatters를 사용하지 않더라도 자동으로 Converter와Formatter을 conversionService 빈으로 등록해준다! (@Component 어노테이션은 붙여야함)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;데이터-바인딩-추상화-Converter와Formatter&quot;&gt;&lt;a href=&quot;#데이터-바인딩-추상화-Converter와Formatter&quot; class=&quot;headerlink&quot; title=&quot;데이터 바인딩 추상화: Converter와Formatt
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>12.데이터바인딩 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/28/spring2/"/>
    <id>http://KKimSangHeon.github.io/2020/01/28/spring2/</id>
    <published>2020-01-28T13:24:40.000Z</published>
    <updated>2020-01-30T12:10:45.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="데이터바인딩-추상화"><a href="#데이터바인딩-추상화" class="headerlink" title="데이터바인딩 추상화"></a>데이터바인딩 추상화</h3><p>데이터 바인딩 :어떤 프로퍼티의 값을 타겟 객체에 설정하는것.<br>즉 사용자가 입력한 값을 어플리케이션 객체 도메인에 동적으로 입력하는것<br>쉽게말하자면 입력값은 문자열인데 int,long, boolean, Book, Event 등과 같은 이벤트 타입으로변환해서 넣어주는 기능</p>
<h3 id="고전적인-방식"><a href="#고전적인-방식" class="headerlink" title="고전적인 방식"></a>고전적인 방식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Event&#123;</div><div class="line">	private Integer id;</div><div class="line">	private String title;</div><div class="line"></div><div class="line">	public Evnet(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	getter, setter</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class EventController &#123;</div><div class="line"></div><div class="line">	@GetMapping(&quot;/event/&#123;event&#125;&quot;)</div><div class="line">	public String getEvent(@PathVariable Event event) &#123;</div><div class="line">		print(event);</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@InitBinder</div><div class="line">	public void init(WebDataBinder webDataBinder) &#123;</div><div class="line">		webDataBinder.registerCustomEditor(Event.class, new EventEditor());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>지금 상태에서 돌리면 문자열을 Evnet로 변환할 수 없다는 에러가 발생할것이다. 이를 해결하기 위해 아래를 추가</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class EventEditor extends PropertyEditorSupport &#123;</div><div class="line">	@Override</div><div class="line">	public String getAsText() &#123;</div><div class="line">		Event event = (Event)getValue();</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void setAsText(String text) throws ...&#123;</div><div class="line">		setValue(new Event(Integer.parseInt(text)));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PropertyEditor의 구현체는 쓰레드세이프하지 않다. 즉 여러 스레드에서 공유해서 쓰면 안된다. 즉 빈으로 등록해서 쓰면 안된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;데이터바인딩-추상화&quot;&gt;&lt;a href=&quot;#데이터바인딩-추상화&quot; class=&quot;headerlink&quot; title=&quot;데이터바인딩 추상화&quot;&gt;&lt;/a&gt;데이터바인딩 추상화&lt;/h3&gt;&lt;p&gt;데이터 바인딩 :어떤 프로퍼티의 값을 타겟 객체에 설정하는것.&lt;br&gt;
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>11.Validation 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/28/spring1/"/>
    <id>http://KKimSangHeon.github.io/2020/01/28/spring1/</id>
    <published>2020-01-28T13:24:34.000Z</published>
    <updated>2020-01-28T13:26:57.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Validation-추상화"><a href="#Validation-추상화" class="headerlink" title="Validation 추상화"></a>Validation 추상화</h3><p>자바 EE 표준스펙중에 하나이다.</p>
<p>org.springframework.validation.Validator는 어플리케이션에서 사용하는 객체 검증용 인터페이스이다.</p>
<p>boolean supports(Class clazz): 검증하는것을 지원하는지 판단<br>void validate(Object obj, Errors e): 실제 검증 로직을 이 안에서 구현</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Event &#123;</div><div class="line">	public String id;</div><div class="line">	public String title;</div><div class="line"></div><div class="line"></div><div class="line">	getter ,setter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class EventValidator implements Validator &#123;</div><div class="line">	@Override</div><div class="line">	pulbic boolean supports(Class&lt;?&gt; clazz) &#123;</div><div class="line">		return Event.class.equals(clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void validate(Object target, Errors errors) &#123;</div><div class="line">		ValidationUtils.rejectIfEmptyOrWhitespace(errors, &quot;title&quot;, &quot;title이 빈것은 허용하지 않음.&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line">public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">	Event event = new Event();</div><div class="line">	EventValidator eventValidator = new EventValidator();</div><div class="line"></div><div class="line">	eventValidator.validate(event, errors);</div><div class="line"></div><div class="line">	print(errors.hasErrors());</div><div class="line"></div><div class="line">	errors.getAllErrors().forEach(e-&gt; &#123;</div><div class="line">		Arrays.stream(e.getCodes()).forEach(System.out::println);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="스프링-부트-2-0-5-이상부터는"><a href="#스프링-부트-2-0-5-이상부터는" class="headerlink" title="스프링 부트 2.0.5 이상부터는"></a>스프링 부트 2.0.5 이상부터는</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Event &#123;</div><div class="line">	public String id;</div><div class="line"></div><div class="line">	@NotEmpty</div><div class="line">	public String title;</div><div class="line"></div><div class="line">	@Min(0)</div><div class="line">	Integer limit;</div><div class="line"></div><div class="line">	@Email</div><div class="line">	public String email;</div><div class="line"></div><div class="line">	getter ,setter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line">@Autowired</div><div class="line">Validator validator;</div><div class="line"></div><div class="line">public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">	Event event = new Event();</div><div class="line">	event.setLimit(-1)</div><div class="line">	event.setEmail(&quot;qwe&quot;);</div><div class="line"></div><div class="line"></div><div class="line">	validator.validate(event, errors);</div><div class="line"></div><div class="line">	print(errors.hasErrors());</div><div class="line"></div><div class="line">	errors.getAllErrors().forEach(e-&gt; &#123;</div><div class="line">		Arrays.stream(e.getCodes()).forEach(System.out::println);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Validation-추상화&quot;&gt;&lt;a href=&quot;#Validation-추상화&quot; class=&quot;headerlink&quot; title=&quot;Validation 추상화&quot;&gt;&lt;/a&gt;Validation 추상화&lt;/h3&gt;&lt;p&gt;자바 EE 표준스펙중에 하나이다.&lt;/p&gt;
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>10.Resource 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/20/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/20/spring/</id>
    <published>2020-01-20T13:35:31.000Z</published>
    <updated>2020-01-21T12:16:11.452Z</updated>
    
    <content type="html"><![CDATA[<p>지금까지 ApplicationContext는 단순한 빈 팩토리가아니라 여러가지 기능을 하는것을 알아봤었다.</p>
<h3 id="Resource-추상화"><a href="#Resource-추상화" class="headerlink" title="Resource 추상화"></a>Resource 추상화</h3><p>지금까지는 IoC에 대해 살펴봤다면 지금부터는 추상화에 대해 알아보겠다</p>
<p>스프링에서는 Reosurce(org.springframework.core.io.Resource)를 추상화 하였다.</p>
<p>java.net.URL를 Resource라는 클래스로 감싸서 추상화함. 스프링입장에서 필요한 클래스패스에서 리소스를 가져올 수 있게함.</p>
<h3 id="추상화-이유"><a href="#추상화-이유" class="headerlink" title="추상화 이유"></a>추상화 이유</h3><p>java.net.URL이 클래스패스를 기준으로 리소스를 가져오는 기능이 없었음.<br>또한 java.net.URL이 여러가지 프리픽스(ftp,http 등)을 제공하는데 스프링입장에선 클래스패스를 기반으로 가져오는것도 필요했다.(위와 동일한내용)<br>(기존스프링은 ClassPathXmlApplicationContext으로 리소스를 가져와야했음.)<br>클래스 패스를 기반으로 가져올 수 있도록 할 수는 있지만(새로운 핸들러 등록하여) 구현이 복잡하고 편의성 메소드가 부족하다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">var ctx = new ClassPathXmlApplicationContext(&quot;sangheon.xml&quot;);</div><div class="line"></div><div class="line">// 내부적으로 getResource를 호출(그러나 다른 구현체임)</div><div class="line">// FileSystemXmlApplicationContex 도 마찬가지</div></pre></td></tr></table></figure>
<p>여러 메소드는 내부적으로 resource관련 메소드를 호출한다. 즉 우리는 모르게 리소스의 구현체를 사용하고 있었다.</p>
<h3 id="Resource-인터페이스"><a href="#Resource-인터페이스" class="headerlink" title="Resource 인터페이스"></a>Resource 인터페이스</h3><p><a href="https://www.google.com/url?q=https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/Resource.html&amp;ust=1579648260000000&amp;usg=AFQjCNFJPcfSP77r_I5NqPaHMR1tElL6kg&amp;hl=ko" target="_blank" rel="external">https://www.google.com/url?q=https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/Resource.html&amp;ust=1579648260000000&amp;usg=AFQjCNFJPcfSP77r_I5NqPaHMR1tElL6kg&amp;hl=ko</a> 참고<br>getInputStream()<br>exitst()<br>isOpen()<br>getDescription(): 전체 경로 포함한 파일 이름 또는 실제 URL</p>
<h3 id="Resource-인터페이스의-구현체"><a href="#Resource-인터페이스의-구현체" class="headerlink" title="Resource 인터페이스의 구현체"></a>Resource 인터페이스의 구현체</h3><ul>
<li>UrlResource: java.net.URL 참고, 기본으로 지원하는 프로토콜 http, https, ftp, file, jar.</li>
<li>ClassPathResource: 지원하는 접두어 classpath:</li>
<li>FileSystemResource</li>
<li>ServletContextResource: 웹 애플리케이션 루트에서 상대 경로로 리소스 찾는다.<br>(얘를 가장 많이 쓰는데 읽어들이는 리소스 타입이 ApplicationContext와 관련있기 때문.)<br>…</li>
</ul>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p><code>Resource의 타입은 locaion 문자열과 ApplicationContext의 타입에 따라 결정 된다.</code><br>ApplicationContext가 FileSystemXmlApplicationContext 이면 매개변수로 받는 문자열은 filesystem resource로 리졸빙을 한다.<br>WebApplicationContext 이면 문자열은 서블릿 컨텍스트 리소스로 리졸빙을 한다.</p>
<p>그래서 문자열은 내가 사용할 ApplicationContext에 따라 달라진다.</p>
<p>하지만 ApplicationContext의 타입에 상관없이 리소스 타입을 강제하려면 java.net.URL 접두어(+ classpath:)중 하나를 사용할 수 있다..<br>예시</p>
<ul>
<li>classpath:me/whiteship/config.xml -&gt; ClassPathResource</li>
<li>file:///some/resource/path/config.xml</li>
</ul>
<p>강사님은 ApplicationContext를 쓰고 접두어를 사용할 것을 추천하였다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ApplicationContext resourceLoader ;</div><div class="line">...</div><div class="line"></div><div class="line">print(resourceLoader.getClass());	// 서블릿웹서버어플리케이션 콘텍스트로 찍힌다,</div><div class="line">Resouce resource = resourceLoader.getResource(&quot;classpath:text.txt&quot;);</div><div class="line">print(resource.getClass())	// ClassPathResource로 찍힌다.</div><div class="line">print(resource.exists());	//true</div></pre></td></tr></table></figure>
<p>prefix를 지워보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">resource = resourceLoader.getResource(&quot;text.txt&quot;);</div><div class="line">print(resource.getClass())	// 서블릿콘텍스트 리소스가 된다.</div><div class="line">print(resource.exists());	//false</div></pre></td></tr></table></figure></p>
<p>서블릿콘텍스트 리소스는 text.txt를 웹어플리케이션 루트 즉 컨텍스트 패스부터 찾게 나서게된다,<br>그런데 스프링부트가 띄워주는 내장형 톰켓에는 컨텍스트 패스가 지정되어있지 않으므로 리소스를 찾을 수 없다</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;지금까지 ApplicationContext는 단순한 빈 팩토리가아니라 여러가지 기능을 하는것을 알아봤었다.&lt;/p&gt;
&lt;h3 id=&quot;Resource-추상화&quot;&gt;&lt;a href=&quot;#Resource-추상화&quot; class=&quot;headerlink&quot; title=&quot;R
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
