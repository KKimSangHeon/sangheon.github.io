<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2018-11-20T00:43:28.993Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>StringBuffer, StringBuilder</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java4/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java4/</id>
    <published>2018-11-20T00:37:37.000Z</published>
    <updated>2018-11-20T00:43:28.993Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String-클래스"><a href="#String-클래스" class="headerlink" title="String 클래스"></a>String 클래스</h3><p>String은 내부의 문자열을 수정할 수 없다. StringBuffer()메소드는 내부의 문자를 대치하는 것이 아니라, 대치된 새로운 문자열을 리턴한다.<br>문자열을 결합하는 + 연산을 많이 사용하면 할수록 그만큼 String 객체의 수가 ㅇ늘어나기 때문에 프로그램 성능을 느리게 한다. 문자열을 변경하는 작업이 많을 경우 StringBuffer, StringBuilder클래스를 사용하는것이 좋다. 이 두 클래스는 내부 버퍼에 문자열을 저장해두고 그 안에서 추가, 수정, 삭제 작업을 할 수 있도록 설계되어 있기 때문이다.<br>StringBuffer는 멀티 스레드 환경에서 사용할 수 있도록 동기화가 적용되어 있어 스레드에 안전하지만 StringBuilder는 단일 스레드 환경에서만 사용하도록 설계되어 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;String-클래스&quot;&gt;&lt;a href=&quot;#String-클래스&quot; class=&quot;headerlink&quot; title=&quot;String 클래스&quot;&gt;&lt;/a&gt;String 클래스&lt;/h3&gt;&lt;p&gt;String은 내부의 문자열을 수정할 수 없다. StringBuffe
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>리플렉션</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java3/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java3/</id>
    <published>2018-11-20T00:37:34.000Z</published>
    <updated>2018-11-20T00:43:01.888Z</updated>
    
    <content type="html"><![CDATA[<h3 id="리플렉션"><a href="#리플렉션" class="headerlink" title="리플렉션"></a>리플렉션</h3><p>java.lang.reflect 패키지에 소속되어있는 메소드들로 getDeclaredConstructors(), getDeclaredFields(), getDeclaredMethods()가 있다.<br>getDeclaredFields(), getDeclaredMethods()는 클래스에 선언된 멤버만 가져오고 상속된 멤버는 가져오지 않는다. 상속된 멤버도 얻고 싶다면 getFields(), getMethods()를 이용해야 한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;리플렉션&quot;&gt;&lt;a href=&quot;#리플렉션&quot; class=&quot;headerlink&quot; title=&quot;리플렉션&quot;&gt;&lt;/a&gt;리플렉션&lt;/h3&gt;&lt;p&gt;java.lang.reflect 패키지에 소속되어있는 메소드들로 getDeclaredConstructors(),
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>익명클래스</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java2/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java2/</id>
    <published>2018-11-20T00:37:31.000Z</published>
    <updated>2018-11-20T00:42:29.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="익명클래스"><a href="#익명클래스" class="headerlink" title="익명클래스"></a>익명클래스</h3><p>익명객체는 이름이 없는 객체를 말한다. 이는 단독으로 생성할 수 없고 클래스를 상속하거나 인터페이스를 구현해야만 생성할 수 있다. UI 이벤트 처리 객체나 스레드 객체를 간편하게 생성할 목적으로 많이 활용된다.<br>익명클래스는 생성자를 선언할 수 없다는 특징이 있으며 클래스가 재사용되지 않을 때 사용하는것이 좋다.<br>익명 자식 객체에 새롭게 정의된 필드와 메소드는 익명자식 객체 내부에서만 사용되고, 외부에서는 필드와 메소드에 접근할 수 없다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"7시 인남"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annoymous</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//필드 초기값으로 대입</span></div><div class="line">	Person field = <span class="keyword">new</span> Person() &#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">( )</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"출근~"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"6시 인남"</span>);</div><div class="line">			work( );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">( )</span> </span>&#123;</div><div class="line">	<span class="comment">//로컬 변수값으로 대입</span></div><div class="line">		Person localVar = <span class="keyword">new</span> Person( ) &#123;</div><div class="line">			<span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">( )</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"산책 고고"</span>);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line">				System.out.println(<span class="string">"7시에 인남"</span>);</div><div class="line">				walk( );</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">		<span class="comment">//로컬변수 사용</span></div><div class="line">		localVar.wake( );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">		person.wake();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위에 정의한 클래스를 활용해보자</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Anoymous anony = <span class="keyword">new</span> Anonymous();</div><div class="line"></div><div class="line">		<span class="comment">//익명객체 필드 사용</span></div><div class="line">		anony.field.wake();</div><div class="line"></div><div class="line">		<span class="comment">//anony.filed.walk(); 는 에러가 발생한다. 이유가 뭘까?</span></div><div class="line">		<span class="comment">//익명자식 객체는 부모 타입 변수에 대입되므로 부모타입에 선언된 것만 사용할 수 있기 때문인다.</span></div><div class="line"></div><div class="line">		<span class="comment">//익명 객체 로컬변수 사용</span></div><div class="line">		anony.method1();</div><div class="line"></div><div class="line">		<span class="comment">//익명 객체 매개값 사용</span></div><div class="line">		anony.method2(</div><div class="line">			<span class="keyword">new</span> Person( ) &#123;</div><div class="line">				<span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">( )</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"공부~"</span>);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">( )</span> </span>&#123;</div><div class="line">					System.out.println(<span class="string">"8시에인남"</span>);</div><div class="line">					study( );</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;익명클래스&quot;&gt;&lt;a href=&quot;#익명클래스&quot; class=&quot;headerlink&quot; title=&quot;익명클래스&quot;&gt;&lt;/a&gt;익명클래스&lt;/h3&gt;&lt;p&gt;익명객체는 이름이 없는 객체를 말한다. 이는 단독으로 생성할 수 없고 클래스를 상속하거나 인터페이스를 구
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>중첩클래스의 접근제한</title>
    <link href="http://KKimSangHeon.github.io/2018/11/20/java1/"/>
    <id>http://KKimSangHeon.github.io/2018/11/20/java1/</id>
    <published>2018-11-20T00:37:20.000Z</published>
    <updated>2018-11-20T00:48:18.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="중첩클래스의-접근-제한"><a href="#중첩클래스의-접근-제한" class="headerlink" title="중첩클래스의 접근 제한"></a>중첩클래스의 접근 제한</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> field1;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">( )</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> field2;</div><div class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">( )</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span> <span class="params">( )</span> </span>&#123;</div><div class="line">			field1 = <span class="number">10</span>;</div><div class="line">			method1( );</div><div class="line"></div><div class="line">			field2 = <span class="number">10</span>;</div><div class="line">			method2( );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">			<span class="comment">//filed1 = 10;	//접근 불가</span></div><div class="line">			<span class="comment">//method1( );	//접근 불가</span></div><div class="line"></div><div class="line">			field2 = <span class="number">10</span>;</div><div class="line">			method2( );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>로컬클래스(메소드 안에 클래스 생성)에서 사용 가능한 것은 final로 선언된 매개 변수와 로컬 변수뿐이다. 자바 7 이전에는 final이 붙어있지 않은 매개변수 혹은 변수를 로컬 클래스안에서 사용하고자 하면 컴파일 에러가 발생하였다. 하지만 자바 8부터는 컴파일 에러가 발생하지 않는다. 즉 내부적으로는 final의 특성(값을 변경할 수 없는)을 갖으며 final의 유무로 로컬클래스 내 복사 위치가 결정된다.(복사위치에 대해선 아래 설명)<br>다음은 7,8버전의 final 유무에 따른 접근관련 이슈이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</div><div class="line">	<span class="comment">//자바7 이전</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> localVariable = <span class="number">1</span>;</div><div class="line">		<span class="comment">//arg = 100;	//불가능</span></div><div class="line">		<span class="comment">//localVariable = 100 //불가능</span></div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">				<span class="keyword">int</span> result = arg + localVariable;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">//자바8 이후</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> localVariable = <span class="number">1</span>;</div><div class="line">		<span class="comment">//arg = 100;	//불가능</span></div><div class="line">		<span class="comment">//localVariable = 100 //불가능</span></div><div class="line">		<span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">				<span class="keyword">int</span> result = arg + localVariable;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>위의 코드와 같이 final이 없더라도 값 변경은 허용하지 않는다는것이다.</p>
<p>※ final의 유무로 로컬클래스 내 복사 위치가 결정된다?<br>먼저 다음과 같은 코드가 있다고 가정하자.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">outMethod</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> var1 = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> var2 = <span class="number">2</span>;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">LocalClass</span> </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">int</span> result = arg1+arg2+var1+var2;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>위의 LocalClass에 복사된 변수를 보면 다음과 같다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalClass</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> arg2 = 매개값;	<span class="comment">//final이 붙지 않아 필드로 복사</span></div><div class="line">	<span class="keyword">int</span> var2 = <span class="number">2</span>;	<span class="comment">//final이 붙지 않아 필드로 복사</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> arg1 = 매개값;	<span class="comment">//final이 붙은것은 로컬 변수로 복사</span></div><div class="line">		<span class="keyword">int</span> var1 = <span class="number">1</span>;	<span class="comment">//final이 붙은것은 로컬 변수로 복사</span></div><div class="line">		<span class="keyword">int</span> result = arg1 + arg2+ var1+ var2;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><br>복사된 영역을 신경쓸 필요는 없으나 알고 있는것이 좋겠다!</p>
<h3 id="중첩클래스에서-바깥-클래스-참조-얻기"><a href="#중첩클래스에서-바깥-클래스-참조-얻기" class="headerlink" title="중첩클래스에서 바깥 클래스 참조 얻기"></a>중첩클래스에서 바깥 클래스 참조 얻기</h3><p>중첩 클래스 내부에서 this키워드를 사용하면 어떻게 될까? 말 그대로 중첩클래스가 this가 되게된다. 그렇다면 바깥 클래스를 가르키기 위해선 어떻게 해야될까.<br>정답은 바깥클래스.this 를 활용하면 된다. 아래를 참고하자</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</div><div class="line">	String field = <span class="string">"Outter-filed"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">( )</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Outter-method"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</div><div class="line">		String field = <span class="string">"Nested-field"</span>;</div><div class="line">		<span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">			System.out.println(<span class="string">"Nested-method"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">( )</span> </span>&#123;</div><div class="line">		System.out.println(<span class="keyword">this</span>.field);		<span class="comment">//중첩객체 참조</span></div><div class="line">		<span class="keyword">this</span>.method( );			<span class="comment">//중첩객체 참조</span></div><div class="line"></div><div class="line">		System.out.println(Outter.<span class="keyword">this</span>.field);	<span class="comment">//바깥객체 참조</span></div><div class="line">		Outter.<span class="keyword">this</span>.method( );		<span class="comment">//바깥객체 참조</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutterExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Outter outter = <span class="keyword">new</span> Outter( );</div><div class="line">		outter.Nested nested = outter.new Nested( );</div><div class="line">		nested.print( );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;중첩클래스의-접근-제한&quot;&gt;&lt;a href=&quot;#중첩클래스의-접근-제한&quot; class=&quot;headerlink&quot; title=&quot;중첩클래스의 접근 제한&quot;&gt;&lt;/a&gt;중첩클래스의 접근 제한&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>비트 빅데이터 전문가 양성과정 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview5/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview5/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-24T00:07:41.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2017년 6월</p>
<p>국비지원 교육을 받기위해 필기시험, 면접을 진행한다. 보통 다른과정은 면접이 없지만 전문가 과정이라 회장님과의 면접이 있다고 들었다.</p>
<h3 id="필기시험"><a href="#필기시험" class="headerlink" title="필기시험"></a>필기시험</h3><p>자바 필기시험을 진행하였으며 난이도는 쉬운편이었다. 오버라이딩, 인터페이스 수준정도의 개념까지만 잘 이해하고 있다면 쉽게 풀 수 있다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>비트컴퓨터 회장님과 지원자들과 면접을 진행한다.<br>많은 지원자를 대상으로 면접을 진행하기 때문에 자신이 진행했던 프로젝트가 뭐가있는지 물어보고 기술력을 판단하신다. 당락은 그 자리에서 결정되는데 합격률이 생각보다 많이 낮았던 것이 인상깊었다.</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>합격하여 국비지원을 받으며 교육을 수강할 수 있었다. 강사님께서 정말 고수라 많은것을 배울 수 있었고 실무에서 인턴경험 이상으로 값진 경험이었다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2017년 6월&lt;/p&gt;
&lt;p&gt;국비지원 교육을 받기위해 필기시험, 면접을 진행한다. 보통 다른과정은 면접이 없지만 전문가 과정이
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="비트" scheme="http://KKimSangHeon.github.io/tags/%EB%B9%84%ED%8A%B8/"/>
    
      <category term="국비지원" scheme="http://KKimSangHeon.github.io/tags/%EA%B5%AD%EB%B9%84%EC%A7%80%EC%9B%90/"/>
    
  </entry>
  
  <entry>
    <title>줌인터넷 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview3/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview3/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-24T00:02:11.674Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 7월</p>
<h3 id="코딩시험"><a href="#코딩시험" class="headerlink" title="코딩시험"></a>코딩시험</h3><p>문제의 난이도는 크게 어렵지 않은수준이었다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접 때 코딩시험 내용을 질문한다는 후기를 많이 봐 와서 작성했던 코드를 철저하게 분석하여 갔지만 관련 내용은 질문하지 않으셨다.<br>면접관 다섯분과 지원자 한명 다대일 방식으로 면접이 진행되었다.</p>
<p>면접 질문은 다음과 같다.</p>
<p>자바8<br>자바 몇까지 써봄<br>프로미스<br>프로토타입<br>http 송신 수신시 헤더<br>di<br>aop<br>쿠키 세션<br>rest api?<br>예외의 종류 Error에 대한질문<br>stringbuffer stringbuilder 차이<br>인터페이스 staitc default<br>resultful api설계해본적<br>암호화기법<br>양방향 단방향</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>정말 많이많이 어려웠던 면접이었던것 같다. 지금까지 봤던 면접 중 가장 어려웠고 많은것을 다시한번 생각해볼 수 있었던 기회였다. 면접관 분들은 친절하셨지만 내 실력이 불친절했던것 같다.   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 7월&lt;/p&gt;
&lt;h3 id=&quot;코딩시험&quot;&gt;&lt;a href=&quot;#코딩시험&quot; class=&quot;headerlink&quot; title=&quot;코
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="줌인터넷" scheme="http://KKimSangHeon.github.io/tags/%EC%A4%8C%EC%9D%B8%ED%84%B0%EB%84%B7/"/>
    
  </entry>
  
  <entry>
    <title>KT SW개발직무 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview4/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview4/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:37:44.676Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 8월 ~ 2018년 10월</p>
<h3 id="채용공고"><a href="#채용공고" class="headerlink" title="채용공고"></a>채용공고</h3><img src="/2018/10/22/interview4/kt.jpg" alt="공고" title="공고">
<h3 id="필기시험"><a href="#필기시험" class="headerlink" title="필기시험"></a>필기시험</h3><p>적성이 아닌 전공, 인성검사로서 진성여중에서 시험을 치뤘었다. 정말 많은사람들이 왔었고 문제의 난이도는 평소 CS에 대한 공부만 충실했다면 무난한 난이도였다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접관 3분과 지원자 1명의 면접형태로서 면접 전 간단한 코딩 테스트를 본다. 푼 문제를 복사하여 면접관분들께 설명드리면서 면접이 시작된다. 이후엔 자기소개서 위주의 프로젝트, 경력관련 질문들이 주를 이뤘다. 여기서 자신감을 갖고 대답했던것이 좋게 작용했던것 같다.</p>
<h3 id="2차면접"><a href="#2차면접" class="headerlink" title="2차면접"></a>2차면접</h3><p>마찬가지로 면접관 3분과 면접을 본다. 정말 많이 떨렸지만 충분히 준비하고 또 준비했기에 떨지않고 잘 대답할 수 있었다. 주로 경력에 관한 질문이 많았으며 인성질문도 있었다.</p>
<h3 id="건강검진"><a href="#건강검진" class="headerlink" title="건강검진"></a>건강검진</h3><p>건강검진 이틀전 술을 마신탓에 약간 걱정은 됐으나 다행히 별 탈 없이 통과할 수 있었다.</p>
<h3 id="합격"><a href="#합격" class="headerlink" title="합격"></a>합격</h3><p>두달간의 긴 여정을 잘 마무리 짓고 최종합격할 수 있었다.<br><img src="/2018/10/22/interview4/kt2.jpg" alt="합격!" title="합격!"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 8월 ~ 2018년 10월&lt;/p&gt;
&lt;h3 id=&quot;채용공고&quot;&gt;&lt;a href=&quot;#채용공고&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="KT" scheme="http://KKimSangHeon.github.io/tags/KT/"/>
    
  </entry>
  
  <entry>
    <title>웍스모바일 인턴 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:25:14.117Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 3월</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접은 한번뿐이었으며 기본적인 전공지식 그리고 경험에 대한 질문이 다수였다.</p>
<p>ide뭐 쓰는지<br>asyn<br>서치<br>정렬되지않은 데이터 접근<br>http https차이<br>블로킹 논블로킹 차이<br>트랜잭션<br>데드락<br>dns<br>설계패턴<br>동기비동기 차이<br>string stringbuffer차이</p>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>합격해서 인턴까지 잘 마무리 지을 수 있었고 그린팩토리에서 일한다는 자부심을 느낄 수 있었다. 좋은분들과 함께 근무했던것 같아 좋았었다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 3월&lt;/p&gt;
&lt;h3 id=&quot;1차면접&quot;&gt;&lt;a href=&quot;#1차면접&quot; class=&quot;headerlink&quot; title=&quot;1
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="웍스모바일" scheme="http://KKimSangHeon.github.io/tags/%EC%9B%8D%EC%8A%A4%EB%AA%A8%EB%B0%94%EC%9D%BC/"/>
    
  </entry>
  
  <entry>
    <title>알지피코리아(요기요,배달통) 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:17:48.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 7월</p>
<p>사실 서류자체는 무난하게 복붙이 가능할 정도로 간단했다. 자소서를 작성하면서 정말 감사했던 기억이 난다.</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>편안한 분위기속에서 면접관 두분과 면접을 진행했다. 난이도가 높은 면접은 아니었던걸로 기억한다.<br>질문내용은 다음과 같다.</p>
<p>인터페이스 추상클래스 차이<br>가장인상깊었던 문제<br>개발하다 막히면 어떻게하나<br>비동기로 처리하는 방법<br>jap hibernate 차이</p>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>평범한 회사였고 자유로운 분위기를 느낄 수 있었다. 면접 후 신세계 상품권과 요기요 할인쿠폰을 잘 이용했다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 7월&lt;/p&gt;
&lt;p&gt;사실 서류자체는 무난하게 복붙이 가능할 정도로 간단했다. 자소서를 작성하면서 정말 감사했던 기억이
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="알지피코리아" scheme="http://KKimSangHeon.github.io/tags/%EC%95%8C%EC%A7%80%ED%94%BC%EC%BD%94%EB%A6%AC%EC%95%84/"/>
    
      <category term="요기요 배달통" scheme="http://KKimSangHeon.github.io/tags/%EC%9A%94%EA%B8%B0%EC%9A%94-%EB%B0%B0%EB%8B%AC%ED%86%B5/"/>
    
  </entry>
  
  <entry>
    <title>알티캐스트 면접</title>
    <link href="http://KKimSangHeon.github.io/2018/10/22/interview2/"/>
    <id>http://KKimSangHeon.github.io/2018/10/22/interview2/</id>
    <published>2018-10-22T03:36:14.000Z</published>
    <updated>2018-10-23T23:25:27.959Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2018년 6월</p>
<h3 id="1차면접"><a href="#1차면접" class="headerlink" title="1차면접"></a>1차면접</h3><p>면접관 두분과 지원자 두명 다대다 면접으로 진행된다.<br>경력에 대한 질문, 프로젝트에 대한 질문이 주를 이루며 자기소개서 내용이 거짓이 아니라면 충분히 대답이 가능한 수준이었다.</p>
<h3 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h3><p>2차면접은 따로 없이 최종 합격통보를 받았다.<br>편안한 분위기속에서 진행되었으며 사옥을 이전한지 얼마되지 않아 깨끗한 느낌을 많이받았다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2018년 6월&lt;/p&gt;
&lt;h3 id=&quot;1차면접&quot;&gt;&lt;a href=&quot;#1차면접&quot; class=&quot;headerlink&quot; title=&quot;1
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/Etc/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="알티캐스트" scheme="http://KKimSangHeon.github.io/tags/%EC%95%8C%ED%8B%B0%EC%BA%90%EC%8A%A4%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>프로토타입 디자인 패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/22/Prototype-Pattern/"/>
    <id>http://KKimSangHeon.github.io/2018/09/22/Prototype-Pattern/</id>
    <published>2018-09-22T06:26:34.000Z</published>
    <updated>2018-10-22T01:47:04.323Z</updated>
    
    <content type="html"><![CDATA[<h3 id="프로토타입-디자인-패턴"><a href="#프로토타입-디자인-패턴" class="headerlink" title="프로토타입 디자인 패턴"></a>프로토타입 디자인 패턴</h3><p>프로토타입 패턴은 객체를 복사품을 만드는것을 의미하는 것이다. 복제된 객체는 호출되는 객체의 현재 상태를 갖고 초기화 되는데 이는 얕은복사 혹은 깊은복사에 기반하여 이뤄진다.</p>
<h4 id="얕은복사-vs-깊은복사"><a href="#얕은복사-vs-깊은복사" class="headerlink" title="얕은복사 vs 깊은복사"></a>얕은복사 vs 깊은복사</h4><p>얕은복사는 단지 참조의 사본을 만든다고 볼 수 있다.<br>깊은복사는 사본을 새로 생성하여 복사대상이 변경되어도 복사한 데이터는 변경되지 않는다.</p>
<figure class="highlight c"><figcaption><span>Prototype</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quotation</span>&#123;</span></div><div class="line">  <span class="keyword">protected</span>:</div><div class="line">    <span class="built_in">string</span> type;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">  <span class="keyword">public</span>:</div><div class="line">      <span class="function"><span class="keyword">virtual</span> Quotation* <span class="title">clone</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">      <span class="function"><span class="built_in">string</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;        </div><div class="line">      &#125;        </div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure>
<p>CarQuotation, BikeQuotation 는 Quotation클래스를 상속한다.<br><figure class="highlight c"><figcaption><span>Prototype</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarQuotation</span>:</span> <span class="keyword">public</span> Quotation &#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">   CarQuotation(<span class="keyword">int</span> number) &#123;</div><div class="line">     type = <span class="string">"Car"</span>;</div><div class="line">     value = number;</div><div class="line">  &#125;</div><div class="line">  <span class="function">Quotation* <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CarQuotation(*<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BikeQuotation</span> :</span> <span class="keyword">public</span> Quotation &#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    BikeQuotation(<span class="keyword">int</span> number) &#123;</div><div class="line">      type = <span class="string">"Bike"</span>;</div><div class="line">      value = number;      </div><div class="line">    &#125;</div><div class="line">    <span class="function">Quotation* <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BikeQuotation(*<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>사용예<br><figure class="highlight c"><figcaption><span>Prototype</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">QuotationFactory</span> &#123;</span></div><div class="line">    <span class="keyword">private</span> :</div><div class="line">      Quotation *carQuotation;</div><div class="line">      Quotation *bikeQuotation;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> :</div><div class="line">      QuotationFacory() &#123;</div><div class="line">        carQuotation = <span class="keyword">new</span> CarQuotation(<span class="number">10</span>);</div><div class="line">        bikeQuotation = <span class="keyword">new</span> BikeQuotation(<span class="number">20</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ~QuotationFactory() &#123;</div><div class="line">        <span class="keyword">delete</span> bikeQuotation;</div><div class="line">        <span class="keyword">delete</span> carQuotation;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function">Quotation* <span class="title">createQuotation</span><span class="params">(<span class="keyword">int</span> typeId)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>( typeID ==<span class="number">1</span> )</div><div class="line">          <span class="keyword">return</span> carQuotation-&gt;clone();</div><div class="line">        <span class="keyword">else</span></div><div class="line">          <span class="keyword">return</span> bikeQuotation-&gt;clone();</div><div class="line"></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  QuotationFacory* qf = <span class="keyword">new</span> QuotationFactory();</div><div class="line"></div><div class="line">  Quotation* q;</div><div class="line">  q = qf-&gt;createQuotation(<span class="number">1</span>);</div><div class="line">  <span class="keyword">delete</span> q;</div><div class="line"></div><div class="line">  q = qf-&gt;createQuotation(<span class="number">2</span>);</div><div class="line">  <span class="keyword">delete</span> q;</div><div class="line">  <span class="keyword">delete</span> qf;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>프로토타입 패턴에서 복사한다는 것이 무슨뜻인지 이해가 잘 안됐지만 이젠 이해가 간다. 미리 특정형태(프로토타입)을 만들어 놓고 팩토리패턴으로 호출할 때 그 프로토타입을 반환하여 활용할 수 있도록 하는 패턴인것이다.</p>
<h4 id="자바에서의-프로토타입-패턴"><a href="#자바에서의-프로토타입-패턴" class="headerlink" title="자바에서의 프로토타입 패턴"></a>자바에서의 프로토타입 패턴</h4><p>C++같은 경우엔 위와같이 코드를 작성해야 되지만 Java의 경우 최상위 클래스 Object가 clone() 메소드가 정의되어 있으므로 이를 오버라이딩해서 활용하면 된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;프로토타입-디자인-패턴&quot;&gt;&lt;a href=&quot;#프로토타입-디자인-패턴&quot; class=&quot;headerlink&quot; title=&quot;프로토타입 디자인 패턴&quot;&gt;&lt;/a&gt;프로토타입 디자인 패턴&lt;/h3&gt;&lt;p&gt;프로토타입 패턴은 객체를 복사품을 만드는것을 의미하는 
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>팩토리 메서드 디자인 패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/22/factory-method/"/>
    <id>http://KKimSangHeon.github.io/2018/09/22/factory-method/</id>
    <published>2018-09-22T04:25:51.000Z</published>
    <updated>2018-09-27T17:40:56.718Z</updated>
    
    <content type="html"><![CDATA[<h3 id="팩토리-메서드-패턴"><a href="#팩토리-메서드-패턴" class="headerlink" title="팩토리 메서드 패턴"></a>팩토리 메서드 패턴</h3><p>공장처럼 팩토리 메서드의 일은 객체를 생성하는것이다. 이는 생성패턴으로 클래스들 중 하나의 객체를 인스턴스화 하는데 사용된다. 생성자에 비해 많은장점을 갖으며 상황에 따라 생성자 대신 혹은 기존의 생성자에 덧붙여 제공하는것이 좋다.</p>
<figure class="highlight c"><figcaption><span>Factory</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 팩토리 메서드 패턴으로 인스턴스화될 형으로 제공될 기본 클래스</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span></div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">petSound</span><span class="params">()</span> </span>= <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 팩토리 메서드 패턴에 의해 인스턴스를 얻게 될 첫 번째 파생 클래스</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet&#123;</div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">petSound</span><span class="params">( )</span> </span>&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Bow Bow..."</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 팩토리 메서드 패턴에 의해 인스턴스를 얻게 될 두번째 파생 클래스</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span> <span class="keyword">public</span> Pet &#123;</div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">petSound</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="built_in">cout</span>&lt;&lt; <span class="string">"Meaw Meaw..."</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 로직에 기반해서 객체들을 인스턴스화하는 팩토리 메서드 패턴 구현</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PetFactory</span> &#123;</span></div><div class="line">  <span class="keyword">public</span> :</div><div class="line">    <span class="function">Pet* <span class="title">getPet</span><span class="params">(<span class="keyword">int</span> petType)</span> </span>&#123;</div><div class="line">      Pet pet = <span class="literal">NULL</span>;</div><div class="line">      <span class="comment">// 비즈니스 로직에 기반한 객체의 인스턴스화</span></div><div class="line">      <span class="keyword">if</span> (petType == <span class="number">1</span>)</div><div class="line">          pet = <span class="keyword">new</span> Dog();</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(petType ==<span class="number">2</span>)</div><div class="line">          pet = <span class="keyword">new</span> Cat();</div><div class="line"></div><div class="line">      <span class="keyword">return</span> pet;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>다음은 생성한 팩토리메소드를 활용하여 인스턴스를 생성하는 방식이다.</p>
<figure class="highlight c"><figcaption><span>Factory</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  PetFactory *PetFactory = <span class="keyword">new</span> PetFactory();</div><div class="line"></div><div class="line">  Pet pet = petFactory-&gt;getPet(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="built_in">cout</span>&lt;&lt; <span class="string">"Pet Sound"</span>;</div><div class="line">  pet-&gt;petSound();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;팩토리-메서드-패턴&quot;&gt;&lt;a href=&quot;#팩토리-메서드-패턴&quot; class=&quot;headerlink&quot; title=&quot;팩토리 메서드 패턴&quot;&gt;&lt;/a&gt;팩토리 메서드 패턴&lt;/h3&gt;&lt;p&gt;공장처럼 팩토리 메서드의 일은 객체를 생성하는것이다. 이는 생성패턴으
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>제주도 여행</title>
    <link href="http://KKimSangHeon.github.io/2018/09/18/travel/"/>
    <id>http://KKimSangHeon.github.io/2018/09/18/travel/</id>
    <published>2018-09-18T08:18:54.000Z</published>
    <updated>2018-09-21T10:59:58.254Z</updated>
    
    <content type="html"><![CDATA[<h3 id="9-13-9-17-제주도-여행"><a href="#9-13-9-17-제주도-여행" class="headerlink" title="9.13 ~ 9.17 제주도 여행"></a>9.13 ~ 9.17 제주도 여행</h3><p>휴식을 취하고자 웅상 파트너인 웅형과 제주도를 다녀왔다. 사진을 조금밖에 못찍어 아쉽지만 있는대로 올려본다.</p>
<img src="/2018/09/18/travel/13.jpg" alt="image" title="image">
<p>거의 10여년만에 비행기를 타는거라 비행기를 타기까지 너무 오래걸렸던것 같다. 체크인, 수화물.. 너무 헷갈렸지만 어떻게 어떻게 비행기에 탑승하긴 했다.<br>창가자리에 앉아 밖을 구경하는데 좋긴 좋았던것 같다. 날씨가 좋지 않았던 탓에 흔들렸던것만 빼고는….</p>
<img src="/2018/09/18/travel/1.jpg" alt="image" title="image">
<p>도착 첫날 스즈라는 초밥집에 가서 점식특선을 먹었다. 사진에 보이는것 외에도 호박죽, 야채 샐러드가 나왔는데 맛있었다. 제주도에서 먹은 음식중 Top3안에 들어간다.</p>
<h4 id="사려니숲길"><a href="#사려니숲길" class="headerlink" title="사려니숲길"></a>사려니숲길</h4><p>유명한 숲길이 있대서 방문해봤다. 정말 나무가 많고 조용한 숲이었다. 이쁘기도 많이 이뻣던것 같다.<br><img src="/2018/09/18/travel/2.jpg" alt="image" title="image"><br>카메라를 하늘로 향해 찍어보았다.</p>
<img src="/2018/09/18/travel/3.jpg" alt="image" title="image">
<p>이유는 모르겠는데 많은 돌탑이 있었다. 그중 신기하게 쌓여진 돌탑이 있어 내가 쌓은척을 해봤다.</p>
<img src="/2018/09/18/travel/4.jpg" alt="image" title="image">
<p>웅형이 우연찮게 찍어준 사진이 저렇게 나왔다. 여행하다 만난 사진전공하시는 분도 놀라워 해주셔서 만족스러웠다.</p>
<img src="/2018/09/18/travel/5.jpg" alt="image" title="image">
<p>둘째날 묵은 빨간지붕게스트하우스라는 곳인데 3개월된 강아지가 정말 귀여웠다. 가만히 있는 사진을 찍기가 힘들정도로 활발했던것 같다. 다음에 또 제주도를 간다면 한번 더 방문해보고 싶다.</p>
<img src="/2018/09/18/travel/9.jpg" alt="image" title="image">
<p>산굼부리라는 곳을 갔는데 비가 올듯 말듯 한 날씨였다. 구름또한 반은 어둡고 반은 밝은걸 느낄 수 있다.</p>
<h4 id="우도"><a href="#우도" class="headerlink" title="우도"></a>우도</h4><p>여행을 하며 만난 사진전공하시는 분과 함께 우도를 갔다. 나는 전기자전거를 탔고 면허가 있는 두 사람은 2인오토바이 비슷한걸 빌렸다.<br><img src="/2018/09/18/travel/88.jpg" alt="image" title="image"><br>우도가는 배를 타기 전 기다리는 중..</p>
<img src="/2018/09/18/travel/7.jpg" alt="image" title="image">
<p>혹시 비가 올까 걱정이 되는 날씨였다.</p>
<img src="/2018/09/18/travel/8.jpg" alt="image" title="image">
<p>우도에 도착할때 쯤 하늘이 맑아지기 시작했다.</p>
<img src="/2018/09/18/travel/10.jpg" alt="image" title="image">
<p>사진을 전공하시는 분이 찍어주신 사진이다. 사진알못이라 잘은 모르겠지만 뭔가 다른거같긴하다. 전공자라 다르긴한거같다.</p>
<h4 id="넥슨-컴퓨터방물관"><a href="#넥슨-컴퓨터방물관" class="headerlink" title="넥슨 컴퓨터방물관"></a>넥슨 컴퓨터방물관</h4><p>그래도 개발잔데… 라며 방문해봤던 넥슨 박물관이다.<br>신기한 물건도 많고 체험해볼것도 다양했다. 하지만 많은 초중고등학교의 현장학습과 겹친나머지 제대로 이용해보진 못했던게 아쉽다.<br><img src="/2018/09/18/travel/11.jpg" alt="image" title="image"><br>입구에서부터 넥슨이라는걸 느낄 수 있었다. 사진엔 보이진 않지만 캐릭터 풍선부터 사진찍을만한 요소가 많았지만 비가와서 얼른 들어갔다.</p>
<img src="/2018/09/18/travel/12.jpg" alt="image" title="image">
<p>얼굴을 트래킹하며 표정을 따라하는 여우다.</p>
<h4 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h4><p>정말 많이먹고 좋은사람들을 많이 만날 수 있었던 좋은 여행이었다.<br>날씨도 좋았고 사람도 좋았고 분위기도 좋았다. 아무생각 없이 편히 쉴 수 있었던것같아 좋았다.<br>일상으로 돌아온게 아쉽진 하지만 다음 여행을 기약해야겠다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;9-13-9-17-제주도-여행&quot;&gt;&lt;a href=&quot;#9-13-9-17-제주도-여행&quot; class=&quot;headerlink&quot; title=&quot;9.13 ~ 9.17 제주도 여행&quot;&gt;&lt;/a&gt;9.13 ~ 9.17 제주도 여행&lt;/h3&gt;&lt;p&gt;휴식을 취하고자 웅
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Travel" scheme="http://KKimSangHeon.github.io/categories/About-Me/Travel/"/>
    
    
      <category term="여행" scheme="http://KKimSangHeon.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>Singleton 디자인패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/11/pattern2/"/>
    <id>http://KKimSangHeon.github.io/2018/09/11/pattern2/</id>
    <published>2018-09-11T07:42:21.000Z</published>
    <updated>2018-09-27T19:05:02.359Z</updated>
    
    <content type="html"><![CDATA[<h3 id="싱글톤패턴"><a href="#싱글톤패턴" class="headerlink" title="싱글톤패턴"></a>싱글톤패턴</h3><p>클래스에 대한 오직 하나의 인스턴스 만이 허용되는 패턴이다.<br>이를위해 생성자를 private로 선언하여 외부에서 인스턴스를 생성하는것을 방지한다.<br>싱글톤 패턴을 사용할땐 다중 스레드에 주의해야 한다.</p>
<p>스레드에 안전한 코드는 다음과 같다.</p>
<figure class="highlight java"><figcaption><span>Singleton</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> Singleton* getInstance() &#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="number">0</span>) &#123;</div><div class="line">            Lock lock;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="number">0</span> )&#123;</div><div class="line">              instance = <span class="keyword">new</span> Singleton;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>:</div><div class="line">      Singleton() &#123;&#125;</div><div class="line">      <span class="keyword">static</span> Singleton* instance;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>클래스가 적재되는순간 즉 더 빠르게 인스턴스화를 하기 위해서는 아래와 같이 코드를 작성하면 된다. 이 또한 스레드에 주의해서 작성해야 한다는것을 잊지말자.</p>
<figure class="highlight java"><figcaption><span>Singleton</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">  Singleton() &#123;&#125;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;싱글톤패턴&quot;&gt;&lt;a href=&quot;#싱글톤패턴&quot; class=&quot;headerlink&quot; title=&quot;싱글톤패턴&quot;&gt;&lt;/a&gt;싱글톤패턴&lt;/h3&gt;&lt;p&gt;클래스에 대한 오직 하나의 인스턴스 만이 허용되는 패턴이다.&lt;br&gt;이를위해 생성자를 private로 선언
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>디자인패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/07/pattern1/"/>
    <id>http://KKimSangHeon.github.io/2018/09/07/pattern1/</id>
    <published>2018-09-07T09:31:43.000Z</published>
    <updated>2018-09-27T19:05:00.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="디자인패턴"><a href="#디자인패턴" class="headerlink" title="디자인패턴"></a>디자인패턴</h3><p>소프트웨어 설계에서 공통적으로 발생하는 문제를 다루는 보편적이고 반복해서 사용할 수 있는 방법. 문제를 해결하기 위한 설명이나 템플릿으로 보면 된다.</p>
<h3 id="디자인패턴을-사용할-때-장점"><a href="#디자인패턴을-사용할-때-장점" class="headerlink" title="디자인패턴을 사용할 때 장점"></a>디자인패턴을 사용할 때 장점</h3><p>개발 절차의 속도를 높일 수 있다.<br>재사용 가능한 구조적 개념으로 구성되어 있기 때문에 믿을 수 있다.</p>
<h3 id="디자인-패턴을-사용하기-위한-조건"><a href="#디자인-패턴을-사용하기-위한-조건" class="headerlink" title="디자인 패턴을 사용하기 위한 조건"></a>디자인 패턴을 사용하기 위한 조건</h3><ol>
<li>주어진 문제를 명확, 세밀하게 이해한다.</li>
<li>디자인 패턴이 문제에 일치하는지 다시한번 확인해본다.</li>
<li>다른 패턴들 사이에서 관계성을 찾고 변경해야할 사항을 결정한다.</li>
</ol>
<h3 id="패턴-여러가지의-디자인-패턴은-3가지의-범주로-분류된다"><a href="#패턴-여러가지의-디자인-패턴은-3가지의-범주로-분류된다" class="headerlink" title="패턴 여러가지의 디자인 패턴은 3가지의 범주로 분류된다."></a>패턴 여러가지의 디자인 패턴은 3가지의 범주로 분류된다.</h3><p>범주는 아래와 같다.</p>
<ol>
<li><p>생성패턴 : 객체생성 메커니즘을 다룬다. 객체의 생성을 다루는 객체 생성 패턴, 클래스 인스턴스 생성을 다루는 클래스 생성 패턴으로 분류된다.<br>ex: Factory, Abstract Factory, Builder, Protype, Singleton 패턴.</p>
</li>
<li><p>구조패턴: 객체들과 클래스들이 커다란 구조를 형성하기 위해 결합될 수 있는 방법을 설명한다. 클래스패턴은 상속의 도움을 받아 추상화를 설명하고 어떻게 프로그램에 더 유용한 인터페이스를 제공할 수 있는지 설명하는것이고, 객체 패턴은 객체들이 크고 더 복잡한 구조를 형성하기 위해 연결되고 구성되는지 설명한다.<br>ex: Adapter, Bridge, Composite, Decorator, Flyweight, Proxy 패턴</p>
</li>
<li><p>행위패턴: 객체 사이의 상호 작용과 관련된 것들이다. 이들은 객체간에 공통의 통신 패턴을 파악하고 이러한 패턴을 실현한다.<br>ex: Chain of Responsibility, Command, Interpreter, iterator, Mediator, Memento, Observer, State, Strategy,Template, Vistor 패턴</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;디자인패턴&quot;&gt;&lt;a href=&quot;#디자인패턴&quot; class=&quot;headerlink&quot; title=&quot;디자인패턴&quot;&gt;&lt;/a&gt;디자인패턴&lt;/h3&gt;&lt;p&gt;소프트웨어 설계에서 공통적으로 발생하는 문제를 다루는 보편적이고 반복해서 사용할 수 있는 방법. 문제를 
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>중첩 클래스, 중첩 인터페이스</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java4/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java4/</id>
    <published>2018-09-05T07:08:43.000Z</published>
    <updated>2018-09-05T09:04:56.154Z</updated>
    
    <content type="html"><![CDATA[<p>한 클래스가 여러 클래스와 관계를 갖을 땐 독립적으로 선언하는것이 좋다. 하지만 특정 클래스와 관계를 맺을 땐 내부에 선언하여 불필요한 관계 클래스를 감추고 코드의 복잡성을 감출 수 있게된다.</p>
<h3 id="중첩클래스"><a href="#중첩클래스" class="headerlink" title="중첩클래스"></a>중첩클래스</h3><p>중첩클래스는 크게 두가지로 나뉘는데 다음과 같다.<br>멤버클래스 - 클래스의 멤버로서 선언되는 중첩클래스. 멤버클래스는 static 여부에 따라 인스턴스 멤버클래스, 정적 멤버클래스로 나뉜다. 클래스나 객체가 사용중이면 언제나 재사용 가능.<br>로컬클래스 - 메소드 내부에서 선언되는 중첩클래스. 메소드 실행 시에만 사용되고 종료되면 없어진다.</p>
<h4 id="다음은-인스턴스-멤버-클래스-사용예시이다"><a href="#다음은-인스턴스-멤버-클래스-사용예시이다" class="headerlink" title="다음은 인스턴스 멤버 클래스 사용예시이다."></a>다음은 인스턴스 멤버 클래스 사용예시이다.</h4><figure class="highlight java"><figcaption><span>NestedClass</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</div><div class="line">    B() &#123; &#125;  </div><div class="line">    <span class="keyword">int</span> filed;</div><div class="line">    <span class="comment">//static int filed2;  //static는 안되는데 그 이유를 생각해보자</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mehtod1</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="comment">//static void method2()&#123;&#125; //역시 static은 안된다.</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 사용방벙</span></div><div class="line">A a = <span class="keyword">new</span> A();</div><div class="line">A.B b = a.new B();</div><div class="line">b.field1 = <span class="number">3</span>;</div><div class="line">b.method1();</div></pre></td></tr></table></figure>
<h4 id="다음은-인스턴스-정적-멤버-클래스-사용예시이다"><a href="#다음은-인스턴스-정적-멤버-클래스-사용예시이다" class="headerlink" title="다음은 인스턴스 정적 멤버 클래스 사용예시이다."></a>다음은 인스턴스 정적 멤버 클래스 사용예시이다.</h4><p>static변수에 대한 이해가 필요하다.<br><figure class="highlight java"><figcaption><span>NestedClass</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</div><div class="line">    B() &#123; &#125;  </div><div class="line">    <span class="keyword">int</span> filed;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> filed2;  <span class="comment">//static 가능</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mehtod1</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//static 가능</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.C c = <span class="keyword">new</span> A.C();</div><div class="line">c.file1 = <span class="number">3</span>;</div><div class="line">c.method1();</div><div class="line">A.C.filed2 = <span class="number">3</span>;</div><div class="line">A.C.method2();</div></pre></td></tr></table></figure></p>
<h4 id="다음은-로컬-클래스-사용예시이다"><a href="#다음은-로컬-클래스-사용예시이다" class="headerlink" title="다음은 로컬 클래스 사용예시이다."></a>다음은 로컬 클래스 사용예시이다.</h4><p>주로 비동기 처리를 위해 스레드 객체를 만들 때 사용한다.<br><figure class="highlight java"><figcaption><span>NestedClass</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</div><div class="line">    D() &#123;&#125;</div><div class="line">    <span class="keyword">int</span> filed1;</div><div class="line">    <span class="comment">//static int filed2; //static 안된다.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="comment">//static void method2() &#123;&#125;  //static 안된다.</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line">  D d = <span class="keyword">new</span> D();</div><div class="line">  d.field1 = <span class="number">3</span>;</div><div class="line">  d.method1();</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;한 클래스가 여러 클래스와 관계를 갖을 땐 독립적으로 선언하는것이 좋다. 하지만 특정 클래스와 관계를 맺을 땐 내부에 선언하여 불필요한 관계 클래스를 감추고 코드의 복잡성을 감출 수 있게된다.&lt;/p&gt;
&lt;h3 id=&quot;중첩클래스&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>자바8</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java3/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java3/</id>
    <published>2018-09-04T22:49:23.000Z</published>
    <updated>2018-09-04T23:25:52.655Z</updated>
    
    <content type="html"><![CDATA[<p>자바 개발자 면접을 보며 듣는 질문이 있다.. 자바8의 특징을 아시나요? 자바8에서 추가된 기능은요? 말씀하신 기능에 대해 좀더 자세히 설명해주세요. 그 외적인 부분은 없을까요? 등등 꼬리에 꼬리를 물다보면 항상 바닥을 드러냈던것 같다.<br>사실 자바를 공부하면서 딱히 버전에 대해 신경쓰지 않았던터라 많이 당황스러웠던 질문이었던것 같다.<br>기회가 되면 정리해야지 했는데 나와 비슷한 고민을 했던 분이 계셔서 링크를 남겨놓는다.<br><a href="https://johanneslee.github.io/articles/page7/" target="_blank" rel="external">https://johanneslee.github.io/articles/page7/</a></p>
<p><a href="http://blog.eomdev.com/java/2016/03/30/default-method.html" target="_blank" rel="external">http://blog.eomdev.com/java/2016/03/30/default-method.html</a><br>나 또한 빠른 시일내에 공부해서 게시할 수 있도록 해야겠다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;자바 개발자 면접을 보며 듣는 질문이 있다.. 자바8의 특징을 아시나요? 자바8에서 추가된 기능은요? 말씀하신 기능에 대해 좀더 자세히 설명해주세요. 그 외적인 부분은 없을까요? 등등 꼬리에 꼬리를 물다보면 항상 바닥을 드러냈던것 같다.&lt;br&gt;사
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>인터페이스의 디폴트 메소드</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java2/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java2/</id>
    <published>2018-09-04T22:43:01.000Z</published>
    <updated>2018-09-05T06:48:04.679Z</updated>
    
    <content type="html"><![CDATA[<p>인터페이스의 디폴트 메소드는 자바8부터 나왔다고 한다.. 알아두자.<br>선언은 인터페이스에 하고 사용은 구현객체에서 한다.</p>
<h3 id="왜-이걸-만들었을까"><a href="#왜-이걸-만들었을까" class="headerlink" title="왜 이걸 만들었을까?"></a>왜 이걸 만들었을까?</h3><p>기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서</p>
<h3 id="특징"><a href="#특징" class="headerlink" title="특징?"></a>특징?</h3><p>디폴트 메소드는 정의된 형태이므로 implemets했을 때 해당 메소드의 구현을 강제하지 않는다.</p>
<p>디폴트 메소드는 다음과 같이 정의할 수 있다.<br><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</div><div class="line">      System.out.println(<span class="string">"method2"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//디폴트 메소드</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="디폴트-메소드를-갖는-인터페이스를-인터페이스가-상속했을-때"><a href="#디폴트-메소드를-갖는-인터페이스를-인터페이스가-상속했을-때" class="headerlink" title="디폴트 메소드를 갖는 인터페이스를 인터페이스가 상속했을 때?"></a>디폴트 메소드를 갖는 인터페이스를 인터페이스가 상속했을 때?</h3><p>디폴트 메소드를 처리하기 위해 다음 3가지중 선택가능</p>
<ul>
<li>디폴트 메소드를 단순히 상속만 받는다.</li>
<li>디폴트 메소드를 오버라이딩 해서 내용 변경</li>
<li>디폴트 메소드를 추상메소드로 재선언</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;인터페이스의 디폴트 메소드는 자바8부터 나왔다고 한다.. 알아두자.&lt;br&gt;선언은 인터페이스에 하고 사용은 구현객체에서 한다.&lt;/p&gt;
&lt;h3 id=&quot;왜-이걸-만들었을까&quot;&gt;&lt;a href=&quot;#왜-이걸-만들었을까&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>어노테이션 그리고 리플렉션</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java/</id>
    <published>2018-09-04T21:25:09.000Z</published>
    <updated>2018-11-20T00:43:05.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="어노테이션"><a href="#어노테이션" class="headerlink" title="어노테이션"></a>어노테이션</h3><p>어노테이션은 컴파일 과정과 실행 과정에서 코드를 어떻게 컴파일하고 처리할 것인지를 알려주는 정보이다.<br>@가 붙는 형태로 정의된다.</p>
<p>어노테이션은 다음의 용도로 사용된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">컴파일러에게 문법에러 체크 ex(@Override)</div><div class="line">개발 툴이 코드를 자동 생성할 수 있도록 정보제공</div><div class="line">실행시 특정기능을 실행하도록 정보제공</div></pre></td></tr></table></figure></p>
<h3 id="어노테이션-정의-및-사용법"><a href="#어노테이션-정의-및-사용법" class="headerlink" title="어노테이션 정의 및 사용법"></a>어노테이션 정의 및 사용법</h3><p>어노테이션 정의는 다음과 같이 할 수 있다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SHAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">feature</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위에 정의한 어노테이션을 사용하기 위해서는 다음과 같이 사용할 수 있다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SHAnnotation</span>(feature=<span class="string">"개발자"</span>, age=<span class="number">27</span>);</div><div class="line">혹은</div><div class="line"><span class="meta">@SHAnnotation</span>(feature=<span class="string">"개발자"</span>);</div><div class="line"><span class="comment">//아래의 경우 디폴트로 되어있는 age값을 세팅하지 않았다.</span></div></pre></td></tr></table></figure></p>
<p>어노테이션을 적용할 수 있는 대상은 java.lang.annotation.ElementType에 정의 되어있다.<br>해당 열거형을 보면 아래와 같이 다양하게 존재한다.<br>즉 어노테이션을 적용할 수 있는 대상은 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType TYPE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType FIELD;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType METHOD;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType PARAMETER;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType CONSTRUCTOR;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType LOCAL_VARIABLE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType ANNOTATION_TYPE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType PACKAGE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType TYPE_PARAMETER;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType TYPE_USE;</div></pre></td></tr></table></figure></p>
<p>어노테이션이 적용될 대상을 지정할 땐 @Target를 활용한다.</p>
<figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SHAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">feature</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 적용 대상을 TYPE(클래스, 인터페이스, 열거타입), FILED로 설정하였다.</span></div></pre></td></tr></table></figure>
<p>그럼 아래와 같이 어노테이션 적용이 가능해진다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SHAnnotation</span>(feature=<span class="string">"개발자"</span>, age=<span class="number">27</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@SHAnnotation</span>(feature=<span class="string">"디자이너"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"메소드1"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@SHAnnotation</span>(feature=<span class="string">"기획자"</span>, age=<span class="number">30</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"메소드2"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="어노테이션-유지-정책"><a href="#어노테이션-유지-정책" class="headerlink" title="어노테이션 유지 정책"></a>어노테이션 유지 정책</h3><p>어노테이션은 용도에 따라 어느 범위까지 유지할 것인지 지정 가능하다. 세가지로 나뉘는데 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SOURCE - 소스상에서만 유지</div><div class="line">CLASS - 바이트 코드 까지 유지</div><div class="line">RUNTIME - 바이트 코드까지 유지하며 리플렉션을 이용해 런타임 시 어노테이션 정보를 얻을 수 있다.</div></pre></td></tr></table></figure></p>
<h4 id="리플렉션"><a href="#리플렉션" class="headerlink" title="리플렉션?"></a>리플렉션?</h4><p>위에 리플렉션에 대해 설명하자면 런타임 시에 클래스의 메타 정보를 얻는 기능을 의미한다. 클래스의 필드, 생성자, 메소드, 적용된 어노테이션 등을 런타임 시에 알아낼 수 있다.</p>
<p>다시 돌아와서 어노테이션의 유지는 @Retention으로 지정할 수 있다. 대부분 어노테이션은 런타임시에 유지되도록 하는경우가 많다.<br>다음은 어노테이션이 런타임시에 유지되도록 하는 코드이다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SHAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">feature</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<h3 id="런타임-중-어노테이션-정보-사용"><a href="#런타임-중-어노테이션-정보-사용" class="headerlink" title="런타임 중 어노테이션 정보 사용"></a>런타임 중 어노테이션 정보 사용</h3><p>어노테이션을 만들었으면 사용방법 또한 알아야 할 것이다. 이에 대해 자세히 알아보자<br>클래스에 적용된 어노테이션 정보를 얻으려면 Class 클래스를 이용하면 되지만 필드, 생성자, 메소드에 적용된 어노테이션 정보를 얻으려면 Class 클래스의 메소드를 통해 리플렉션 과정이 필요하다. 이 말이 이해가 안되면 코드를 보고 이해하자.</p>
<p>위 까지 모든 과정을 거쳤으면 아래 실습이 문제없을것이다.</p>
<figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintAnnotation</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		SHAnnotation shAnnotation;</div><div class="line"></div><div class="line">		<span class="comment">// 클래스의 어노테이션 정보 가져오기</span></div><div class="line">		shAnnotation = AnnotationTest.class.getAnnotation(SHAnnotation.class);</div><div class="line">		System.out.println(AnnotationTest.class.getName());</div><div class="line">		System.out.println(shAnnotation.feature());</div><div class="line">		System.out.println();</div><div class="line"></div><div class="line">		<span class="comment">// 리플렉션을 통해 선언된 메소드 정보 가져오기</span></div><div class="line">		Method[] declaredMethods = AnnotationTest.class.getDeclaredMethods();</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(Method method:declaredMethods) &#123;</div><div class="line">			<span class="comment">//SHAnnotation 객체 얻기</span></div><div class="line">			shAnnotation = method.getAnnotation(SHAnnotation.class);</div><div class="line"></div><div class="line">			<span class="comment">//어노테이션이 적용되었는지 체크</span></div><div class="line">			<span class="keyword">if</span>(method.isAnnotationPresent(SHAnnotation.class)) &#123;</div><div class="line">				System.out.println(method.getName());</div><div class="line">				System.out.println(shAnnotation.feature());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">//메소드 호출부</span></div><div class="line">				method.invoke(<span class="keyword">new</span> AnnotationTest());</div><div class="line">				System.out.println();				</div><div class="line">			&#125;<span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">				System.out.println(e.getStackTrace());				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;어노테이션&quot;&gt;&lt;a href=&quot;#어노테이션&quot; class=&quot;headerlink&quot; title=&quot;어노테이션&quot;&gt;&lt;/a&gt;어노테이션&lt;/h3&gt;&lt;p&gt;어노테이션은 컴파일 과정과 실행 과정에서 코드를 어떻게 컴파일하고 처리할 것인지를 알려주는 정보이다.&lt;b
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CS 공부</title>
    <link href="http://KKimSangHeon.github.io/2018/09/04/myStudy/"/>
    <id>http://KKimSangHeon.github.io/2018/09/04/myStudy/</id>
    <published>2018-09-04T12:28:35.000Z</published>
    <updated>2018-09-21T10:38:11.078Z</updated>
    
    <content type="html"><![CDATA[<p>대부분의 자료는 <a href="http://www.comcbt.com/cbt/" target="_blank" rel="external">http://www.comcbt.com/cbt/</a> 의 정보처리기사 필기 문제를 참고하여 작성하였다.</p>
<h2 id="데이터베이스"><a href="#데이터베이스" class="headerlink" title="데이터베이스"></a>데이터베이스</h2><p>기수(Cardinality) : 튜플의 수<br>차수(Degree) : 열의 수</p>
<p>색인 순차 파일은 순차 파일과 직접 파일에서 지원하는 편성 방법이 결합된 형태다.<br>색인 순차 접근 방식 (ISAM, Index Sequential Access Method)<br>색인 순차 파일은 기본영역, 색인 영역, 오버플로 영역으로 구성된다.</p>
<h3 id="병행-제어의-목적"><a href="#병행-제어의-목적" class="headerlink" title="병행 제어의 목적"></a>병행 제어의 목적</h3><ul>
<li>데이터베이스의 공류를 최대화한다.</li>
<li>시스템의 활용도를 최대화한다.</li>
<li>사용자에 대한 응답 시간을 최소화한다.</li>
<li>단위 시간당 트랜잭션 처리 건수를 최대화한다.</li>
<li>데이터베이스의 일관성을 유지한다.<br>[해설작성자 : 출처: <a href="http://androphil.tistory.com/335" target="_blank" rel="external">http://androphil.tistory.com/335</a> [소림사의 홍반장!]]</li>
</ul>
<h3 id="중위표기법-gt-후위표기법"><a href="#중위표기법-gt-후위표기법" class="headerlink" title="중위표기법 - &gt; 후위표기법"></a>중위표기법 - &gt; 후위표기법</h3><p>스택에 모든 연산자를 넣으면서 형님이 아우 위에 올라오면 그대로 넣고 그 역이면 모두 pop</p>
<h3 id="후위표기법계산"><a href="#후위표기법계산" class="headerlink" title="후위표기법계산"></a>후위표기법계산</h3><p>연산자의 앞에 등장하는 두개의 숫자가 피연산자이다.<br>차례대로 앞에서부터 계산해 나가자</p>
<h3 id="관계대수"><a href="#관계대수" class="headerlink" title="관계대수"></a>관계대수</h3><p>1)관계대수<br>-관계형 데이터베이스에서 원하는 정보와 그정보를 검색하기 위해서 ‘어떻게’ 유도하는가를 기술하는 절차적언어(절차 중심)<br>-기존의 릴레이션으로부터 새로운 릴레이션을 생성한다<br>-릴레이션을 처리하기 위해 연산자와 연산 규칙을 제공</p>
<p>연산자 종류 : 순수관계연산자 , 일반집합연산자</p>
<h3 id="관계해석"><a href="#관계해석" class="headerlink" title="관계해석"></a>관계해석</h3><p>2)관계해석<br>-원하는 정보가 ‘무엇’이라는 것만 정의하는 비절차적언어(결과 중심)<br>-질의어 이용한 표현<br>-관계해석으로 표현한식은 관계대수로 표현 가능<br>-프레디킷해석에 기반<br>-관계 데이터 모델 제안자인 코드가 관계 데이터베이스에 적용할수 있도록 설계하여 제안<br>종류 : 튜플관계해석 , 도메인관계해석</p>
<p>출처 - <a href="http://unius.tistory.com/entry/관계대수-vs-관계해석" target="_blank" rel="external">http://unius.tistory.com/entry/관계대수-vs-관계해석</a></p>
<h3 id="카르노맵"><a href="#카르노맵" class="headerlink" title="카르노맵"></a>카르노맵</h3><p>사용되는 알파벳이 4개일 때 블로그와 반대로하자<br><a href="https://m.blog.naver.com/PostView.nhn?blogId=leeyunghuk1&amp;logNo=220958708825&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="external">https://m.blog.naver.com/PostView.nhn?blogId=leeyunghuk1&amp;logNo=220958708825&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F</a></p>
<h3 id="CPU-사용방식"><a href="#CPU-사용방식" class="headerlink" title="CPU 사용방식"></a>CPU 사용방식</h3><p>멀티 프로그래밍: 한대의 CPU로 여러 개의 프로그램을 동시에 처리</p>
<p>분산처리 프로그래밍: 지역적으로 분산된 여러 대 컴퓨터 연결. 작업분담처리<br>일괄처리 프로그래밍: 처리할 데이터를 모았다가 한번에 처리. EX) 급여계산, 공공요금계산<br>리얼타임(실시간처리) 프로그래밍: 처리 데이터 발생시 바로 처리. EX) 좌석예약, 은행업무<br>[해설작성자 : ʕ • ᴥ •メʔ 북극곰사냥꾼]</p>
<h3 id="플립플롭"><a href="#플립플롭" class="headerlink" title="플립플롭"></a>플립플롭</h3><p><a href="http://vision.kongju.ac.kr/DigitalMain/dvlec/textbook/chap08/digital08_2.htm" target="_blank" rel="external">http://vision.kongju.ac.kr/DigitalMain/dvlec/textbook/chap08/digital08_2.htm</a> 참고</p>
<p>JK 는 SR에 11일때 토글만 추가로 지원하는것 같다.</p>
<h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p>4x2 RAM을 이용하여 16x4 메모리를 구성하고자 할 경우에 필요한 4x2 RAM의 수는?<br>8개<br>(4<em>2) </em> 8 = (16*4)<br>[해설작성자 : wg]</p>
<h3 id="문자-데이터-표현"><a href="#문자-데이터-표현" class="headerlink" title="문자 데이터 표현"></a>문자 데이터 표현</h3><p>표준 ASCⅡ 코드는 7비트 사용, 영문 대소문자, 숫자, 문장 부호, 특수 제어 문자 표현<br>3개의 존 비트, 4개의 디지트 비트로 구성</p>
<p>문자데이터의 표현<br>BCD코드 : 6비트 구성(존 2, 숫자 4)<br>ASCII코드 : 7비트 구성(존 3, 숫자 4)<br>EBICIC코드: 8비트 구성(존4, 숫자4)<br>UNICODE: 16비트 구성 - 전 세계의 문자를 표현 할 수 있는 국제 표준 문자 코드<br>[해설작성자 : 석영호]</p>
<h3 id="CPU-스케줄링"><a href="#CPU-스케줄링" class="headerlink" title="CPU 스케줄링"></a>CPU 스케줄링</h3><p><a href="http://raisonde.tistory.com/entry/CPU-스케줄링-알고리즘" target="_blank" rel="external">http://raisonde.tistory.com/entry/CPU-스케줄링-알고리즘</a></p>
<p>비선점형 스케줄링 : FCFS(FIFO), SJF, HRN, 비선점형 우선순위, 기한부<br>SRT 스케줄링은 수행 시간이 가장 작은 작업을 선점형으로 처리합니다.<br>[해설작성자 : 46200]</p>
<h3 id="커널"><a href="#커널" class="headerlink" title="커널"></a>커널</h3><p>커널의 기능은 프로세스 생성, 종료/    기억 장치 할당, 회수/    파일 시스템 관리 등이 있다</p>
<h3 id="유닉스의-i-node"><a href="#유닉스의-i-node" class="headerlink" title="유닉스의 i-node"></a>유닉스의 i-node</h3><p>i-node에 저장되는 정보로는 파일의 소유자에 대한 정보(소유자id, 그룹id), 파일에 대한 정보(크기, 유형, 생성된 시간,링크된 참조 갯수), 시간에 대한 정보(최근 사용시간, 최근 변경시간), 파일 접근 권한, 파일이 저장된 데이터블록 주소가 있다<br>[해설작성자 : 희굴이]</p>
<hr>
<h3 id="삽입정렬"><a href="#삽입정렬" class="headerlink" title="삽입정렬"></a>삽입정렬</h3><p>1~n까지 정렬해 나감 1~2 정렬 12묶음 3정렬 13묶음 4정렬<br>첫 번째 데이터는 정렬이 되어있다고 봄. 그래서 i=0이아닌 1부터 시작.시간복잡도는 O(n^2) 이다.</p>
<h3 id="뷰"><a href="#뷰" class="headerlink" title="뷰"></a>뷰</h3><ol>
<li>가상테이블(물리적으로 구현되는 테이블이 아니다)</li>
<li>시스템 검색은 일반 테이블과 동일</li>
<li>논리적 데이터 독립성을 제공</li>
<li>하나의 뷰를 삭제하면 그 뷰를 기초로 정의된 다른 뷰도 자동으로 삭제</li>
<li>접근 제한을 통한 보안 제공</li>
<li>실제 테이터가 저장되지 않는다.</li>
<li>독자적인 인덱스를 가질 수 없다.</li>
<li>뷰를 이용한 또 다른 뷰의 생성이 가능하다.</li>
<li>필요한 데이터만 뷰로 정의해서 처리하여 사용자의 관리가 용이</li>
<li>뷰는 변경이 안되어 지우고 다시 만들어야 함. &lt;-</li>
</ol>
<h3 id="전위식-후위식"><a href="#전위식-후위식" class="headerlink" title="전위식, 후위식"></a>전위식, 후위식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-/*A+BCDE 를 후위식으로</div></pre></td></tr></table></figure>
<p>쉬운 변환방법 설명<br>1.연산자에 따라 묶는다. (이거 못하시면 이론 다시 ㄱㄱ)<br>( - ( / ( * A ( + B C ) ) D ) E )</p>
<p>2.연산자를 각 괄호 뒤로 뺀다. (중위식으로 할때는 연산자를 문자 사이로 하시면 됩니다.)<br>( ( ( A ( B C ) + ) * D ) / E ) -</p>
<p>3.괄호를 제거한다.<br>A B C + * D / E -</p>
<p>[해설작성자 : 쀼쀼]</p>
<h3 id="관계대수-관계해석"><a href="#관계대수-관계해석" class="headerlink" title="관계대수, 관계해석"></a>관계대수, 관계해석</h3><p>관계대수 : 절차적 언어 / 순수 관계 연산(select, project, join, division)과 일반 집합연산(union, intersection, difference, cartesian product)<br>관계해석 : 비절차적 언어 / Predicate Calculus에 기반을 둠  / 튜플 및 도메인 관계해석<br>[해설작성자 : sdk]</p>
<p>관계대수(릴레이션 조작을 위한 연산의집합.기술적인특성)의 순수관계 연산자</p>
<ul>
<li>릴레이션을 처리하기 위한 연산의 집합으로 피연산자가 릴레이션이고 결과도 릴레이션이다.</li>
<li>Select : 수평적 부분집합. 시그마를 사용</li>
<li>Project : 수직적 부분집합. 파이를 이용</li>
<li>Join</li>
<li>Division : 두 릴레이션 A,B에 대해 릴레이션의 모든 조건을 만족하는 튜플들을 릴레이션 A에서 분리해 내어 프로젝션 함.</li>
</ul>
<h3 id="스레싱"><a href="#스레싱" class="headerlink" title="스레싱"></a>스레싱</h3><p>스레싱(Thrasing)<br>:하나의 프로세스가 작업 수행 과정에서 수행하는 기억장치 접근에서 지나치게 페이지 폴트가 발생하여 프로세스 수행에 소요되는 시간보다 페이지 이동에 소요되는 시간이 더 커지는 현상..<br>오류율이 클수록 스레싱이 많이 발생한 것이고.<br>스래싱으로 인해 전체 시스템의 성능 및 처리율은 저하된다.<br>다중 프로그래밍의 어느 시점을 넘어서면 스레싱의 빈도가 높아진다.<br>[해설작성자 : 김은희]</p>
<p>[추가해설]<br>Thrashing 현상 방지 방법</p>
<ul>
<li>다중 프로그래밍의 정도를 적정수준으로 유지</li>
<li>부족한 자원 증설</li>
<li>일부 프로세스 중단</li>
<li>페이지 부재 빈도 조절</li>
<li>워킹 셋 유지</li>
<li>적정프레임 수 제공<br>[해설작성자 : 네비자동실행 앱 : haewon.tistory.com]</li>
</ul>
<h3 id="메모리-할당기법"><a href="#메모리-할당기법" class="headerlink" title="메모리 할당기법"></a>메모리 할당기법</h3><p>가변분할 할당 : 다중분할 할당의 한 방법으로, 프로그램을 주기억장치에 적재할 때 함수 등 필요한 크기로 영역을 분할하는 기법<br>고정분할 할당 : 다중분할 할당의 한 방법으로, 주기억장치의 사용자 영역을 일정 수의 고정크기로 분할하여 사용하는 기법<br>오버레이 기법 : 프로그램의 크기가 주기억장치보다 클 때, 프로그램을 여러 조각으로 분할한 후 필요한 조각 순서대로 주기억장치에 적재한다. 실행중 주기억장치의 메모리가 부족하면 이미 존재하는 조각에 새로운 조각을 중첩하여 적재한다.<br>[해설작성자 : ck]</p>
<h3 id="프로세서-상태전이"><a href="#프로세서-상태전이" class="headerlink" title="프로세서 상태전이"></a>프로세서 상태전이</h3><p>① dispatch (준비상태→실행상태)<br>준비 상태의 프로세스들 중에서 우선 순위가 가장 높은 프로세스를 선정하여 CPU를 할당함으로써 실행상태로 전환한다.<br>② timerrunout (실행상태→준비상태)<br>CPU의 지정된 할당 시간을 모두 사용한 프로세스는 다른 프로세스를 위해 다시 준비 상태로 되돌아간다.<br>③ block (실행상태→대기상태)<br>실행중인 프로세스가 입출력 명령을 만나면 인터럽트가 발생하여 입출력 전용 프로세서에게 CPU를 양도하고 자신은 대기 상태로 전환한다.<br>④ wake-up (대기상태→준비상태)<br>입출력 완료를 기다리다가 입출력 완료 신호가 들어오면 대기중인 프로세스는 준비 상태로 전환한다.<br>[해설작성자 : ㅁㄴㅇㄹ]</p>
<h3 id="페이지-교체기법"><a href="#페이지-교체기법" class="headerlink" title="페이지 교체기법"></a>페이지 교체기법</h3><p>&lt;문제 해설&gt;<br>NUR (Not Used Recently)</p>
<ul>
<li>최근 사용하지 않은 페이지 교체</li>
<li>최근 사용여부를 확인하기 위해(시간 오버헤드를 줄이기 위해), 각 페이지마다 참조/변형비트 사용</li>
<li>교체순서 : 00 - 01 - 10 - 11 (0 : 참조비트, 1 : 변형비트)<br>[해설작성자 : 비슷한문제 해설에서 따옴]</li>
</ul>
<p>페이지 교체 기법 - 새 데이터를 주기억장치에 등록할 때<br>공간이 부족할 경우 먼저 있던 데이터를 빼고 넣는 행위를 말함.</p>
<p>FIFO - 제일 오래된 데이터 제거<br>LFU - 가장 적게 사용 되었던 데이터 제거<br>LRU,NUR - ‘최근’ 가장 적게 사용되었던 데이터 제거<br>OPT - 앞으로 가장 적게 사용될 것 같은 데이터를 예측하여 제거(신뢰성 떨어짐)</p>
<h3 id="브룩스-법칙"><a href="#브룩스-법칙" class="headerlink" title="브룩스 법칙"></a>브룩스 법칙</h3><p>브룩스(Brooks)의 법칙 : 소프트웨어 개발 일정이 지연된다고 해서 말기에 새로운 인원을 투입하면 작업 적응 기간과 부작용으로 인해 일정은 더욱 지연된다는 법칙이다.<br>[해설작성자 : strawsoojin]</p>
<h3 id="결합도의-약한-순서"><a href="#결합도의-약한-순서" class="headerlink" title="결합도의 약한 순서"></a>결합도의 약한 순서</h3><p>데이터 -&gt; 스템프 -&gt; 제어 -&gt; 공통 -&gt; 컨텐츠 결합도 순서<br>[해설작성자 : 원동민]</p>
<h3 id="전송제어-문자"><a href="#전송제어-문자" class="headerlink" title="전송제어 문자"></a>전송제어 문자</h3><ol>
<li>SOH(Start Of Heding) : 헤딩 시작</li>
<li>STX(Start of Text) : 본문 시작, 전송할 데이터 그룹의 시작</li>
<li>SYN(Synchronous idle) : 동기 문자</li>
<li>DLE(Data Link Escape) : 데이터 투과성을 위해 삽입(전송 제어 문자와 전송 데이터 구분을 위해 사용)<br>[해설작성자 : 실기도 화이팅!]</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;대부분의 자료는 &lt;a href=&quot;http://www.comcbt.com/cbt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.comcbt.com/cbt/&lt;/a&gt; 의 정보처리기사 필기 문제를 참고하여 작성하였다.&lt;/
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
    
  </entry>
  
</feed>
