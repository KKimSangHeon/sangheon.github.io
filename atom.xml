<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2019-04-14T08:46:10.727Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>규칙 17. 계승을 위한 설계와 문서를 갖추거나, 그럴 수 없다면 계승을 금지하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/14/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/04/14/effective/</id>
    <published>2019-04-14T07:39:51.000Z</published>
    <updated>2019-04-14T08:46:10.727Z</updated>
    
    <content type="html"><![CDATA[<h4 id="계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까"><a href="#계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까" class="headerlink" title="계승을 위한 설계와 문서를 갖춘다는것은 무슨의미일까?"></a>계승을 위한 설계와 문서를 갖춘다는것은 무슨의미일까?</h4><p><u>메서드를 재정의 하면 어떤일이 생기는 지 문서에 잘 남겨야 한다. 즉 재정의 가능 메소드가 내부적으로 어떻게 동작하는지 문서에 남기라는 것이다.</u> public, protected로 선언된 모든 메서드와 생성자에 대해 어떤 재정의 가능 메서드를 어떤 순서로 호출하는지 호출결과는 어떤 영향을 미치는지 남기라는 것이다.<br>예를들어 후면 스레드가 호출할 수도 있고 static 초기화 구문 안에서 호출할 수도 있다. 관습적으로는 재정의 가능 메서드를 어떤식으로 호출하는지 주석 마지막에 명시한다.</p>
<h4 id="좋은-API-문서는-메서드가-하는-일이-무엇인지-명시하지-어떻게-하는지-명시하면-안되지-않아"><a href="#좋은-API-문서는-메서드가-하는-일이-무엇인지-명시하지-어떻게-하는지-명시하면-안되지-않아" class="headerlink" title="좋은 API 문서는 메서드가 하는 일이 무엇인지 명시하지 어떻게 하는지 명시하면 안되지 않아?"></a>좋은 API 문서는 메서드가 하는 일이 무엇인지 명시하지 어떻게 하는지 명시하면 안되지 않아?</h4><p>그렇다. 이는 맞는말이다. 계승이 캡슐화 원칙을 침해하기 때문에 발생하는 결과로 볼 수 있다. 문서만 제대로 썼다고 계승에 적합한 설계가 되지는 않는다. 너무 애쓰지 않고도 효율적인 하위클래스를 정의하기 위해서는 <u>클래스 내부 동작에 개입할 수 있는 훅을 신중하게 고른 protected 메서드 형태로 제공해야 한다.</u></p>
<h4 id="그렇다면-클래스를-설계할-때-protected로-선언할-멤버는-어떻게-정해"><a href="#그렇다면-클래스를-설계할-때-protected로-선언할-멤버는-어떻게-정해" class="headerlink" title="그렇다면 클래스를 설계할 때 protected로 선언할 멤버는 어떻게 정해?"></a>그렇다면 클래스를 설계할 때 protected로 선언할 멤버는 어떻게 정해?</h4><p>딱히 정해진 방법은 없다. 생각하고 신중하게 고른 다음 실제로 하위 클래스를 만들어 보면서 테스트하는것이 최선이다. protected 멤버 개수는 가능한 한 줄여야 하는데 구현 세부사항에 대한 일종의 서약 구실을 하기 떄문이다.<br>즉 계승을 위해 설계할 클래스를 테스트할 유일한 방법은 하위 클래스를 직접 만들어 보는것이다. 만일 중요한 멤버를 protected로 선언하는것을 잊었다면 하위클래스에서 고통스러울 수 있다. 반대로 하위 클래스를 몇개 만들어봐도 사용할 일이 없는 protected 멤버는 private로 선언해야 한다.</p>
<h4 id="그렇게-까지-신중하게-정해야하나"><a href="#그렇게-까지-신중하게-정해야하나" class="headerlink" title="그렇게 까지 신중하게 정해야하나?"></a>그렇게 까지 신중하게 정해야하나?</h4><p>널리 사용될 클래스를 계승에 맞게 설계할 때는 문서에 명시한 내부 호출 패턴 뿐 아니라 메서드와 필드를 protected로 선언하는 과정에 함축된 구현 관련 결정들을 영원히 고수해야 한다는 점을 기억해야 한다. 따라서 다음 릴리스에 성능이나 기능을 개선하기 어려워진다.<br>또한 계승용 문서는 API문서를 어지럽힐 수 있다.</p>
<h4 id="계승을-허용하기-위해-따라야-할-제약사항"><a href="#계승을-허용하기-위해-따라야-할-제약사항" class="headerlink" title="계승을 허용하기 위해 따라야 할 제약사항."></a>계승을 허용하기 위해 따라야 할 제약사항.</h4><p>1.생성자는 직접적이건 간접적이건 재정의 가능 메서드를 호출해서는 안된다.<br><code>이유:</code>상위클래스 생성자는 하위클래스의 생성자보다 먼저 실행되므로, 하위클래스에서 재정의한 메서드는 하위클래스 생성가가 실행되기 전엔 호출될 것이다. 재정의한 메서드가 하위 클래스 생성자가 초기화한 결과에 의존할 경우 그 메서드는 원하는대로 실행되지 않을것이기 떄문에.</p>
<p>2.계승용 클래스가 Cloneable과 Serializable 와 같은 인터페이스를 구현하도록 하는것은 바람직하지 않다.<br><code>이유:</code>클래스를 계승할 프로그래머에게 과도한 책임을 지우기 때문이다. 하지만 하위 클래스 프로그래머가 이들 인터페이스를 선택적으로 구현할 수 있도록 하는 특별한 방법들이 있는데, 이런 조치들에 대해서는 규칙 11, 규칙 74에서 설명한다.<br>만약 계승용 클래스가 Cloneable과 Serializable 와 같은 인터페이스를 구현해야 한다면 clone이나 readObject 메서드 안에서 직접적이건 간접적이건 재정의 가능한 메서드를 호출하지 않도록 주의해야 한다.</p>
<p>3.Serializable 인터페이스를 구현하는 계승용 클래스에 readResolve와 writeReplace 메서드가 있다면 priavte가 아닌 protected로 선언해야 한다.<br><code>이유 :</code>private로 선언해 버리면 하위 클래스는 해당 메서드들을 조용히 무시하게 된다. 이것은 계승을 허용하기 위해 구현 세부사항을 클래스 API의 일부로 포함시켜야 하는 사례 가운데 하나다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까&quot;&gt;&lt;a href=&quot;#계승을-위한-설계와-문서를-갖춘다는것은-무슨의미일까&quot; class=&quot;headerlink&quot; title=&quot;계승을 위한 설계와 문서를 갖춘다는것은 무슨의미일까?&quot;&gt;&lt;/a&gt;계
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 16.계승하는 대신 구성하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/07/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/07/effective1/</id>
    <published>2019-04-07T03:51:41.000Z</published>
    <updated>2019-04-14T07:40:36.571Z</updated>
    
    <content type="html"><![CDATA[<p>계승은 코드 재사용을 돕는 강력한 도구지만 항상 최선은 아니다. 계승을 적절히 사용하지 못한 소프트웨어는 깨지기 쉽다. 계승은 상위 클래스와 하위 클래스 구현을 같을 프로그래머가 통제하는 단일 패키지 안에서 사용하면 안전하다. 또한 계승을 고려하여 설계되고 그에 맞는 문서를 갖춘 클래스에 사용하는것도 안전하다. 일반적인 객체 생성 가능 클래스라면 해당클래스가 속한 패키지 밖에서 계승을 시도하는 것은 위험하다.</p>
<h4 id="계승은-캡슐화-원칙을-위반한다"><a href="#계승은-캡슐화-원칙을-위반한다" class="headerlink" title="계승은 캡슐화 원칙을 위반한다."></a>계승은 캡슐화 원칙을 위반한다.</h4><p>하위 클래스가 정상 동작하기 위해서는 상의 클래스의 구현에 의존할수밖에 없다. 상위 클래스는 릴리즈가 계속되면서 바뀔 수 있는데 이때 하위클래스는 망가질 수 있다. 또한 하위클래스는 상위클래스의 변화에 발맞춰 진화해야 한다.</p>
<h4 id="HashSet-를-계승하여-요소가-몇개나-추가되었는지에-대한-코드를-작성한다-가정해보자"><a href="#HashSet-를-계승하여-요소가-몇개나-추가되었는지에-대한-코드를-작성한다-가정해보자" class="headerlink" title="HashSet 를 계승하여 요소가 몇개나 추가되었는지에 대한 코드를 작성한다 가정해보자."></a>HashSet<e> 를 계승하여 요소가 몇개나 추가되었는지에 대한 코드를 작성한다 가정해보자.</e></h4><p>public class InstrumentHashSet<e> extends HashSet<e> {<br>    //요소 삽입횟수<br>    private int addCount = 0;</e></e></p>
<pre><code>public InstrumentedHashSet(){
}

public InstrumentedHashSet(int initCap, float loadFactor) {
    super(initCap, loadFactor);
}

@Override
public boolean add(E e) {
    addCount++;
    return super.add(e);
}

@Override
public boolean addAll(Collection&lt;? extends E&gt; c) {
    addCount+= c.size();
    return super.addAll(c);
}

public int getAddCount() {
    return addCount;
}
</code></pre><p>}<br>위의 코드는 제대로 동작하지 않는다. 가령 다음과같은 코드를 실행한다 해보자.<br>InstrumentedHashSet<string> s = new InstrumentedHashSet<string>();<br>s.addAll(Arrays.asList(“A”,”B”,”C”));</string></string></p>
<p><u>addAll은 3을 반환하는것이 아니라 6을 반환한다.</u></p>
<p>HashSet의 addAll 메소드는 add메서드를 통해 구현되어 있기 때문이다. 이는 HashSet 문서에는 나와있지 않은 내용이다.<br><u>하위클래스에서 재정의한 addAll 메서드를 삭제하거나 addAll메서드가 반복하며 add를 호출하도록 하여 해결할 수 있지만 이는 addAll 메소드가 add 위에서 구현되었다는 사실에 의존적이다. 이 또한 add메서드가 private일 경우 사용할 수 없다.</u><br>또한 <u>상위 클래스에 새로운 메서드가 추가될 경우 하위클래스의 구현을 망가뜨릴 수 있다.</u><br>예를들어 특정 리스트에 데이터를 삽입할 때 “ksh” 라는 문자열이 붙도록 하는 메소드가 어느순간 추가되었을 때 삽입 작업만 호출하는 부모클래스의 메소드만을 호출할 때 ..</p>
<p>즉 InstrumentedHashSet 클래스는 깨지기 쉬운 클래스일수밖에 없다.</p>
<h4 id="구성과-전달을-활용해-위의-문제를-해결하는-방법"><a href="#구성과-전달을-활용해-위의-문제를-해결하는-방법" class="headerlink" title="구성과 전달을 활용해 위의 문제를 해결하는 방법"></a>구성과 전달을 활용해 위의 문제를 해결하는 방법</h4><p>기존 클래스를 계승하는 대신, <u>새로운 클래스에 기존 클래스 객체를 참조하는 privae 필드를 하나 두는것</u>. 이를 구성이라 하며 기존클래스가 새 클래스의 일부가 되는것을 말한다.<br>새로운 클래스에 포함된 각각의 메서드는 기존 클래스에 있는 메서드 가운데 필요한 것을 호출해서 결과를 반환하면 된다. 이러한 구현 기법을 <u>전달(forwarding)이라고 하고 전달 기법을 사용해 구현된 메소드를 전달메서드(forwarding method)라고 부른다</u>.<br>구성기법을 통해 구현된 클래스는 기존 클래스의 구현 세부사항에 종속되지 않기 때문에 견고하다.(기존 클래스에 또다른 메서드가 추가되더라도 새로운 클래스에 영향이 없음)</p>
<p>//계승 대신 구성을 사용하는 포장(wrapper) 클래스<br>public class instrumentedSet<e> extends ForadingSet<e> {<br>    private int addCount = 0;</e></e></p>
<pre><code>public InstrumentedSet(Set&lt;E&gt; s){
    super(s);
}

@Override
public boolean add(E e){
    addCount++;
    return super.add(e);
}

@Override
public boolean addAll(Coolection&lt;? extends E&gt; c){
    addCount += c.size();
    return super.addAll(c);
}

public int getAddCount() {
    return addCount;
}
</code></pre><p>}</p>
<p>//재사용 가능한 전달(forwarding) 클래스<br>public class ForwardingSet<e> implemetns Set<e> {<br>    private final Set<e> s;<br>    public ForwardingSet(Set<e> s) { this.s = s; }</e></e></e></e></p>
<pre><code>public void clear() {s.clear();}
public boolean contains(Object o) {return s.contains(o);}
.....
</code></pre><p>}</p>
<p>InstrumentedSet을 이렇게 설계할 수 있는것은 HashSet이 제공해야 할 기능을 규정하는 Set라는 인터페이스가 있기 때문이다. 이런 설계는 안정적일 뿐 아니라 유연성도 아주 높다.<br>이전의 예제중 계승을 한 것에서는 한 클래스에서만 적용이 가능하고 상위 클래스 생성자마다 별도의 생성자를 구현해야 했다.<br>하지만 포장 클래스 기법을 쓰면 어떤 Set 구현도 원하는대로 수정할 수 있고 이미 있는 생성자도 그대로 사용할 수 있다.</p>
<p>포장클래스의 단점이 별로 없으나 callback프레임워크와 함께 사용하기에는 적합하지 않다. 역호출 프레임워크에서 객체는 포장 객체에 대해서는 모르기 때문에, 자기 자신에 대한참조를 전달할 것이다. 따라서 역호출 과정에서 포장 객체는 제외된다. 이 문제는 SELF문제로 알려져있다.</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>계승은 강령하지만 캡슐화 원칙을 침해하므로 문제를 발생시킬 소지가 있다. 상위, 하위 클래스가 IS-A 관계일 때만 사용하는것이 좋고 그렇지 않을때는 구성과 전달기법을 사용하는것이 좋다. 포장 클래스 구현에 적당한 인터페이스가 있다면 더욱 그렇다.<br>포장 클래스는 하위 클래스보다 견고할 뿐 아니라 더 강력하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;계승은 코드 재사용을 돕는 강력한 도구지만 항상 최선은 아니다. 계승을 적절히 사용하지 못한 소프트웨어는 깨지기 쉽다. 계승은 상위 클래스와 하위 클래스 구현을 같을 프로그래머가 통제하는 단일 패키지 안에서 사용하면 안전하다. 또한 계승을 고려하
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 15.변경 가능성을 최소화하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/06/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/06/effective1/</id>
    <published>2019-04-06T04:39:07.000Z</published>
    <updated>2019-04-06T04:39:52.235Z</updated>
    
    <content type="html"><![CDATA[<p>변경 불가능 클래스는 그 객체를 수정할 수 없는 클래스이다. 객체 내부의 정보는 객체가 생성돌 때 주어진 것이며, 객체가 살아있는 동안 그대로 보존된다.<br>변경불가능 클래스를 만드는 이유는 변경 가능 클래스보다 설계하기 쉽고 구현하기 쉬우며, 사용하기도 쉽다. 오류 가능성도 적고, 더 안전하다.</p>
<h4 id="변경-불가능-클래스가-따라야-할-규칙"><a href="#변경-불가능-클래스가-따라야-할-규칙" class="headerlink" title="변경 불가능 클래스가 따라야 할 규칙"></a>변경 불가능 클래스가 따라야 할 규칙</h4><p>1.객체 상태를 변경하는 메서드를 제공하지 않는다.<br>2.계승(상속)할 수 없도록 한다. 보통 final을 붙인다.<br>3.모든 필드를 final로 선언한다. - 객체에 대한 참조가 동기화 없이 다른 스레드로 전달되어도 안전.<br>4.모든 필드를 private로 선언한다.<br>5.변경 가능 컴포넌트에 대한 독점적 접근권을 보장한다. - 클래스에 포함된 변경가능 객체에 대한 참조를 클라이언트는 획득할 수 없어야한다. 그런 필드는 클라이언트가 제공하는 객체로 초기화해서는 안되고 접근자 또한 그런 필드를 반환해서는 안된다. 따라서 생성자나 접근자, readObject 메서드 안에서는 방어적 복사본을 만들어야 한다.</p>
<h4 id="대부분의-변경-불가능-클래스는-함수형-접근법을-사용한다"><a href="#대부분의-변경-불가능-클래스는-함수형-접근법을-사용한다" class="headerlink" title="대부분의 변경 불가능 클래스는 함수형 접근법을 사용한다."></a>대부분의 변경 불가능 클래스는 함수형 접근법을 사용한다.</h4><p>특정 연산 후 this객체를 변경하는 대신 새로운 객체를 만들어 반환하는것을 함수형 접근법이라 한다. 이르 사용하는 이유는 피연산자를 변경하는 대신 연산을 적용한 결과를 새롭게 만들어 반환하기 때문이다.</p>
<h4 id="함수형-접근법의-장점"><a href="#함수형-접근법의-장점" class="headerlink" title="함수형 접근법의 장점"></a>함수형 접근법의 장점</h4><p>함수형 접근법은 불가능성을 보장하므로 장점이 많다.<br>1.변경불가능 객체는 단순하다. - 생성될 때 부여된 한 가지 상태만 갖는다. 따라서 생성자가 불변식을 확실히 따른다면 해당 객체는 불변식을 절대로 어기지 않게된다.</p>
<h4 id="변경-불가능-객체의-장단점"><a href="#변경-불가능-객체의-장단점" class="headerlink" title="변경 불가능 객체의 장단점"></a>변경 불가능 객체의 장단점</h4><p>1.변경 불가능 객체는 스레드에 안전할수밖에 없다. 어떤 동기화도 필요없으며 여러 스레드가 동시에 사용해도 상태가 훼손될 일이 없다. 그러므로 변경불가능한 객체는 자유롭게 공유할 수 있다.</p>
<p>변경 불가능 클래스는 클라이언트가 기존 객체를 재사용하도록 적극 장려해서 이런 장점을 충분히 살릴 필요가 있다. 그렇게 하는 가장 쉬운 한가지 방법은 자주 사용되는 값을 public static final 상수로 만들어 제공하는 것이다.<br>가령 Complex클래스는(변경 불가능클래스, 필드가 private final이며 생성자를 통해 한번만 초기화되고 setter또한 없다) 아래와 같이 제공될 수 있다.<br>public static final Complex ZERO = new Complex(0,0);</p>
<p>2.자주 사용하는 객체를 캐시하여 이미 있는 객체가 거듭 생성되지 않도록 하는 정적 팩터리를 제공할 수있다. - 기존 객체를 공유하므로 메모리 요구량,GC비용이 줄어든다.<br>3.변경 불가능 객체를 자유롭게 공유할 수 있다는점은 방어적 복사본을 만들 필요가 없다는 뜻이기도 하다. 사실 복사본을 만드는 메소드가 불필요하다.아니 만들면 안된다.(어차피 자기자신과 동일할테니)<br>4.변경 불가능한 객체는 그 내부도 공유할 수 있다. 다른 클래스가 변경불가능 객체내에 있는 배열필드를 사용해도 된다.<br>5.변경 불가능 객체는 다른 객체의 구성요소로도 훌륭하다. - 변경 불가능 객체는 맵의 키나 집합의 원소로 활용하기 좋다. (변하지 않으므로)</p>
<p>단점1.변경 불가능 객체의 유일한 단점은 값마다 별도의 객체를 만들어야 한다는 것이다.<br>이는 단계별로 새로운 객체를 만들고 결국에는 마지막 객체를 제외한 모든 객체를 버리는 연산을 수행해야 하는 경우 성능 문제는 커진다.<br>이를 해결하기 위한 방법은 두가지가 있다.<br>첫 번째 방법은 다단계 연산 가운데 자주 요구되는것을 기본연산으로 제공하는 것이다. (BigInteger클래스는 package-private로 선언된 변경 가능 동료클래스를 사용해 모듈라 멱승같은 연산의 속도를 높인다. 이는 다단계 연산이 어떻게 적용될지 확실하게 예측할 수 있을때 쓴다.)<br>두 번째 방법은 변경 가능한 public 동료 클래스를 제공하는것이다.</p>
<h4 id="변경-불가능-클래스의-두번째-구현방법"><a href="#변경-불가능-클래스의-두번째-구현방법" class="headerlink" title="변경 불가능 클래스의 두번째 구현방법"></a>변경 불가능 클래스의 두번째 구현방법</h4><p>보통은 하위 클래스 정의가 불가능하도록 하기 위해 final로 선언하지만 다른방법도 있다.<br>이는 모든 생성자를 private나 package-private로 선언하고 public 생성자 대신 public 정적 팩터리를 제공하는 것이다.</p>
<h4 id="방어적-복사"><a href="#방어적-복사" class="headerlink" title="방어적 복사?"></a>방어적 복사?</h4><p>BigInteger, BigDecimal은 클래스가 만들어질 당시 변경 불가능 클래스를 final로 선언해야 한다는 사실을 이해하지 못했기 때문에 final로 되어있지 않다. 즉 상속을 할 경우 해당 클래스는 변경이 가능할 수도 있다.<br>만일 신뢰할 수 없는 클라이언트가 전달한 BigInteger나 BigDecimal 인자의 변경 불가능성에 보안이 좌우되는 클래스를 작성할 때는 전달된 인자가 BigInteger나 BigDecimal의 하위 클래스가 아니라 진짜 BigInteger나 BigDecimal 클래스 인지 확인해야 한다. 만일 하위 클래스 객체라면 해당 객체가 변경 가능한 객체일지도 모른다는 가정하에 방어적복사를 시행해야 한다.<br>public static BigInteger safeInstace(BigInteger val) {<br>    if(val.getClass() !=BigInteger.class)<br>        return new BigInteger(val.toByteArray());<br>    return val;<br>}</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>변경 가능한 클래스로 만들 타당한 이유가 없다면 변경 불가능 클래스로 만들어라.<br>변경 불가능한 클래스로 만들 수 없다면, 변경 가능성을 최대한 제한하라.</p>
<p>특별한 이유가 없다면 생성자 이외의 public 초기화 메서드나 정적 팩터리 메서드를 제공하지 마라.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;변경 불가능 클래스는 그 객체를 수정할 수 없는 클래스이다. 객체 내부의 정보는 객체가 생성돌 때 주어진 것이며, 객체가 살아있는 동안 그대로 보존된다.&lt;br&gt;변경불가능 클래스를 만드는 이유는 변경 가능 클래스보다 설계하기 쉽고 구현하기 쉬우며,
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 14. public 클래스 안에는 public 필드를 두지 말고 접근자 메서드를 사용하라.</title>
    <link href="http://KKimSangHeon.github.io/2019/04/06/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/04/06/effective/</id>
    <published>2019-04-06T04:37:42.000Z</published>
    <updated>2019-04-06T04:39:34.598Z</updated>
    
    <content type="html"><![CDATA[<p>class Point {<br>    public double x;<br>    public double y;<br>}<br>데이터 필드를 직접 조작할 수 있어서 캡슐화의 이점을 누릴 수 없다. API를 변경하지 않고서는 내부 표현을 변경할 수 없고, 불변식도 강제할 수 없고, 필드를 사용하는 순간에 어떤 동작이 실행되도록 만들수도 없다. <u>이는 private 필드와 public 접근자 메서드로 바꿔야 한다.</u></p>
<p>public 클래스의 데이터 필드를 공개하게 되면, 그 내부 표현을 변경할 수 없게 된다. 변경하면 이미 작성된 클라이언트 코드를 깨뜨리게 되게 때문이다. 하지만 package-private 클래스나 priavte 중첩 클래스는 데이터 필드를 공개하더라도 잘못이라 말할 수 없다.</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>public 클래스는 변경 가능 필드를 외부로 공개하면 안된다. 변경 불가능 필드인 경우에는 외부로 공개하더라도 많이 위험하진 않지만, 그럴 필요가 있을까? package-private나 private로 선언된 중첩 클래스의 필드는 그 변경 가능 여부와는 상관없이 외부로 공개하는것이 바람직할 때도 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;class Point {&lt;br&gt;    public double x;&lt;br&gt;    public double y;&lt;br&gt;}&lt;br&gt;데이터 필드를 직접 조작할 수 있어서 캡슐화의 이점을 누릴 수 없다. API를 변경하지 않고서는 내부 표현을 변경할 수 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 13. 클래스와 멤버의 접근 권한은 최소화하라</title>
    <link href="http://KKimSangHeon.github.io/2019/04/04/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/04/04/effective/</id>
    <published>2019-04-04T13:05:19.000Z</published>
    <updated>2019-04-04T13:05:48.224Z</updated>
    
    <content type="html"><![CDATA[<h4 id="정보은닉-캡슐화"><a href="#정보은닉-캡슐화" class="headerlink" title="정보은닉,캡슐화"></a>정보은닉,캡슐화</h4><p>잘 설계된 모듈과 그렇지 못한 모듈을 구분짓는 중요한 속성은 세부사항을 구현사항을 다른 모듈에 잘 감추느냐의 여부이다. 잘 설계된 모듈은 구현 세부사항을 전부 API 뒤쪽에 감춘다. 모듈들은 이를 API를 통해서만 서로 통신하며 각자 내부정으로 무슨짓을 하는지는 신경쓰지 않는다. 이를 바로 <u>정보은닉 또는 캡슐화</u>라고 알려져있다.. 이는 소프트웨어 설계의 기본적인 원칙 가운데 하나이다,.</p>
<h4 id="정보은닉의-중요성"><a href="#정보은닉의-중요성" class="headerlink" title="정보은닉의 중요성"></a>정보은닉의 중요성</h4><p>모듈사이의 의존성을 낮춰서(decouple), 각자 개별적으로 개발하고, 시험하고, 최적화하고, 이해하고, 변경할 수 있도록 한다는 사실에 기초한다. 이를통해 개발속도 향상, 병렬개발 가능, 유지보수 부담 저하, 모듈에 대한 쉬운이해가능, 다른 모듈에 영향없이 디버깅 진행가능이라는 장점이 있다. 또한 정보은닉 원칙이 좋은 성능을 자동적으로 보장하는 것은 안지만 효과적인 성능 튜닝을 가능하게 한다. 시스템이 완성된 다음에 어떤 모듈이 성능문제를 일으키는지 프로파일링 하기 용이하기 때문에,. 또한 이는 소프트웨어의 재사용 가능성을 높이고 대규모 시스템 과정의 위험성도 낮춘다(전체 시스템은 성공적이지 않더라도, 각각의 모듈은 성공적으로 구현 될수 있기 때문에)</p>
<h4 id="각-클래스와-멤버는-가능한-접근-불가능하도록-만들라"><a href="#각-클래스와-멤버는-가능한-접근-불가능하도록-만들라" class="headerlink" title="각 클래스와 멤버는 가능한 접근 불가능하도록 만들라."></a>각 클래스와 멤버는 가능한 접근 불가능하도록 만들라.</h4><p>개발중인 소프트웨어의 정상적인 동작을 보증하는 한도 내에서 가장 낮은 접근 권한을 설정할것.<br>최 상위 레벨 클래스와 인터페이스에 부여할 수 있는 접근 권한은 package-private(default)와 public 두 가지다.<br>최상위 레벨 클래스나 인터페이스에 public를 붙일 경우 해당 개체는 전역적 개체가 되고 public을 붙이지 않으면 해당패키지 안에서만 유효한 겍체가 된다. 최상위 레벨 클래스나 인터페잇는 가능한 package-private로 선언해야한다. 이를 통해 API 일부가 아니라 구현 세부사항에 속하게 되므로 다음번 릴리스에 클라이언트 코드를 깨뜨릴 걱정없이 자유로이 변경하거나 삭제하거나 대체할 수 있게된다. public으로 선언하게 되면 호환성을 보장하기 위해 해당객체를 계속 지원해야 한다.</p>
<p>package-private(default)로 선언된 최상위 레벨 클래스 혹은 인터페이스를 사용하는 클래스의 사용자 클래스가 하나라면 사용자 클래스의 private 중첩 클래스로 만들것을 고려해 보자. 이를 통해 하나의 클래스만이 해당 클래스의 접근 권한을 갖게된다.</p>
<h4 id="protected는-자제하자"><a href="#protected는-자제하자" class="headerlink" title="protected는 자제하자"></a>protected는 자제하자</h4><p>package-private에서 protected로 변경하면 멤버를 사용할수 있는 범위가 엄청 넓어진다. 이는 해당 protected멤버에 대해 해당클래스의 구현 세부사항에 대한 공개적 약속과도 같으며 공개 API로서 영원히 유지되어야 한다.</p>
<h4 id="원래-메서드의-접근보다-낮은-권한을-설정할-수없다"><a href="#원래-메서드의-접근보다-낮은-권한을-설정할-수없다" class="headerlink" title="원래 메서드의  접근보다 낮은 권한을 설정할 수없다."></a>원래 메서드의  접근보다 낮은 권한을 설정할 수없다.</h4><p>원래 안되는것이다. 넓힐순 있어도 좁힐 수는 없다. 이걸 어기면 컴파일 오류가 발생한다. 따라서 인터페이스를 구현하는 클래스를 만들 때는 인터페이스에 속한 모든 메서드를 해당 클래스의 public메서드로 선언해야 한다. 인터페이스의 모든 멤버는 원래 public이기 때문에</p>
<h4 id="겍체-필드는-절대로-public으로-하지마라"><a href="#겍체-필드는-절대로-public으로-하지마라" class="headerlink" title="겍체 필드는 절대로 public으로 하지마라"></a>겍체 필드는 절대로 public으로 하지마라</h4><p>public로 할 경우 메서드를 통해 값을 변경할 수 있게된다. 따라서 그 필드에 관계된 불변식을 강제할 수 없다. 또한 public 필드를 가진 필드는 다중 스레드에 안전하지도 않다.</p>
<h4 id="static으로-선언된-필드"><a href="#static으로-선언된-필드" class="headerlink" title="static으로 선언된 필드"></a>static으로 선언된 필드</h4><p>특정 상수들을 public static final 필드들로 선언하여 공개할 수 있다. 이런 필드들은 반드시 기본 자료형 값들을 갖거나, 변경 불가능한 객체를 참조해야 한다. 변경 불가능한 객체를 public static final 필드가 가르키게 되면 참조대상 객체가 변경될 경우 끔찍한 결과가 초래된다.</p>
<h4 id="public-static-final-배열필드는-정의하지-마라"><a href="#public-static-final-배열필드는-정의하지-마라" class="headerlink" title="public static final 배열필드는 정의하지 마라."></a>public static final 배열필드는 정의하지 마라.</h4><p>길이가 0이 아닌 배열은 언제나 변경 가능하므로 public static final 배열 필드를 두거나, 이를 반환하는 접근자를 정의하면 안된다. 이를 통해 배열 내용을 변경할 수 있게되므로, 보안에 문재가 생긴다.<br>public static final Thing[] VALUES={ … };     //보안 문제를 초래할 수 있는 코드<br>정의 했을경우 해결법.<br>1.public으로 선언했던 배열은 private로 바꾸고 변경이 불가능한 public 리스트를 하나 만든다,<br>public static final Thing[] VALUES={ … };<br>public static final Thing[] values( ){<br>    Collection.unmodifiableList(Arrays.asList(PRIVATE_VALUES));<br>}<br>2.어느 자료형으로 반환해야 클라이언트가 성능을 낼 수 있을까를 생각해보자.</p>
<h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><p>접근권한은 가능한 낮추고 최소한의 public API를 설계하고 다른 모든클래스, 인터페이스, 멤버는 API에서 제외하라. public static final 필드를 제외한 어느 필드도 public 필드로 선언하지 마라. 그리고 public static final 필드가 참조하는 객체는 변경 불가능 객체로 만들어라</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;정보은닉-캡슐화&quot;&gt;&lt;a href=&quot;#정보은닉-캡슐화&quot; class=&quot;headerlink&quot; title=&quot;정보은닉,캡슐화&quot;&gt;&lt;/a&gt;정보은닉,캡슐화&lt;/h4&gt;&lt;p&gt;잘 설계된 모듈과 그렇지 못한 모듈을 구분짓는 중요한 속성은 세부사항을 구현사항을 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙12. Comparable 구현을 고려하라.</title>
    <link href="http://KKimSangHeon.github.io/2019/04/02/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/04/02/effective1/</id>
    <published>2019-04-02T12:09:29.000Z</published>
    <updated>2019-04-02T12:09:45.075Z</updated>
    
    <content type="html"><![CDATA[<p>compareTo 메서드는 Comparable 인터페이스에 포함된 유일한 메서드이다. Object의 equals 메서드와 비슷하지만 단순한 동치성 검사 이외에 순서 비교가 가능하며 좀더 일반적이다.<br>compareTo 메서드의 일반 규약은 equals와 비슷하다.</p>
<h4 id="규약"><a href="#규약" class="headerlink" title="규약"></a>규약</h4><p>규약 <u>객체와 인자로 주어진 객체를 비교한다. 이 객체의 값이 인자로 주어진 객체보다 작으면 음수, 같으면 0, 크면 양수를 반환한다. </u>인자로 전달된 객체의 자료형이 비교불가능한 자료형일 땐 ClassCastException예외를 던진다.</p>
<p>규약1. compareTo를 구현할 때는 모든 x와 y에 대해 sgn(x.compareTo(y))== -sgn(y.compareTo(x))가 만족되도록 해야 한다. (y.compareTo(x)가 예외를 발생시킨다면 x.compareTo(y)도 그래야하고, 그 역도 성립해야 한다.<br>규약2. compareTo를 구현할 때는 추이성이 만족되도록 해야한다. (x.compareTo(y)&gt;0  &amp;&amp; y.compareTo(z) &gt;0 ) 이면 x.compareTo(z)&gt;0 이어야 한다.<br>규약3. 마지막으로 x.compareTo(y) == 0 이면 sgn(x.compareTo(z)) == sgn(y.compareTo(z))의 관계가 모든z에 대해 성립하도록 해야 한다.<br>sgn함수는 음수일때 -1, 0일때 0, 양수일때 1을 반환</p>
<p>또한 강력히 추천되지만 절대적으로 요구되는것이 아닌 조건으로 (x.compareTo(y) ==0) == (x.equals(y))이다. 일반적으로 <u>Compareble 인터페이스를 구현하면서 이 조건을 만족하지 않는 클래스는 반드시 그 사실을 명시해야 한다.</u></p>
<p><u>equals와 다르게 compareTo는 비교대상이 서로다를 경우 ClassCastException을 던지는것이 허용되어있다</u>. 그리고 통상적으로 반드시 이렇게 동작해야 한다. 규약에서 이를 강제하지는 않지만 1.6 에 속한 어떤 클래스도 이런 비교를 하지 않는다!</p>
<p>compareTo 규약을 준수하지 않는 클래스는 TreeSet, TreeMap, Arrays, Collection 같은 비교연산에 기반한 클래스들을 오작동 시킬 수 있다.</p>
<p><u>즉 compareTo 또한 반사성, 대칭성, 추이성을 만족해야 한다. 따라서 compareTo 규약을 만족하면서 클래스를 계승하여 새로운 값 컴포넌트를 추가할 방법은 없다.</u></p>
<p>Compareble 인터페이스를 구현하는 클래스에 값 요소를 추가하고 싶을 때는 원래 클래스를 계승하여 확장하는 대신, 원래 클래스 객체를 필드로 포함하는 새로운 클래스를 만들고, 원래 클래스의 객체를 반환하는 뷰메서드를 추가한다, 이렇게 하면 원하는대로 compareTo 메서드는 원하는 대로 정의할 수 있다.</p>
<h4 id="Comparable-인터페이스"><a href="#Comparable-인터페이스" class="headerlink" title="Comparable 인터페이스"></a>Comparable 인터페이스</h4><p>Comparable 인터페이스는 자료형을 인자로 받는 제네릭 인터페이스이므로 compareTo 메서드의 인자 자료형은 컴파일 시간에 정적으로 결정된다. 따라서 인자로 받은 객체의 자료형을 검사하거나 형 변환할 필요가 없다. 잘못된 자료형 객체를 인자로 넘길경우 컴파일이 불가능하기 호출이 불가능하다. 또한 null이 인자로들어왔을 때는 NullPointerException 예외를 발생시켜야 한다.<br>또한 객체참조 필드는 compareTo 메서드를 재귀적으로 호출하여 비교한다. 비교할 필드가 Comparable을 구현하지 않고 있거나 좀 특이한 순서 관계를 사용해야 할 경우에는 Comparator를 명시적으로 사용할 수 있다. Comparetor는 직접 작성할 수도 있고 아래의 compareTo 메서드에서처럼 이미 있는 Comparator를 사용할 수도 있다(String.CASE_INSENSITIVE_ORDER.compare(…..)같이).</p>
<h4 id="비교"><a href="#비교" class="headerlink" title="비교"></a>비교</h4><p>클래스에 선언된 중요 필드가 여러개인 경우 비교 순서가 중요하다. 가장 중요한 필드부터 차례로 비교해야 한다.<br>compareTo 메서드의 일반 규약이 반환값의 부호면 명시하고 그 크기에 대해서는 언급하고 있지않다. 이점을 이용해<br>public int compare(PhoneNumber pn){<br>    …<br>    return a-b;<br>}<br>와같이 정의하는게 코드를 단순화하고 보다 빠르게 동작하도록 할 수 있다.<br>하지만 i가 큰 int값이고 j가 큰 음수 int 값일 때 (i-j)는 오버플로 되어 음수가 되어버리므로 부적절한 결과가 나온다.치명적 시스템 문제를 발생시키도 있으므로 주의하자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;compareTo 메서드는 Comparable 인터페이스에 포함된 유일한 메서드이다. Object의 equals 메서드와 비슷하지만 단순한 동치성 검사 이외에 순서 비교가 가능하며 좀더 일반적이다.&lt;br&gt;compareTo 메서드의 일반 규약은 e
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 11. clone을 재정의할 떄는 신중하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/31/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/03/31/effective/</id>
    <published>2019-03-31T12:14:01.000Z</published>
    <updated>2019-04-02T12:09:01.959Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Cloneable의-괴상함"><a href="#Cloneable의-괴상함" class="headerlink" title="Cloneable의 괴상함"></a>Cloneable의 괴상함</h4><p>Cloneable은 어떤 객체가 복제를 허용한다는 사실을 알리는 데 쓰려고 고안된 믹스인(mixin) 인터페이스이다. 해당 인터페이스에는 clone 메서드가 없으며 Object의 clone 메서드는 protected로 선언되어 있다.<br>Cloneabledms protected로 선언된 Object의 clone 메소드가 어떻게 동작할지 결정한다. 어떤 클래스가 Clonable을 구현하면 Object의 clone메서드는 해당 객체를 필드 다누이로 복사한 객체를 반환하고 Cloneable을 구현하지 않은 클래스라면 clone 메서드는 CloneNotSupportedException을 던진다.</p>
<h4 id="clone-메서드의-일반-규약"><a href="#clone-메서드의-일반-규약" class="headerlink" title="clone 메서드의 일반 규약"></a>clone 메서드의 일반 규약</h4><p>객체의 복사본을 만들어서 반환한다. 그리고 다음을 따른다.<br>x.clone() != x 의 조건은 참이어야 한다,</p>
<p>x.clone().getClass() == x.getClass()<br>위의 조건은 참이겠지만 반드시 그래야 하는 것은 아니다.</p>
<p>x.clone().equals(x)<br>위의 코드를 실행한 결과도 true가 되겠지만 반드시 그래야하는것은 아니다.</p>
<p>위의 코드를 실행한 결과도 true가 되겠지만 반드시 그래야 하는 것은 아니다.<br>객체를 복사하면 보통 같은 클래스의 새로운 객체가 만들어지는데, 내부 자료 구조까지 복사해야 될 수도 있다. 어떤 생성자도 호출되지 않는다.</p>
<h4 id="규약의-문제점"><a href="#규약의-문제점" class="headerlink" title="규약의 문제점"></a>규약의 문제점</h4><p>어떠한 생성자도 호출되지 않는다는 점은 심하다. 복사본의 내부 객체는 생성자로 만들 수도있다. 클래스가 final로 선언되어 있다면, 생성자로 만든 객체를 반환하도록 clone을 구현할 수도 있다. 하지만 클래스가 final이든 아니든 생성자로 객체를 반환한다면 이 경우 원하는 클래스가 아닐것이다. 즉 clone를 재정의 할 때는 반드시 super.clone을 호출 해 얻은 객체를 반환해야 한다.</p>
<h4 id="제대로된-사용방법"><a href="#제대로된-사용방법" class="headerlink" title="제대로된 사용방법"></a>제대로된 사용방법</h4><p>1.Cloneable인터페이스를 구현하는 클래스는 제대로 동작하는 public clone 메서드를 제공해야 하고 이를 위해서는 상위클래스들이 제대로된 public 또는 protected clone 메서드를 제공해야 한다.</p>
<p>2.clone() 메소드의 반환형은 적절한 형태로 반환하여 라이브러리가 할 수 있는 일을 클라이언트에게 미루지 말자. 즉 라이브러리가 형변환을 하고 클라이언트는 변환하여 사용하지 않도록 하자.</p>
<p>3.복제할 객체가 변경가능 객체에 대한 참조 필드를 가지고 있을경우 deepCopy를 통해 극복하도록 하자.(ex 링크드 리스트의 배열!) 이방법이 싫다면 super.clone 호출 결과로 반환된 객체의 모든 필드를 초기상태로 되돌려 놓은 다음에 상위레벨 메서드를 호출해서 객체상태를 다시 만드는것이다.</p>
<ol>
<li>다중스레드에 안전해야 하는 thread-safe 클래스를 Cloneable로 만들려면, clone 메서드에도 동기화 메커니즘을 적용해야 한다. Object.clone 메서드에는 동기화 메커니즘이 적용되어 있지 않으므로 설사 Object.clone 이 대체로 만족스럽다고 하더라도 super.clone()을 호출하는 동기화된 clone 메서드를 만들어야 할 것이다.</li>
</ol>
<h4 id="clone의-주의사항"><a href="#clone의-주의사항" class="headerlink" title="clone의 주의사항"></a>clone의 주의사항</h4><p>1.clone 메서드는 또 다른 형태의 생성자이다. 원래 객체를 손상시키지 않아야 하며 복사본의 불변식도 만족시켜야 한다.<br>2.clone 메서드는 복사본의 비-final 메서드, 즉 <u>재정의 가능 메서드를 복사 도중에 호출해서는 안된다</u>. 만일 하위 클래스에서 재정의한 메서드를 clone 안에서 호출하면 해당 메서드는 복사본의 상태가 완성되기 전에 호출될 것이며 복사본의 상태를 망가뜨릴것이다.</p>
<h4 id="정리하자면"><a href="#정리하자면" class="headerlink" title="정리하자면"></a>정리하자면</h4><p>계승을 위해 설계된 클래스에 clone을 재정의 할 때 Object.clone을 그대로 흉내내야 한다. protected로 선언하고, CloneNotSupportedException 예외를 던지고, Cloneable 인터페이스는 구현하지 않아야한다. 그래야 Object 클래스를 직접 계승한 클래스가 그렇듯, 하위 클래스가 Cloneable 구현 여부를 마음대로 정할 수 있다.</p>
<p>또한 Cloneable을 구현하는 모든 클래스는 반환값 자료형이 자기 자신은 public clone 메서드를 재정의 해야한다. 또한 처음에 super.clone을 호출해야한다. 그렇게 해서 만들어진 객체를 두고 수정해야 하는 필드를 수정한다.(deepCopy 등을 활용)</p>
<h4 id="반전의-결론"><a href="#반전의-결론" class="headerlink" title="반전의 결론"></a>반전의 결론</h4><p>객체복제를 지원하는 좋은 방법은, 복사 생성자나 복사 팩터리를 제공하는 것이다. 복사 생성자는 단순히 같은 클래스의 객체 하나를 인자로 받는 생성자이다. 복사 팩터리 또한 같은 클래스의 객체 하나를 인자로 받는것이다.<br>이는 Cloneable/clone보다 좋은점이 많다. 언어 외적 객체생성 수단에 의존하지 않으며 , 규약에 충실할 것을 요구하지도 않으며, final 필드 용법과 충돌하지도 않으며, 불필요한 예외를 검사하도록 요구하지도 않으며 형 변환도 필요없다.<br>또한 해당 메서드가 정의된 클래스가 구현하는 인터페이스를 인자로 받을 수 있다.<br>즉 Cloneable은 단점이 너무많다.. 쓰는것을 지양하자.. 배열의 clone메소드는 어쩔수 없이 쓰는경우가 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Cloneable의-괴상함&quot;&gt;&lt;a href=&quot;#Cloneable의-괴상함&quot; class=&quot;headerlink&quot; title=&quot;Cloneable의 괴상함&quot;&gt;&lt;/a&gt;Cloneable의 괴상함&lt;/h4&gt;&lt;p&gt;Cloneable은 어떤 객체가 복제를 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 10. toString은 항상 재정의하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/29/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/03/29/effective/</id>
    <published>2019-03-29T11:30:46.000Z</published>
    <updated>2019-03-31T12:15:46.120Z</updated>
    
    <content type="html"><![CDATA[<p>java.lang.Object 클래스가 toString 메서드를 제공하긴 하지만 이 메서드가 반환하는 문자열은 일반적으로 사용자가 보려는 문자열이 아니다.</p>
<p>toStirng의 일반 규약에는 “모든 하위 클래스는 이 메서드를 재정의함이 바람직하다”라고 나와있다.<br>equals와 hashCode의 일반 규약을 지키는 것보다는 덜 중요하지만 toString을 잘 만들어놓으면 클래스를 좀 더 쾌적하게 사용할 수 있다.<br>toString메서드를 재정의하면 해당객체 뿐만아니라 이를 참조하는 특히 컬렉션 까지 혜택을 본다.</p>
<p>가능하다면 toString 메서드는 객체 내의 중요 정보를 전부 담아 반환해야 한다. 문자열에 담긴 내용은 척 보면 그 의미를 알 수 있도록 하는 것이 제일 바람직하다.<br>하지만 객체가 아주 크거나 문자열로 반환하기 까다로운 상태정보의 경우 전부 문자열로 반환하는것은 바람직하지 않다.</p>
<h3 id="문자열의-형식"><a href="#문자열의-형식" class="headerlink" title="문자열의 형식"></a>문자열의 형식</h3><p>toString의 반환값 즉 문자열의 형식을 지정(ex. xml) 해 둘 경우 프로그래머가 객체를 문자열로, 문자열을 객체로 자유로이 변환할 수 있어 편리하다. 하지만 문자열의 형식을 명시 해 둘 경우 해당클래스가 널리 쓰인다고 가정했을 때 그 형식을 바꾸지 못한다는 단점이 있다. 이를 파싱해서 쓰는 사람도 있을것이고 지속적으로 저장하려는 사람도 있을것이기 때문에 혹시라도 toString이 반환하는 형태를 바꾸게 되면 많은 문제점들이 야기될것을 뻔한일이다.</p>
<p>결국 toString이 반환하는 문자열의 형식을 명시하건 그렇지 않건 간에 어떤 의도인지는 문서에 분명하게 남겨야 한다.<br>또한 toString을 통해 갖고올 수 있는 정보들은 프로그래밍을 통해서도 갖고올 수 있어야한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java.lang.Object 클래스가 toString 메서드를 제공하긴 하지만 이 메서드가 반환하는 문자열은 일반적으로 사용자가 보려는 문자열이 아니다.&lt;/p&gt;
&lt;p&gt;toStirng의 일반 규약에는 “모든 하위 클래스는 이 메서드를 재정의함이 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 9. equals를 재정의 할 때는 반드시 hasCode도 재정의 하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/27/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/03/27/effective/</id>
    <published>2019-03-27T13:57:46.000Z</published>
    <updated>2019-03-27T13:58:47.028Z</updated>
    
    <content type="html"><![CDATA[<p>많은 버그는 hashCode 메서드를 재정의하지 않아서 생긴다. equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야한다. 그렇지 않을경우 HashMap,HashSet 등과 같은 해시기반 컬렉션과 함께 사용하면 오작동하게 된다.</p>
<h4 id="hashCode의-일반적인-규약은-다음과-같다"><a href="#hashCode의-일반적인-규약은-다음과-같다" class="headerlink" title="hashCode의 일반적인 규약은 다음과 같다."></a>hashCode의 일반적인 규약은 다음과 같다.</h4><p>1.응용프로그램 실행 중에 같은 객체의 hashCode를 여러 번 호출하는 경우 equals가 사용하는 정보들이 변경되지 않았다면 언제나 동일한 정수가 반환되어야 한다. 다만 프로그램이 종료되었다 실행되어도 같은 값이 나올 필요는 없다.<br>2.equals(Object) 메서드가 같다고 판정한 두 객체의 hashCode값은 같아야 ㅎ나다,<br>3.equals(Object) 메서드가 다르다고 판정한 두 객체의 hashCode값은 꼭 다를 필요는 없다. 그러나 서로 다른 hashCode 값이 나오면 해시테이블의 성능이 향상될 수 있다.</p>
<h4 id="Object의-hashCode"><a href="#Object의-hashCode" class="headerlink" title="Object의 hashCode"></a>Object의 hashCode</h4><p>equals메서드가 논리적으로 같다고 판단한 두 객체라 해도 Object의 hashCode입장에서 보면 공통점이 없는 객체일 뿐이므로 같은정수를 반환하는것이 아닌 무작위로 선택된것같은 수를 반환한다.</p>
<h4 id="좋은-해시함수"><a href="#좋은-해시함수" class="headerlink" title="좋은 해시함수"></a>좋은 해시함수</h4><p>좋은 해시함수는 다른 객체에서는 다른 해시코드를 반환하는 경향이 있다. 또한 이상적인 해시 함수는 서로 다른 객체들을 모든 가능한 해시 값에 균등하게 배분해야 한다.<br>이상적인 해시함수를 만들기 위해서는 아래의 규약을 따르면된다.<br>책 65p 참고</p>
<h4 id="참고사항"><a href="#참고사항" class="headerlink" title="참고사항"></a>참고사항</h4><ul>
<li>중복필드는 해시코드 계산 과정에서 제외해도 된다.</li>
<li>equals계산에 쓰이지 않는 필드는 반드시 제외해야 한다.</li>
<li>result를 계산할 때 초기값 17은 임의로 잡은값이다. 이를 통해 해시값(c)이 0인것들도 해시값에 영향을 주게 된다.</li>
<li>절차 2.B에 사용된 곱셈은 필드 순서에 따라 계산 결과가 달라지도록 한다. 따라서 유하한 필드가 여러개 있으면 더 좋은 해시값이 나온다.</li>
<li>31은 소수이면서 홀수이기 때문에 선택된 값이다.(전통적으로 소수가 널리 사용된다. 또한 &lt;&lt;5 -i 연산을 통해 더욱 빠른 성능을 낼 수 있다.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;많은 버그는 hashCode 메서드를 재정의하지 않아서 생긴다. equals 메서드를 재정의하는 클래스는 반드시 hashCode 메서드도 재정의 해야한다. 그렇지 않을경우 HashMap,HashSet 등과 같은 해시기반 컬렉션과 함께 사용하면 오
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 8. equals를 재정의 할 때는 일반 규약을 따르라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/26/effectivejava2/"/>
    <id>http://KKimSangHeon.github.io/2019/03/26/effectivejava2/</id>
    <published>2019-03-26T13:21:31.000Z</published>
    <updated>2019-03-27T13:58:49.642Z</updated>
    
    <content type="html"><![CDATA[<p>equals는 생각보다 재정의 하기 어렵다. 실수로 인한 결과는 끔찍해 질 수 있다.<br> 다음중 하나라도 만족할 경우에는 equals를 재정의 하지 않아도 된다.<br>1.각각의 객체가 고유하다.(ex. Thread 객체)<br>2.클래스에 논리적 동일성 검사방법이 있건 없건 상관없다(ex. Random class)<br>3.상위클래스에서 재정의한 equals가 하위 클래스에서 사용하기에도 적당하다.(ex. AbstractSet의 equals 메소드)<br>4.클래스가 private 또는 pakage-private로 선언되었고 , equals 메서드를 호출할 일이 없다.(필자는 실수로 equals를 호출할 수 있는 경우도 있으므로 재정의 해야 한다고 함)</p>
<h4 id="equals를-재정의하는게-바람직한-때"><a href="#equals를-재정의하는게-바람직한-때" class="headerlink" title="equals를 재정의하는게 바람직한 때?"></a>equals를 재정의하는게 바람직한 때?</h4><p>객체 동일성이 아닌 <u>논리적 동일성의 개념을 지원하는 클래스일 때</u>, <u>상위 클래서의 equals가 하위 클래스의 필요를 충족시키지 못할 때</u>이다.<br>대체로 값 클래스는 두 가지 요건을 충족시키지만 개체 통제 기능을 사용할 때, 열거형일때는 equals 메소드를 재정의 할 필요가 없다.</p>
<h4 id="equals-메서드를-재정의-할-때-준수해야-하는-일반규약"><a href="#equals-메서드를-재정의-할-때-준수해야-하는-일반규약" class="headerlink" title="equals 메서드를 재정의 할 때 준수해야 하는 일반규약"></a>equals 메서드를 재정의 할 때 준수해야 하는 일반규약</h4><p>메서드는 동치관계를 구현한다. 다음과 같은 관계를 동치 관계라 한다.<br><code>반사성</code> : null이 아닌 참조 x가 있을 때 x.equals(x)는 true를 반환한다.<br><code>대칭성</code> : null이 아닌 참조 x,y가 있을 때 x.equals(y)는 y.equals(x)가 true일 때만 true를 반환한다.<br><code>추이성</code> : null이 아닌 참조 x,y,z가 있을 때 x.equals(y)가 true이고 y.equals(z)가 true이면 x.equals(z)도 true이다.<br><code>일관성</code> : null이 아닌 참조 x와 y가 있을 때  equals를 통해 비교되는 정보에 아무 변화가 없다면, x.eqauls(y)호출 결과는 항상 같아야 한다.<br>null이 아닌 참조 x에 대해서 x.equals(null)은 항상 false이다.</p>
<p>컬렉션 클래스를 비롯한 상당수 클래스는 전달되는 객체가 equals 규칙을 따른다고 가정하고 구현되어 있으므로 equals 는 잘 구현해야 한다!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;equals는 생각보다 재정의 하기 어렵다. 실수로 인한 결과는 끔찍해 질 수 있다.&lt;br&gt; 다음중 하나라도 만족할 경우에는 equals를 재정의 하지 않아도 된다.&lt;br&gt;1.각각의 객체가 고유하다.(ex. Thread 객체)&lt;br&gt;2.클래스에 
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 7. 종료자 사용을 피하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/26/effectivejava1/"/>
    <id>http://KKimSangHeon.github.io/2019/03/26/effectivejava1/</id>
    <published>2019-03-26T13:21:22.000Z</published>
    <updated>2019-03-26T13:24:26.546Z</updated>
    
    <content type="html"><![CDATA[<p>종료자는 예측 불가능하며 대체로 위험하고 일반적으로 불필요하다.</p>
<h3 id="종료자의-단점-및-주의할-점"><a href="#종료자의-단점-및-주의할-점" class="headerlink" title="종료자의 단점 및 주의할 점"></a>종료자의 단점 및 주의할 점</h3><p>1.C++의 소멸자와는 다른개념이다. 종료자는 즉시 실행되리라는 보장이 전혀 없다. 그러므로 긴급한 작업을 종료자 안에서 처리하면 안된다. 종료자의 실행시점은 GC 알고리즘에 좌우되는데 이는 JVM 구현마다 크게 다르다. 또한 클래스에 종료자를 붙여놓으면 객체 메모리 반환이 지연될 수 있다.<br>2.종료자는 즉시 실행되는것을 보장하지 않기때문에 <u>지속성이 보장되어야 하는 중요상태정보는 종료자로 갱신하면 안된다.</u><br>3.종료자를 사용하면 프로그램 성능이 떨어진다.<br><code>즉 종료자를 사용하지 말고 명시적인 종료메서드를 하나 정의하고 이를 호출해라! 또한 종료여부를 객체안에 private로 보관하라</code><br>명시적 종료의 예로 OutputStream, InputStream의 close 메서드가 있다. 주로 finally안에서 호출하여 예외가 발생해도 실행될 수 있도록 한다,</p>
<h3 id="종료자의-쓰임"><a href="#종료자의-쓰임" class="headerlink" title="종료자의 쓰임"></a>종료자의 쓰임</h3><p>1.명시적 종료메서드 호출을 잊을 경우에 대비하는 안전망으로의 역할</p>
<p>2.네이티브 피어와 연결된 객체를 다룰 때 - 일반 객체가 아니므로 GC가 알 수 없다.</p>
<h3 id="하위클래스에서의-종료자-생성"><a href="#하위클래스에서의-종료자-생성" class="headerlink" title="하위클래스에서의 종료자 생성"></a>하위클래스에서의 종료자 생성</h3><p>하위클래스에서 종료자를 오버라이딩 하면 상위클래스의 종료자를 호출 해 줘야 한다. 하지만 이를 잊어먹고 하지 않는경우 이로인한 문제가 발생한다.<br>이를 방지하기 위해 익명클래스 안에 종료자를 정의하여 사용하는 방법이 좋다. 이를 종료 보호자(finalizer guardian)라 함.<br>종료보호자에 대한 설명: 익명클래스로 finalize를 오버라이딩 하면 해당 스코프를 벗어나면 GC가 finalize를 호출하게 되어 상속받은 하위클래스가 super.finalize를 호출하지 않아도 된다.<br><a href="https://stackoverflow.com/questions/6872857/how-does-a-finalizer-guardian-work-in-java" target="_blank" rel="external">https://stackoverflow.com/questions/6872857/how-does-a-finalizer-guardian-work-in-java</a></p>
<p>즉 네이티브 자원을 종료시키려는것이 아니라면 종료자는 사용하지 말고 종료자를 불가피하게 사용해야할 경우에는 super.finalize()를 호출해라.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;종료자는 예측 불가능하며 대체로 위험하고 일반적으로 불필요하다.&lt;/p&gt;
&lt;h3 id=&quot;종료자의-단점-및-주의할-점&quot;&gt;&lt;a href=&quot;#종료자의-단점-및-주의할-점&quot; class=&quot;headerlink&quot; title=&quot;종료자의 단점 및 주의할 점&quot;&gt;&lt;/
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 6. 유효기간이 지난 객체 참조는 폐기하라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/26/effectivejava/"/>
    <id>http://KKimSangHeon.github.io/2019/03/26/effectivejava/</id>
    <published>2019-03-26T13:19:16.000Z</published>
    <updated>2019-03-26T13:24:23.412Z</updated>
    
    <content type="html"><![CDATA[<p>GC가 메모리 관리를 알아서 해주면 메모리관리의 중요성을 잊게 될 수도 있는데 그러지 말자</p>
<h4 id="만기참조를-없애라"><a href="#만기참조를-없애라" class="headerlink" title="만기참조를 없애라"></a>만기참조를 없애라</h4><p>더이상 참조되지 않는 <u>만기참조</u>의 경우 제거해주지 않으면 의도치 않은 객체 보유문제(실수로 객체 참조를 계속 유지하는 경우 해당 객체만 쓰레기 수진에서 제외되는것이 아니라 그객체를 통해 참조되는 다른 객체들도 쓰레기 수집에서 제외되는것)를 유발할 수 있다.<br>이러한 문제는 <u>쓸일이 없는 참조객체의 경우 null로 만들어 주는것으로 해결 가능하다.</u></p>
<h4 id="null처리에-대한-강박관념은-좋지않다"><a href="#null처리에-대한-강박관념은-좋지않다" class="headerlink" title="null처리에 대한 강박관념은 좋지않다."></a>null처리에 대한 강박관념은 좋지않다.</h4><p>객체 사용이 끝나면 null처리를 해야된다는 강박관념에 사로잡히면 코드를 난잡하게 만들 수 있다. 그러므로 이는 규범이라기 보다는 예외적인 조치가 되어야 한다. 만기참조를 제거하는 가장 좋은 방법은참조가 보관된 변수가 유효범위(scope)를 벗어나게 두는 것이다. 즉 변수를 정의 할 때 유효범위를 좁게 만들면 자연스럽게 해결된다.</p>
<h4 id="메모리-누수가-자주-일어나는곳들"><a href="#메모리-누수가-자주-일어나는곳들" class="headerlink" title="메모리 누수가 자주 일어나는곳들"></a>메모리 누수가 자주 일어나는곳들</h4><p>1.캐시<br>객체 참조를 캐시 안에 넣어놓고 일어버리는 일이 많기 때문.<br><u>WeakHashMap</u>을 가지고 캐시를 구현하면 키에대한 참조가 만기 참조가 되는 순간 캐시안에 보관된 키-값 쌍은 자동으로 삭제된다.</p>
<p>2.리스너 등의 역호출자(Callback)<br>역호출자를 명시적으로 제거하지 않을 경우, 적절한 조치를 취하기 전까지 메모리는 점유된 상태로 남아있게된다. gc가 역호출자를 즉시 처리하게 하려면 역호출자에 대한 약한참조만 저장하는것! WeakHashMap의 키로 저장하는것이 그 예이다.</p>
<h4 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap?"></a>WeakHashMap?</h4><p><a href="http://blog.breakingthat.com/2018/08/26/java-collection-map-weakhashmap/" target="_blank" rel="external">http://blog.breakingthat.com/2018/08/26/java-collection-map-weakhashmap/</a> 참고하자</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GC가 메모리 관리를 알아서 해주면 메모리관리의 중요성을 잊게 될 수도 있는데 그러지 말자&lt;/p&gt;
&lt;h4 id=&quot;만기참조를-없애라&quot;&gt;&lt;a href=&quot;#만기참조를-없애라&quot; class=&quot;headerlink&quot; title=&quot;만기참조를 없애라&quot;&gt;&lt;/a&gt;만
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 5.불필요한 객체는 만들지 말라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/24/effectivejava-1/"/>
    <id>http://KKimSangHeon.github.io/2019/03/24/effectivejava-1/</id>
    <published>2019-03-24T04:06:59.000Z</published>
    <updated>2019-03-24T04:07:38.416Z</updated>
    
    <content type="html"><![CDATA[<p>기능적으로 동일한 객체는 매번 만드는것보다 재사용하는 편이 낫다.<br>가령 String s = new String(“test”);라는 문장을 반복문안에 넣을경우 매번 String 객체가 생성된다.<br>이는 String s = “test”; 로 대체하는것이 낫다. 이는 실행할 때마다 객체를 만드는 대신 동일한 String 객체를 사용하며 같은 JVM안에서는 해당 객체를 재사용하게 된다.<br>생성자와 정적팩터리 메서드를 함께 제공하는 변경 불가능 클래스의 경우 생성자 대신 정적 팩터리 메소드를 이용하면 불필요한 객체 생성을 피할 수 있을 때가 많다. (Boolean(String) 보다는 Boolean.valueOf(String)쪽이 더 바람직하다. 생성자는 호출할 때마다 객체를 만들지만 정적 팩터리 메서드는 그러지 않는다.) 변경 불가능한 객체 뿐 아니라 변경가능한 객체도 재사용할 수 있다.</p>
<p>..<br>public boolean isIn( ){<br>    Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(“GMT”));</p>
<pre><code>gmtCal.set(.....);
Date strart = gmtCal.getTime();

gmaCal.set(...);
Date end = gmtCal.getTime();
...
</code></pre><p>}<br>와 같은 코드가 존재할 때 isIn메서드는 호출될 때 마다 Caendar, TimeZone,Date객체 두개를 쓸데없이 만들어낸다.<br>이는 <code>정적 초기화 블록</code>을 통해 개선하는것이 좋다.</p>
<p>private static final Date START;<br>private static final Date END;</p>
<p>public boolean isIn( ) {<br>    static{<br>        Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone(“GMT”));<br>        gmtCal.set(…..);<br>        START = gmtCal.getTime();</p>
<pre><code>    gmaCal.set(...);
    END = gmtCal.getTime();
}
</code></pre><p>}</p>
<p>이렇게 할 경우 Caendar, TimeZone,Date <u>객체는 클래스가 초기화 될 때 한번만 만들어진다</u>. 이를통해 성능향상, 코드가 명료해진다(START, END가 상수라는것을 한눈에 알 수 있다)</p>
<p>만약 isIn() 메소드가 호출되지 않는다면 쓸데없는 초기화 과정이 진행된것인데 이는 <u>초기화 지연기법</u>을 사용하면 피할 수있다. 즉 isIn() 메서드가 처음 호출될 때 초기화한다. 이는 구현이 복잡해지고 성능을 개선시키기 어려워 질 수 있는상황을 만들수있다,</p>
<p><code>객체를 무작정 만들지 말라는것은 아니고 코드의 명확성, 단순성을 높이고 프로그램의 능력을 향상시킬 수 있을 때 만들라는것!</code><br>객체 풀을 만들어 객체 생성을 피하는 기법 또한 객체생성 비용이 극단적으로 높지않다면 사용하지 말라.(DB접속 할때는 허용) 최신 JVM은 고도로 최적화된 GC를 갖고있으므로 풀보다 월등한 성능을 보여준다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;기능적으로 동일한 객체는 매번 만드는것보다 재사용하는 편이 낫다.&lt;br&gt;가령 String s = new String(“test”);라는 문장을 반복문안에 넣을경우 매번 String 객체가 생성된다.&lt;br&gt;이는 String s = “test”; 로
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 4. 객체 생성을 막을 때는 private 생성자를 사용해라</title>
    <link href="http://KKimSangHeon.github.io/2019/03/24/effectivejava/"/>
    <id>http://KKimSangHeon.github.io/2019/03/24/effectivejava/</id>
    <published>2019-03-24T04:06:27.000Z</published>
    <updated>2019-03-26T13:24:20.405Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>정적 메서드나 필드만 모은 클래스가 필요한 경우는 다음 세가지로 볼 수 있다.<br>1.자바의 기본 자료형 값 또는 배열에 적용되는 메서드를 한군데 모아둘 때.(java.lang.Math, java.lang.Arrays)<br>2.특정 인터페이스를 구현하는 개체를 만드는 팩터리 메서드 등의 정적 메서드를 모아놓을 때(java.util.Collection)<br>3.final 클래스에 적용할 메서드들을 모아놓을 때(상속하여 메서드 추가가 불가능하므로)</p>
<p><code>위의 경우에 객체를 생성하는건 이상하다!.</code><br>하지만 생성자를 생략하면 디폴트 생성자가 만들어진다. 이로인해 자신이 생각도 못한사이에 API에 추가되어 있을 수 있다<br>그렇다고 abstract로 선언하는것도 바보같은일이다. 상속으로 인해 객체 생성이 가능하므로…<br><u>객체생성을 막기위해서는 private 생성자를 생성하자</u><br>이를 통해 하위 클래스 또한 만들 수 없게 할수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###&lt;br&gt;정적 메서드나 필드만 모은 클래스가 필요한 경우는 다음 세가지로 볼 수 있다.&lt;br&gt;1.자바의 기본 자료형 값 또는 배열에 적용되는 메서드를 한군데 모아둘 때.(java.lang.Math, java.lang.Arrays)&lt;br&gt;2.특
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>190323. Write the docs 밋업 참가</title>
    <link href="http://KKimSangHeon.github.io/2019/03/23/writethedocs/"/>
    <id>http://KKimSangHeon.github.io/2019/03/23/writethedocs/</id>
    <published>2019-03-23T05:06:12.000Z</published>
    <updated>2019-03-24T04:22:53.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Write-the-docs"><a href="#Write-the-docs" class="headerlink" title="Write the docs"></a>Write the docs</h3><p>밋업도 열고 구인구지도 하고 문서화에 대한 다양한 이야기를 진행한다.</p>
<h3 id="글쓰는-개발자-모임-글또"><a href="#글쓰는-개발자-모임-글또" class="headerlink" title="글쓰는 개발자 모임, 글또"></a>글쓰는 개발자 모임, 글또</h3><p>변성윤님(쏘카 데이터 그룹 머신러닝 엔지니어)</p>
<p>네이버 블로그를 통해 글을 꾸준히 쓰던 습관 형성<br>까먹는게 싫어서 개발 블로그 시작</p>
<p><code>글또?</code>- 글쓰는 똘아이가 세상을 바꾼다<br>10마넌을 넣어넣고 주니어개발자들 끼리 진행했다. 글을 안쓰면 마넌씩 삭감<br>여러가지의 규칙을 만들어 놓고 진행해나감..(월 2개의 포스팅을 작성, 800자이상 등…)</p>
<p><code>어떤글을올렸나?</code><br>에러가 왜 발생했을까? 해결방안만 올리지 않고 원인을 정리, 프로젝트 진행하는것, 회고(1년 주기로) 등..</p>
<p>13명의 글을 2주마다 피드백을 통해 더 나은 글을 목표로함<br>점검은 오타, 전개바식, 이해 가능성, 가독성, 이미지 품질.</p>
<p>지금까지 낙오자 없이 잘 끝났다!</p>
<p><code>성과</code> : 구성원들의 글쓰기 역량 향상! 높은 충성도! 이직할때 도움(실제로 도움을 받았다고 하심!)! 양질의 글로 개발 생태계에 기여 사람을 만날수 있는 연결고리!<br><code>결론</code> : 글을 쓰는건 쉽지 않지만 함꼐하면 꾸준히 할수 있따! 물론 예치금이 중요하지만 ㅋㅋ</p>
<hr>
<h3 id="기술블로그-생존전략-구글시대의-글쓰기"><a href="#기술블로그-생존전략-구글시대의-글쓰기" class="headerlink" title="기술블로그 생존전략: 구글시대의 글쓰기"></a>기술블로그 생존전략: 구글시대의 글쓰기</h3><p>김대권님(당근마켓 인프라 클라우드 개발)<br>44bits.io 운영 중</p>
<p><code>우리는 왜 글을 쓸까요?</code> 읽히기 위해서!<br><code>사람들을 어떤 경로를 통해 블로그로 접근할까?</code><br>Social, Organic Search 검색이 주요 유입원.<br>SNS의 경우 생명령이 짧다. 짧으면 3일 길어봤자 1주일… 그렇지만 즉각적인 반응이 장점!<br>물론 팔로워가 없으면 효과가 떨어짐…<br>방치된 블로그의 경우 Organic Search 가 주요 유입원이다.</p>
<p>즉 블로그는 소셜보다 오랫동안 읽혀질 확률이 높다!! 하지만 이는 예측이 어렵다..(즉각적인 반응이 없다)<br>또한 티끌모아 태산이다!! 신뢰성을 쌓게되면 검색에서의 결과로 뜰 수 있어진다.!!</p>
<p>컨텐츠가 더 잘 발견되기 위해서는 장기적으로 봤을때 검색유입을 목표로 하자<br><code>구글을 어떻게 검색결과를 보여줄까???</code><br> 정밀도, 재현도를고려한다는데 이해하기 어렵다… 검색엔진은 백과사전이 아니라 거대한 추천시스템이다.  즉 수집한 문서들 중 검색 키워드 중 가장 추천할 만한 글을 정렬해서 보여준다.</p>
<p><code>어떻게 해야 내 글이 검색될까?</code><br>문서와 웹 사이트<br>문서 - 검색엔진이 검색한것은 웹사이트가 아니라 <u>문서</u>이다! 사이트를 잘만드는것도 중요하지만 구성요소 즉 문서를 단단히 하는것이 중요하다.<br>메타데이터보다는 제목과 본문이 중요하다. 좋은 제목은 아무리 강조해도 지나치지 않음. 핵심 키워드가 포함되고, 본문을 잘 드러내야 한다. 그리고 본문의 질이 좋아야 한다.<br>구글을 글을 보고 질 좋은 컨텐츠를 알아볼 수 있다. 그러므로 메타데이터는 중요하지 않다고 한것!</p>
<p><code>질좋은 컨텐츠를 위핸 제언</code><br>1.완성된 글을 작성한다.  </p>
<ul>
<li>이상한 글을 쓰면 블로그의 신뢰도를 떨어뜨린다.(예를들어 한줄짜리, 자신의 메모, 완성되지 않은 문장, 설명보다 코드가 긴 글, 링크만 모아놓은 글, 개인노트를 그대로 공개한 글, 직접 작성한 내용이 없는 글)<br>2.적당한 분량의 글을 작성한다.</li>
<li>7분정도 읽히는글(5600자 정도 즉 7페이지)이 가장 좋다!</li>
<li>그림의 유무 여백에 따라서 다르지만 600~1200자 정도가 적당!!!!!!!</li>
<li>짧은 뉴스는 2000~3000 긴글을 20000~30000 이것보다 길면 나눠서 쓰자!</li>
</ul>
<p><code>블로그에 쓸 수 있는글</code><br>튜토리얼, 하우투, 해설, 뉴스기사, 에세이</p>
<p><code>Page Rank</code><br>과거에는 페이지의 랭크를 구글에서 제공했다. 페이지의 신뢰도를 쌓아라. 나무위키의 경우에도 잘못된 정보들이 많지만 랭커는 높다.<br>장기적인 관점에서 잘 운영하는것이 중요하다!!!</p>
<p><code>처음 블로그를 시작하려면</code><br>관심사 -&gt; 키워드 -&gt; 글쓰기 -&gt; 공유<br>1.관심사들을 정리하고 키워드를 정하여 구글에서 검색해보자. 아직 좋은 글이 별로없는, 적당한 범위의 키워드를 정하자.<br>2.5000자 이상의 글을 작성하자. 제목에는 반드시 키워드를 포함하자.<br>3.게시하고 공유하고 기다려라.</p>
<hr>
<h3 id="지식-공유를-시작하려는-개발자"><a href="#지식-공유를-시작하려는-개발자" class="headerlink" title="지식 공유를 시작하려는 개발자"></a>지식 공유를 시작하려는 개발자</h3><p>홍연의님(LINE+ Developer Realations 팀)</p>
<p><code>Developer Realations팀에 어떻게 가게 되었나요?</code> IT출판사에서 IT도서 기획 편집자로 일을 시작했다.<br>다양한 커뮤니티 활동을 진행했다. 또한 책을 만들어내기 위해 저자의 전문지식을 잘 가공해서 지식공유를 돕는일을 진했했었다. DE팀에서 라인 개발자달의 전문성을 세상사람이 알 수 있게 해는것.</p>
<p><code>하는일</code> : 사내개발자 기고 글관리 등…개발자 대상 행사 주최. 라인의 개발자와 개발자 문화를 세상에 알릴 수 있는 모든 일. 라인의 개발자가 쉽게 지식 공유할 수 있도록 돕는 일</p>
<p><code>지식공유를 시작하려는 개발자에게...</code><br>블로그, 책, 영상, 강의, 발표등을 통해 지식고유를 할 수 있지만 쉽지만은 않다. 지식공유를 통해 인생의 또다른 기회를 갖게될 수 있따. 기회뿐만이 아니라 누군가에게 도움이 된다는 뿌듯함을 얻을 수도 있다.</p>
<hr>
<h3 id="사용자를-외면하지-않는-릴리스-노트"><a href="#사용자를-외면하지-않는-릴리스-노트" class="headerlink" title="사용자를 외면하지 않는 릴리스 노트"></a>사용자를 외면하지 않는 릴리스 노트</h3><p>조은별님(시큐아이, 보안회사 테크니컬 라이터)</p>
<p><code>테크니컬 라이터는 어떤 일은 하나요?</code><br>기술사업 분야에서 특정사용자를 대상으로 기술적인 정보를 제공하는 문서를 제작.<br>사용자메뉴얼, 릴리스노트, API문서, 화이트 페이퍼, UI용어/메시지 등….</p>
<p><code>릴리스 노트의 정의</code><br>문제를 정의하고 해결점을 기술한 문서. 즉 소프트웨어가 업데이트 될때 마다 업데이트 정보를 제공하기 위해 요약되어 작성되는 문서<br>신규기능, 개선된기능, 오류수정..</p>
<p><code>릴리스 노트의 필요성</code><br>앱스토어에서도 자주 보여진다. 자세하게 어떤부분이 어떻게 업데이트 되었는지 알려주는것이 매력적이다.<br>함축적이고 연관된 이슈에 대해 알려주는것도 좋은방법이라 할 수 있다.</p>
<p><code>릴리스 노트의 포멧</code><br>신규기능을 나누고 신규기능에 대한 설명을 통해 직관성을 제공하는것이 좋다.<br>ex:<br>[신규기능]<br>ㅁㅁ메뉴에 xx추가했습니다.</p>
<p>[개선된기능]<br>보기의 ㅇㅇ을 ㅇㅇ할수있도록 개선했습니다.</p>
<p><code>릴리스 노트 작성 시 고려할것</code><br>1.제품/사용자 특성 : 누가 읽는것인지?<br>2.일관된 문서 포맷: 어떻게 읽는 것인지?</p>
<h2 id="3-세-줄-요약-무엇을-익는-것인지"><a href="#3-세-줄-요약-무엇을-익는-것인지" class="headerlink" title="3.세 줄 요약 : 무엇을 익는 것인지?"></a>3.세 줄 요약 : 무엇을 익는 것인지?</h2><h3 id="개발자는-왜-블로그를-해야하나요"><a href="#개발자는-왜-블로그를-해야하나요" class="headerlink" title="개발자는 왜 블로그를 해야하나요?"></a>개발자는 왜 블로그를 해야하나요?</h3><p>이동욱님(우아한 형제들, 백엔드 개발자, jojuldu 블로그 운영)</p>
<p>마크타운 파일을 티스토리에 올릴 수 있는 플러그인 개발</p>
<p>플로그를 좋아하고 개선하고 혜택을 받음<br><code>블로그를 하면 좋은이유</code><br>한달에 1000달러 정도… 출판제의, 신간제의 등 부수익 창출기회. 다른 회사의 wiki에 내 블로그에 링크된다. 멀리서 세미나 발표로, 책으로 보기만 했던 개발자분의 채용추천. 사내 기술 블로그 작성 요청에 부담이 적음.</p>
<p><code>왜 블로그를 해야하나요</code><br>연봉/회사/직위/재산 빼면 나를 표현할 수 있는게 뭐가있을까? 블로그는 자신을 표현할 수 있다.<br>블로그는 아이덴티티라고 생각한다.</p>
<h3 id="개발-관련-기술-블로그-운영하기"><a href="#개발-관련-기술-블로그-운영하기" class="headerlink" title="개발 관련 기술 블로그 운영하기"></a>개발 관련 기술 블로그 운영하기</h3><p>변정훈님(Outsider’s Dev Story 운영)<br><code>글 작성</code><br>3일에 글 1개 작성목표, 글 1개에 짧게는 2~4시간 길게는 2~3일, 퇴고는 잘 하지 않는다.</p>
<p><code>글의 주제</code><br>개발하면서 적을 수 있는건 전부<br>새로운 도구, 환경 설치/절정<br>새로 알게된 라이브러리.도구의 사용법<br>최근에 겪고 해결한 장애와 처리방법<br>개발관련 공유할 만한 내용</p>
<p><code>왜 개발 블로그를 운영하는가</code><br>공부할게 많으니까. 글쓰는것 공부하는것을 같은것으로 본다.<br>처음엔 배운걸 자꾸 잊어버려서, 전에 겪어본것들인데 기억이 안나서.<br>회고와 비슷하다.</p>
<p><code>어디에 적어놓았는가</code><br>개인노트, TIL(Today I learned), 공개블로그</p>
<p><code>글을 공개로 쓸 때의 장점</code><br>글을 정리하려면 잘 알고 있어야 한다. 또한 글로 정리하면서 다시 고민해 볼 수 있다. 명성이 오른다.</p>
<p><code>글을 흐름</code><br>1.하고자 했던일을 적는다.(Context, 왜 웹사이트를 만들고 싶은지, 왜 이기술을 쓰고싶은지, 어떻게 하다가 해당 장애를 만났는지)<br>2.경험한 문제 상황 정리(격리된 상황, )<br>3.시도해본 방법(내가아는 지식, )<br>4.왜 동작이 안되는가? 왜 동작하는가?(가설)<br>5.문제상황 재현</p>
<p><code>MCVE</code><br>최소한의, 완성된, 입증가능한 예제<br>(Minimum, Complete, and Verifiable Example)<br>해결책을 받고싶으면 스택오버플로우에서 이런식으로 질문을 올려라는것!<br>블로그도 마찬가지이다.!</p>
<p><code>블로그를 하는 이유?</code><br>공유문화를 좋아한다.<br>일하면서도 글을 많이 작성한다.(Slack, Issue tracker, Wiki)</p>
<p><code>글을 지속적으로 쓰려면 어떻게 해야 하나요?</code><br>블로그를 만들기만 하는 개발자들이 많다. 새로운 스킨적용 스킨 변경의 반복….<br>열심히 해라 지속적으로 하다보면 근육처럼 붙게된다. 하다보면 어느순간 도움이 된다는것을 깨달을 수 있다.</p>
<p><code>사람들이 많이 보는 글</code><br>자잘한 팁</p>
<p><code>돈이 되나요?</code><br>안됩니다. 돈이 목표라면 기술블로그 보다는 다른영역으로 해라</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Write-the-docs&quot;&gt;&lt;a href=&quot;#Write-the-docs&quot; class=&quot;headerlink&quot; title=&quot;Write the docs&quot;&gt;&lt;/a&gt;Write the docs&lt;/h3&gt;&lt;p&gt;밋업도 열고 구인구지도 하고 문서화에 대
    
    </summary>
    
    
      <category term="Write the docs," scheme="http://KKimSangHeon.github.io/tags/Write-the-docs/"/>
    
  </entry>
  
  <entry>
    <title>운영체제 핵심!</title>
    <link href="http://KKimSangHeon.github.io/2019/03/18/operating-system/"/>
    <id>http://KKimSangHeon.github.io/2019/03/18/operating-system/</id>
    <published>2019-03-18T13:11:03.000Z</published>
    <updated>2019-03-24T04:23:07.112Z</updated>
    
    <content type="html"><![CDATA[<p>운영체제란<br>부팅<br>커널, 쉘?<br>배치프로세싱시스템<br>멀티프로그래밍 시스템<br>타임쉐어링 시스템<br>다중프로세서 시스템<br>분산시스템<br>실시간 시스템<br>인터럽트- 하드웨어인터럽트 , 소프트웨어인터럽트<br>ISR<br>이중모드-모니터비트<br>MMU<br>운영체제의 매니지먼트들 - 프로세스 메인메모리 파일 보조기억장치 입출력장치<br>프로세스의 상태-new ready running wating terminated<br>PCB-상태정보, PC(지금은 몇번지인지. 번지정보), registers, MMU info (base, limit), CPU time(CPU 이용시간), process id, list of open files(얘가 지금 어떤파일을 사용하고 있는지)</p>
<p>job queue , ready queue, device queue<br>Job scheduling(Long-term scheduler)</p>
<p>CPU Scheduler( Short-term scheduler )</p>
<p>Device Scheduler<br>Medium-term scheduler<br>프로세스는 크게 두가지로 나눌 수 있다,<br>i/o-bound<br>CPU-bound process</p>
<p>context switching<br>Dispatcher<br>CPU스케줄링<br>Preemptive vs Non-preemptive<br>Scheduling criteria(척도)</p>
<ul>
<li>응답시간, 대기시간, 반환시간, 처리율,cpu 이용율</li>
</ul>
<p>fcfs,sjf,Shortest-Remaining-Time-First<br>Priority,<br>Round-Robin (RR),<br>Multilevel Queue,<br>Multilevel Feedback Queue,</p>
<p>쓰레드<br>쓰레드 구조<br>프로세스의 메모리 공간 공유 : (code, data)<br>프로세스의 자원 공유 : (file, i/o, …)<br>비공유: 개별적인 PC, SP, registers, stack</p>
<p>프로세스(쓰레드) 동기화<br>임계영역 해결을 위한 방법 3가지<br>상호베타 진행 유한대기</p>
<p>동기화<br>세마포어 모니터(2개의 큐?)<br>odering 상호베제 용도로 쓰임</p>
<p>교착상태<br>교착상태 필요조건<br>상호베타 점유및대기 비선점 환형대기</p>
<p>메모리 낭비방지기법<br>1.Dynamic Loading<br>2.Dynamic Linking<br>3.Swapping</p>
<p>외부단편화<br>first fit<br>best fit<br>worst fit</p>
<p>외부단편화 해결: compaction, 페이징<br>페이지테이블(mmu의 집합,TLB에 저장)<br>내부단편화 해결 : 세그멘테이션</p>
<p>페이지, 세그멘테이션의 보호적인 측면의 차이</p>
<p>가상메모리<br>요구페이징<br>pure demand paging vs prepaging<br>Page Replacement Algorithms: FIFO,OPT,LRU<br>Belady’s Anomaly<br>Global vs Local Replacement<br>쓰레싱(Thrashing</p>
<p>프레임 할당은 크게 정적할당 동적할당으로 나뉜다.</p>
<p>정적 할당 (static allocation) 또한 균등할당, 비례할당으로 나뉜다.</p>
<p>block device<br>character device<br>연속 할당 (Contiguous Allocation) - 장단점<br>연결 할당 (Linked Allocation) - 장단점 및 디렉토리 / FAT<br>색인 할당 (Indexed Allocation) - linked,multi level, combined</p>
<p>디스크 스케줄링<br>fcfs, sstf, scan scheduling(cscan,look,c-look)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;운영체제란&lt;br&gt;부팅&lt;br&gt;커널, 쉘?&lt;br&gt;배치프로세싱시스템&lt;br&gt;멀티프로그래밍 시스템&lt;br&gt;타임쉐어링 시스템&lt;br&gt;다중프로세서 시스템&lt;br&gt;분산시스템&lt;br&gt;실시간 시스템&lt;br&gt;인터럽트- 하드웨어인터럽트 , 소프트웨어인터럽트&lt;br&gt;ISR&lt;br&gt;
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Operating System" scheme="http://KKimSangHeon.github.io/categories/CS/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>다시돌아온 간략한 스프링정리시간</title>
    <link href="http://KKimSangHeon.github.io/2019/03/12/spring1/"/>
    <id>http://KKimSangHeon.github.io/2019/03/12/spring1/</id>
    <published>2019-03-12T07:48:03.000Z</published>
    <updated>2019-03-13T12:33:16.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IoC"><a href="#IoC" class="headerlink" title="IoC?"></a>IoC?</h3><p>의존성이 뒤바뀐것. 어떻게 바뀐거야?<br>내가 만드는것이 아니라 밖에서 넣어주는 형태<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShController</span> </span>&#123;    </div><div class="line">   <span class="keyword">private</span> ShRepository repo;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ShController</span><span class="params">(ShRepository repo)</span> </span>&#123;        </div><div class="line">     <span class="keyword">this</span>.repo = repo;    </div><div class="line">   &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="IoC-컨테이너"><a href="#IoC-컨테이너" class="headerlink" title="IoC 컨테이너"></a>IoC 컨테이너</h3><p>ApplicationContext 는 IoC 컨테이너로써 우리가 직접 쓸 일은 거의 없다(Spring boot에서)<br>빈들을 만들고 빈들의 의존성을 엮어주는 역할을 한다. (객체생성 관리등…)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ApplicationContext applicationContxt;</div><div class="line">.....</div><div class="line">applicationContxt.getBean(A.class); <span class="comment">//객체를 가져올 수 있다.</span></div></pre></td></tr></table></figure>
<h3 id="빈"><a href="#빈" class="headerlink" title="빈"></a>빈</h3><p>스프링 IoC가 관리하는 객체이다. 즉 ApplicationContext안에서 관리되는 객체<br>인터페이스도 빈이 될수 있을까? 그렇다.</p>
<h3 id="빈을-등록하는-방법은"><a href="#빈을-등록하는-방법은" class="headerlink" title="빈을 등록하는 방법은?"></a>빈을 등록하는 방법은?</h3><p>빈을 쓰기위해서는 그것(클래스) 또한 빈이어야 한다.<br>why? 빈만 빈을 쓸 수 있다/</p>
<p><code>1.@ComponentScan</code><br>얘가 @Component인 애들을 찾아 빈으로 등록한다. @Controller은 왜 빈으로 인식되는거야? @컨트롤러 코드를 열어보면 @Componet로 되어있다. 즉 같은것으로 볼 수 있다.</p>
<p><code>2.XML이나 자바 설정 파일에 등록</code></p>
<p><code>3.직접 등록하는 방법</code></p>
<p><u>이때는 @Configuration 이라는 애노테이션을 갖고있는 클래스에서 등록이 이뤄져야 한다.</u><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanTest</span></span>&#123;</div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">sh</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"sh"</span>;</div><div class="line">  &#125;</div><div class="line"><span class="comment">//String type의 빈을 하나 등록.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AController</span></span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  String sh;  <span class="comment">//sh가 들어간다        </span></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h3 id="의존성-주입"><a href="#의존성-주입" class="headerlink" title="의존성 주입"></a>의존성 주입</h3><p>@Autowired , @Inject이라는 어노테이션을 활용하여 의존성을 주입한다.</p>
<p>어떤 빈에 생성자가 하나만있고 생성자의 매개변수 타입이 빈으로 등록되어있다면 빈을 주입해준다.@Autowired가 없더라도..즉 아래와 같은 형태</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AController</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ARepository aRepository;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BRepository bRepository;</div><div class="line"></div><div class="line">  <span class="comment">//방법 1</span></div><div class="line">  <span class="comment">//@Autowired 없어도 됨.(있어도 됨)</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AController</span><span class="params">(ARepository aRepository,BRepository aRepository)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.aRepository = aRepository;</div><div class="line">    <span class="keyword">this</span>.bRepository = bRepository;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>의존성 주입하는 두번째 방법<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AController</span></span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ARepository aRepository;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BRepository bRepository;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>즉 위의 두가지 모두 의존성이 주입된다고 볼 수 있다.</p>
<h3 id="Autowired-Inject은-어디에-붙이는것이-좋은가"><a href="#Autowired-Inject은-어디에-붙이는것이-좋은가" class="headerlink" title="@Autowired , @Inject은 어디에 붙이는것이 좋은가?"></a>@Autowired , @Inject은 어디에 붙이는것이 좋은가?</h3><p><code>클래스에 반드시 필요한 객체</code>일경우 생성자로 의존성주입하는것이 좋다.<br><code>세터가 있다면</code> 세터에 붙이고<br><code>세터가 없다면</code> 필드에 붙이는것이 좋다.</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>흩어진 코드를 한곳으로 모아라</p>
<h3 id="AOP를-구현하는-기법"><a href="#AOP를-구현하는-기법" class="headerlink" title="AOP를 구현하는 기법"></a>AOP를 구현하는 기법</h3><ol>
<li><p>바이트 코드를 조작하는방법<br>컴파일을 하면 .class가 나오는데 이를 조작하는것. 컴파일된 코드안에 공통되는 부분을 끼워넣는 방법</p>
</li>
<li><p>프록시 패턴을 사용하는 방법<br>A 클래스를 상속받아<br>class AProxy extends A{ }<br>안에서 공통되는 부분을 호출하는것.</p>
</li>
</ol>
<p>사방으로 흩어진 코드를 한곳으로 모으고 다른 클래스들은 자신의 일만 하도록 하는것<br>즉 Single Response Principle에 적합하게 코딩하도록 도와주는 코딩기법.</p>
<h3 id="PSA-Portable-Sevice-Abstract"><a href="#PSA-Portable-Sevice-Abstract" class="headerlink" title="PSA Portable Sevice Abstract"></a>PSA Portable Sevice Abstract</h3><p>잘만든 인터페이스라 보자.<br>어떤 기술에 특화되어있는 코드, 확장성이 좋지 않은 코드를 쓰면 테스트를 만들기도 어렵고 기술이 변경될 때 마다 코드를 변경해야 한다. 잘만든 인터페이스를 활용한다면 테스트하기도 좋고 바꿔끼기도 좋다.</p>
<p>어노테이션의 정의가 바뀌더라도 우리는 그대로 쓸 수 있다!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IoC&quot;&gt;&lt;a href=&quot;#IoC&quot; class=&quot;headerlink&quot; title=&quot;IoC?&quot;&gt;&lt;/a&gt;IoC?&lt;/h3&gt;&lt;p&gt;의존성이 뒤바뀐것. 어떻게 바뀐거야?&lt;br&gt;내가 만드는것이 아니라 밖에서 넣어주는 형태&lt;br&gt;&lt;figure clas
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>29. SCAN 알고리즘 및 변종</title>
    <link href="http://KKimSangHeon.github.io/2019/03/06/operating-system29/"/>
    <id>http://KKimSangHeon.github.io/2019/03/06/operating-system29/</id>
    <published>2019-03-06T13:40:17.000Z</published>
    <updated>2019-03-06T13:45:55.148Z</updated>
    
    <content type="html"><![CDATA[
<p>프로세스 관리(CPU 스케줄링,동기화), 메인메모리 관리(디멘딩 페이지), 파일관리(연속,연결,색인할당)</p>
<p>디스크의 헤더의 움직이는데 오래걸린다. 물론 ms는 느린게 아니지만 컴퓨터의 수준에서 느린것이다.<br>200개의 실린더가 있을 때 어떻게 조금만 움직일 수 있을까?<br>맨안에 원이 트랙1 그다음이 2…</p>
<p>다중프로그래밍 환경에서의 디스크 큐(disk queue)에는 많은 요청(request)들이 쌓여있다.<br>요청들을 어떻게 처리하면 탐색시간을 줄일 수 있을까?</p>
<h3 id="FCFS-First-Come-First-Served"><a href="#FCFS-First-Come-First-Served" class="headerlink" title="FCFS (First-Come First-Served)"></a>FCFS (First-Come First-Served)</h3><p> 온 순서대로 처리해준다.</p>
<h3 id="SSTF-Scheduling"><a href="#SSTF-Scheduling" class="headerlink" title="SSTF Scheduling"></a>SSTF Scheduling</h3><p>현재위치를 기준으로 헤더를 조금움직이기 위해 위한것.<br>이는 Starvation문제가 발생할 수 있다. 큐에 줄서있는 순서대로 제공하는것이 아니라 가까운놈 순으로 제공하기 때문에 멀리있는놈은 가까운놈들이 계속 들어올 때 기아상태가 된다..<br>SSTF가 가장 좋은것인가???? 아니다…</p>
<p>200 cylinder disk, 0 .. 199<br>Disk queue: 98 183 37 122 14 124 65 67<br>Head is currently at cylinder 53</p>
<p>SSTF의 경우 Total head movement = 236 cylinders<br>일 때<br>최적의 경우: 53 - 37 - … = 208 cyl으로 최적으로 돌릴 수 있다.</p>
<h3 id="SCAN-Scheduling"><a href="#SCAN-Scheduling" class="headerlink" title="SCAN Scheduling"></a>SCAN Scheduling</h3><p>디스크 헤더가 전체에걸쳐 들어갔다 나왔다 한다.</p>
<p>200 cylinder disk, 0 .. 199<br>Disk queue: 98 183 37 122 14 124 65 67<br>Head is currently at cylinder 53 (moving toward 0) - Total head movement = 53+183 cylinders (less time)</p>
<p>디스크 헤더를 끝까지 넣었다가 뺐다가 하는것.<br>53-37-14-0-65-67-….183<br>53부터~0 까지 + 0부터 ~183까지</p>
<p>스캔 알고리즘을 적용할 때 방향이 중요하다. 최적은 왼쪽으로 갔다 오른쪽으로 간다. 왼쪽으로 갔다 오른쪽으로 갔다면 걸린 시간이 다르다.</p>
<p>프로세스의 개수가 많으면 골고루 요청이 분포되어 있을것이다.</p>
<h3 id="SCAN의-변종-1-C-SCAN"><a href="#SCAN의-변종-1-C-SCAN" class="headerlink" title="SCAN의 변종 1.C-SCAN"></a>SCAN의 변종 1.C-SCAN</h3><p>53부터~0 까지 처리했으면 53부터 ~183까지 처리하는것이 더욱 효율적일것이다. 이를 Circular SCAN</p>
<h3 id="SCAN의-변종-2-LOOK"><a href="#SCAN의-변종-2-LOOK" class="headerlink" title="SCAN의 변종 2.LOOK"></a>SCAN의 변종 2.LOOK</h3><p>처음 53부터 0에서 제일 가까운 14까지만 가고 헤더를 옮겨 다시 53에서 183까지 가는것.<br>The head goes only as far as the final request in each direction<br>Look for a request before continuing to move in a given direction</p>
<h3 id="SCAN의-변종-3-C-LOOK"><a href="#SCAN의-변종-3-C-LOOK" class="headerlink" title="SCAN의 변종 3.C-LOOK"></a>SCAN의 변종 3.C-LOOK</h3><p>처음 53부터 0에서 제일 가까운 14까지만 가고 헤더를 옮겨 183부터 65까지 이동</p>
<h3 id="스캔알고리즘을-엘리베이터-알고리즘이라-한다"><a href="#스캔알고리즘을-엘리베이터-알고리즘이라-한다" class="headerlink" title="스캔알고리즘을 엘리베이터 알고리즘이라 한다."></a>스캔알고리즘을 엘리베이터 알고리즘이라 한다.</h3><p>올라가면서 서비스하고 내려오면서 쭉 서비스를 제공하기 때문에</p>
]]></content>
    
    <summary type="html">
    
      
&lt;p&gt;프로세스 관리(CPU 스케줄링,동기화), 메인메모리 관리(디멘딩 페이지), 파일관리(연속,연결,색인할당)&lt;/p&gt;
&lt;p&gt;디스크의 헤더의 움직이는데 오래걸린다. 물론 ms는 느린게 아니지만 컴퓨터의 수준에서 느린것이다.&lt;br&gt;200개의 실린더가 있
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Operating System" scheme="http://KKimSangHeon.github.io/categories/CS/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>28.색인할당, 디스크 탐색시간, FCFS, SSTF</title>
    <link href="http://KKimSangHeon.github.io/2019/03/05/operating-system28/"/>
    <id>http://KKimSangHeon.github.io/2019/03/05/operating-system28/</id>
    <published>2019-03-05T13:03:20.000Z</published>
    <updated>2019-03-06T13:44:50.323Z</updated>
    
    <content type="html"><![CDATA[<p>보조기억장치중 하드디스크를 배운다<br>동심원이 있고 원판이 있다. 원판에 자성물질을 발라서 디스크 헤더에 전기를 흘려 기록을 하고 읽을 때는 고속으로 회전시켜 코일에 전류가 유도되는데 이를통해 읽는다.<br>이를 트랙이라 하고 보통 디스크는 앞 뒤로 쓰는데 트랙이라는 용어보다는 실린더라는 용어를 많이 쓰고 있다.<br>트랙을 쪼개서 섹터라 한다 섹터는 512b정도 된다. 이를 네개정도 모아서 블록이라고 한다.<br>하드디스크를 포멧하면 내용을 다지우고 나면 poll of block이라 한다.</p>
<h3 id="연속할당"><a href="#연속할당" class="headerlink" title="연속할당"></a>연속할당</h3><p>블록 하나가 1kb라고 가정하자 3.6kb파일을 하나 만들었을때 블록을 연속적으로 만들어주면 내부단편화가 발생한다.<br>하지만 헤더가 많이 안움직여도 되므로 빠르다.  디스크 헤더의 이동 최소화 = 빠른 i/o 성능<br>하지만 데이터를 지웠을 때 외부단편화가 발생한다.(곳곳에 흩어지는 holes로 인해)</p>
<h3 id="연결할당"><a href="#연결할당" class="headerlink" title="연결할당"></a>연결할당</h3><p>디렉토리라는것은 메인메모리에 저장되고 OS에서 관리된다. 파일 이름, 만들어진날짜 등등을 보관한다. 하지만 우리눈엔 안보이고 커널에만 보이는것이 있는데 파일의 위치가 그것이다. 파일의 시작위치를 지정해두고 파일이 연결리스트 형태로 이어진다. 포인터 저장을 위해 4바이트가 필요하다는점, 헤더가 많이 움직여야한다는점, 중간부터 읽을 수 없다는점이 단점이다.</p>
<h3 id="FAT"><a href="#FAT" class="headerlink" title="FAT"></a>FAT</h3><p>연결할당의 단점을 해결하기 위해 포인터만을 모은 테이블(FAT)을 만든것.</p>
<h3 id="색인할당-Indexed-Allocation"><a href="#색인할당-Indexed-Allocation" class="headerlink" title="색인할당 (Indexed Allocation)"></a>색인할당 (Indexed Allocation)</h3><p><u>3.6kb 파일을 만드려면 한 블록이 1kb일때 4개가 필요한데 인덱스 테이블을 특정한 블록에 저장하고 디렉토리에는 파일의 인덱스 블록의 주소를 갖고있다. 즉 인덱스 블록은 포인터의 모음이며 하나의 파일당 하나씩 갖고있다.</u></p>
<p>데이터가 들어있는것은 데이터블록 주소가 들어있는것은 인덱스 블록이며 파일 하나당 인덱스 블록이 필요하다.<br><u>Direct access 가능하고 외부 단편화 없다.</u></p>
<p>인덱스 블록을 위해 블록을 할당해야 하는것이 단점이다. 1바이트 짜리를 저장하는데도 블록의 크기만큼(예를들었을 경우 1kb)만큼 할당해줘야 한다.</p>
<p><code>파일의 최대크기</code>: 1블록의 크기가 512바이트라 가정해보자. 주소를 표현하는데는 4바이트 이므로 128개의 인덱스를 갖을 수 있다. 여기서 512바이트 * 128을 계산하면 64kb이다. 즉 파일의 최대 크기는 64kb이다.</p>
<p>예제: 1블록 = 1KB = 4바이트 x 256개 인덱스<br>즉 256 * 1KB = 256KB</p>
<img src="/2019/03/05/operating-system28/image1.png" alt="Linked" title="Linked">
<p><code>해결방법1:</code> Linked : 이를 개선하기 위해 인덱스를 갖는 블록이 다른 인덱스 블록을 가르키는것.</p>
<img src="/2019/03/05/operating-system28/image2.png" alt="Multilevel index" title="Multilevel index">
<p><code>해결방법2:</code> Multilevel index : 하나의 인덱스 블록이 여러개의 인덱스 블록을 가르키는것.</p>
<img src="/2019/03/05/operating-system28/image3.png" alt="Combined" title="Combined">
<p><code>해결방법3:</code> Combined : 처음 인덱스 블록에서 앞쪽은 실제로 데이터를 가르키고 나머지 블록은 인덱스 블록을 가르키고..이는 유닉스에서 쓰임..</p>
<h3 id="디스크-스케줄링"><a href="#디스크-스케줄링" class="headerlink" title="디스크 스케줄링."></a>디스크 스케줄링.</h3><p>대표적인 보조기억장치는 하드디스크이다. 디스크는 원판에 트랙이 있고 디스크를 움직여서 해당되는 트랙으로 이동한다. 제일 오래 걸리는 시간이 헤더를 움직이는 Seek time이 오래걸린다, 디스크가 도는 시간은  rotational delay(1분에 7200번돈다) 트랙이 헤더를 지나가면서 읽히는 시간이 transfer time이라 한다.</p>
<p>다중 프로그래밍 환경에서 여러개의 프로세스가 동시에 돌아간다. <u>여러프로세스가 디스크를 사용하려면 디스크 큐에 들어가야한다. 이때 어떻게 하면 탐색시간 즉 디스크 헤더를 가장 적게 움직일 수 있을까…</u></p>
<h3 id="디스크-스케줄링-1-FCFS"><a href="#디스크-스케줄링-1-FCFS" class="headerlink" title="디스크 스케줄링 1. FCFS"></a>디스크 스케줄링 1. FCFS</h3><p>먼저온놈한테 먼저 서비스를 제공.<br>200 cylinder disk, 0 .. 199<br>Disk queue: 98 183 37 122 14 124 65 67<br>Head is currently at cylinder 53<br>Total head movement = 640 cylinders</p>
<p>극혐이다,….</p>
<h3 id="디스크-스케줄링-2-SSTF"><a href="#디스크-스케줄링-2-SSTF" class="headerlink" title="디스크 스케줄링 2. SSTF"></a>디스크 스케줄링 2. SSTF</h3><p>Shortest-Seek-Time-First 의 약어로서 최소화 되는것을 먼저하는것.</p>
<p>즉 지금위치를 기준으로 했을 때 가장 짧은곳을 먼저 가는것.<br>200 cylinder disk, 0 .. 199<br>Disk queue: 98 183 37 122 14 124 65 67<br>Head is currently at cylinder 53<br>Total head movement = 236 cylinders</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;보조기억장치중 하드디스크를 배운다&lt;br&gt;동심원이 있고 원판이 있다. 원판에 자성물질을 발라서 디스크 헤더에 전기를 흘려 기록을 하고 읽을 때는 고속으로 회전시켜 코일에 전류가 유도되는데 이를통해 읽는다.&lt;br&gt;이를 트랙이라 하고 보통 디스크는 앞
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Operating System" scheme="http://KKimSangHeon.github.io/categories/CS/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>27.연속할당, 연결할당의 장단점</title>
    <link href="http://KKimSangHeon.github.io/2019/03/05/operating-system27/"/>
    <id>http://KKimSangHeon.github.io/2019/03/05/operating-system27/</id>
    <published>2019-03-05T13:02:56.000Z</published>
    <updated>2019-03-06T13:49:55.622Z</updated>
    
    <content type="html"><![CDATA[<p>하드디스크는 poll of free blocks 즉 빈 블록들의 집합이다.</p>
<p>한블록이 1kb이고 파일A 5kb, 파일B 3kb, 파일C 4kb 일때 어느블록에 넣을까?<br>0~19까지의 블록이 있을때 어떤식으로 배치할 수 있을까??</p>
<h3 id="연속할당"><a href="#연속할당" class="headerlink" title="연속할당"></a>연속할당</h3><p><u>각 파일에 대해 디스크 상의 연속된 블록을 할당</u><br>즉 A는 0~4까지 할당, B는 5~7 , C는 8~11 까지 연속적으로 할당하는 방법<br>60~70년대에 사용되는 방법</p>
<p><code>장점</code> : 일고 쓸때 디스크 헤더의 움직임을 최소화 할 수 있다. 이는 빠른 i/o 성능과 직결<br>동영상, 음악, VOD 등에 적합<br>sequential access 순차접근이라고 한다.<br>특정 부분을 바로 읽을 수도 있다 (direct access 직접접근)</p>
<p><code>단점</code> : 파일을 지울 경우 문제가 된다. A,C를 지우고 6kb의 데이터를 넣으려고 하면 못넣는다. 외부단편화가 발생!<br><u>즉 외부 단편화로 인한 디스크 공간 낭비</u><br>이를 방지하기 위해 hole을 모으는 Compaction을 하면 되지만 시간이 오래걸린다.<br>또한 <u>파일을 생성할 때 파일의 크기를 예측 할 수 없기 때문에 어디에 할당해야 할지 알 수 없다. 또한 파일의 크기가 계속증가할 수 있기때문에 기존의 hole로는 배치가 불가능하게 될 수 있다.</u></p>
<h3 id="연결할당"><a href="#연결할당" class="headerlink" title="연결할당"></a>연결할당</h3><p>연속할당을 개선하기 위해 나온것이 연결할당</p>
<img src="/2019/03/05/operating-system27/image.png" alt="하드디스크 디렉토리의 관계" title="하드디스크 디렉토리의 관계">
<p>각 블록들에 포인터를 달아놓고 이어지는 블록을 가르킨다. 처음 블록 위치는 파일 디렉토리가 갖고 있다. 각 블록은 포인터 저장을 위한 4바이트 또는 이상 소모. 이는 외부단편화를 없앨 수 있다.<br>디렉토리라는것은 메인메모리에 저장되고 OS에서 관리된다. 파일 이름, 만들어진날짜 등등을 보관한다. 하지만 우리눈엔 안보이고 커널에만 보이는것이 있는데 파일의 위치가 그것이다</p>
<p><code>단점</code> : 연속할당의 경우 블록의 위치를 가늠할 수 있지만 연결할당의 경우 중간부터 읽기는 어려움이 있다. 즉 Direct access가 불가하고 동영상의 중간부터 보기가 불가능하다는것이다. 포인터 저장을 위해서 4바이트 이상이 손실한다, 또한 포인터가 끊어질 경우 접근이 불가능하므로 신뢰성이 낮다. 외부단편화는 없지만 데이터들이 흩어져있기 때문에 헤더가 계속 움직여야하기 때문에 io시간이 오래걸린다.</p>
<p>연속할당의 문제(단편화)를 해결했지만 이 또한 문제가 있다.</p>
<h3 id="연결할당을-개선한-FAT-파일-시스템"><a href="#연결할당을-개선한-FAT-파일-시스템" class="headerlink" title="연결할당을 개선한 FAT 파일 시스템"></a>연결할당을 개선한 FAT 파일 시스템</h3><p>USB메모리가 주로 FAT32를 쓰는데 뭔지 알아보자<br>연결할당의 변종으로서 File Allocation Table 파일 시스템이다. MS-DOS, OS/2, Windows 등에서 사용한다,</p>
<p>포인터들을 따로 모아서 포인터 테이블을 디스크 블록에 따로 저장한다. 포인터들만 모인 테이블을 FAT라고 한다. 이를 통해 블록을 읽지 않고 테이블만 읽음으로써 direct access 또한 가능하게 된다. 주기적으로 FAT에 변동사항을 넣어주고 하나의 블록이 깨지더라도 FAT 내용만 살아있다면 나머지를 읽을 수 있다. 즉 신뢰성 향상. FAT가 고장나면 큰일나기 때문에 보통 FAT 카피본을 저장하고 있다. FAT 는 일반적으로 메모리 캐싱</p>
<p>즉 direct access , 신뢰성(FAT 손실 시 복구 위해 이중 저장)을 높였다.<br>FAT를 얼마나 할당할까? 32비트를 할당하면 2^32 개의 주소를 저장할 수 있다. 이를 FAT32라고 한다.</p>
<h3 id="색인할당"><a href="#색인할당" class="headerlink" title="색인할당."></a>색인할당.</h3><p>다음 포스팅에..</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;하드디스크는 poll of free blocks 즉 빈 블록들의 집합이다.&lt;/p&gt;
&lt;p&gt;한블록이 1kb이고 파일A 5kb, 파일B 3kb, 파일C 4kb 일때 어느블록에 넣을까?&lt;br&gt;0~19까지의 블록이 있을때 어떤식으로 배치할 수 있을까??&lt;
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Operating System" scheme="http://KKimSangHeon.github.io/categories/CS/Operating-System/"/>
    
    
  </entry>
  
</feed>
