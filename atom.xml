<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2020-02-03T12:50:08.049Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>15.스프링 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/03/spring-1/"/>
    <id>http://KKimSangHeon.github.io/2020/02/03/spring-1/</id>
    <published>2020-02-03T12:21:26.000Z</published>
    <updated>2020-02-03T12:50:08.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링-AOP"><a href="#스프링-AOP" class="headerlink" title="스프링 AOP"></a>스프링 AOP</h3><p>AOP의 구현체를 제공하며 AspectJ와 연동하여 사용할 수 있으며 스프링 내부적으로 구현한 Spring AOP를 사용할 수 있음. 이를 기반으로 다양한 기능이 제공되고있다.</p>
<p><code>AOP?</code><br>흩어진 Aspect를 모듈화 하는 프로그래밍 기법이다. OOP와 서로 보완하는 관계이다. 즉 OOP를 더 잘할 수 있게 도와줌</p>
<p>AOP는 Aspect로 흩어져 있는것을 모은다. 모을 때는 관심별로 각각 독립적으로 만든다.<br>즉 해야할 일과 어디어디에 적용해야 할지 묶어둔것!</p>
<h3 id="AOP의-주요개념"><a href="#AOP의-주요개념" class="headerlink" title="AOP의 주요개념"></a>AOP의 주요개념</h3><p>Aspect : 공통적인것을 꺼내서 모듈화 한것.<br>Target: 적용이 되는 대상<br>Advice : 해야할 일<br>Joint Point : 메서드 실행시점. 즉 생성자 호출하기 직전, 생성자 호출했을때, 필드에 접근하기전, 필드에서 값을 가져갔을 때 등 여러가지의 합류접이 있다.<br>Pointcut : “A라는 클래스의 B라는 메소드를 호출할 때 만 해당 어디바이스를 적용할 것이다”라는것으로 즉 어디에 적용해야 하는지.</p>
<img src="/2020/02/03/spring-1/spring1.PNG" alt="1" title="1">
<h3 id="AOP-구현체"><a href="#AOP-구현체" class="headerlink" title="AOP 구현체"></a>AOP 구현체</h3><p>자바에는 대표적으로 AspectJ, Spring AOP가 있다.</p>
<h3 id="AOP-적용하는-방법"><a href="#AOP-적용하는-방법" class="headerlink" title="AOP 적용하는 방법"></a>AOP 적용하는 방법</h3><p><code>컴파일타임</code> : 자바파일을 클래스 파일로 만들 때 조작이된 바이트 코드를 생성해 내는것.<br>로드타임, 런타임때 성능 부하가 없지만 이렇게 만들기 위해서는 별도의 컴파일 과정을 거쳐야함</p>
<p><code>로드타임</code> : 컴파일은 아주 순수하게 됐다. 그런데 A라는 클래스를 로딩하는 시점에 뭔가를 끼워서 넣는것(로드타임 위빙이라 함)<br>클래스 로딩시점에 약간의 부하가 발생하며 로드타임 위버를 설정해줘야함. 다양한 문법을 사용할 수 있다(AspectJ)</p>
<p><code>런타임</code> : A라는 빈에  Aspect X를 적용해야 한다는것을 스프링이 알고있다.  A라는 빈을 만들 때 A 타입의 프록시 빈을 만들어서 이 프록시 빈이 A가 갖고있는 메소드를 호출하기 직전에 Aspect X의 요소를 호출한 후 A것을 호출한다.<br>스프링 AOP를 사용하는 방법으로 빈을 만드는 초기성능이 추가된다. 하지만 최초의 빈을 만들때만 비용이 들어가므로 로드타임 위빙이랑 비용이 비슷할것!</p>
<p>런타임이 가장 합리적이고 현실적이다. 경우에 따라 AspectJ가 제공하는 jopoint를 사용해야한다면 로드타임을 사용해야 한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링-AOP&quot;&gt;&lt;a href=&quot;#스프링-AOP&quot; class=&quot;headerlink&quot; title=&quot;스프링 AOP&quot;&gt;&lt;/a&gt;스프링 AOP&lt;/h3&gt;&lt;p&gt;AOP의 구현체를 제공하며 AspectJ와 연동하여 사용할 수 있으며 스프링 내부적으로 구
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>14.SpEL</title>
    <link href="http://KKimSangHeon.github.io/2020/02/03/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/03/spring/</id>
    <published>2020-02-03T11:35:26.000Z</published>
    <updated>2020-02-03T11:35:47.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>객체 그래프를 조회하고 조작하는 기능을 말한다.<br>Unified EL과 비슷하지만, 메소드 호출을 지원하며, 문자열 템플릿 기능도 제공한다.<br>스프링 3.0 부터 지원.</p>
<p>JSP에서 봤던 Unified EL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:if test=&quot;$&#123;sessionScope.cart.numberOfItems &gt; 0&#125;&quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure></p>
<h3 id="어떻게-사용하나"><a href="#어떻게-사용하나" class="headerlink" title="어떻게 사용하나"></a>어떻게 사용하나</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;1+1&#125;&quot;)</div><div class="line">	int value;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;&apos;hello&apos; +&apos;world&apos;&#125;&quot;)</div><div class="line">	String greeting;</div><div class="line"></div><div class="line">	@Value (&quot;#&#123;1 eq1&#125;&quot;)</div><div class="line">	boolean trueOrFalse;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;my.value&#125;&quot;)</div><div class="line">	int myValue</div><div class="line"></div><div class="line">	//표현식 안에 프로퍼티를 넣음</div><div class="line">	// 프로퍼티 안에 표현식은 넣을 수 없다.</div><div class="line">	//my.value는 application.properties에 정의되어있다.</div><div class="line">	@Value(&quot;#&#123;$&#123;my.value&#125; eq 100&#125;&quot;)</div><div class="line">	int isMyValue100;</div><div class="line"></div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run() throws Exception &#123;</div><div class="line">		print(value);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#은 표현식을 참고하는 방법 $는 프로퍼티를 참고하는 방법.</code></p>
<p><code>#{“표현식&quot;}</code><br><code>${“프로퍼티&quot;}</code></p>
<p>아래와 같이 빈도 가능하다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">public class Sample &#123;</div><div class="line">	private intdata = 200;</div><div class="line"></div><div class="line">	public int getData() &#123;</div><div class="line">		return data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setData(int data) &#123;</div><div class="line">		this.data = data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public AppRunner implements ApplicationRunner &#123;</div><div class="line">	@Value(&quot;#&#123;sample.data&#125;&quot;)</div><div class="line">	int sampleData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref" target="_blank" rel="external">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref</a></p>
<h3 id="실제로-어디서-쓰나"><a href="#실제로-어디서-쓰나" class="headerlink" title="실제로 어디서 쓰나?"></a>실제로 어디서 쓰나?</h3><p>@Value 애노테이션<br>@ConditionalOnExpression 애노테이션 : 선별적으로 빈 등록<br>스프링 시큐리티</p>
<ul>
<li>메소드 시큐리티, @PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter<br>@Query</li>
</ul>
<p>ExpressionParser으로 직접 활용할 수도 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run() throws Exception &#123;</div><div class="line"></div><div class="line">		ExpressionParser parser = new SpelExpressionParser();</div><div class="line">		Expression expression = parser.parseExpression(&quot;2+100&quot;);</div><div class="line">		Integer value = expression.getValue(Integer.class);		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpEL&quot;&gt;&lt;a href=&quot;#SpEL&quot; class=&quot;headerlink&quot; title=&quot;SpEL&quot;&gt;&lt;/a&gt;SpEL&lt;/h3&gt;&lt;p&gt;객체 그래프를 조회하고 조작하는 기능을 말한다.&lt;br&gt;Unified EL과 비슷하지만, 메소드 호출을 지원하며,
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>20200201 서울미술관</title>
    <link href="http://KKimSangHeon.github.io/2020/02/02/photograph/"/>
    <id>http://KKimSangHeon.github.io/2020/02/02/photograph/</id>
    <published>2020-02-02T10:51:10.000Z</published>
    <updated>2020-02-02T10:57:15.198Z</updated>
    
    <content type="html"><![CDATA[<p>서울미술관 - 보통의 거짓말<br><img src="/2020/02/02/photograph/IMG_3299_1.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3262.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3265.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3265_1.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3266.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3269.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3274.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3277.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3284.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3285.jpg" alt="1" title="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;서울미술관 - 보통의 거짓말&lt;br&gt;&lt;img src=&quot;/2020/02/02/photograph/IMG_3299_1.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/02/02/photograph/IMG_3262.jpg&quot; 
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>로그를 정제해보자</title>
    <link href="http://KKimSangHeon.github.io/2020/01/30/log/"/>
    <id>http://KKimSangHeon.github.io/2020/01/30/log/</id>
    <published>2020-01-30T12:12:30.000Z</published>
    <updated>2020-01-30T12:16:37.485Z</updated>
    
    <content type="html"><![CDATA[<p>사용하는 시스템에는 로그가 너무 많이 쌓여서 vi로 켜면 쉘이 꺼져버린다…<br>다음 방법을 사용하여 극복해보자</p>
<h3 id="뒷-부분-다른-파일로-추출"><a href="#뒷-부분-다른-파일로-추출" class="headerlink" title="뒷 부분 다른 파일로 추출"></a>뒷 부분 다른 파일로 추출</h3><p>tail -n 10000 server.log &gt; test.log<br>10000줄을 test.log로 생성</p>
<h3 id="뒷-부분-3줄만-보기"><a href="#뒷-부분-3줄만-보기" class="headerlink" title="뒷 부분 3줄만 보기"></a>뒷 부분 3줄만 보기</h3><p>tail -n 3 test.txt</p>
<h3 id="특정부분-찾고-그-이후-3줄-파일로-추출"><a href="#특정부분-찾고-그-이후-3줄-파일로-추출" class="headerlink" title="특정부분 찾고 그 이후 3줄 파일로 추출"></a>특정부분 찾고 그 이후 3줄 파일로 추출</h3><p>grep -A 3 “john” phonebook.txt<br>john 찾고 뒤에세줄출력<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;사용하는 시스템에는 로그가 너무 많이 쌓여서 vi로 켜면 쉘이 꺼져버린다…&lt;br&gt;다음 방법을 사용하여 극복해보자&lt;/p&gt;
&lt;h3 id=&quot;뒷-부분-다른-파일로-추출&quot;&gt;&lt;a href=&quot;#뒷-부분-다른-파일로-추출&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
      <category term="centos" scheme="http://KKimSangHeon.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>13.데이터 바인딩 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/30/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/30/spring/</id>
    <published>2020-01-30T12:08:56.000Z</published>
    <updated>2020-01-30T12:10:46.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="데이터-바인딩-추상화-Converter와Formatter"><a href="#데이터-바인딩-추상화-Converter와Formatter" class="headerlink" title="데이터 바인딩 추상화: Converter와Formatter"></a>데이터 바인딩 추상화: Converter와Formatter</h3><p>이전강의에서 봤던 PropertyEditor의 단점으로 인해 Converter와Formatter가 생겨났다</p>
<h3 id="PropertyEditor의-단점"><a href="#PropertyEditor의-단점" class="headerlink" title="PropertyEditor의 단점"></a>PropertyEditor의 단점</h3><ol>
<li>쓰레드 세이프하지 않음</li>
<li>무조건 스트링과 오브젝트의 관계이다. 즉 스트링을 오브젝트로 하거나 오브젝트를 스트링으로 변환하거나 밖에 못함.<br>getAsText() 메소드는 오브젝트를 문자열로<br>setAsText() 메소드는 문자열을 오브젝트로</li>
</ol>
<p>`바인딩은 조금 더 제너럴 해야한다.-&gt; Converter의 등장’</p>
<h3 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h3><p>아래는 앞에서 봤던 EventEditor 와 같은역할을 한다. 그리고 상태정보가 없기때문에 빈으로 등록하여 사용이 가능하다. ConverterRegistry에 등록하여 사용가능하다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class EventCoverter &#123;</div><div class="line"></div><div class="line">	@Component</div><div class="line">	public static StringToEventConverter implements Converter&lt;String, Event&gt; &#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public Event convert(String source) &#123;</div><div class="line">			return new Event(Integer.parseInt(source));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Component</div><div class="line">	public static class EventToStringConverter implements Converter&lt;Event, String&gt; &#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public String convert(Event source) &#123;</div><div class="line">			return source.getId().toString();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Component를 통해 빈으로 등록하지 않고 사용하려면. 아래를 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class WebConfig implements WebMvcConfigurer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void addFormatters(FormatterRegistry registry) &#123;</div><div class="line">		//ConverterRegistry에 등록하여 사용해야한다고 했지만 ConverterRegistry는 FormatterRegistry 를</div><div class="line">		//상속받기 때문에 FormatterRegistry로도 사용가능</div><div class="line">		registry.addConverter(new EventConverter.StringToEventConverter());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class EventController &#123;</div><div class="line">	@GetMapping(&quot;/event/&#123;event&#125;&quot;)</div><div class="line">	public String getEvent(@PathVariable Event event) &#123;</div><div class="line">		print(event);</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h3><p>PropertyEditor와 구현방식은 유사하다 implements 후 메소드 하나는 String 하나는 객체로 반환하여 사용.<br>얘 또한 마찬가지로 빈으로 등록되고 다른 빈을 주입받을 수 있다,</p>
<p>@Component<br>public class EventFormatter implements Formatter<event> {</event></p>
<pre><code>@Autowired
MessageSource messageSource;

@Override
public Event parse(String text, Locale locale) throws ParseException {
    Event event = new Event();
    int id = Integer.parseInt(text);
    event.setId(id);
    return event;
}

@Override
public String print(Event object, Locale locale) {
    return object.getId().toString();
}
</code></pre><p>}</p>
<p>@Component를 통해 빈으로 등록하지 않고 사용하려면. 아래를 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class WebConfig implements WebMvcConfigurer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void addFormatters(FormatterRegistry registry) &#123;</div><div class="line">		registry.addFormatter(new EventFormatter());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h3><p>이전까지  DataBinder(PropertyEditor이 상속)를 사용하여 데이터 변환을 했다면 이번챕터부터는 ConversionService를 사용하고 있는것이다.</p>
<p>addFormatters 메소드를 통해 등록되는 빈들은 Converter와Formatter들은 ConversionService에 등록되는 것이고 이를통해 실제 변환하는 작업을 한것.</p>
<p>ConversionService는 DefaultFormattingConversionService로 생성되는 경우가 많은데 DefaultFormattingConversionService는 FormatterRegistry/ConversionService 두 가지의 역할을 한다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ConversionService conversionService ;</div><div class="line"></div><div class="line">...</div><div class="line">conversionService. xxxxx를 활용하여 등록된 빈들을 활용가능</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>위와같이 사용가능하다.</p>
<p>하지만 스프링 부트에서는 addFormatters를 사용하지 않더라도 자동으로 Converter와Formatter을 conversionService 빈으로 등록해준다! (@Component 어노테이션은 붙여야함)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;데이터-바인딩-추상화-Converter와Formatter&quot;&gt;&lt;a href=&quot;#데이터-바인딩-추상화-Converter와Formatter&quot; class=&quot;headerlink&quot; title=&quot;데이터 바인딩 추상화: Converter와Formatt
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>12.데이터바인딩 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/28/spring2/"/>
    <id>http://KKimSangHeon.github.io/2020/01/28/spring2/</id>
    <published>2020-01-28T13:24:40.000Z</published>
    <updated>2020-01-30T12:10:45.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="데이터바인딩-추상화"><a href="#데이터바인딩-추상화" class="headerlink" title="데이터바인딩 추상화"></a>데이터바인딩 추상화</h3><p>데이터 바인딩 :어떤 프로퍼티의 값을 타겟 객체에 설정하는것.<br>즉 사용자가 입력한 값을 어플리케이션 객체 도메인에 동적으로 입력하는것<br>쉽게말하자면 입력값은 문자열인데 int,long, boolean, Book, Event 등과 같은 이벤트 타입으로변환해서 넣어주는 기능</p>
<h3 id="고전적인-방식"><a href="#고전적인-방식" class="headerlink" title="고전적인 방식"></a>고전적인 방식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Event&#123;</div><div class="line">	private Integer id;</div><div class="line">	private String title;</div><div class="line"></div><div class="line">	public Evnet(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	getter, setter</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class EventController &#123;</div><div class="line"></div><div class="line">	@GetMapping(&quot;/event/&#123;event&#125;&quot;)</div><div class="line">	public String getEvent(@PathVariable Event event) &#123;</div><div class="line">		print(event);</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@InitBinder</div><div class="line">	public void init(WebDataBinder webDataBinder) &#123;</div><div class="line">		webDataBinder.registerCustomEditor(Event.class, new EventEditor());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>지금 상태에서 돌리면 문자열을 Evnet로 변환할 수 없다는 에러가 발생할것이다. 이를 해결하기 위해 아래를 추가</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class EventEditor extends PropertyEditorSupport &#123;</div><div class="line">	@Override</div><div class="line">	public String getAsText() &#123;</div><div class="line">		Event event = (Event)getValue();</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void setAsText(String text) throws ...&#123;</div><div class="line">		setValue(new Event(Integer.parseInt(text)));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PropertyEditor의 구현체는 쓰레드세이프하지 않다. 즉 여러 스레드에서 공유해서 쓰면 안된다. 즉 빈으로 등록해서 쓰면 안된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;데이터바인딩-추상화&quot;&gt;&lt;a href=&quot;#데이터바인딩-추상화&quot; class=&quot;headerlink&quot; title=&quot;데이터바인딩 추상화&quot;&gt;&lt;/a&gt;데이터바인딩 추상화&lt;/h3&gt;&lt;p&gt;데이터 바인딩 :어떤 프로퍼티의 값을 타겟 객체에 설정하는것.&lt;br&gt;
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>11.Validation 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/28/spring1/"/>
    <id>http://KKimSangHeon.github.io/2020/01/28/spring1/</id>
    <published>2020-01-28T13:24:34.000Z</published>
    <updated>2020-01-28T13:26:57.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Validation-추상화"><a href="#Validation-추상화" class="headerlink" title="Validation 추상화"></a>Validation 추상화</h3><p>자바 EE 표준스펙중에 하나이다.</p>
<p>org.springframework.validation.Validator는 어플리케이션에서 사용하는 객체 검증용 인터페이스이다.</p>
<p>boolean supports(Class clazz): 검증하는것을 지원하는지 판단<br>void validate(Object obj, Errors e): 실제 검증 로직을 이 안에서 구현</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Event &#123;</div><div class="line">	public String id;</div><div class="line">	public String title;</div><div class="line"></div><div class="line"></div><div class="line">	getter ,setter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class EventValidator implements Validator &#123;</div><div class="line">	@Override</div><div class="line">	pulbic boolean supports(Class&lt;?&gt; clazz) &#123;</div><div class="line">		return Event.class.equals(clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void validate(Object target, Errors errors) &#123;</div><div class="line">		ValidationUtils.rejectIfEmptyOrWhitespace(errors, &quot;title&quot;, &quot;title이 빈것은 허용하지 않음.&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line">public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">	Event event = new Event();</div><div class="line">	EventValidator eventValidator = new EventValidator();</div><div class="line"></div><div class="line">	eventValidator.validate(event, errors);</div><div class="line"></div><div class="line">	print(errors.hasErrors());</div><div class="line"></div><div class="line">	errors.getAllErrors().forEach(e-&gt; &#123;</div><div class="line">		Arrays.stream(e.getCodes()).forEach(System.out::println);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="스프링-부트-2-0-5-이상부터는"><a href="#스프링-부트-2-0-5-이상부터는" class="headerlink" title="스프링 부트 2.0.5 이상부터는"></a>스프링 부트 2.0.5 이상부터는</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Event &#123;</div><div class="line">	public String id;</div><div class="line"></div><div class="line">	@NotEmpty</div><div class="line">	public String title;</div><div class="line"></div><div class="line">	@Min(0)</div><div class="line">	Integer limit;</div><div class="line"></div><div class="line">	@Email</div><div class="line">	public String email;</div><div class="line"></div><div class="line">	getter ,setter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line">@Autowired</div><div class="line">Validator validator;</div><div class="line"></div><div class="line">public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">	Event event = new Event();</div><div class="line">	event.setLimit(-1)</div><div class="line">	event.setEmail(&quot;qwe&quot;);</div><div class="line"></div><div class="line"></div><div class="line">	validator.validate(event, errors);</div><div class="line"></div><div class="line">	print(errors.hasErrors());</div><div class="line"></div><div class="line">	errors.getAllErrors().forEach(e-&gt; &#123;</div><div class="line">		Arrays.stream(e.getCodes()).forEach(System.out::println);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Validation-추상화&quot;&gt;&lt;a href=&quot;#Validation-추상화&quot; class=&quot;headerlink&quot; title=&quot;Validation 추상화&quot;&gt;&lt;/a&gt;Validation 추상화&lt;/h3&gt;&lt;p&gt;자바 EE 표준스펙중에 하나이다.&lt;/p&gt;
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>10.Resource 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/20/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/20/spring/</id>
    <published>2020-01-20T13:35:31.000Z</published>
    <updated>2020-01-21T12:16:11.452Z</updated>
    
    <content type="html"><![CDATA[<p>지금까지 ApplicationContext는 단순한 빈 팩토리가아니라 여러가지 기능을 하는것을 알아봤었다.</p>
<h3 id="Resource-추상화"><a href="#Resource-추상화" class="headerlink" title="Resource 추상화"></a>Resource 추상화</h3><p>지금까지는 IoC에 대해 살펴봤다면 지금부터는 추상화에 대해 알아보겠다</p>
<p>스프링에서는 Reosurce(org.springframework.core.io.Resource)를 추상화 하였다.</p>
<p>java.net.URL를 Resource라는 클래스로 감싸서 추상화함. 스프링입장에서 필요한 클래스패스에서 리소스를 가져올 수 있게함.</p>
<h3 id="추상화-이유"><a href="#추상화-이유" class="headerlink" title="추상화 이유"></a>추상화 이유</h3><p>java.net.URL이 클래스패스를 기준으로 리소스를 가져오는 기능이 없었음.<br>또한 java.net.URL이 여러가지 프리픽스(ftp,http 등)을 제공하는데 스프링입장에선 클래스패스를 기반으로 가져오는것도 필요했다.(위와 동일한내용)<br>(기존스프링은 ClassPathXmlApplicationContext으로 리소스를 가져와야했음.)<br>클래스 패스를 기반으로 가져올 수 있도록 할 수는 있지만(새로운 핸들러 등록하여) 구현이 복잡하고 편의성 메소드가 부족하다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">var ctx = new ClassPathXmlApplicationContext(&quot;sangheon.xml&quot;);</div><div class="line"></div><div class="line">// 내부적으로 getResource를 호출(그러나 다른 구현체임)</div><div class="line">// FileSystemXmlApplicationContex 도 마찬가지</div></pre></td></tr></table></figure>
<p>여러 메소드는 내부적으로 resource관련 메소드를 호출한다. 즉 우리는 모르게 리소스의 구현체를 사용하고 있었다.</p>
<h3 id="Resource-인터페이스"><a href="#Resource-인터페이스" class="headerlink" title="Resource 인터페이스"></a>Resource 인터페이스</h3><p><a href="https://www.google.com/url?q=https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/Resource.html&amp;ust=1579648260000000&amp;usg=AFQjCNFJPcfSP77r_I5NqPaHMR1tElL6kg&amp;hl=ko" target="_blank" rel="external">https://www.google.com/url?q=https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/Resource.html&amp;ust=1579648260000000&amp;usg=AFQjCNFJPcfSP77r_I5NqPaHMR1tElL6kg&amp;hl=ko</a> 참고<br>getInputStream()<br>exitst()<br>isOpen()<br>getDescription(): 전체 경로 포함한 파일 이름 또는 실제 URL</p>
<h3 id="Resource-인터페이스의-구현체"><a href="#Resource-인터페이스의-구현체" class="headerlink" title="Resource 인터페이스의 구현체"></a>Resource 인터페이스의 구현체</h3><ul>
<li>UrlResource: java.net.URL 참고, 기본으로 지원하는 프로토콜 http, https, ftp, file, jar.</li>
<li>ClassPathResource: 지원하는 접두어 classpath:</li>
<li>FileSystemResource</li>
<li>ServletContextResource: 웹 애플리케이션 루트에서 상대 경로로 리소스 찾는다.<br>(얘를 가장 많이 쓰는데 읽어들이는 리소스 타입이 ApplicationContext와 관련있기 때문.)<br>…</li>
</ul>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p><code>Resource의 타입은 locaion 문자열과 ApplicationContext의 타입에 따라 결정 된다.</code><br>ApplicationContext가 FileSystemXmlApplicationContext 이면 매개변수로 받는 문자열은 filesystem resource로 리졸빙을 한다.<br>WebApplicationContext 이면 문자열은 서블릿 컨텍스트 리소스로 리졸빙을 한다.</p>
<p>그래서 문자열은 내가 사용할 ApplicationContext에 따라 달라진다.</p>
<p>하지만 ApplicationContext의 타입에 상관없이 리소스 타입을 강제하려면 java.net.URL 접두어(+ classpath:)중 하나를 사용할 수 있다..<br>예시</p>
<ul>
<li>classpath:me/whiteship/config.xml -&gt; ClassPathResource</li>
<li>file:///some/resource/path/config.xml</li>
</ul>
<p>강사님은 ApplicationContext를 쓰고 접두어를 사용할 것을 추천하였다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ApplicationContext resourceLoader ;</div><div class="line">...</div><div class="line"></div><div class="line">print(resourceLoader.getClass());	// 서블릿웹서버어플리케이션 콘텍스트로 찍힌다,</div><div class="line">Resouce resource = resourceLoader.getResource(&quot;classpath:text.txt&quot;);</div><div class="line">print(resource.getClass())	// ClassPathResource로 찍힌다.</div><div class="line">print(resource.exists());	//true</div></pre></td></tr></table></figure>
<p>prefix를 지워보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">resource = resourceLoader.getResource(&quot;text.txt&quot;);</div><div class="line">print(resource.getClass())	// 서블릿콘텍스트 리소스가 된다.</div><div class="line">print(resource.exists());	//false</div></pre></td></tr></table></figure></p>
<p>서블릿콘텍스트 리소스는 text.txt를 웹어플리케이션 루트 즉 컨텍스트 패스부터 찾게 나서게된다,<br>그런데 스프링부트가 띄워주는 내장형 톰켓에는 컨텍스트 패스가 지정되어있지 않으므로 리소스를 찾을 수 없다</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;지금까지 ApplicationContext는 단순한 빈 팩토리가아니라 여러가지 기능을 하는것을 알아봤었다.&lt;/p&gt;
&lt;h3 id=&quot;Resource-추상화&quot;&gt;&lt;a href=&quot;#Resource-추상화&quot; class=&quot;headerlink&quot; title=&quot;R
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>20200119 율동공원</title>
    <link href="http://KKimSangHeon.github.io/2020/01/19/photography/"/>
    <id>http://KKimSangHeon.github.io/2020/01/19/photography/</id>
    <published>2020-01-19T13:57:45.000Z</published>
    <updated>2020-01-28T13:27:36.372Z</updated>
    
    <content type="html"><![CDATA[<p>출사 소모임 세번째 활동<br><img src="/2020/01/19/photography/IMG_3091.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_2953.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_2950.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_2947.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_2981.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3010.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3012.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3037.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3049.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3072.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3076.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3081.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3083.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3092.jpg" alt="1" title="1"><br><img src="/2020/01/19/photography/IMG_3105.jpg" alt="1" title="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;출사 소모임 세번째 활동&lt;br&gt;&lt;img src=&quot;/2020/01/19/photography/IMG_3091.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/01/19/photography/IMG_2953.jpg&quot; al
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>9.ResourceLoader</title>
    <link href="http://KKimSangHeon.github.io/2020/01/16/spring3/"/>
    <id>http://KKimSangHeon.github.io/2020/01/16/spring3/</id>
    <published>2020-01-16T12:58:25.000Z</published>
    <updated>2020-01-16T13:40:23.691Z</updated>
    
    <content type="html"><![CDATA[<p>리소스를 읽어오는 기능을 제공하는 인터페이스인 ResourceLoader를 ApplicationContext이 구현한다.</p>
<p>test.txt 파일을 리소스 안에 넣어주자.</p>
<figure class="highlight java"><figcaption><span>AppRunner.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  ResourceLoader를 resourceLoader를;  <span class="comment">// ApplicationContext로 해도 가능하긴함</span></div><div class="line">...run()&#123;</div><div class="line">    Resouce resource = resourceLoader.getResource(<span class="string">"classpath:test.txt"</span>);</div><div class="line">    print(resource.exists());</div><div class="line">    print(resource.getDescription());</div><div class="line">    print(Files.readString(Path.of(resource.getURI())));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;리소스를 읽어오는 기능을 제공하는 인터페이스인 ResourceLoader를 ApplicationContext이 구현한다.&lt;/p&gt;
&lt;p&gt;test.txt 파일을 리소스 안에 넣어주자.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>8.ApplicationEventPublisher</title>
    <link href="http://KKimSangHeon.github.io/2020/01/16/spring2/"/>
    <id>http://KKimSangHeon.github.io/2020/01/16/spring2/</id>
    <published>2020-01-16T12:15:47.000Z</published>
    <updated>2020-01-16T13:32:01.234Z</updated>
    
    <content type="html"><![CDATA[<p>ApplicationContext가 상속받고있는 ApplicationEventPublisher인터페이스로서 이는 이벤트 프로그래밍에 필요한 인터페이스이다.</p>
<p>MyEvent를 만들고<br><figure class="highlight java"><figcaption><span>MyEvent.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">implements</span> <span class="title">ApplicationEvent</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> data;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, <span class="keyword">int</span> data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(source);</div><div class="line">    <span class="keyword">this</span>.data=data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이벤트를 발생시켜보자.<br><figure class="highlight java"><figcaption><span>AppRunner.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  ApplicationEventPublisher publishEvent;  <span class="comment">// ApplicationContext로 해도 가능하긴함</span></div><div class="line">...run()&#123;</div><div class="line">  <span class="comment">//이벤트 발생</span></div><div class="line">  publishEvent.publishEvent(<span class="keyword">new</span> MyEvent (<span class="keyword">this</span>,<span class="number">100</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이벤트가 발생했을 때 해당이벤트를 받는 핸들러는 빈으로 등록되어 있어야 한다.<br>이벤트를 받는 핸들러를 정의하자.</p>
<figure class="highlight java"><figcaption><span>MyEventHandler.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">MyEvent</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</div><div class="line">    print(<span class="string">"핸들러가 받은 이벤트의 데이터"</span>+event.getData());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>4.2 이후부터는 위와같이 불편하게 하지 않아도 된다.</code></p>
<p>Event 클래스는 ApplicationEvent를 구현하지 않아도 된다.<br><figure class="highlight java"><figcaption><span>MyEvent.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> data;</div><div class="line">  <span class="keyword">private</span> Object source;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source, <span class="keyword">int</span> data)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.source = source;</div><div class="line">    <span class="keyword">this</span>.data = data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> source;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위와같은 소스는 스프링이 추구하는 비침투성(스프링 코드가 사용자 코드에 들어가지 않는것)을 구현한것</p>
<p>핸들러도 ApplicationListener 인터페이스를 구현하지 않아도 되게 되었지만 빈으로는 등록해야 한다.</p>
<figure class="highlight java"><figcaption><span>MyEventHandler.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventHandler</span></span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@EventListener</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myhandle</span><span class="params">(MyEvent event)</span> </span>&#123;</div><div class="line">    print(<span class="string">"핸들러가 받은 이벤트의 데이터"</span>+event.getData());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>여러개의 핸들러가 하나의 이벤트를 핸들 할 경우?</code><br>동일한 쓰레드 내에서 순차적으로 실행된다. 순서는 보장되지 않으며 순서를 보장하고 싶으면 다음과 같이 @Order을 주면 된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@EventListener</div><div class="line">@Order(Ordered.HIGHEST_PRECEDENCE)  // @Order(Ordered.HIGHEST_PRECEDENCE)+3</div><div class="line">//낮은것이 먼저 실행됨</div><div class="line">public void myhandle(MyEvent event) &#123;</div><div class="line">  print(&quot;핸들러가 받은 이벤트의 데이터&quot;+event.getData());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>비동기적으로 실행하고 싶을 때는?</code><br>순서는 보장안된다. 이땐 order도 무의미해짐.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@EventListener</div><div class="line">@Async</div><div class="line">//낮은것이 먼저 실행됨</div><div class="line">public void myhandle(MyEvent event) &#123;</div><div class="line">  print(&quot;핸들러가 받은 이벤트의 데이터&quot;+event.getData());</div><div class="line">&#125;</div><div class="line">``</div></pre></td></tr></table></figure></p>
<p>그리고 Application 클래스에 @EnableAsync 어노테이션을 붙여준다.<br>이 외에도 쓰레드 풀에 관련한 설정을 더 해야되는데 비동기 관련된 수업이 아니므로 건너뛴다.</p>
<p><code>스플링이 기본적으로 제공하는 이벤트들을 확인해보자</code><br>ContextRefreshedEvent: ApplicationContext를 초기화 했더나 리프래시 했을 때 발생.<br>ContextStartedEvent: ApplicationContext를 start()하여 라이프사이클 빈들이 시작 신호를 받은 시점에 발생.<br>ContextStoppedEvent: ApplicationContext를 stop()하여 라이프사이클 빈들이 정지 신호를 받은 시점에 발생.<br>ContextClosedEvent: ApplicationContext를 close()하여 싱글톤 빈 소멸되는 시점에 발생.<br>RequestHandledEvent: HTTP 요청을 처리했을 때 발생.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@EventListener</div><div class="line">public void myhandle(ContextRefreshedEvent event) &#123;</div><div class="line">  print(&quot;핸들러가 받은 이벤트의 데이터&quot;+event.getData());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이벤트는 위와같이 확인할 수 있다는점을 잊지말자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ApplicationContext가 상속받고있는 ApplicationEventPublisher인터페이스로서 이는 이벤트 프로그래밍에 필요한 인터페이스이다.&lt;/p&gt;
&lt;p&gt;MyEvent를 만들고&lt;br&gt;&lt;figure class=&quot;highlight ja
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>7.MessageSource</title>
    <link href="http://KKimSangHeon.github.io/2020/01/16/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/16/spring/</id>
    <published>2020-01-16T10:50:46.000Z</published>
    <updated>2020-01-16T12:01:17.591Z</updated>
    
    <content type="html"><![CDATA[<p>ApplicationContext가 갖고있는 또다른 기능인 MessageSource에 대해 알아보겠다.<br>ApplicationContext가 MessageSource 인터페이스를 구현한다.</p>
<p>i18n와 관련된 기능인데 메세지를 다국화 하는 기능이다.</p>
<p>스프링 부트를 사용한다면 아래 두개를 바로 만들어 사용할 수 있다.</p>
<figure class="highlight java"><figcaption><span>messages.properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">greeting=Hello &#123;<span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>messages_ko_kr.properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">greeting=안녕, &#123;<span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>AppRunner.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  MessageSource messageSource;  <span class="comment">// ApplicationContext로 해도 가능하긴함</span></div><div class="line">...run()&#123;</div><div class="line">  print(messageSource.getMessage(<span class="string">"greeting"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"sangheon"</span>&#125;,Locale.KOREA));</div><div class="line">  print(messageSource.getMessage(<span class="string">"greeting"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"sangheon"</span>&#125;,Locale.getDefault()));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>동작원리?</code> ResourceBundleMessageSource라는 빈이 메세지를 읽어들인다.</p>
<p><code>직접 MessageSource를 정의해보자</code><br>ReloadableResourceBundleMessageSource는 reload가 가능한 것으로서 운영중에 메세지 변경이 가능하다. 즉 프로그램 런타임 중에 빌드를 다시해주면 변경된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">public MessageSource messageSource() &#123;</div><div class="line">  var messageSource = new ReloadableResourceBundleMessageSource();</div><div class="line">  messageSource.setBasename(&quot;classpath:/messages&quot;);</div><div class="line">  messageSource.setDefaultEncoding(&quot;UTF-8&quot;);</div><div class="line">  messageSource.setCacheSeconds(3);</div><div class="line">  return messageSource;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ApplicationContext가 갖고있는 또다른 기능인 MessageSource에 대해 알아보겠다.&lt;br&gt;ApplicationContext가 MessageSource 인터페이스를 구현한다.&lt;/p&gt;
&lt;p&gt;i18n와 관련된 기능인데 메세지를 다국
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>6.Environment 프로파일, 프로퍼티</title>
    <link href="http://KKimSangHeon.github.io/2020/01/15/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/15/spring/</id>
    <published>2020-01-15T12:46:20.000Z</published>
    <updated>2020-01-15T13:32:17.594Z</updated>
    
    <content type="html"><![CDATA[<p>지금까진 빈과 빈을 등록하는 방법에 대해 알아봤는데 applicationContext에 대해 더 알아보겠다.</p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p>ApplicationContext는 빈  보관 외 다양한 기능을 갖고있는데 그 중 EnvironmentCapable(ApplicationContext가 EnvironmentCapable를 구현한다)는 두가지 기능을 제공하는 데 그 중 프로파일이라는 기능에 대해 알아보겠다.</p>
<p><code>프로파일</code>: 빈들의 묶음이다. 어떤 환경을 의미한다. 즉 각각의 환경에 따라 다른 빈을 써야하는 경우 유용(ex. 테스트 서버에서는 a빈을 쓰겠다.)</p>
<figure class="highlight java"><figcaption><span>TestConfiguration.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> BookRepository <span class="title">bookRepository</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TestBookRepository();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>위처럼 할 경우 다른곳에서</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">BookRepository bookRepository;</div></pre></td></tr></table></figure>
<p>위와같이 호출할 경우 BookRepository 빈을 못찾게 된다. 왜? test프로파일 일 때만 실행하도록 설정했기 때문(@Profile(“test”))</p>
<p><code>그렇다면 프로파일을 설정해보자</code><br>IDE에서 Active profile 설정을 줄 수 있다.<br>해당 옵션이 없으면<br>VM option에다 -Dspring.profiles.avtive=”test” 와 같이 주면 된다.</p>
<p><code>TestConfiguration 없이 빈에다 바로 프로파일 설정하는 방법은?</code><br>TestConfiguration방법은 불편하긴 하다. @profile를 붙여주자.<br><figure class="highlight java"><figcaption><span>TestBookRepository.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p><code>프로파일 표현식</code><br>! - not<br>&amp; - and<br>| - or<br>위와같이 표현식을 쓸 수 있다.<br>@Profile(“!prod &amp; test”) 일 경우 prod가 아니고 test인 경우에만 실행되는것이다.</p>
<p>다음과 같이 프로파일을 적용해 보며 확인해볼 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ApplicationContext ctx;</div><div class="line"></div><div class="line">@Autowired</div><div class="line">BookRepository bookRepository;</div><div class="line"></div><div class="line">public class AppRunner implements ApplicationRunner&#123;</div><div class="line">..run()&#123;</div><div class="line">  Environment environment = ctx.getEnvironment();</div><div class="line">  print(environment.getActiveProfile);    </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><p>어플리케이션에 등록되어있는 키 밸류 쌍에 접근하는 것으로 계층형으로 접근한다. 프로퍼티는 여러가지 형태로 제공될 수 있는데 OS에 있는 환경변수, 자바 실행할 때의 -D로 넘겨주는 옵션, 서블릿 컨텍스트, 서블릿 콘텍스트 등에도 들어갈 수 있다.</p>
<p><code>Property 설정방법 1</code><br>vm  옵션으로 -Dapp.name=spring5 을 입력하자.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ApplicationContext ctx;</div><div class="line"></div><div class="line">public class AppRunner implements ApplicationRunner&#123;</div><div class="line">...run()&#123;</div><div class="line">  Environment environment = ctx.getEnvironment();</div><div class="line">  print(environment.getProperty(&quot;app.name&quot;));    </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Property 설정방법 2</code><br>application.properties 파일 생성하고 app.name=spring 을 입력하자</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@PropertySource(&quot;classpath:/app.properties&quot;)</div><div class="line">public class Demospring51Application</div><div class="line">....</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Autowired</div><div class="line">ApplicationContext ctx;</div><div class="line"></div><div class="line">public class AppRunner implements ApplicationRunner&#123;</div><div class="line">...run()&#123;</div><div class="line">  Environment environment = ctx.getEnvironment();</div><div class="line">  print(environment.getProperty(&quot;app.name&quot;));        </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>두 방법을 사용하여 app.name을 설정하여 출력할경우 누가 출력될까<br>vm 옵션이 이긴다.</p>
<p>아래처럼도 설정이 가능하다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class AppRunner implements ApplicationRunner&#123;</div><div class="line"></div><div class="line">  @Value(&quot;$&#123;app.name&#125;&quot;)</div><div class="line">  String appName;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;지금까진 빈과 빈을 등록하는 방법에 대해 알아봤는데 applicationContext에 대해 더 알아보겠다.&lt;/p&gt;
&lt;h3 id=&quot;Environment&quot;&gt;&lt;a href=&quot;#Environment&quot; class=&quot;headerlink&quot; title=&quot;En
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>AWS VPC 전반 기초 요약</title>
    <link href="http://KKimSangHeon.github.io/2020/01/14/aws/"/>
    <id>http://KKimSangHeon.github.io/2020/01/14/aws/</id>
    <published>2020-01-14T00:29:38.000Z</published>
    <updated>2020-01-14T10:11:12.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h3><p>전세계에서 가장 많이 쓰는 퍼블릭 서버<br>IAAS로 시작함</p>
<h3 id="가용성-존-AZ"><a href="#가용성-존-AZ" class="headerlink" title="가용성 존(AZ)"></a>가용성 존(AZ)</h3><p>가장 기본적인 단위는 Region 이다.<br>한국의 경우 서울 하나만 있다.<br>Region는 논리적인 단위이고 가용성 존(AZ)이 물리적인 단위이다.<br>한 Region은 여러개의 가용성 존을 갖고 있다.<br>가용성 존이 오늘 다룰 단위이다.</p>
<p>AZ 하나는 CIDC(클라우드 IDC)로서 하나의 단위이다.</p>
<p>VPC(Virtual Private Cloud) - AZ를 포함하는 단위. 리전마다 만들 수 있다.<br>자기 자신만의 가상 IDC를 만들어서 활용하는것.</p>
<p>가상서버의 인스턴스는 VPC안에 생성된다.</p>
<p>IDC는 게이트웨이, 방화벽, 서버, 서브넷 등이 필요한데 이들은 VPC안에 정의 가능하다.</p>
<img src="/2020/01/14/aws/vpc.png" alt="VPC" title="VPC">
<p><code>Bastion Host / VPN</code> 으로 접속하는 방법이 있다.  Bastion Host의 경우 SSH을 열은 EC2 로 접근하여 다른 서브넷에 접근하는 방식이다.<br>둘 다 그림으론 IGW를 안거치는것 처럼 보이지만 거치는 형태이다.</p>
<p><code>ELB</code> 는 로드벨런서이다.</p>
<h3 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h3><p>vpc 검색</p>
<h3 id="VPC-생성"><a href="#VPC-생성" class="headerlink" title="VPC 생성"></a>VPC 생성</h3><p>대부분의 오브젝트 이름이 태그로 관리된다. 논리적인 이름이다.</p>
<p><code>이름태그</code><br>퍼블릭 클라우드는 네이밍이 중요하기 떄문에 신중해야 함. 왜?<br>VPC를 여러개 만드는 경우가 생기게 되는데 (ex. 개발, 프로덕트, 스테이징 등등 생성하고자 할 때 / 부서별로 생성하는 경우)</p>
<p>네이밍 방법<br>vpc-opne2-dev-{서비스 약칭}</p>
<p>opne2 - 한국지역<br>dev - 개발용 (dev,prod,stg 중 선택)<br>서비스 약칭</p>
<p><code>IPv4 CIDR 블록</code><br>10.1.0.0/16 을 하면 156xx개를 사용할 수 있다</p>
<p><code>IPv6 CIDR 블록</code><br>IPv6를 지원하면 켜줘야함</p>
<p>이제 생성클릭</p>
<h3 id="VPC-목록-화면"><a href="#VPC-목록-화면" class="headerlink" title="VPC 목록 화면"></a>VPC 목록 화면</h3><p>VPC ID가 식별자이다.</p>
<p><code>DNS 호스트 이름</code> : 도메인네임도 내부 룰에 맞춰서 생성해서 붙여줄까?<br><code>라우팅 테이블</code> : VPC안에서 서브넷간 통신을 어떻게 할지<br>어디서 어디까지 흘러가는건 막고 등… 내부흐름 조절<br><code>DHCP 옵션 세트</code>:내부적으로 붙는 인스턴스가 AWS가 내부 IP로 붙인다.</p>
<p><code>네트워크 ACL</code> : 서브넷 단위의 firewall  주로 ACL보다는 시큐리티 그룹을 즐겨쓴다.</p>
<h4 id="DNS-호스트-이름-활성화"><a href="#DNS-호스트-이름-활성화" class="headerlink" title="DNS 호스트 이름 활성화"></a>DNS 호스트 이름 활성화</h4><p>좌측 위 작업 - DNS 호스트 이름 편집- 활성화 체크</p>
<hr>
<h4 id="인터넷-게이트웨이"><a href="#인터넷-게이트웨이" class="headerlink" title="인터넷 게이트웨이"></a>인터넷 게이트웨이</h4><p>VPC를 생성한 이후에 가장먼저해야할게 외부와 통신하기 위해 게이트웨이를 만들어야한다.</p>
<p>좌측에서 인터넷 게이트웨이 생성 클릭<br><code>네이밍 규칙</code><br>igw-opne2-dev</p>
<p>우즉 위 작업 - VPC에 연결클릭 후 연결시켜준다.</p>
<hr>
<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>firewall로서 서브넷 단위로 통신흐름을 제어하는데 인바운드 아웃바운드 제어가 가능. 서브넷 처럼 뭐는 되고 뭐는 안되는 세밀한 조정은 안됨</p>
<p>ACL은 서브넷 단위로 트래픽을 제어하고 RT를 통해 어느서브넷에서 나온것은 어디로 흘러갈지 정의한다.</p>
<p>ACL은 디폴트로 생성된다. 좌측에 네트워크 ACL 클릭 후 선택 후 인바운드, 아웃바운드 보면 다열려있다,</p>
<p>서브넷 연결탭은 아무것도 없는데 조금 뒤 서브넷을 만들고 설정하도록 하겠다.</p>
<hr>
<h4 id="서브넷-생성"><a href="#서브넷-생성" class="headerlink" title="서브넷 생성"></a>서브넷 생성</h4><p>VPC에 저복하기 위해서는 VPN을 사용하지만 이는 비용이 든다.</p>
<p>그래서 VPC 내 여러개의 서브넷 중 하나에 EC2를 생성하고 SSH로 접속하여 다른곳에 붙는다. 이를 Bastion Host라 함.</p>
<p>좌측 서브넷 선택<br><code>네이밍 규칙</code><br>subnet-opne2-dev-ssh</p>
<p><code>VPC 선택</code><br>가용영역: 서울리전에는 AZ가 3개가 있다고 했었따.</p>
<p><code>가용영역</code><br>서브넷은 가용영역이 있으므로 이름태그를 subnet-apne2a-dev-ssh로 수정한다. a는 가용영역 3개중 비교를 위해 붙임.</p>
<p>AZ를 여러개로 구성하여 다중화를 통해 장애에 유연하게 대처할 수 있도록 하는것이 좋다</p>
<p><code>CIDR</code><br>VPC가 갖고있는 범위안에서 CIDR을 만들어야 한다.(아까 만든 10.1.0.0/16)<br>10.1.1.0/24</p>
<p>관례적으로 3번째 숫자가 낮아질 수록 은밀성이 높아진다.<br>내부적으로 10번대는 웹서버, 20번대는 디비 …. 이런식으로 정한다.</p>
<p>VPC의 CIDR 블록값이 다른값과 겹치면 안된다.<br>블록값이 겹치면 VPC간 페어링을 해야할 때 동일한 CIDR 블록을 갖는것들은 페어링이 안된다.</p>
<p><code>과금팁</code></p>
<ul>
<li>EC2 는 메모리,CPU 를 점유하므로 그냥 있어도 과금이 된다.</li>
<li>같은 AZ안에서의 통신은 과금이 되지않는다(조금씩 다르긴하다)</li>
<li>인바운드는 보통 과금이 되지만 아웃바운드는 과금이 되지 않는 경우도 존재</li>
</ul>
<h3 id="다시-ACL가서-생성한-서브넷-연결확인"><a href="#다시-ACL가서-생성한-서브넷-연결확인" class="headerlink" title="다시 ACL가서 생성한 서브넷 연결확인"></a>다시 ACL가서 생성한 서브넷 연결확인</h3><p>좌측에 네트워크 ACL 선택 후 서브넷 하나 선택하고 서브넷 연결탭에서 등록되어있따 확인.</p>
<h3 id="라우트-테이블"><a href="#라우트-테이블" class="headerlink" title="라우트 테이블"></a>라우트 테이블</h3><p>VPC 왼쪽메뉴 보면 라우팅 테이블이있다.</p>
<p><code>네이밍규칙</code><br>rt-apne-dev-ssh</p>
<p>생성되어있는것의 이름을 네이밍 규칙에 맞게 설정</p>
<p>그 후 서브넷 연결 편 탭에서 서브넷 연결편집 클릭 - 하나 선택후 저장</p>
<h3 id="EC2-생성"><a href="#EC2-생성" class="headerlink" title="EC2 생성"></a>EC2 생성</h3><p>ec2 검색<br>인스턴스</p>
<p><code>키페어 생성</code><br>키페어 생성버튼 클릭</p>
<p>네이밍<br>keypair-apne2-dev-public 을 입력하고 파일을 내려받게된다.</p>
<p>키페어만 있으면 ACL, 시큐리티 그룹에서 막히지 않았을 때 어디서든 들어올 수 있다.</p>
<p><code>인스턴스 생성</code><br>왼쪽인스턴스 선택 - 인스턴스 생성 클릭 - Amazon Linux 2 AMI (HVM), SSD Volume Type - ami-0bea7fd38fabe821a 선택</p>
<p>t2.micro 는 Bastion Host로 사용하기에 널널하다<br>General Purpose의 유형중 t로 시작하는것은 개발/테스트 용도로 사용하기 적당<br>m으로 시작하는것은 메모리가 많다.<br>t 뒤에 위치한 숫자는 세대(Generation)라고 보면 된다.</p>
<p>t2.micro 선택 후 다음 클릭</p>
<p>네트워크에서 내가 만든것 선택<br>서브넷은 하나뿐일것임<br>퍼플릭 IP 자동할당 - 활성화 (외부와 통신이 필요할 때 활성화를 한다. 리스타트하면 ip가 바뀌므로 해당 ip로 통신하도록 박아놓으면 안된다.)<br>종료방식 - 중지(종료로 되어있으면 종료했을 때 인스턴스가 종료된다.)</p>
<p>네트워크 인터페이스</p>
<p>고급세부정보<br>인스턴스를 기동할 때 특정 행위를 하도록 할 수 있는데 여기에 집어넣는것.</p>
<p>다음 스토리지 추가 클릭</p>
<p>다음 태그추가 클릭<br>키가 : name<br>값이 : ec2-apne2a-dev-ssh</p>
<p>다음 보안그룹 클릭</p>
<p>보안그룹 이름 : sg-apne-dev-ssh으로 해야되지만<br>시큐리티 그룹은 특수문자를 허용하지 않기 때문에 sgapnedevssh로 하자</p>
<p>유형 : SSH<br>소스 : 내 IP<br>설명 : xxx(꼭 넣어주는것이 좋다. 어딘지 알 수 있도록)</p>
<p>검토및 시작 클릭 후 시작하기 클릭</p>
<p>기존 키 페어 선택 클릭 후 인스턴스 시작</p>
<p>퍼블릭 IP는 다시시작하면 바뀌므로 접속정보로 사용하지 말것.</p>
<hr>
<h3 id="라우트-테이블에-연결"><a href="#라우트-테이블에-연결" class="headerlink" title="라우트 테이블에 연결"></a>라우트 테이블에 연결</h3><p>왼쪽탭의 라우팅테이블<br>라우팅 추가 - 0.0.0.0/0<br>(잘 선택해서 추가해라… 잘못해서 해멨다..)</p>
<p>EC2에 접속해보면 잘될것이다.</p>
<h3 id="1차-정리해보자"><a href="#1차-정리해보자" class="headerlink" title="1차 정리해보자"></a>1차 정리해보자</h3><p>가상의 IDC이다.</p>
<p>외부와 통신하기 위해 게이트웨이를 붙이고</p>
<p>VPC에 게이트웨이 바인딩하고 서브넷을 만들었다.</p>
<p>서브넷은 퍼블릿/프라이빗을 구분하기 위해 라우팅테이블에 포함되어 있는지 판단한다. 라우팅테이블에 존재하면 퍼블릭</p>
<p>ACL은 서브넷 단위까지밖에 관리 못함</p>
<p>실제로 인터넷 서비스를 이용하기 위해 게이트웨이, 라우터 등이 필요한데</p>
<p>집에있는 모뎀은 라우터 , 게이트웨이가 합쳐져있는것이다.</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum update</div></pre></td></tr></table></figure>
<h3 id="서브넷-새로-하나-추가"><a href="#서브넷-새로-하나-추가" class="headerlink" title="서브넷 새로 하나 추가"></a>서브넷 새로 하나 추가</h3><p>서브넷 (CIDR 추가), 라우팅테이블 추가</p>
<p><code>서브넷 추가</code><br>서브넷 탭에서 서브넷 생성<br>subnet-apne2a-dev-web<br>CIDR 블록<br>10.1.2.0/24<br>추가</p>
<p><code>라우팅테이블</code><br>서브넷 연결 설정<br>rt-apne2-dev-web<br>web에 0.0.0.0/0  /  Internet gateway 추가</p>
<p><code>보안그룹 생성</code><br>sgapne2devweb와<br>ssh / http 생성</p>
<p><code>EC2생성</code><br>ec2-apne2a-dev-web</p>
<p>생성한 서브넷에 접속하여</p>
<p>아래 입력<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo yum update</div><div class="line">sudo yum install httpd</div><div class="line">sudo systemctl start httpd</div><div class="line">curl localhost</div></pre></td></tr></table></figure></p>
<p>지금까지 환경 구성했ㅆ던것들을 템플릿화 하여 코드로 관리할 수 도 있다<br>CloudFormation 활용하여….</p>
<h3 id="로드벨런서"><a href="#로드벨런서" class="headerlink" title="로드벨런서"></a>로드벨런서</h3><p>서브넷에 붙기전에 로드벨런서에 붙는다.<br>이는 로컬 로드벨런서임.</p>
<p>elb를 거치도록 하는것이 좋다. elb는 다른서브넷에도 접근이 가능하다. 즉 서브넷이 죽었을 때 다른곳으로 보내줄 수 있다</p>
<p>elb에는 인스턴스를 식별할 수 있는것이 주어져야함</p>
<p>최근에는 DNS또한 로드벨런싱을 어느정도 해주긴 함.<br>DNS가 위치 등의 정보에 따라 적절한 elb에 연결해줌</p>
<h3 id="로드벨런서-생성-실습"><a href="#로드벨런서-생성-실습" class="headerlink" title="로드벨런서 생성 실습"></a>로드벨런서 생성 실습</h3><p>EC2의 좌측 로드밸런서 탭</p>
<p>로드밸런서 생성 클릭</p>
<p>Classic Load Balancer 생성<br>이름 : elb-apne2-deb-web<br>내부 로드 밸런서 생성 : 체크</p>
<p>다음<br>보안설정구성 그냥 다음</p>
<p>4단계: 상태 검사 구성은 헬스체크를 어디로 얼마 주기로 할 것인지.<br>다음</p>
<h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3><p>프라이빗으로 구성하여 yum update를 할 경우 외부로 나갈 수 없게되는데 이를 해결하기 위해 NAT를 쓴다.</p>
<p>기본적인가 BastionHost Public로 두고 ELB public로 하고<br>NAT, Web on premese 등을 private로 많이쓴다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AWS&quot;&gt;&lt;a href=&quot;#AWS&quot; class=&quot;headerlink&quot; title=&quot;AWS&quot;&gt;&lt;/a&gt;AWS&lt;/h3&gt;&lt;p&gt;전세계에서 가장 많이 쓰는 퍼블릭 서버&lt;br&gt;IAAS로 시작함&lt;/p&gt;
&lt;h3 id=&quot;가용성-존-AZ&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>5.빈의 스코프</title>
    <link href="http://KKimSangHeon.github.io/2020/01/13/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/13/spring/</id>
    <published>2020-01-13T12:27:57.000Z</published>
    <updated>2020-01-13T13:17:57.374Z</updated>
    
    <content type="html"><![CDATA[<p>앞에까지는 아무 설정도 하지 않은 싱글톤 스코프의 빈을 사용하였다.<br>(강사님은 싱글톤 스코프 외에는 사용할 일이 거의 없을거라 하심.)</p>
<h3 id="싱글톤-스코프"><a href="#싱글톤-스코프" class="headerlink" title="싱글톤 스코프"></a>싱글톤 스코프</h3><p><code>싱글톤 스코프</code> : 어플리케이션에 걸쳐 인스턴스가 하나뿐!<br>어플리케이션 콘텍스트를 만들 때 만들어진다. 즉 어플리케이션 구동 시 시간이 길어질 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class Proto &#123;</div><div class="line">  @Autowired</div><div class="line">  Single single;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Component</div><div class="line">public class Single &#123;</div><div class="line">  @Autowired</div><div class="line">  Proto proto;</div><div class="line"></div><div class="line">  public Proto getProto() &#123;</div><div class="line">    return proto;</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="프로토타입-스코프"><a href="#프로토타입-스코프" class="headerlink" title="프로토타입 스코프"></a>프로토타입 스코프</h3><p><code>프로토타입 스코프</code> : 매번 새로운 인스턴스를 만드는 스코프<br>@Scope(“prototype”) 를 붙여주면 된다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Component @Scope(&quot;prototype&quot;)</div><div class="line">public class Proto &#123;</div><div class="line">  @Autowired</div><div class="line">  Single single;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 처럼 프로토 타입 빈이 싱글톤 빈을 참조하면 문제가 없다<br>(프로토타입의 빈은 매번 새롭겠지만 프로토타입의 빈은 동일 한 것)</p>
<p>하지만 싱글톤 빈이 프로토 타입 빈을 참조하면??<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class Single &#123;</div><div class="line"></div><div class="line">  @Autowired</div><div class="line">  private Proto proto;</div><div class="line"></div><div class="line">  public Proto getProto() &#123;</div><div class="line">    return proto;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">....getBean(Single.class).getProto()  </div><div class="line">....getBean(Single.class).getProto()</div><div class="line">....getBean(Single.class).getProto()</div></pre></td></tr></table></figure></p>
<p>마지막 3줄의 Proto 는 모두 동일<br>의도한 바가 아님!</p>
<h3 id="해결방법은"><a href="#해결방법은" class="headerlink" title="해결방법은?"></a>해결방법은?</h3><h4 id="해결방법-1-scoped-proxy"><a href="#해결방법-1-scoped-proxy" class="headerlink" title="해결방법 1. scoped-proxy"></a>해결방법 1. scoped-proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Component @Scope(&quot;prototype&quot;, proxyMode = ScopedProxyMode.TARGET_CLASS)</div><div class="line">public class Proto &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Proto 빈을 클래스기반 프록시로 감싸라<br>프록시로 감싸는 이유 : 다른 빈들이 프로토 빈을 직접 참조하면 안되기 때문에… 직접 쓰면 바궈줄 여지가 없다. cg라이브러리를 활용해 클래스 기반 프록시를 만들어준다.</p>
<p>Single 내 Proto의 참조변수는 Proto 클래스를 상속한 Proxy가 주입되게 되는것이다.</p>
<h4 id="해결방법-2-ObjectProvider"><a href="#해결방법-2-ObjectProvider" class="headerlink" title="해결방법 2.ObjectProvider"></a>해결방법 2.ObjectProvider</h4><p>1번이 어렵고 성능에도 영향을 줄것같다면 이 방법을 쓰자.  하지만 ObjectProvider라는 스프링 코드가 들어가기 때문에 조금 그렇다….</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Component @Scope(&quot;prototype&quot;)</div><div class="line">public class Proto &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class Single &#123;</div><div class="line"></div><div class="line">  @Autowired</div><div class="line">  private ObjectProvider&lt;Proto&gt; proto;</div><div class="line"></div><div class="line">  public Proto getProto() &#123;</div><div class="line">    return proto.getIfAvailable();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="싱글톤-객체를-사용할-때-주의해야-할-점"><a href="#싱글톤-객체를-사용할-때-주의해야-할-점" class="headerlink" title="싱글톤 객체를 사용할 때 주의해야 할 점"></a>싱글톤 객체를 사용할 때 주의해야 할 점</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class Single &#123;</div><div class="line"></div><div class="line">  int counter;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  counter++;  //Thread Safe하지 않다.</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="참고할것"><a href="#참고할것" class="headerlink" title="참고할것"></a>참고할것</h3><p><a href="https://en.wikipedia.org/wiki/Proxy_pattern" target="_blank" rel="external">https://en.wikipedia.org/wiki/Proxy_pattern</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;앞에까지는 아무 설정도 하지 않은 싱글톤 스코프의 빈을 사용하였다.&lt;br&gt;(강사님은 싱글톤 스코프 외에는 사용할 일이 거의 없을거라 하심.)&lt;/p&gt;
&lt;h3 id=&quot;싱글톤-스코프&quot;&gt;&lt;a href=&quot;#싱글톤-스코프&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Thingsboard</title>
    <link href="http://KKimSangHeon.github.io/2020/01/13/thingsboard/"/>
    <id>http://KKimSangHeon.github.io/2020/01/13/thingsboard/</id>
    <published>2020-01-13T11:24:26.000Z</published>
    <updated>2020-01-13T12:03:45.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Thingsboard"><a href="#Thingsboard" class="headerlink" title="Thingsboard"></a>Thingsboard</h3><ul>
<li>오픈소스 IoT 플랫폼으로서 데이터 수집, 처리, 시각화, 디바이스 관리 기능 등을 제공</li>
<li>클라우드, on-premise 환경에서 손쉬운 설치를 제공하며 데이터 유실이 없음 (한 노드가 죽었을 때 downtime 없이 대체 가능)</li>
<li>Multi-tenancy 구조</li>
<li>Downtime 없는 Scale Out 가능</li>
<li>SQL / NoSQL / SQL + NoSQL 사용 가능</li>
</ul>
<h3 id="가격정책"><a href="#가격정책" class="headerlink" title="가격정책"></a>가격정책</h3><img src="/2020/01/13/thingsboard/1.jpg" alt="가격정책" title="가격정책">
<p>사용 환경에 따른 다양한 가격정책이 존재. 영구사용의 경우 2999$</p>
<h3 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h3><img src="/2020/01/13/thingsboard/2.jpg" alt="Use Case" title="Use Case">
<h3 id="제공-설치환경"><a href="#제공-설치환경" class="headerlink" title="제공 설치환경"></a>제공 설치환경</h3><img src="/2020/01/13/thingsboard/3.jpg" alt="가격정책" title="가격정책">
<p>다양한 플랫폼에서 설치를 지원하므로 on premise 혹은 cloud 환경에 손쉽게 설치 가능.</p>
<h3 id="Multi-tenancy"><a href="#Multi-tenancy" class="headerlink" title="Multi-tenancy"></a>Multi-tenancy</h3><p>ThingsBoard의 유저 구분</p>
<ul>
<li>System Administrator</li>
<li>Tenant Administrator</li>
<li>Customer</li>
</ul>
<h3 id="Asset"><a href="#Asset" class="headerlink" title="Asset"></a>Asset</h3><img src="/2020/01/13/thingsboard/5.jpg" alt="Asset" title="Asset">
<p>논리적 구성단위인 Asset</p>
<ul>
<li>Asset과 Device를 계층 형태(Contain, Manage), 즉 상위/하위 개념으로 구성가능</li>
<li>Device, Asset에 속성 정보 지정가능</li>
</ul>
<p>속성정보 활용예</p>
<ul>
<li>Device의 속성정보에 위경도를 지정해 지도상에 표시 가능</li>
</ul>
<h3 id="Multi-tenancy-amp-Asset의-활용예"><a href="#Multi-tenancy-amp-Asset의-활용예" class="headerlink" title="Multi-tenancy &amp; Asset의 활용예"></a>Multi-tenancy &amp; Asset의 활용예</h3><img src="/2020/01/13/thingsboard/6.jpg" alt="Multi-tenancy & Asset" title="Multi-tenancy & Asset">
<h3 id="System-Administrator의-역할"><a href="#System-Administrator의-역할" class="headerlink" title="System Administrator의 역할"></a>System Administrator의 역할</h3><ul>
<li>IoT 플랫폼을 사용할 Tenant 관리</li>
<li>위젯관리</li>
<li>보안설정</li>
</ul>
<p>Security Setting 내 항목</p>
<ul>
<li>최대 로그인 시도횟수, 계정이 잠기게 될 경우 메일을 수신할 주소 설정</li>
<li>최소 패스워드 길이 설정</li>
<li>최소 소문자/대문자/숫자/특수문자 의 수 설정</li>
<li>패스워드 유지 기간 설정</li>
</ul>
<h3 id="Tenant-Administrator의-역할"><a href="#Tenant-Administrator의-역할" class="headerlink" title="Tenant Administrator의 역할"></a>Tenant Administrator의 역할</h3><ul>
<li>디바이스, 룰, 대시보드, 위젯 등을 관리하며 Customer 가 각종 정보를 확인할 수 있도록 권한을 부여 함.</li>
</ul>
<h3 id="기능-정리"><a href="#기능-정리" class="headerlink" title="기능 정리"></a>기능 정리</h3><img src="/2020/01/13/thingsboard/7.jpg" alt="룰관리 기능" title="룰관리 기능">
<img src="/2020/01/13/thingsboard/8.jpg" alt="디바이스 연동" title="디바이스 연동">
<img src="/2020/01/13/thingsboard/9.jpg" alt="기타" title="기타">
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Thingsboard&quot;&gt;&lt;a href=&quot;#Thingsboard&quot; class=&quot;headerlink&quot; title=&quot;Thingsboard&quot;&gt;&lt;/a&gt;Thingsboard&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;오픈소스 IoT 플랫폼으로서 데이터 수집, 처리, 
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>20200112 돈의문마을</title>
    <link href="http://KKimSangHeon.github.io/2020/01/12/photography/"/>
    <id>http://KKimSangHeon.github.io/2020/01/12/photography/</id>
    <published>2020-01-12T13:51:39.000Z</published>
    <updated>2020-01-12T14:01:45.382Z</updated>
    
    <content type="html"><![CDATA[<p>출사 소모임 두번째 활동<br><img src="/2020/01/12/photography/IMG_2802.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2794.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2799.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2814.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2825.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2834.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2839.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2843.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2847.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2867.jpg" alt="1" title="1"><br><img src="/2020/01/12/photography/IMG_2888.jpg" alt="1" title="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;출사 소모임 두번째 활동&lt;br&gt;&lt;img src=&quot;/2020/01/12/photography/IMG_2802.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/01/12/photography/IMG_2794.jpg&quot; al
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>4.@Component와 컴포넌트스캔</title>
    <link href="http://KKimSangHeon.github.io/2020/01/10/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/10/spring/</id>
    <published>2020-01-10T10:02:18.000Z</published>
    <updated>2020-01-10T11:00:14.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Component와-컴포넌트스캔"><a href="#Component와-컴포넌트스캔" class="headerlink" title="@Component와 컴포넌트스캔"></a>@Component와 컴포넌트스캔</h3><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>SpringBootApplication이 @ComponentScan을 갖고있는데 @ComponentScan으로 인해 @Service @Repository @Controller @Configuration를 붙이면 빈으로 등록되게 해준것이다.<br>(@Service/ @Repository/ @Controller/ @Configuration 은 내부적으로 @Component 를 갖고있다)</p>
<p>ComponentScan은 basePackagesClasses로 값을 주면 스캔을 해서 빈을 생성하게 된다.</p>
<p>즉 @SpringBootApplication이 어플리케이션 클래스에 붙어있을 경우 해당패키지에 대해 컴포넌트 스캔을 하게된다.(타 패키지는 스캔을 하지않음)</p>
<p>컴포넌트 스캔을 한다고 해서 모든것을 빈으로 생성해주진 않는다. @Filter 으로 원하지 않는것에 대해 거를 수 있다.</p>
<p><code>빈 주입이 잘안될땐 컴포넌트 스캔의 범위를 잘 생각해보자</code></p>
<p>요약하면 @Component스캔은 basePackagesClasses /  @Filter 만 기억하자!</p>
<p>빈이 많을경우 어플리케이션을 실행할 때 구동시간이 오래걸릴 수 있다.</p>
<p>구동시간이 오래걸려서 싫을 때는 펑션을 사용한 빈 등록을 고려해보자(Spring 5부터 지원)</p>
<h3 id="펑션을-사용한-빈-등록"><a href="#펑션을-사용한-빈-등록" class="headerlink" title="펑션을 사용한 빈 등록"></a>펑션을 사용한 빈 등록</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">MyBean 클래스는 @ComponentScan의 basePackagesClasses 범위 밖이다. MyBean은 @Service 없어도 됨.</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">	new SpringApplicationBuilder().sources(Demospring51Application.class)</div><div class="line">		.initializers((ApplicationContextInitializer&lt;GenericApplicationContext&gt;)applicationContext -&gt; &#123;</div><div class="line">			applicationContext.registerBean(MyBean.class);</div><div class="line">		&#125;).run(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위를 할경우 빈을 생성할 때 자신의 코드를 추가할 수 있고 구동시간의 이점이 있다.</p>
<h3 id="ComponentScan의-동작-원리"><a href="#ComponentScan의-동작-원리" class="headerlink" title="ComponentScan의 동작 원리"></a>ComponentScan의 동작 원리</h3><p>BeanPostProcessor이 아닌 BeanFactoryPostProcessor를 구현한 ConfigurationClassPostProcessor와 연결되어 있다.<br>BeanFactoryPostProcessor은 BeanPostProcessor와 비슷한데 실행되는 시점이 다름. 다른 모든 빈들이 만들어지기 전에 적용해준다.<br>다른빈들이 모두 등록되기전에 컴포넌트 스캔을 해서 빈을 등록해준다.<br>여기서 다른빈이란 펑션을 사용한 빈 등록 등등…</p>
<h3 id="참고사항"><a href="#참고사항" class="headerlink" title="참고사항"></a>참고사항</h3><p>펑션을 사용한 빈등록, @Bean 을 통해 빈을 등록하는 방법은 @ComponentScan을 나오게한 원인(많은 빈을 수동으로 등록하는 불편함)을 다시 야기하므로<br>@ComponentScan외의 것들을 사용하여 빈을 등록할 때는 잘생각해보자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Component와-컴포넌트스캔&quot;&gt;&lt;a href=&quot;#Component와-컴포넌트스캔&quot; class=&quot;headerlink&quot; title=&quot;@Component와 컴포넌트스캔&quot;&gt;&lt;/a&gt;@Component와 컴포넌트스캔&lt;/h3&gt;&lt;h3 id=&quot;Com
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>StreamSets의 에러처리</title>
    <link href="http://KKimSangHeon.github.io/2020/01/09/streamset/"/>
    <id>http://KKimSangHeon.github.io/2020/01/09/streamset/</id>
    <published>2020-01-09T12:59:00.000Z</published>
    <updated>2020-01-09T13:03:39.876Z</updated>
    
    <content type="html"><![CDATA[<p>에러 처리는 Stage(Origin, Processor, Destination, Executor) 관점, 파이프라인 관점에서 처리방법이 존재</p>
<h3 id="Stage-Origin-Processor-Destination-Executor-관점"><a href="#Stage-Origin-Processor-Destination-Executor-관점" class="headerlink" title="Stage(Origin, Processor, Destination, Executor) 관점"></a>Stage(Origin, Processor, Destination, Executor) 관점</h3><p>Discard , Send to Error, Stop Pipeline</p>
<h3 id="파이프라인-관점"><a href="#파이프라인-관점" class="headerlink" title="파이프라인 관점"></a>파이프라인 관점</h3><p>Discard, Send Response to Origin, Write to Another Pipeline, Write to Elasticsearch/File/Kafka …</p>
<img src="/2020/01/09/streamset/error1.png" alt="에러처리 예시" title="에러처리 예시">
<p>위 그림은 파이프라인을 총 2개 생성한 상황이다.</p>
<p><code>카프카 컨슘 파이프라인</code>에서 에러가 발생할 경우 SDC RPC를 통해 다른 파이프라인으로 에러내용을 전달하도록 하였고 <code>에러처리 파이프라인</code>에서는 RPC로 받은 에러데이터를 Email로 보내고 Local 파일로 저장하는 상황이다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;에러 처리는 Stage(Origin, Processor, Destination, Executor) 관점, 파이프라인 관점에서 처리방법이 존재&lt;/p&gt;
&lt;h3 id=&quot;Stage-Origin-Processor-Destination-Executor-관점
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>object</title>
    <link href="http://KKimSangHeon.github.io/2020/01/09/object/"/>
    <id>http://KKimSangHeon.github.io/2020/01/09/object/</id>
    <published>2020-01-09T12:57:06.000Z</published>
    <updated>2020-02-03T11:35:00.293Z</updated>
    
    <content type="html"><![CDATA[<h3 id="오브젝트-9장"><a href="#오브젝트-9장" class="headerlink" title="오브젝트 9장"></a>오브젝트 9장</h3><p>OCP - 추상화에 의존하여 컴파일 타임의존성은 유지하면서 런타임 의존성의 가능성을 확장하고 수정할 수 있는 구조.</p>
<p>객체 생성,사용자 분리 - 동일 클래스 안에서 객체 생성과 사용이라는 두가지 이질적인 목적을 가진 코드가 공존할 경우 부적절.<br>(Movie에게 금액할인정책을 적용할지, 비율할인 정책을 적용할지 알고 있는것은 그 시점에 Movie와 협력할 클라이언트이므로 클라이언트가 할인정책을 생성하고 Movie는 추상화된 메소드를 사용하여 구현)</p>
<p>FACTORY - 생성과 사용을 분리하기 위해 객체생성에 특화된 객체</p>
<p>표현적 분해 - 도메인에 존재하는 사물 또는 개념을 표현하는 객체들을 이용해 시스템 분해</p>
<p>PURE FABRICATION - 특정 책임을 할당하기 위해 Information expert를 찾아봤는데 없을 경우 도메인 모델에 속하지 않는 Factory를 활용. 보통 행위적 분해로 인해 생성되는것이 대부분</p>
<p>의존성주입 - 생성자 주입, setter주입, 메서드 주입(주입인가에 대한 논란이 있다)</p>
<p>SERVICE LOCATOR 패턴 - 저장소(Storage.AmountDiscountPolicy)를 통해 의존성 해결하는 패턴 (가장널리 쓰임 - 그렇지만 비추함)</p>
<p>의존성역전원칙 - 상위 모듈, 하위모듈 둘 다 추상화에 의존하라(과거 패러다임은 상위가 하위에 의존)</p>
<p>SEPARATED INTERFACE 패턴 - 추상화(인터페이스 등)를 별도의 패키지가 아닌 클라이언트가 속한 패키지에 포함시켜라</p>
<h3 id="오브젝트-10장"><a href="#오브젝트-10장" class="headerlink" title="오브젝트 10장"></a>오브젝트 10장</h3><p>상속을 위한 경고- 자식 클래스의 메소드 아넹서 super 참조를 이용해 부모클래스의 메소드를 호출할 경우 두 클래스는 강하게 결합된다. super호출을 제거 할 수읶는 방법을 찾아라</p>
<p>경고2 상속받은 부모 클래스의 메소드가 자식 클래스의 내부 구조에 대한 규칙을 깨뜨릴수있다<br>ex 스택 add(0,”data”) 으로 맨앞에 넣는것…</p>
<p>경고3 자식 클래스가 부모 클래스의 메소드를 오버라이딩 할 경우 부모클래스가 자신의 메소드를 사용하는 방법에 클래스가 결합될 수 있다</p>
<p>경고4 클래스를 상속하면 결합도로 인해 자식 클래스와 부모 클래스의 구현을 영원히 변경하지 않거나, 자식 클래스와 부모 클래스를 동시에 변경하거나 둘 중 하나를 선택할 수 밖에 없다</p>
<p>취약한 기반 클래스문제- 자식클래스가 부모 클래스의 뱐경에 취약해지는 현상</p>
<p>상속문제 해결방법<br>1.차이를 메서드로 추출하라 -&gt; 중복코드를 부모 클래스로 올려라(메소드 먼저 올리면 불필요한 인스턴스 변수를 남겨두기 쉽다) -&gt; 다른부분은 시그니처만 올려라(protected로)</p>
<p>상속의 오용과 남용은 어플리케이션을 이해하고 확장하기 어렵게 만드므로 정말로 필요한 경우에만 사용하라</p>
<h3 id="오브젝트-11장"><a href="#오브젝트-11장" class="headerlink" title="오브젝트 11장"></a>오브젝트 11장</h3><p>재사용을 위한 방법 - 상속, 합성<br>상속관계 - Is-a - 화이트박스 재사용(부모클래스의 내부가 자식에 공개되기 때문)<br>합성관계 - Has-a - 블랙박스 재사용(객체의 내부는 공개되지 않고 인터페이스를 통해서만 재사용됨.)</p>
<p>상속은 결합도를 높이며 코드재사용을 위해서는 상속보다는 합성을 써라</p>
<p>상속은 부모클래스의 안에 구현된 코드에 의존하지만 합성은 객체의 퍼블릭 인터페이스를 의존하므로 결합도 낮아진다.</p>
<p>상속은 프로그램을 구성하는 개념들을 기반으로 다형성을 가능하게 하는 타입계층을 구축하기 위한것이다.</p>
<p>훅메서드 - 추상 메서드와 동일하게 자식 클래스에서 오버라이딩할 의도로 메서드를 추가했지만 편의를 위해 기본 구현을 제공하는 메서드.<br>ex , 추상클래스 내 afterCalculate 메소드를 단순히 retrun fee; 로 구현하고 다른 메서드가 afterCalculate를 호출할 경우 추상클래스를 상속한 클래스들은  afterCalculate메서드를 적절히 오버라이딩 하여 활용할 수 있다.</p>
<p>클래스폭발/조합의 폭발- 상속의 경우 부모의 구현에 강하게 결합되므로 하나의 기능을 추가하기 위해 필요이상으로 많은 수의 클래스를 추가해야하는 경우를 말함.</p>
<p>상속관계는 컴파일 타임에 결저되고 고정되기 때문에 코드를 실행하는 도중에는 변경불가함.<br>합성은 컴파일타임 관계를 런타임 관계로 변경함으로써 문제를 해결한다. 합성을 사용하면 구현이 아닌 퍼블릭 인터페이스에 대해서만 의존할 수 있기 때문에 런타임에 객체의 관계를 변경할 수 있따.</p>
<p>상속이 조합의 결과를 개별 클래스 안으로 밀어넣는 방법이라면 합성은 조합을 구성하는 요소들을 개별 클래스로 구현한 후 실행 시점에 인스턴스를 조립하는 방법을 사용하는것이다.</p>
<p>컴파일 타임 의존성, 런타임 의존성의 거리가 멀수록 설계가 유연해지지만 거리가 멀면 멀수록 설계의 복잡도가 상승한다. 대부분의 경우 단순한 설계가 정답이지만 변경에 따르는 고통이 복잡성으로 인한 혼란은 넘어선다면 유연성에 손을 들어주는것이 맞다.</p>
<p>믹스인은 객체를 생성할 때 코드 일부를 클래스 안에 섞어 넣어 재사용하는 기법이다. 컴파일 시점에 필요한 코드 조각을 조합하는 재사용 방법이다.(합성은 실행시점에 객체를 조합하는 재사용방법)</p>
<p>상속과 믹스인은 다르다. 상속의 진정한 목적은 자식클래스를 부모 클래스와 동일한 개념적인 범주로 묶어 is-a관계를 만들기 위한것. 믹스인은 코드를 다른 코드안에 섞어넣기 위한 방법으로 상속과 같이 결합도 문제를 유발하지 않음</p>
<p>/</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;오브젝트-9장&quot;&gt;&lt;a href=&quot;#오브젝트-9장&quot; class=&quot;headerlink&quot; title=&quot;오브젝트 9장&quot;&gt;&lt;/a&gt;오브젝트 9장&lt;/h3&gt;&lt;p&gt;OCP - 추상화에 의존하여 컴파일 타임의존성은 유지하면서 런타임 의존성의 가능성을 확장하
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="OOP" scheme="http://KKimSangHeon.github.io/categories/CS/OOP/"/>
    
    
      <category term="OOP" scheme="http://KKimSangHeon.github.io/tags/OOP/"/>
    
  </entry>
  
</feed>
