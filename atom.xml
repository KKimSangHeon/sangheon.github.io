<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-08-01T05:41:40.908Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>깃허브 사용</title>
    <link href="http://KKimSangHeon.github.io/2017/08/01/bigdata2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/01/bigdata2/</id>
    <published>2017-08-01T04:04:28.000Z</published>
    <updated>2017-08-01T05:41:40.908Z</updated>
    
    <content type="html"><![CDATA[<p>깃허브란 형상관리 툴이다.</p>
<p>A(팀장,a모듈담당) B(b모듈담당) C(c모듈담당) 개발자가 하나의 프로젝트를 개발중이다.</p>
<p>A 가 프로젝트(모듈 a,b,c 포함)를 올린다.</p>
<p>그 후 B C 에게 그 사실을 알린다.</p>
<p>B C 는 프로젝트를 내려받고</p>
<p>B,C가 자신의 모듈을 수정 후 커밋을 한다.</p>
<p>A,B,C는 수정된 것을 내려 받은 후 테스트를 한다.</p>
<p>git가 있으며 내부에는 Repository가 있다.</p>
<p>git는 레파지토리가 2개 존재한다.<br>하나는 로컬이고 하나는 원격이다.</p>
<p>로컬 레파지토리에 프로젝트를 올리는것을 commit 라고 하며 로컬 레파지토리를 원격 레파지토리에 맞추는 것을 push 라고 한다.</p>
<p>원격 레파지토리에서 프로젝트를 로컬레파지토리로 갖고오는것을 full 내 프로젝트로 반영하는것은 fetch라고 한다.</p>
<h4 id="하지만-보통-로컬레파지토리와-프로젝트를-같이-놓는다-편의상"><a href="#하지만-보통-로컬레파지토리와-프로젝트를-같이-놓는다-편의상" class="headerlink" title="하지만 보통 로컬레파지토리와 프로젝트를 같이 놓는다.(편의상)"></a>하지만 보통 로컬레파지토리와 프로젝트를 같이 놓는다.(편의상)</h4><h3 id="1-내-프로젝트-올리기"><a href="#1-내-프로젝트-올리기" class="headerlink" title="1.내 프로젝트 올리기"></a>1.내 프로젝트 올리기</h3><h5 id="이클립스에서-실행"><a href="#이클립스에서-실행" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h5><p>1.이클립스 - show view - git Repository 선택<br>2.프로젝트 우클릭 후 - team - share …-체크-create누름(로컬레파지토리 프로젝트를 같이하는것.)</p>
<h5 id="깃허브에서-실행"><a href="#깃허브에서-실행" class="headerlink" title="깃허브에서 실행"></a>깃허브에서 실행</h5><p>1.레파지토리 new - 프로젝트 이름이랑 동일하게 생성(굳이 안해도되나 편의상)<br>2.깃 주소를 복사</p>
<h5 id="이클립스에서-실행-1"><a href="#이클립스에서-실행-1" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h5><p>1.git Repository탭 - remote - Configure fetch 체크(push 체크하면 올리기만 되고 받기는 안된다.) - change 버튼 클릭 - save Fetch 클릭<br>2.project explorer탭으로 - team - commit - Unsatage Changes에 있는 것들을 staged Changed로 내림. 커밋메세지는 추가할 수 있도록 하자. - commit and push 클릭 - next - finish</p>
<h3 id="2-타-프로젝트-받기"><a href="#2-타-프로젝트-받기" class="headerlink" title="2.타 프로젝트 받기."></a>2.타 프로젝트 받기.</h3><p>방법1. 깃허브에서 다운받아서 임포트하기.</p>
<p>방법2. 프로젝트를 fork한다.</p>
<h4 id="깃허브에서-실행-1"><a href="#깃허브에서-실행-1" class="headerlink" title="깃허브에서 실행"></a>깃허브에서 실행</h4><p>원하는 프로젝트로 가서 fork를 누르고<br>내 레파지토리로 가보자. 자신의 레파지토리에 생성되있는게 있을것임.<br>이제 자기 레파지토리에 있는것을 잡아 땡겨보자<br>clone or download 에서 url 복사</p>
<h4 id="이클립스에서-실행-2"><a href="#이클립스에서-실행-2" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h4><p>git Repository탭으로 가서 컨트롤+v<br>next-next - browse 눌러서 자기 워크스페이스 선택 (로컬 레파지토리와 프로젝트저장소를 하나로 합치는것.)<br>working tree 선택 후 오른쪽 누르고 import .. 클릭 후 finish</p>
<p>Project explorer 탭으로 가서 보면 에러가 난다. (환경설정이 달라서 나는 에러이다.)<br>프로젝트 우클릭 후 - properties - java build path 선택- Libraries 탭 선택 - 더블클릭 후 - alternate JRE 에서 선택</p>
<h3 id="3-레파지토리-삭제"><a href="#3-레파지토리-삭제" class="headerlink" title="3.레파지토리 삭제"></a>3.레파지토리 삭제</h3><p>해당레파지토리로 가서 - 세팅 - 레파지토리 이름 입력</p>
<p>이클립스에서 실행<br>team - disconnect  후 delete Repository 클릭<br>하나로 뭉쳐놨기 때문에 맨위 하나만 선택하면 된다. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;깃허브란 형상관리 툴이다.&lt;/p&gt;
&lt;p&gt;A(팀장,a모듈담당) B(b모듈담당) C(c모듈담당) 개발자가 하나의 프로젝트를 개발중이다.&lt;/p&gt;
&lt;p&gt;A 가 프로젝트(모듈 a,b,c 포함)를 올린다.&lt;/p&gt;
&lt;p&gt;그 후 B C 에게 그 사실을 알린다.
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/%EA%B8%B0%ED%83%80/"/>
    
    
  </entry>
  
  <entry>
    <title>1.자바프로그래밍</title>
    <link href="http://KKimSangHeon.github.io/2017/08/01/bigdata1/"/>
    <id>http://KKimSangHeon.github.io/2017/08/01/bigdata1/</id>
    <published>2017-08-01T00:05:28.000Z</published>
    <updated>2017-08-01T04:04:03.805Z</updated>
    
    <content type="html"><![CDATA[<h4 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h4><p>많은 클래스, 파일로 프로그램이 구성된다. 클래스는 데이터를 갖고 있고 메소드는 데이터를 다루게 된다. 객체의 데이터를 다루기 위해서는 외부에서 메소드를 호출해야 한다.</p>
<p>하드웨어는 컴포넌트화로 인해 빠른 발전이 이루어졌다. 소프트웨어 또한 이에 따라 컴포넌트화로 발전하게 되었다.</p>
<p>객체지향은 설계분석이 가능하다. 요구사항 분석-&gt;추상화-&gt;객체관계 분석(상속,의존 등)</p>
<p>캡슐화, 상속, 다형성의 특징을 갖는다.</p>
<p>코드의 재사용성이 높다. 추상화 과정으로 인해 가능해지는것. 상속을 통해 부모에 존재하는 메소드 사용가능.<br>잘못된 예: 홈쇼핑 프로젝트에서 만든 Person 클래스를 ERP를 만드는곳에서 Person을 만드는데 사용한다.</p>
<p>예외처리를 통해 신뢰성이 높아진다.</p>
<p>java는 운영체제에 영향을 받지 않는다는 특징.</p>
<p>JRE + API + javac + rt.jar = JDK</p>
<h4 id="객체와-클래스"><a href="#객체와-클래스" class="headerlink" title="객체와 클래스"></a>객체와 클래스</h4><p>객체는 정보를 효율적으로 관리하기 위하여 의미를 부여하고 분류하는 논리적 단위<br>클래스를 사용자 데이터 타입 이라고도 한다.</p>
<p>객체의 구성요서는 속성(필드,인스턴스 변수)이 필요하다.<br>클래스 내부에 있는 변수는 필드 혹은 속성이라 한다.!<br>기능은 메소드라 한다.</p>
<h4 id="컴파일-과정"><a href="#컴파일-과정" class="headerlink" title="컴파일 과정"></a>컴파일 과정</h4><p>네비게이터로 bin 폴더를 보자.<br>코들를 짜면 bin 폴더 내부에 클래스파일이 컴파일되어 생성된다.</p>
<p>메소드 영역 - 필드정보, 메소드 코드, main메소드, static 변수<br>stack - 지역변수. 자바는 전역변수의 개념이 없으므로 모든 변수는 여기에 생성됨.<br>heap - 객체</p>
<h4 id="접근자"><a href="#접근자" class="headerlink" title="접근자"></a>접근자</h4><p>public - 내부, 같은 패키지, 자식접근, 외부 가능.</p>
<p>protected - 내부, 같은 패키지, 자식접근 가능.</p>
<p>(default) - 쓰지않는것을 권고한다. 내부, 같은 패키지에서 접근가능.</p>
<p>private - 내부에서만 접근 가능.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;특징&quot;&gt;&lt;a href=&quot;#특징&quot; class=&quot;headerlink&quot; title=&quot;특징&quot;&gt;&lt;/a&gt;특징&lt;/h4&gt;&lt;p&gt;많은 클래스, 파일로 프로그램이 구성된다. 클래스는 데이터를 갖고 있고 메소드는 데이터를 다루게 된다. 객체의 데이터를 다루기
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Chat-Bot</title>
    <link href="http://KKimSangHeon.github.io/2017/07/17/Chat-Bot/"/>
    <id>http://KKimSangHeon.github.io/2017/07/17/Chat-Bot/</id>
    <published>2017-07-17T08:49:17.000Z</published>
    <updated>2017-07-20T07:06:31.615Z</updated>
    
    <content type="html"><![CDATA[<h4 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h4><p>기본적인 틀 구축</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save cheerio</div></pre></td></tr></table></figure>
<h2 id="node-js에서-제이쿼리의-선택자를-쓸-수-있게되어-설치"><a href="#node-js에서-제이쿼리의-선택자를-쓸-수-있게되어-설치" class="headerlink" title="node.js에서 제이쿼리의 선택자를 쓸 수 있게되어 설치."></a>node.js에서 제이쿼리의 선택자를 쓸 수 있게되어 설치.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save request</div></pre></td></tr></table></figure>
<p>url에 접속하여 html을 다운받을 수 있게된다.</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save async</div></pre></td></tr></table></figure>
<h2 id="비동기-방식을-사용할-수-있게-된다"><a href="#비동기-방식을-사용할-수-있게-된다" class="headerlink" title="비동기 방식을 사용할 수 있게 된다."></a>비동기 방식을 사용할 수 있게 된다.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save node-cron</div></pre></td></tr></table></figure>
<h2 id="주기적인-작업을-실행시키기-위해-설치하였다"><a href="#주기적인-작업을-실행시키기-위해-설치하였다" class="headerlink" title="주기적인 작업을 실행시키기 위해 설치하였다."></a>주기적인 작업을 실행시키기 위해 설치하였다.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save iconv</div></pre></td></tr></table></figure>
<h2 id="html을-가져-왔을-때-한글-깨짐을-막을-수-있다"><a href="#html을-가져-왔을-때-한글-깨짐을-막을-수-있다" class="headerlink" title="html을 가져 왔을 때 한글 깨짐을 막을 수 있다."></a>html을 가져 왔을 때 한글 깨짐을 막을 수 있다.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pm2 -g</div></pre></td></tr></table></figure>
<p>서버가 문제가 생겼을 경우 재시작 시켜주며 성능향상에 기여한다.<br>pm2의 명령어는 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pm2 start 서버.js --name 별칭     //실행하면서 별칭을 붙여준다.</div><div class="line">pm2 list  //실행되고 있는 pm2리스트를 조회</div><div class="line"></div><div class="line">pm2 stop 별칭   // pm2를 중지한다.</div><div class="line">pm2 restart 별칭    //pm2 재시작한다.</div><div class="line">pm2 delete 별칭     //pm2 종료</div><div class="line"></div><div class="line">pm2 show 별칭// 정보확인</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;과정&quot;&gt;&lt;a href=&quot;#과정&quot; class=&quot;headerlink&quot; title=&quot;과정&quot;&gt;&lt;/a&gt;과정&lt;/h4&gt;&lt;p&gt;기본적인 틀 구축&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Node.js" scheme="http://KKimSangHeon.github.io/tags/Node-js/"/>
    
      <category term="Kakao talk open API" scheme="http://KKimSangHeon.github.io/tags/Kakao-talk-open-API/"/>
    
      <category term="챗봇" scheme="http://KKimSangHeon.github.io/tags/%EC%B1%97%EB%B4%87/"/>
    
      <category term="MySQL" scheme="http://KKimSangHeon.github.io/tags/MySQL/"/>
    
      <category term="CentOS" scheme="http://KKimSangHeon.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>19장. PXE 서버, 킥스타트</title>
    <link href="http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux42/"/>
    <id>http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux42/</id>
    <published>2017-07-16T12:22:55.000Z</published>
    <updated>2017-07-16T14:03:03.582Z</updated>
    
    <content type="html"><![CDATA[<p>Centos를 100개 깔아야 하는 상황에는 여러가지 방법이 있겠지만 PXE 설치서버를 구성해놓는다면 쉽게 설치가 가능하다!<br>1.DHCP 서버, TFTP 서버, syslinux부팅파일, FTP 또는 웹서버를 PXE 설치 서버에 구성해 놓는다. 즉 PXE는 하나의 프로그램이 아니라 여러개의 프로그램을 잘 조합해 놓은것을 의미<br>2.Centos를 설치할 PC의 전원을 켠다.<br>3.설치할 파일을 네트워크로 전송해서 자동으로 설치</p>
<p>PXE는 초기 설치화면 즉 언어설정 전 까지만 완료해 주지만 킥스타트는 초기설정까지 해준다.</p>
<h3 id="1-PXE-설치"><a href="#1-PXE-설치" class="headerlink" title="1.PXE 설치"></a>1.PXE 설치</h3><h4 id="1-1-서버에서-설정"><a href="#1-1-서버에서-설정" class="headerlink" title="1.1 서버에서 설정"></a>1.1 서버에서 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum -y install syslinux dhcp tftp-server vsftpd //관련패키지 설치</div></pre></td></tr></table></figure>
<h4 id="1-1-DHCP-설정"><a href="#1-1-DHCP-설정" class="headerlink" title="1.1 DHCP 설정"></a>1.1 DHCP 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># systemctl stop firewalld</div><div class="line"># systemctl disable firewalld</div><div class="line"></div><div class="line"># vi /etc/dhcp/dhcpd.conf</div><div class="line">맨아래 다음 입력</div><div class="line">subnet 192.168.111.0 netmask 255.255.255.0 &#123;</div><div class="line">    option routers 192.168.111.2;</div><div class="line">    option subnet-mask 255.255.255.0;</div><div class="line">    range dynamic-bootp 192.168.111.120  192.168.111.199;</div><div class="line">    option domain-name-servers 192.168.111.2;</div><div class="line">    allow booting;</div><div class="line">    allow bootp;</div><div class="line">    next-server 192.168.111.100;</div><div class="line">    filename &quot;pxelinux.0&quot;;</div><div class="line">&#125;</div><div class="line">입력 후 종료</div></pre></td></tr></table></figure>
<h4 id="1-2-TFTP-설정"><a href="#1-2-TFTP-설정" class="headerlink" title="1.2 TFTP 설정"></a>1.2 TFTP 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vi /etc/xinetd.d/tftp</div><div class="line">disable = no 로 변경</div><div class="line">저장후 종료</div></pre></td></tr></table></figure>
<h4 id="1-3-ftp로-iso이미지-접근가능하게"><a href="#1-3-ftp로-iso이미지-접근가능하게" class="headerlink" title="1.3 ftp로 iso이미지 접근가능하게"></a>1.3 ftp로 iso이미지 접근가능하게</h4><p>오른쪽위 cd모양 우클릭 - 세팅 - Use ISO image… - Centos이미지 찾고 위에 Connected, Connect at power on 체크 - OK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># umount /dev/cdrom</div><div class="line"># mount /dev/cdrom /var/ftp/pub</div><div class="line">  ftp를 접속할 경우 cd롬파일을 접근가능</div></pre></td></tr></table></figure></p>
<h4 id="1-4-부팅에-필요한-파일-준비"><a href="#1-4-부팅에-필요한-파일-준비" class="headerlink" title="1.4 부팅에 필요한 파일 준비"></a>1.4 부팅에 필요한 파일 준비</h4><p>tftp는 부팅파일을 전송하는 역할이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># cp /var/ftp/pub/images/pxeboot/vmlinuz /var/lib/tftpboot/</div><div class="line"># cp /var/ftp/pub/images/pxeboot/initrd.img /var/lib/tftpboot/</div><div class="line"># cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</div><div class="line"># ls -l /var/lib/ftpboot</div><div class="line"></div><div class="line"># mkdir /var/lib/tftpboot/pxelinux.cfg</div><div class="line"># cd /var/lib/tftpboot/pxelinux.cfg</div><div class="line"># touch default   //부팅에 관련된 파일 생성</div><div class="line"># vi default   다음을 입력</div><div class="line">DEFAULT         CentOS7_Auto_Install</div><div class="line"></div><div class="line">LABEL           CentOS7_Auto_Install</div><div class="line">        kernel  vmlinuz</div><div class="line">        APPEND  initrd=initrd.img  repo=ftp://192.168.111.100/pub</div><div class="line"></div><div class="line"># ps -ef | grep dnsmasq   //충동하는 프로세스 kill위해</div><div class="line"># kill -9 1696</div><div class="line"># systemctl disable dnsmasq</div></pre></td></tr></table></figure></p>
<h4 id="1-5-관련-서비스-시작"><a href="#1-5-관련-서비스-시작" class="headerlink" title="1.5 관련 서비스 시작"></a>1.5 관련 서비스 시작</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># systemctl restart dhcpd     //서비스 시작</div><div class="line"># systemctl restart vsftpd</div><div class="line"># systemctl restart xinetd   //tftp임</div><div class="line"># systemctl enable dhcpd    //상시가동</div><div class="line"># systemctl enable vsftpd</div><div class="line"># systemctl enable xinetd</div></pre></td></tr></table></figure>
<h4 id="1-6-VMware에서-제공하는-DHCP를-끄자"><a href="#1-6-VMware에서-제공하는-DHCP를-끄자" class="headerlink" title="1.6 VMware에서 제공하는 DHCP를 끄자"></a>1.6 VMware에서 제공하는 DHCP를 끄자</h4><p>워크스테이션 키고 - Edit - Virtual Network Editor - change setting 누르고-VMnet8선택 - Use local DHCP .. 체크 해제 후 - OK<br>이제 서버에서만 DHCP 서버를 제공한다.</p>
<h4 id="1-7-새로운-PC를-만들자"><a href="#1-7-새로운-PC를-만들자" class="headerlink" title="1.7 새로운 PC를 만들자"></a>1.7 새로운 PC를 만들자</h4><p>버츄어 머신에서 진행하자<br>버츄어머신 네임을 TestCom으로<br>로케이션을 Centos 폴더 내 TestCom으로 하자<br>그 후 부팅하면 설치가 된다.</p>
<h3 id="2-킥스타트-설치"><a href="#2-킥스타트-설치" class="headerlink" title="2.킥스타트 설치"></a>2.킥스타트 설치</h3><p>킥스타트는 교재를 참고하자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos를 100개 깔아야 하는 상황에는 여러가지 방법이 있겠지만 PXE 설치서버를 구성해놓는다면 쉽게 설치가 가능하다!&lt;br&gt;1.DHCP 서버, TFTP 서버, syslinux부팅파일, FTP 또는 웹서버를 PXE 설치 서버에 구성해 놓는다
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>18장. 방화벽 컴퓨터를 만들자</title>
    <link href="http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux41/"/>
    <id>http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux41/</id>
    <published>2017-07-16T02:04:12.000Z</published>
    <updated>2017-07-16T04:31:45.506Z</updated>
    
    <content type="html"><![CDATA[<p>방화벽은 내부, 외부를 차단해주는 장비 또는 컴퓨터라고 생각하면 된다. 방화벽으로 인해 외부에서 내부 네트워크로 함부러 침입할 수 없다. 그 기법중 많이 쓰이는 것이 사설IP이다.<br>방화벽 컴퓨터는 랜카드가 두개여야 된다. 내부와 결합되는(사설 IP) 랜카드 외부와 연결되는 랜카드(공인IP)</p>
<p>실습에서 192.168.xxx는 공인 ip<br>10.1.xxx 는 내부ip로 사용한다<br>책 737을 통해 네트워크 구성을 확인하자</p>
<h4 id="1-서버-B-설정-웹서버로-사용할것임"><a href="#1-서버-B-설정-웹서버로-사용할것임" class="headerlink" title="1. 서버 B 설정(웹서버로 사용할것임)"></a>1. 서버 B 설정(웹서버로 사용할것임)</h4><p>서버B의 네트워크 세팅에 들어가서 네트워크 어댑터 클릭 후 Bridged 클릭<br>그러면 네트워크가 Bridged네트워크 안으로 들어옴(사설ip로 사용하기로 함)<br>그 후 ip를 변경하자</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># nmtui edit ens32</div><div class="line">Address를 10.1.1.20/24로 변경</div><div class="line">Gateway를 10.1.1.1로 변경</div><div class="line">Dns 168.126.63.1로 변경  //kt에서 운영하는 dns 서버</div><div class="line">ok버튼</div><div class="line"># reboot</div><div class="line"></div><div class="line"># ip addr</div><div class="line"> inet이 10.1.1.20 인지 확인</div></pre></td></tr></table></figure>
<h4 id="2-클라이언트-설정-클라이언트에서-실행"><a href="#2-클라이언트-설정-클라이언트에서-실행" class="headerlink" title="2. 클라이언트 설정(클라이언트에서 실행)"></a>2. 클라이언트 설정(클라이언트에서 실행)</h4><p>클라이언트의 네트워크 세팅에 들어가서 네트워크 어댑터 클릭 후 Bridged 클릭 그러면 네트워크가 Bridged네트워크 안으로 들어옴<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># nmtui edit ens33</div><div class="line">IPv4 CONFIGURATION을 Manual로 바꾸고 Show 엔터</div><div class="line">Address를 10.1.1.10/24</div><div class="line">Gateway는 10.1.1.1</div><div class="line">DNS Server는 168.126.63.1  </div><div class="line">OK 엔터</div><div class="line"># reboot</div><div class="line"></div><div class="line"># ip addr</div></pre></td></tr></table></figure></p>
<h4 id="3-서버B-클라이언트-사설네트워크-테스트"><a href="#3-서버B-클라이언트-사설네트워크-테스트" class="headerlink" title="3. 서버B,클라이언트 사설네트워크 테스트"></a>3. 서버B,클라이언트 사설네트워크 테스트</h4><p>현재까지 구현한것(서버B,클라이언트)은 게이트웨이가 구현되어있지 않으므로 외부로 나갈 수 없다. 하지만 사설네트워크로 안에서는 연결되어 있으므로 ping이 왔다갔다 하는지 확인해보자</p>
<p>클라이언트에서 실행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ping -c 3  10.1.1.20</div></pre></td></tr></table></figure></p>
<h4 id="4-서버-구성-서버에서-실행"><a href="#4-서버-구성-서버에서-실행" class="headerlink" title="4. 서버 구성(서버에서 실행)"></a>4. 서버 구성(서버에서 실행)</h4><h4 id="4-1-랜카드-하나가-외부로-연결-잘-되어있는지-확인해보자"><a href="#4-1-랜카드-하나가-외부로-연결-잘-되어있는지-확인해보자" class="headerlink" title="4.1 랜카드 하나가 외부로 연결 잘 되어있는지 확인해보자"></a>4.1 랜카드 하나가 외부로 연결 잘 되어있는지 확인해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># nmtui edit ens32</div><div class="line">게이트웨이, DNS Servers가 192.168.111.2로 잘 되어있다.</div><div class="line"># halt -p</div></pre></td></tr></table></figure>
<p>서버에 랜카드를 하나 더 달자.<br>vmware 워크스테이션에서 Edit virtual machins settings를 눌러 Add 후 Network Adapter 선택 다음 후 Bridged 선택하고 Finish 그 후 부팅<br>추가한 장치가 ens32인지 확인해보자<br>날짜 옆에 랜카드 모양을 누르면 ens34가 추가되어 있다. 네트워크설정 클릭 후 오른쪽 아래 톱니모양(유선연결1)을 누르고 신원을 누르자. 그 후 ens34로 입력하자<br>다음 IPv4를 선택하여 자동을 수동으로 변경하자<br>그 후 주소 10.1.1.1<br>네트마스크 255.255.255.0<br>게이트웨이 10.1.1.1<br>네임서버 끄자<br>IPv6로 가서 끄자<br>이제 적용을 누르고 재부팅하자</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vi /etc/sysconfig/network-scripts/ifcfg-ens34</div><div class="line">6,7행 지워버리기</div><div class="line"># systemctl restart network</div><div class="line"># ifconfig</div><div class="line">ens32 는 192.168.111.100번으로 ens34는 10.1.1.1</div></pre></td></tr></table></figure>
<p>이제 하드웨어 설정은 끝났다</p>
<h4 id="5-클라이언트에서-핑을-날려보자"><a href="#5-클라이언트에서-핑을-날려보자" class="headerlink" title="5. 클라이언트에서 핑을 날려보자"></a>5. 클라이언트에서 핑을 날려보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ping 10.1.1.1</div></pre></td></tr></table></figure>
<h4 id="6-서버에-정책을-적용시켜보자"><a href="#6-서버에-정책을-적용시켜보자" class="headerlink" title="6. 서버에 정책을 적용시켜보자"></a>6. 서버에 정책을 적용시켜보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># vi /etc/sysctl.conf</div><div class="line">net.ipv4.ip_foward=1 맨아래 입력</div><div class="line"></div><div class="line"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">      //아무 메세지 안나오면 성공</div><div class="line"># cat /proc/sys/net/ipv4/ip_forward</div><div class="line">      //1출력됨</div><div class="line"></div><div class="line">포워딩성공!</div><div class="line"></div><div class="line"># iptables --policy FORWARD DROP</div><div class="line"># iptables --policy INPUT DROP</div><div class="line"># iptables --policy OUTPUT DROP</div><div class="line"></div><div class="line">ens34 장치를 설정해주자</div><div class="line">input 설정</div><div class="line"># iptables --append INPUT --in-interface ens34 --source 10.1.1.0/24 --match state --state NEW,ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line">output 설정</div><div class="line"># iptables --append OUTPUT --out-interface ens34 --destination 10.1.1.0/24 --match state --state NEW,ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line"># iptables --append FORWARD --in-interface ens34 --source 10.1.1.0/24 --destination 0.0.0.0/0 --match state --state NEW,ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line">ens32 설정</div><div class="line"># iptables --append FORWARD --in-interface ens32 --destination 10.1.1.0/24 --match state --state ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line"># iptables --table nat --append POSTROUTING --out-interface ens32 --jump MASQUERADE</div><div class="line"></div><div class="line">설정한것 저장</div><div class="line"># service iptables save</div><div class="line"># firewall-config</div><div class="line">영구적 - 마스커레이딩 - 마스커레이딩영역 체크 - 옵션 다시불러오기</div></pre></td></tr></table></figure>
<h4 id="7-클라이언트에서-인터넷-해보자"><a href="#7-클라이언트에서-인터넷-해보자" class="headerlink" title="7.클라이언트에서 인터넷 해보자"></a>7.클라이언트에서 인터넷 해보자</h4><p>이 경우 클라이언트는 자신의 ip(10.1.1.0)이 아닌 Server IP(192.168.111.100)으로 접속하게 된다. 이를 확인해보자</p>
<h4 id="7-1-윈-클라이언트를-켜자"><a href="#7-1-윈-클라이언트를-켜자" class="headerlink" title="7.1 윈 클라이언트를 켜자"></a>7.1 윈 클라이언트를 켜자</h4><p>파일질라서버를 카페에서 받자<br>에딧 -유저- 오른쪽add -centos 입력- password centos -ok<br>왼쪽 add 아무 디렉토리 선택- write/delete 선택 -ok<br>cmd 열고 netsh advfirewall firewall add rule name=”FTP서버” dir=in action=allow protocol=tcp localport=21<br>방화벽 설정 입력<br>ipconfig<br>아이피를 기억하자 (지금은 192.168.111.128임)</p>
<h4 id="7-2-클라이언트에서-FTP-접속해보자"><a href="#7-2-클라이언트에서-FTP-접속해보자" class="headerlink" title="7.2 클라이언트에서 FTP 접속해보자"></a>7.2 클라이언트에서 FTP 접속해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># su</div><div class="line"># yum -y install ftp</div><div class="line"># ftp 192.168.111.128</div><div class="line">centos</div><div class="line">centos</div><div class="line">&gt;pwd</div><div class="line">&gt;ls</div></pre></td></tr></table></figure>
<h4 id="7-3-윈도우-클라이언트에서-누가-접속했는지-확인해보자"><a href="#7-3-윈도우-클라이언트에서-누가-접속했는지-확인해보자" class="headerlink" title="7.3 윈도우 클라이언트에서 누가 접속했는지 확인해보자"></a>7.3 윈도우 클라이언트에서 누가 접속했는지 확인해보자</h4><p>netstat /an<br>찾다 보면 192.168.111.100이 들어온것을 확인할 수 있다.<br>즉 사설네트워크 컴퓨터는 외부로 나갈 때 192.168.111.100으로 나간다!</p>
<h4 id="8-서버B를-웹서버로-만들고-윈-클라이언트로-접속해보자"><a href="#8-서버B를-웹서버로-만들고-윈-클라이언트로-접속해보자" class="headerlink" title="8. 서버B를 웹서버로 만들고 윈 클라이언트로 접속해보자"></a>8. 서버B를 웹서버로 만들고 윈 클라이언트로 접속해보자</h4><h4 id="8-1-서버-B에서-실행"><a href="#8-1-서버-B에서-실행" class="headerlink" title="8.1 서버 B에서 실행"></a>8.1 서버 B에서 실행</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># yum -y install httpd</div><div class="line"># firewall-cmd --add-service=http    //포트열자</div><div class="line"># cd /var/www/html</div><div class="line"># touch index.html</div><div class="line"># vi index.html</div><div class="line">Centos7-Web Server 입력</div><div class="line">저장 후 종료</div><div class="line"></div><div class="line"># systemctl restart httpd</div><div class="line"># systemctl enable httpd</div></pre></td></tr></table></figure>
<h4 id="8-2-서버에서-80번-포트로-연결오면-서버-B로-연결해라를-설정"><a href="#8-2-서버에서-80번-포트로-연결오면-서버-B로-연결해라를-설정" class="headerlink" title="8.2 서버에서 80번 포트로 연결오면 서버 B로 연결해라를 설정"></a>8.2 서버에서 80번 포트로 연결오면 서버 B로 연결해라를 설정</h4><p>서버에서 실행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># iptables --table nat --append PREROUTING --proto tcp --in-interface ens32 --dport 80 --jump DNAT --to-destination 10.1.1.20</div><div class="line"># service iptables save   //저장</div></pre></td></tr></table></figure></p>
<h4 id="8-3-윈도우-클라이언트에서-접속해보자"><a href="#8-3-윈도우-클라이언트에서-접속해보자" class="headerlink" title="8.3 윈도우 클라이언트에서 접속해보자"></a>8.3 윈도우 클라이언트에서 접속해보자</h4><p>192.168.111.100 으로 접속하자</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;방화벽은 내부, 외부를 차단해주는 장비 또는 컴퓨터라고 생각하면 된다. 방화벽으로 인해 외부에서 내부 네트워크로 함부러 침입할 수 없다. 그 기법중 많이 쓰이는 것이 사설IP이다.&lt;br&gt;방화벽 컴퓨터는 랜카드가 두개여야 된다. 내부와 결합되는(사
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>17장. 프록시 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux40/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux40/</id>
    <published>2017-07-15T09:55:25.000Z</published>
    <updated>2017-07-15T11:04:12.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="프록시서버"><a href="#프록시서버" class="headerlink" title="프록시서버?"></a>프록시서버?</h3><p>웹서핑을 할 경우 웹브라우저가 외부로 가서 파일을 가져와 읽게 되는것이다. 두 브라우져가 같은곳을 접속하면 따로 가져오게 되는 현상이 발생할 수 있다.<br> 하지만 프록시 서버를 지정해놓으면 프록시 서버가 캐시에 a사이트 데이터를 저장 해놓고 다른 웹브라우져가 a서버를 요청하면 a 데이터를 보내준다.</p>
<h4 id="프록시서버-구현-서버에서"><a href="#프록시서버-구현-서버에서" class="headerlink" title="프록시서버 구현(서버에서)"></a>프록시서버 구현(서버에서)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># yum -y install squid    //설치</div><div class="line"># vi /etc/squid/squid.conf</div><div class="line">:set nu</div><div class="line">:26</div><div class="line">acl centos7  src 192.168.111.0/255.255.255.0  //c클래스 지정</div><div class="line">:54</div><div class="line">http_access allow centos7</div><div class="line">:62</div><div class="line">주석 제거 하고 100을 1000으로</div><div class="line">맨아래 다음추가</div><div class="line">visible_hostname        centos7</div><div class="line"></div><div class="line"># firewall-config</div><div class="line">영구적 선택 - 포트 - 추가 3128 - 다시불러오기</div><div class="line"># systemctl stop firewalld    //맘편하게 방화벽 끄는것</div><div class="line"># systemctl restart squid</div><div class="line"># systemctl enable squid</div><div class="line"># systemctl status squid</div></pre></td></tr></table></figure>
<h4 id="웹브라우저에서-프록시서버-지정-클라이언트"><a href="#웹브라우저에서-프록시서버-지정-클라이언트" class="headerlink" title="웹브라우저에서 프록시서버 지정(클라이언트)"></a>웹브라우저에서 프록시서버 지정(클라이언트)</h4><p>파이어폭스를 켜고 - 편집 - 환경설정 -고급 - 네트워크 - 설정 - 프록시 수동설정 192.168.111.100  포트 3128 입력 - 확인</p>
<h4 id="윈도우클라이언트에서-지정-윈클라이언트"><a href="#윈도우클라이언트에서-지정-윈클라이언트" class="headerlink" title="윈도우클라이언트에서 지정(윈클라이언트)"></a>윈도우클라이언트에서 지정(윈클라이언트)</h4><p>도구 -인터넷옵션 -LAN설정 프록시서버 192.168.111.100 3128 입력</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;프록시서버&quot;&gt;&lt;a href=&quot;#프록시서버&quot; class=&quot;headerlink&quot; title=&quot;프록시서버?&quot;&gt;&lt;/a&gt;프록시서버?&lt;/h3&gt;&lt;p&gt;웹서핑을 할 경우 웹브라우저가 외부로 가서 파일을 가져와 읽게 되는것이다. 두 브라우져가 같은곳을 접
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>16장. DHCP 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux39/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux39/</id>
    <published>2017-07-15T07:09:22.000Z</published>
    <updated>2017-07-15T09:54:45.098Z</updated>
    
    <content type="html"><![CDATA[<p>DHCP(Dynamic Host Configuration Protocol) 서버는 자동으로 네트워크 정보(IP주소, 서브넷 마스크, 게이트웨이 주소,DNS 서버 주소)를 할당해 주는것이다. 일반 PC는 자신에게 고정IP가 할당되어있지 않아도 DHCP서버가 할당해준다. 그러므로 일반사용자는 IP에 대한 지식 없이도 인터넷 사용이 가능해진다.</p>
<p>Vmware에서 제공하는 DHCP 서버의 기능은 중지시켜야 한다.</p>
<h4 id="클라이언트-설정"><a href="#클라이언트-설정" class="headerlink" title="클라이언트 설정"></a>클라이언트 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># ifconfig</div><div class="line">ip를 DHCP로부터 할당받은것.</div><div class="line"># cat /etc/resolv.conf</div><div class="line">nameserver 또한 DHCP로 부터 할당받은것.</div></pre></td></tr></table></figure>
<h4 id="1-DHCP-기능중지"><a href="#1-DHCP-기능중지" class="headerlink" title="1. DHCP 기능중지"></a>1. DHCP 기능중지</h4><p>워크스테이션 - Edit - Virtual Network Editor - change setting 선택 - VMnet8선택 - DHCP Setting 선택<br>128부터 254까지를 할당하는 것을 확인</p>
<p>Use local DHCP …. 클릭 해제<br>Apply<br>이제 IP를 자동으로 할당받지 못한다.</p>
<h4 id="2-DHCP-서버-설정하자"><a href="#2-DHCP-서버-설정하자" class="headerlink" title="2. DHCP 서버 설정하자."></a>2. DHCP 서버 설정하자.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># yum -y install dhcp</div><div class="line"># ps -ef | grep dnsmasq   //dhcp와 충돌하므로 죽이자.</div><div class="line">nobody    1696     1  0 18:21 ?        00:00:00 /sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf</div><div class="line">root      3514  2462  0 18:28 pts/0    00:00:00 grep --color=auto dnsmasq</div><div class="line"></div><div class="line"># kill -9 1696    //다를 수 있다.</div><div class="line"># systemctl disable dnsmasq //껏다켜도 실행 되지 않도록.</div><div class="line"></div><div class="line"># vi /etc/dhcp/dhcpd.conf   //dhcp 설정파일</div><div class="line">아래를 추가하자. (엔터로 인한 공백이 존재하면 안된다)</div><div class="line"></div><div class="line">ddns-update-style  interim;</div><div class="line">subnet  192.168.111.0   netmask 255.255.255.0 &#123;</div><div class="line">        option  routers  192.168.111.2;   </div><div class="line">                          //라우터설정</div><div class="line">        option  subnet-mask  255.255.255.0;</div><div class="line">                          //서브넷마스크설정</div><div class="line">        range   dynamic-bootp 192.168.111.30  192.168.111.50;</div><div class="line">                          //ip범위 설정 30~50까지 20개</div><div class="line">        option  domain-name-servers 192.126.63.1;</div><div class="line">                          //dns설정(kt에서 제공하는것)</div><div class="line">        default-lease-time      10000;</div><div class="line">                          //디폴트 임대시간</div><div class="line">        max-lease-time          50000;</div><div class="line">                          //최대임대시간</div><div class="line">&#125;             </div><div class="line"></div><div class="line"># ls /var/lib/dhcpd</div><div class="line">dhcpd.leases에 ip를 임대해준것에 대한 기록이 있다.</div><div class="line"></div><div class="line"># systemctl restart dhcpd</div><div class="line"># systemctl enable dhcpd  //상시가동</div><div class="line"># systemctl status dhcpd  //잘 작동하는지 확인</div><div class="line"></div><div class="line"># systemctl stop firewalld</div><div class="line"></div><div class="line"># systemctl restart dhcpd</div></pre></td></tr></table></figure>
<h4 id="3-클라이언트에서-IP-할당받아보자"><a href="#3-클라이언트에서-IP-할당받아보자" class="headerlink" title="3. 클라이언트에서 IP 할당받아보자"></a>3. 클라이언트에서 IP 할당받아보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># su -c &apos;systemctl restart network&apos;</div><div class="line">password 입력</div><div class="line"># ifconfig    //아이피 확인해보자</div><div class="line">192.168.111.30을 받았다. (아까 30~50을 지정해줌)</div></pre></td></tr></table></figure>
<h4 id="4-윈도우-클라이언트에서-IP-할당받아보자"><a href="#4-윈도우-클라이언트에서-IP-할당받아보자" class="headerlink" title="4. 윈도우 클라이언트에서 IP 할당받아보자"></a>4. 윈도우 클라이언트에서 IP 할당받아보자</h4><p>네트워크 - 공유센터 - 어댑터 - 로컬 영역 연결을 사용안함으로 했다가 사용으로 변경 - cmd를 켜고 ipconfig 를 입력하면<br>192.168.111.31을 받은것을 확인할 수 있다.</p>
<h4 id="5-서버에서-빌려간것들을-확인해보자"><a href="#5-서버에서-빌려간것들을-확인해보자" class="headerlink" title="5. 서버에서 빌려간것들을 확인해보자"></a>5. 서버에서 빌려간것들을 확인해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cat /var/lib/dhcpd/dhcpd.leases</div><div class="line">IP를 언제빌려갔고 누가 빌려갔고 맥어드레스 등을 확인할 수 있다.</div></pre></td></tr></table></figure>
<h4 id="6-다시-워크스테이션의-DHCP를-켜자"><a href="#6-다시-워크스테이션의-DHCP를-켜자" class="headerlink" title="6. 다시 워크스테이션의 DHCP를 켜자"></a>6. 다시 워크스테이션의 DHCP를 켜자</h4><p>워크스테이션 - Edit - Virtual Network Editor - change setting 선택 - VMnet8선택 - DHCP Setting 선택 - Use local DHCP …선택</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DHCP(Dynamic Host Configuration Protocol) 서버는 자동으로 네트워크 정보(IP주소, 서브넷 마스크, 게이트웨이 주소,DNS 서버 주소)를 할당해 주는것이다. 일반 PC는 자신에게 고정IP가 할당되어있지 않아도 DH
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>15장. Samba 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux38/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux38/</id>
    <published>2017-07-15T05:37:36.000Z</published>
    <updated>2017-07-15T07:08:30.947Z</updated>
    
    <content type="html"><![CDATA[<p>NFS 유닉스와 유닉스 유닉스와 리눅스간 파일공유이고<br>삼바는 유닉스(리눅스)와 윈도우즈간에 공유하는것.</p>
<h3 id="1-윈도우가-삼바-서버"><a href="#1-윈도우가-삼바-서버" class="headerlink" title="1.윈도우가 삼바 서버"></a>1.윈도우가 삼바 서버</h3><h4 id="1-1-윈도우-클라이언트를-삼바-서버로-만들자-윈클라이언트실행"><a href="#1-1-윈도우-클라이언트를-삼바-서버로-만들자-윈클라이언트실행" class="headerlink" title="1.1 윈도우 클라이언트를 삼바 서버로 만들자(윈클라이언트실행)"></a>1.1 윈도우 클라이언트를 삼바 서버로 만들자(윈클라이언트실행)</h4><p>C 드라이브에 smbShare 폴더만든다. 그 폴더 속성 들어가서 공유탭의 공유버튼 누르고 Everyone 선택하고 추가 그 후 Everyone은 읽기/쓰기로 선택</p>
<p>명령프롬프트 관리자 모드로 열고 net user root 1234 /add 입력.<br>    //윈도우즈 사용자 추가<br>ipconfig<br>192.168.11.131임을 기억하자</p>
<h4 id="1-2-삼바-클라이언트로-접속해보자-서버에서-실행"><a href="#1-2-삼바-클라이언트로-접속해보자-서버에서-실행" class="headerlink" title="1.2 삼바 클라이언트로 접속해보자(서버에서 실행)"></a>1.2 삼바 클라이언트로 접속해보자(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep samba</div><div class="line"># smbclient -L 192.168.111.131</div><div class="line">1234입력</div><div class="line"></div><div class="line"># mkdir /sambaMount</div><div class="line"># mount -t cifs //192.168.111.131/smbShare /sambaMount</div><div class="line">        //윈도우는 //로 해야함</div><div class="line">1234입력</div><div class="line"></div><div class="line"># ls -l /sambaMount</div><div class="line"></div><div class="line"># cp /boot/vmlinuz-* /sambaMount</div></pre></td></tr></table></figure>
<h3 id="2-리눅스가-삼바-서버"><a href="#2-리눅스가-삼바-서버" class="headerlink" title="2. 리눅스가 삼바 서버"></a>2. 리눅스가 삼바 서버</h3><p>윈도우는 삼바 클라이언트라는 개념이 없다. 그래서 리눅스가 윈도우인척 폴더를 공유해 놓으면 윈도우 클라이언트는 해당폴더가 윈도우가 공유했는지 리눅스가 공유한지 모르고 그냥 쓰게 된다.</p>
<h4 id="2-1-리눅스-서버를-삼바-서버로-만들자-서버에서-실행"><a href="#2-1-리눅스-서버를-삼바-서버로-만들자-서버에서-실행" class="headerlink" title="2.1 리눅스 서버를 삼바 서버로 만들자(서버에서 실행)"></a>2.1 리눅스 서버를 삼바 서버로 만들자(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># yum -y install samba</div><div class="line">관련파일 카페에서 받자</div><div class="line"># cd 다운로드</div><div class="line"># yum -y localinstall system-config-samba*</div><div class="line">여기서 에러날 경우 카페 자료실을 참고하자</div><div class="line"></div><div class="line"># systemctl restart smb</div><div class="line"># systemctl enable smb</div><div class="line"></div><div class="line"># ls /share     / //share 폴더를 공유하자</div><div class="line"># chmod 707 /share</div><div class="line"># system-config-samba</div><div class="line">설정- 서버설정 - workgroup/centOS 7 입력-</div><div class="line">              보안탭가서 인증모드 공유로 하고 확인</div><div class="line">workgroup은 윈도우의 그룹이다.</div><div class="line"></div><div class="line">+를 누르고 폴더는 /share로 하고 쓰기가능,보이기 체크</div><div class="line">접근탭을 눌러서 모든사용자에게 접근부여 선택</div><div class="line"></div><div class="line">설정 - samba사용자 눌러서 사용자 추가.</div><div class="line">유닉스 사용자명은 centOS / winuser /1234 /1234 입력 후 확인</div><div class="line"></div><div class="line"># systemctl stop firewalld</div><div class="line"></div><div class="line"># firewall-config //삼바, 삼바 클라이언트 열기</div><div class="line">          //지금은 방화벽을 꺼둔상태라 하지 않아도 된다.</div><div class="line"></div><div class="line"># systemctl restart smb</div></pre></td></tr></table></figure>
<h4 id="2-2-윈도우에서-접속해보자"><a href="#2-2-윈도우에서-접속해보자" class="headerlink" title="2.2 윈도우에서 접속해보자"></a>2.2 윈도우에서 접속해보자</h4><p>컴퓨터 -&gt; 네트워크 드라이브 연결<br>드라이브 Q로 선택<br>폴더에  \\192.168.111.100\share 입력<br>centos<br>1234</p>
<h4 id="2-3-서버에-접속한-사용자를-보자-서버에서-실행"><a href="#2-3-서버에-접속한-사용자를-보자-서버에서-실행" class="headerlink" title="2.3 서버에 접속한 사용자를 보자(서버에서 실행)"></a>2.3 서버에 접속한 사용자를 보자(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># smbstatus</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NFS 유닉스와 유닉스 유닉스와 리눅스간 파일공유이고&lt;br&gt;삼바는 유닉스(리눅스)와 윈도우즈간에 공유하는것.&lt;/p&gt;
&lt;h3 id=&quot;1-윈도우가-삼바-서버&quot;&gt;&lt;a href=&quot;#1-윈도우가-삼바-서버&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>14장. NFS 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux37/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux37/</id>
    <published>2017-07-15T03:11:36.000Z</published>
    <updated>2017-07-15T05:37:18.579Z</updated>
    
    <content type="html"><![CDATA[<p>NFS 서버리눅스 사이에 파일이나 폴더를 공유하는것<br>NFS를 구현하면 다양한 클라이언트가 공유 디렉터리에 접근할 수 있다.<br>서버에서는 서버를 구현하고 클라이언트는 그것을 마운트하여 사용한다.</p>
<h4 id="서버를-NFS-서버로-구현-서버로-실행"><a href="#서버를-NFS-서버로-구현-서버로-실행" class="headerlink" title="서버를 NFS 서버로 구현(서버로 실행)"></a>서버를 NFS 서버로 구현(서버로 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># rpm -qa nfs-utils   //설치 확인(깔려있다.)</div><div class="line"># vi /etc/exports //공유할 폴더를 지정하는 파일</div><div class="line">/share          192.168.111.*(rw,sync) 입력</div><div class="line">    //리드 라이트, 싱크까지 시킴</div><div class="line"># mkdir /share</div><div class="line"># chmod 707 /share/</div><div class="line"># cp /boot/vmlinuz-3* /share/file1</div><div class="line"># ls -l /share/</div><div class="line"># systemctl restart nfs-server    //서비스 시작</div><div class="line"># systemctl enable nfs-server   //상시가동</div><div class="line"># exportfs -v    //공개된 폴더 보임</div><div class="line"></div><div class="line"># systemctl stop firewalld //방화벽 끄기..</div><div class="line">      //관련된 것이 많아서 끄는게 낫다.</div></pre></td></tr></table></figure>
<h4 id="클라이언트로-NFS-접속-클라이언트로-실행"><a href="#클라이언트로-NFS-접속-클라이언트로-실행" class="headerlink" title="클라이언트로 NFS 접속(클라이언트로 실행)"></a>클라이언트로 NFS 접속(클라이언트로 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># rpm -qa nfs-utils //패키지 설치여부 확인(깔려있다)</div><div class="line"></div><div class="line"># showmount -e 192.168.111.100    //서버에서 마운트한 폴더 조회</div><div class="line"></div><div class="line"># cd</div><div class="line"># mkdir myShare</div><div class="line"># su</div><div class="line"> password 입력</div><div class="line"># cd /home/centos</div><div class="line"># mount -t nfs 192.168.111.100:/share myShare //마운트</div><div class="line"># ls -l myShare</div><div class="line"></div><div class="line"># cd myShare/</div><div class="line"># touch abc</div><div class="line"># touch bcd</div></pre></td></tr></table></figure>
<h4 id="클라이언트가-생성한게-서버에도-있나-확인"><a href="#클라이언트가-생성한게-서버에도-있나-확인" class="headerlink" title="클라이언트가 생성한게 서버에도 있나 확인"></a>클라이언트가 생성한게 서버에도 있나 확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ls -l /share    //abc,bcd 파일이 존재한다</div></pre></td></tr></table></figure>
<h4 id="윈도우로-접속해보자"><a href="#윈도우로-접속해보자" class="headerlink" title="윈도우로 접속해보자"></a>윈도우로 접속해보자</h4><p>일반적으로는 NFS는 제공을 안하지만 엔터프라이즈의 경우엔 제공해준다.<br>제어판 - 프로그램 - 기능 사용/사용안함 클릭- nfs용 클라이언트 체크<br>확인<br>재부팅<br>관리자로 cmd를 열자<br>mount 192.168.111.100:/share *<br>내컴퓨터를 누르면 접속 가능</p>
<h4 id="NFS서버의-그래픽-설정도구를-사용해보자"><a href="#NFS서버의-그래픽-설정도구를-사용해보자" class="headerlink" title="NFS서버의 그래픽 설정도구를 사용해보자"></a>NFS서버의 그래픽 설정도구를 사용해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">페도라20에서 제공하므로 카페에서 다운받자</div><div class="line"># yum -y install</div><div class="line"># cd 다운로드</div><div class="line"># yum -y localinstall system-config-nfs-1.4.2-1.fc20.noarch.rpm</div><div class="line"></div><div class="line"># mkdir /share2</div><div class="line"># system-config-nfs</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NFS 서버리눅스 사이에 파일이나 폴더를 공유하는것&lt;br&gt;NFS를 구현하면 다양한 클라이언트가 공유 디렉터리에 접근할 수 있다.&lt;br&gt;서버에서는 서버를 구현하고 클라이언트는 그것을 마운트하여 사용한다.&lt;/p&gt;
&lt;h4 id=&quot;서버를-NFS-서버로-
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>13장. FTP 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux36/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux36/</id>
    <published>2017-07-15T02:04:42.000Z</published>
    <updated>2017-07-15T03:11:20.611Z</updated>
    
    <content type="html"><![CDATA[<p>네임서버, 이메일서버, 웹서버 보다는 훨신 간단하다.<br>FTP 는 file transfer protocol의 약자로 파일을 전송하기 위한 서비스. 대용량 파일을 전송 할 때 FTP 서버는 성능이 좋다. ftp서버의 종류는 몇가지가 있는데 CentOS에서는 vsftpd를 제공한다. 페도라, 레드헷 엔터프라이즈 쪽에서 인기가 좋다.<br>proftpd는 주로 대형 사이트에서 오래동안 인기가 많았다.<br>pure-ftpd는 Troll-FTPd를 기반으로 프랭크 데니스가 2001년에 제작함.<br>사실 사용자입장에서는 어떤 ftp이든 관계가 없다.</p>
<h3 id="1-vsftpd"><a href="#1-vsftpd" class="headerlink" title="1.vsftpd"></a>1.vsftpd</h3><h4 id="실습1-1-vsftpd-설치-및-운영-서버실행"><a href="#실습1-1-vsftpd-설치-및-운영-서버실행" class="headerlink" title="실습1.1 vsftpd 설치 및 운영(서버실행)"></a>실습1.1 vsftpd 설치 및 운영(서버실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># yum -y install vsftpd</div><div class="line">      //165kb 밖에 안되는데 성능이 좋다!</div><div class="line"># cd /var/ftp    //vsftpd의 홈 디렉토리</div><div class="line"># ls -l     //일반적으로 pub라는 디렉토리에 파일을 넣어놓는다.</div><div class="line">            //우리회사가 A라는 파일을 배포해야하면 일반적으로 pub폴더에 넣음.</div><div class="line"># cd pub</div><div class="line"># ls</div><div class="line"># cp /boot/vmlinuz-3* file1</div><div class="line"></div><div class="line"># systemctl restart vsftpd   //ftp 시작</div><div class="line"># systemctl enable vsftpd    //상시가동</div><div class="line"># firewall-config     //방화벽 열기</div><div class="line">영구적탭 . ftp 선택 . 옵션 firewalld다시불러오기  </div></pre></td></tr></table></figure>
<h4 id="실습1-2-vsftpd-윈도우에서-접속해보자-윈클라이언트실행"><a href="#실습1-2-vsftpd-윈도우에서-접속해보자-윈클라이언트실행" class="headerlink" title="실습1.2 vsftpd 윈도우에서 접속해보자(윈클라이언트실행)"></a>실습1.2 vsftpd 윈도우에서 접속해보자(윈클라이언트실행)</h4><p>알드라이브 설치<br>192.168.111.100 입력<br>포트 21<br>익명로그인 체크<br>연결<br>파일 업로드가 안된다. 이유 : ftp는 기본적으로 다운로드만 가능하다. 아무나 업로드 가능하면 악성코드를 올릴 수 도 있다!<br>하지만 허용할 수 있다.</p>
<h4 id="실습1-3-vsftpd-업로드-가능하게-변경-서버에서-실행"><a href="#실습1-3-vsftpd-업로드-가능하게-변경-서버에서-실행" class="headerlink" title="실습1.3 vsftpd 업로드 가능하게 변경(서버에서 실행)"></a>실습1.3 vsftpd 업로드 가능하게 변경(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># vi /etc/vsftpd/vsftpd.conf</div><div class="line">29행 어나니머스가 업로드하는것을 허락한다. 주석해제</div><div class="line">33행 어나니머스가 디렉토리를 만드는것을 허락한다. 주석해제</div><div class="line"></div><div class="line"># chown ftp.ftp /var/ftp/pub  //펍 소유주 변경</div><div class="line"># ls -l</div><div class="line"></div><div class="line"># systemctl restart vsftpd //서비스재시작</div></pre></td></tr></table></figure>
<h4 id="실습1-4-vsftpd-명령어로-파일을-올리고-받아보자-서버B에서-실행"><a href="#실습1-4-vsftpd-명령어로-파일을-올리고-받아보자-서버B에서-실행" class="headerlink" title="실습1.4 vsftpd 명령어로 파일을 올리고 받아보자(서버B에서 실행)"></a>실습1.4 vsftpd 명령어로 파일을 올리고 받아보자(서버B에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># yum -y install epel-release   //레드헷에 접속해서 다운받을수 있도록 설치</div><div class="line"># yum -y install ncftp</div><div class="line"></div><div class="line"># ncftp 192.168.111.100</div><div class="line">&gt;cd pub</div><div class="line">&gt;get file1    //file1 다운로드</div><div class="line"></div><div class="line">&gt;put anaconda-ks.cfg  //아나콘다파일 업로드</div><div class="line"></div><div class="line">&gt;ls -l  </div><div class="line"></div><div class="line">&gt;bye //종료</div></pre></td></tr></table></figure>
<h3 id="2-proftpd"><a href="#2-proftpd" class="headerlink" title="2.proftpd"></a>2.proftpd</h3><h4 id="실습2-1-proftpd-설치-서버실행"><a href="#실습2-1-proftpd-설치-서버실행" class="headerlink" title="실습2.1 proftpd 설치(서버실행)"></a>실습2.1 proftpd 설치(서버실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># yum -y remove vsftpd //충돌 나니까 제거</div><div class="line"></div><div class="line"># yum -y install epel-release //proftpd도 레드헷에 있어서 해줘야함.</div><div class="line"></div><div class="line"># yum -y install proftpd    //proftpd 설치</div><div class="line"></div><div class="line"># vi /etc/proftpd.conf    //설정파일 열기</div><div class="line">:set nu   </div><div class="line">:356 주석처리</div><div class="line">:425 주석처리 &lt;/IfDefine&gt;</div><div class="line">:383 DenyAll을 AllowAll로 변경</div><div class="line">//이제 어나니머스도 접속 가능</div><div class="line"></div><div class="line"># systemctl restart proftpd   </div><div class="line"># systemctl enable proftpd</div><div class="line"></div><div class="line">  방화벽은 아까 열었으므로 안열어도 된다.</div></pre></td></tr></table></figure>
<h4 id="실습2-2-윈클라이언트에서-접속-윈클라이언트-실행"><a href="#실습2-2-윈클라이언트에서-접속-윈클라이언트-실행" class="headerlink" title="실습2.2 윈클라이언트에서 접속(윈클라이언트 실행)"></a>실습2.2 윈클라이언트에서 접속(윈클라이언트 실행)</h4><h3 id="3-pure-ftpd"><a href="#3-pure-ftpd" class="headerlink" title="3. pure-ftpd"></a>3. pure-ftpd</h3><h4 id="실습3-1-pure-ftpd-설치-서버실행"><a href="#실습3-1-pure-ftpd-설치-서버실행" class="headerlink" title="실습3.1 pure-ftpd 설치(서버실행)"></a>실습3.1 pure-ftpd 설치(서버실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># yum -y remove proftpd</div><div class="line"># yum -y install pure-ftpd  //레드햇에서 제공한다.</div><div class="line"># vi /etc/pure-ftpd/pure-ftpd.conf</div><div class="line">:set nu</div><div class="line">:77 익명사용자가 허용이 되어있다.</div><div class="line">:286 yes를 no로 변경</div><div class="line"></div><div class="line"># systemctl restart pure-ftpd</div><div class="line"># systemctl enable pure-ftpd</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;네임서버, 이메일서버, 웹서버 보다는 훨신 간단하다.&lt;br&gt;FTP 는 file transfer protocol의 약자로 파일을 전송하기 위한 서비스. 대용량 파일을 전송 할 때 FTP 서버는 성능이 좋다. ftp서버의 종류는 몇가지가 있는데 Ce
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>12장. 웹서버 설정파일,APM 컴파일 설치</title>
    <link href="http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux35/"/>
    <id>http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux35/</id>
    <published>2017-07-14T09:45:57.000Z</published>
    <updated>2017-07-15T00:48:58.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="x윈도를-통해-httpd-conf파일을-설정해보자"><a href="#x윈도를-통해-httpd-conf파일을-설정해보자" class="headerlink" title="x윈도를 통해 httpd.conf파일을 설정해보자"></a>x윈도를 통해 httpd.conf파일을 설정해보자</h3><p>httpd.conf는 웹서버 설정파일이다. 책을 통해 이 내용을 알아보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">카페에서 system-config-httpd 파일을 받자.</div><div class="line"># yum -y localinstall system-config-httpd-1.5.5-6.fc20.noarch.rpm</div><div class="line"></div><div class="line"># system-config-httpd</div></pre></td></tr></table></figure></p>
<h3 id="소스를-컴파일해서-APM을-설치"><a href="#소스를-컴파일해서-APM을-설치" class="headerlink" title="소스를 컴파일해서 APM을 설치"></a>소스를 컴파일해서 APM을 설치</h3><p>최적화된 APM을 구성할 수 있는 장점.</p>
<h4 id="아파치-설치"><a href="#아파치-설치" class="headerlink" title="아파치 설치"></a>아파치 설치</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"># yum -y remove httpd   //컴파일 한것을 쓰기위해 깔린것을 지움</div><div class="line"></div><div class="line"># yum -y install gcc gcc-c++  //컴파일러 설치</div><div class="line"></div><div class="line"># cd 다운로드/</div><div class="line"></div><div class="line"># tar xfj pcre*   //압축풀기</div><div class="line"># cd pcre-8.36/</div><div class="line"># ./configure ; make; make install //세개의 명령어 한꺼번에</div><div class="line"></div><div class="line"># cd 다운로드/</div><div class="line"># tar xfj httpd-2.4.10.tar.bz2</div><div class="line"># tar xfj apr-1.5.1.tar.bz2</div><div class="line"># tar xfj apr-util-1.5.4.tar.bz2</div><div class="line"></div><div class="line"># mv apr-1.5.1 httpd-2.4.10/srclib/apr  </div><div class="line">          //파일이름을 apr로 srclib에저장</div><div class="line"># mv apr-util-1.5.4 httpd-2.4.10/srclib/apr-util</div><div class="line">          //파일이름을 apr-util로 srclib에 저장</div><div class="line"># ls httpd-2.4.10/srclib</div><div class="line"></div><div class="line"># cd httpd-2.4.10/</div><div class="line"># ./configure  --with-included-apr --with-pcre=/usr/local/bin/pcre-config --prefix=/web/httpd2/  ; make ; make install      </div><div class="line"># vi /etc/ld.so.conf</div><div class="line">마지막에 다음 두줄 추가</div><div class="line">/web/httpd2/lib</div><div class="line">/web/httpd2/modules</div><div class="line"># ldconfig //방금 추가한 내용 적용</div><div class="line"># cp /web/httpd2/bin/apachectl /etc/init.d/httpd2  //아파치 시작스크립트 복사</div><div class="line"># vi /etc/init.d/httpd2</div><div class="line">맨 아래 다음 두줄 추가</div><div class="line"># chkconfig: -85 15</div><div class="line"># description: 아파치 웹서버 입니다.</div><div class="line"></div><div class="line"># chkconfig httpd2 on //부팅될때마다 시작되도록</div><div class="line"># systemctl restart httpd2</div><div class="line"># systemctl status httpd2</div><div class="line">localhost로 접속해보자</div><div class="line"></div><div class="line">APM 중 아파치 설치 완료!</div></pre></td></tr></table></figure>
<h4 id="마리아-db-설치"><a href="#마리아-db-설치" class="headerlink" title="마리아 db 설치"></a>마리아 db 설치</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">두번째 마리아 db는 컴파일된 바이너리 코드를 설치하자</div><div class="line">(카페에서 미리 받아놓자)</div><div class="line"># cd /root/다운로드</div><div class="line"># tar xfz mariadb-10.0.15-linux-x86_64.tar.gz</div><div class="line"># mv mariadb-10.0.15-linux-x86_64 /web/mariadb</div><div class="line"></div><div class="line"># groupadd mysql  //mysql 그룹 추가</div><div class="line"># adduser -M -d /web/mariadb -g mysql -s /bin/false -r mysql</div><div class="line">    //실제 사용하지 않는 유저 생성</div><div class="line"></div><div class="line"># /web/mariadb/scripts/mysql_install_db --user=mysql --basedir=/web/mariadb --datadir=/web/mariadb/data</div><div class="line">//마리아 디비 초기화</div><div class="line"></div><div class="line"># cp -a /web/mariadb/support-files/my-huge.cnf /etc/my.cnf</div><div class="line">y</div><div class="line"># vi /etc/my.cnf</div><div class="line">29행에 다음 두줄 추가</div><div class="line">basedir         = /web/mariadb</div><div class="line">datadir         = /web/mariadb/data</div><div class="line"></div><div class="line"># cp -a /web/mariadb/support-files/mysql.server /etc/init.d/mariadb</div><div class="line">  //실행스크립트 복사</div><div class="line"># systemctl restart mariadb</div><div class="line"># chkconfig mariadb on //상시가동되도록</div><div class="line"></div><div class="line"># /web/mariadb/bin/mysqladmin -u root -p password</div><div class="line">엔터</div><div class="line">1234</div><div class="line">1234</div><div class="line">//마리아 디비 관리자 암호 변경</div><div class="line"></div><div class="line"># PATH=$PATH:/web/mariadb/bin</div><div class="line"># mysql -u root -p</div><div class="line">1234 입력</div><div class="line">//정상작동하는지 접속</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="php-설치"><a href="#php-설치" class="headerlink" title="php 설치"></a>php 설치</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># cd /root/다운로드</div><div class="line"># yum -y install libxml2-devel openssl-devel libjpeg-devel libpng-devel</div><div class="line">//관련 패키지 설치</div><div class="line"></div><div class="line"># tar xfj php-5.6.4.tar.bz2</div><div class="line"># cd php-5.6.4</div><div class="line"># ./configure --with-mysql=/web/mariadb --with-apxs2=/web/httpd2/bin/apxs --with-mysqli=/web/mariadb/bin/mysql_config --with-imap-ssl --disable-debug --with-iconv --with-gd --with-jpeg-dir --with-png-dir --with-libxml-dir --with-openssl ; make ; make install  </div><div class="line">//컴파일 및 설치</div><div class="line"></div><div class="line"># ls -l /web/httpd2/modules/libphp5.so</div><div class="line">//제일 중요한 파일. 이파일을 위해 컴파일을 했다.</div><div class="line"># vi /web/httpd2/conf/httpd.conf</div><div class="line">147행에 모듈이 추가 된것을 확인</div><div class="line">376행에 AddType application/x-httpd-php .php .php3 .php4 .php5 .htm .html .inc</div><div class="line">아파치 웹서버가 376행의 타입까지 인식을 하도록 만듬</div><div class="line"></div><div class="line"># cp php.ini-production /etc/php.ini</div><div class="line"># systemctl stop httpd2</div><div class="line"># systemctl start httpd2</div><div class="line"># systemctl status httpd2</div><div class="line"></div><div class="line"># firewall-config</div><div class="line">영구적 . http 선택 옵션 firewalld 다시불러오기</div><div class="line"></div><div class="line"># cd /web/httpd2/htdocs/ //웹서버의 홈폴더</div><div class="line"># vi phpinfo.php      //샘플파일 만들기</div><div class="line">다음 한줄 추가</div><div class="line">&lt;?php phpinfo(); ?&gt;</div><div class="line"></div><div class="line">http://192.168.111.100/phpinfo.php 접속해보자</div></pre></td></tr></table></figure>
<p>과연 이 과정들을 거쳐 만들어진것들이 최고의 성능을 낼까?<br>그것은 확실히 모른다. 현재 패키지들이 잘 만들어져 나오기 때문에 굳이 컴파일을 통해 진행된것들이 훨신 좋은 성능을 얻거나 하지는 않는다.<br>학습차원에서 컴파일을 진행해 보았다.</p>
<h5 id="12장은-활용도가-높으므로-익혀두자"><a href="#12장은-활용도가-높으므로-익혀두자" class="headerlink" title="12장은 활용도가 높으므로 익혀두자"></a>12장은 활용도가 높으므로 익혀두자</h5>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;x윈도를-통해-httpd-conf파일을-설정해보자&quot;&gt;&lt;a href=&quot;#x윈도를-통해-httpd-conf파일을-설정해보자&quot; class=&quot;headerlink&quot; title=&quot;x윈도를 통해 httpd.conf파일을 설정해보자&quot;&gt;&lt;/a&gt;x윈도를 
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>12장. 클라우드 서비스 구축</title>
    <link href="http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux34/"/>
    <id>http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux34/</id>
    <published>2017-07-14T08:04:41.000Z</published>
    <updated>2017-07-14T23:02:10.912Z</updated>
    
    <content type="html"><![CDATA[<p>클라우드 서비스를 구축해봅시다.<br>클라우드 서비스는 서버에 파일이 있고 각각의 PC마다 폴더를 지정하여 동기화가 된다. 즉 웹하드는 업로드 다운로드를 하지만 클라우드는 자동으로 동기화가 되는점이 다르다.</p>
<p>카페에서 관련 서버 두개를 깔자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># cd /root/다운로드</div><div class="line"># yum -y localinstall owncloud- *</div><div class="line"></div><div class="line"># ls -l /var/www/html // owncloud가 깔렸나 확인</div><div class="line"></div><div class="line"># systemctl restart httpd //서비스 재시작</div><div class="line"># firewall-config</div><div class="line">//영구적 선택 - http,https//방화벽 설정 열기</div><div class="line"></div></pre></td></tr></table></figure><br>클라이언트에서 192.168.111.100/owncloud 접속<br>admin 1234 입력<br>자세한 사용법은 책을 참고하자!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;클라우드 서비스를 구축해봅시다.&lt;br&gt;클라우드 서비스는 서버에 파일이 있고 각각의 PC마다 폴더를 지정하여 동기화가 된다. 즉 웹하드는 업로드 다운로드를 하지만 클라우드는 자동으로 동기화가 되는점이 다르다.&lt;/p&gt;
&lt;p&gt;카페에서 관련 서버 두개를
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>12장. 웹하드 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux33/"/>
    <id>http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux33/</id>
    <published>2017-07-14T05:26:47.000Z</published>
    <updated>2017-07-14T06:21:43.408Z</updated>
    
    <content type="html"><![CDATA[<p>웹하드는 웹서버상에서 파일을 저장할 수 있는것. 웹하드에 파일을 저장해 놓으면 전세계 어디서든지 내려받고 수정할 수 있다.</p>
<h4 id="설정하자"><a href="#설정하자" class="headerlink" title="설정하자"></a>설정하자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># cd /var/www/html</div><div class="line"># ls -l</div><div class="line"># mv /root/다운로드/pydio-core-6.0.2.tar.gz / .</div><div class="line"># tar xfz pydio-core-6.0.2.tar.gz</div><div class="line"># mv pydio-core-6.0.2 webhard //폴더명 변경</div><div class="line"></div><div class="line"># chmod 707 webhard/    //일반사용자가 접근할 수 있게 권한변경</div><div class="line"># chown -R apache.apache webhard/</div><div class="line"># ls -l</div><div class="line"></div><div class="line"># yum -y --skip-broken install php-*   </div><div class="line">      //php관련 패키지 설치</div><div class="line">      //--skip-broken 설치하다 에러나면 그냥 무시해라</div><div class="line"></div><div class="line"># yum -y install php-mcrypt  //레드헷 엔터프라이즈에 존재</div><div class="line">                            //지금은 설치 안될것이다.</div><div class="line"># yum -y install epel-release</div><div class="line">//레드헷 엔터프라이즈도 yum으로 깔 수 있게됨    </div><div class="line"># yum -y install php-mcrypt //이젠 설치가 된다.</div><div class="line"></div><div class="line"># vi /etc/httpd/conf/httpd.conf</div><div class="line">151 행 AllowOverride All로 변경</div><div class="line"># systemctl restart httpd</div></pre></td></tr></table></figure>
<h4 id="리눅스-클라이언트에서-접속해보자"><a href="#리눅스-클라이언트에서-접속해보자" class="headerlink" title="리눅스 클라이언트에서 접속해보자"></a>리눅스 클라이언트에서 접속해보자</h4><p><a href="http://192.168.111.100/webhard/" target="_blank" rel="external">http://192.168.111.100/webhard/</a>  접속<br>click here 클릭<br>한국어 하고 start wizard<br>admin admin 12345678 12345678</p>
<p>global option 클릭<br>default language만 한국어로 변경</p>
<p>configurations storage 클릭하고<br>database system 선택<br>database에 xeDB 입력<br>User에 xeUser 입력<br>Password에 1234 입력<br>Try connecting…. 클릭</p>
<p>add some users 클릭<br>centos<br>centos@hanbit.co.kr<br>센토스사용자<br>1234<br>1234<br>Install pydi 클릭<br>웹브라우져 껏다 켜서<br><a href="http://192.168.111.100/webhard/" target="_blank" rel="external">http://192.168.111.100/webhard/</a> 접속</p>
<p>centos<br>1234 후 로그인<br>업로드를 해보자!</p>
<h4 id="업로드-용량-제한을-풀자"><a href="#업로드-용량-제한을-풀자" class="headerlink" title="업로드 용량 제한을 풀자"></a>업로드 용량 제한을 풀자</h4><p>서버에서 실행하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vi /etc/php.ini //현재는 8m이상 업로드가 안되는데 제한을 풀자.</div><div class="line">:384  (384라인으로감!)</div><div class="line">30초가 넘어가면 종료되도록 설정되어있다 300초로 수정하자</div><div class="line"></div><div class="line">:672</div><div class="line">8M를 100M으로 수정</div><div class="line"></div><div class="line">:800</div><div class="line">2M 를 100M으로 수정</div><div class="line">:wq</div><div class="line"></div><div class="line"># cd /var/www/html/webhard/data/cache/  </div><div class="line">    //캐쉬로 인해 제대로 작동하지 않을 수 있으므로 캐쉬를 지우자</div><div class="line">    //지금 캐쉬폴더가 없는데 실행을 안해서 그런가..?</div><div class="line"># rm -f plugin*</div><div class="line"># systemctl restart httpd</div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="업로드를-다시-해보자"><a href="#업로드를-다시-해보자" class="headerlink" title="업로드를 다시 해보자"></a>업로드를 다시 해보자</h4><p>리눅스 클라이언트에서..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;웹하드는 웹서버상에서 파일을 저장할 수 있는것. 웹하드에 파일을 저장해 놓으면 전세계 어디서든지 내려받고 수정할 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;설정하자&quot;&gt;&lt;a href=&quot;#설정하자&quot; class=&quot;headerlink&quot; title=&quot;설정하자&quot;&gt;&lt;/
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>12장. APM 개념과 설치, XE 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux32/"/>
    <id>http://KKimSangHeon.github.io/2017/07/14/ThisIsLinux32/</id>
    <published>2017-07-14T02:14:09.000Z</published>
    <updated>2017-07-14T05:29:18.083Z</updated>
    
    <content type="html"><![CDATA[<p>리눅스에서 가장 많이 활용하는것중 하나가 웹서버이다.<br>APM = Apache 웹서버 + 프로그래밍언어 PHP + 데이터베이스 MaraiaDB<br>리눅스 환경에서 사용될 경우 LAPM(Linux Apache,PHP,MariaDB)라고도 부름.<br>APM 이라는 소프트웨어는 존재하지 않으며 이 3가지가 서로 잘 연동되어 운영되도록 만든 환경을 APM이라 함</p>
<h3 id="APM-설치"><a href="#APM-설치" class="headerlink" title="APM 설치"></a>APM 설치</h3><h4 id="설치를-해보자"><a href="#설치를-해보자" class="headerlink" title="설치를 해보자"></a>설치를 해보자</h4><p>서버에서 진행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># rpm -qa httpd php mariadb-server</div><div class="line">httpd만 깔려있으므로 나머지를 깔자</div><div class="line"># yum -y install mariadb-server mariadb php php-mysqlnd</div><div class="line"># rpm -qa httpd php mariadb-server //깔린버전 확인해보자</div><div class="line"># yum -y install php-gd</div></pre></td></tr></table></figure></p>
<h4 id="가동해보자"><a href="#가동해보자" class="headerlink" title="가동해보자"></a>가동해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># systemctl restart httpd</div><div class="line"># systemctl restart mariadb</div><div class="line"># systemctl restart php // php는 서비스가 아니라</div><div class="line">                httpd에 포함되는 기능이라 시작이 안된다.</div><div class="line"></div><div class="line"># systemctl enable httpd    //상시가동</div><div class="line"># systemctl enable mariadb        </div><div class="line"></div><div class="line"># firewall-config</div><div class="line">영구적 선택 - http,https</div><div class="line">mysql은 안열어도 됨. 어차피 안에서만 접근하고</div><div class="line">외부에서 접근하지 않을것이므로   </div><div class="line">옵션- 다시불러오기       </div></pre></td></tr></table></figure>
<h4 id="접속해보자"><a href="#접속해보자" class="headerlink" title="접속해보자"></a>접속해보자</h4><p>파이어폭스 키고 localhost</p>
<h4 id="php-하나를-만들어보자"><a href="#php-하나를-만들어보자" class="headerlink" title="php 하나를 만들어보자"></a>php 하나를 만들어보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># cd /var/www/html</div><div class="line"># pwd</div><div class="line"># ls</div><div class="line"># touch phpinfo.php</div><div class="line"># vi phpinfo.php</div><div class="line">아래 한줄 입력</div><div class="line">&lt;?php   phpinfo();      ?&gt;</div><div class="line"></div></pre></td></tr></table></figure>
<p>파이어 폭스 켜고 <a href="http://localhost/phpinfo.php" target="_blank" rel="external">http://localhost/phpinfo.php</a> 접속해보자</p>
<h4 id="mariadb-확인해보자"><a href="#mariadb-확인해보자" class="headerlink" title="mariadb 확인해보자"></a>mariadb 확인해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysql</div></pre></td></tr></table></figure>
<h3 id="XE-설치"><a href="#XE-설치" class="headerlink" title="XE 설치"></a>XE 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># vi /etc/httpd/conf/httpd.conf   //XE 외부에서 접근 가능하게</div><div class="line">:set number</div><div class="line">151 none 를 All로 변경</div><div class="line"># systemctl restart httpd</div><div class="line"></div><div class="line"># cd /var/www/html</div><div class="line"># mv /root/다운로드/xe.zip .</div><div class="line"># unzip xe*</div><div class="line"></div><div class="line"># chmod 707 xe  //권한 변경</div><div class="line"># cd /var/www/html/xe/modules/</div><div class="line"># ls  //board는 게시판임</div></pre></td></tr></table></figure>
<h3 id="XE-실습"><a href="#XE-실습" class="headerlink" title="XE 실습"></a>XE 실습</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mysql</div><div class="line">&gt;GRANT ALL PRIVILEGES ON xeDB.* TO xeUser@localhost IDENTIFIED BY &apos;1234&apos;;</div><div class="line">&gt;exit</div><div class="line"></div><div class="line"># mysql -u xeUser -p1234</div><div class="line">&gt; CREATE DATABASE xeDB;</div></pre></td></tr></table></figure>
<h3 id="XE-설정"><a href="#XE-설정" class="headerlink" title="XE 설정"></a>XE 설정</h3><p>외부에서 해도되고 내부에서 해도된다. 즉 관계 없다.<br>윈 클라이언트로 하자.<br>192.168.111.100/xe 접속<br>한국어 . 다음<br>동의. 다음<br>다음<br>mysql 선택 다음<br>xeUser /1234 /xeDB 다음<br>kora선택 다음<br>aa@aa.com / 4321 /4321 관리자임. / admin</p>
<p>게시판 추가는 책을보자</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;리눅스에서 가장 많이 활용하는것중 하나가 웹서버이다.&lt;br&gt;APM = Apache 웹서버 + 프로그래밍언어 PHP + 데이터베이스 MaraiaDB&lt;br&gt;리눅스 환경에서 사용될 경우 LAPM(Linux Apache,PHP,MariaDB)라고도 부름
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>11장. 쇼핑몰 데이터베이스 구축, Oracle 설치, Oracle에서 쇼핑몰 DB 구축</title>
    <link href="http://KKimSangHeon.github.io/2017/07/13/ThisIsLinux31/"/>
    <id>http://KKimSangHeon.github.io/2017/07/13/ThisIsLinux31/</id>
    <published>2017-07-13T09:09:57.000Z</published>
    <updated>2017-07-13T12:22:00.473Z</updated>
    
    <content type="html"><![CDATA[<p>서버에서 실행해도 되고 윈 클라이언트에서 해도된다. 그러나 윈 클라이언트에서 해보자</p>
<h4 id="윈도우에서-실행"><a href="#윈도우에서-실행" class="headerlink" title="윈도우에서 실행"></a>윈도우에서 실행</h4><p>cmd 열기<br>cd “c:\Program Files (x86)”<br>cd “MariaDB 10.0”<br>cd MariaDB 10.0<br>cd bin</p>
<p>mysql -h 192.168.111.100 -u winuser -p<br>4321 입력<br>쿼리문은 책을 참조하자…..</p>
<h4 id="오라클을-설치해보자"><a href="#오라클을-설치해보자" class="headerlink" title="오라클을 설치해보자"></a>오라클을 설치해보자</h4><p>서버에서 실행하자</p>
<p>카페에서 링크타고 오라클을 들어가서 깔자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># cd 다운로드/</div><div class="line"># ls -l</div><div class="line"># unzip oracle* //압축을 풀자</div><div class="line"># ls -l Disk1/</div><div class="line"># cd Disk1/</div><div class="line"></div><div class="line">오라클을 설치하기 위해서는 가상메모리 2기가가 필요함.</div><div class="line">그래서 추가적으로 2기가를 추가한다.</div><div class="line"># dd if=/dev/zero of=/swapfile bs=1024 count=4194304</div><div class="line"># mkswap /swapfile     //스왑메모리로 만들자</div><div class="line"># swapon /swapfile     //스왑을 키자</div><div class="line"># swapon -s //스왑 확인 총 (6기가 임을 확인)</div><div class="line"></div><div class="line">스왑을 껏다 켜도 유지되도록 하자</div><div class="line"># cd /etc/rc.d    </div><div class="line"># chmod 755 rc.local</div><div class="line"># vi rc.local</div><div class="line">맨 밑에</div><div class="line">swapon /swapfile 추가</div><div class="line"># reboot</div><div class="line"># swapon -s //스왑 확인 총 (6기가 임을 확인)</div><div class="line"></div><div class="line">오라클을 본격적으로 설치하자</div><div class="line"># cd 다운로드/Disk1/</div><div class="line"># pwd</div><div class="line"># ls -l</div><div class="line"># yum -y localinstall oracle*</div></pre></td></tr></table></figure></p>
<h4 id="오라클을-설정하자"><a href="#오라클을-설정하자" class="headerlink" title="오라클을 설정하자"></a>오라클을 설정하자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># service oracle-xe configure</div><div class="line">엔터(8080은 외부로 접속하는 포트)</div><div class="line">엔터(1521은 sql+로 접속하는 포트)</div><div class="line">1234엔터</div><div class="line">1234엔터</div><div class="line">y 엔터(자동으로 실행할꺼냐)</div></pre></td></tr></table></figure>
<h4 id="오라클-서비스를-시작하자"><a href="#오라클-서비스를-시작하자" class="headerlink" title="오라클 서비스를 시작하자"></a>오라클 서비스를 시작하자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># /etc/init.d/oracle-xe start   //오라클 시작</div><div class="line"></div><div class="line"># vi /etc/bashrc    //맨아래 다음을 입력.</div><div class="line"># . /u01/app//oracle/product/11.2.0/xe/bin/oracle_env.sh      </div><div class="line">                  //오라클 환경설정하는 스크립트 실행하는것.</div><div class="line">                  //껏다켜면 이 한줄을 입력해야 하지만</div><div class="line">                  //그 과정을 없애기 위해 /etc/bashrc에 추가</div><div class="line"></div><div class="line"># firewall-config</div><div class="line">영구적 선택.</div><div class="line">포트 탭 선택</div><div class="line">추가 8080 tcp</div><div class="line">추가 1521 tcp</div><div class="line">(오라클을 센토스에서 만든것이 아니라 등록이 되어있지 않다.)</div><div class="line">옵션 - Firewalld 다시불러오기</div></pre></td></tr></table></figure>
<h4 id="오라클에-접속해보자"><a href="#오라클에-접속해보자" class="headerlink" title="오라클에 접속해보자"></a>오라클에 접속해보자</h4><p>웹브라우저 실행<br>192.168.111.100:8080/apex<br>internal<br>admin<br>1234<br>로그인<br>1234<br>1234<br>1234<br>apply<br>return<br>1234 로그인</p>
<h4 id="마리아db에서-입력한-쿼리문을-오라클에서-실행해보자"><a href="#마리아db에서-입력한-쿼리문을-오라클에서-실행해보자" class="headerlink" title="마리아db에서 입력한 쿼리문을 오라클에서 실행해보자."></a>마리아db에서 입력한 쿼리문을 오라클에서 실행해보자.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mkdir /oradata    //데이터베이스가 생성될 디렉토리</div><div class="line"># chmod 777 /oradata</div><div class="line"># sqlplus   //오라클에서 데이터베이스 시작</div><div class="line">system 입력 //오라클에서 가장 높은 관리자는 system</div><div class="line">1234 입력</div><div class="line">책보고 쿼리 입력</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;서버에서 실행해도 되고 윈 클라이언트에서 해도된다. 그러나 윈 클라이언트에서 해보자&lt;/p&gt;
&lt;h4 id=&quot;윈도우에서-실행&quot;&gt;&lt;a href=&quot;#윈도우에서-실행&quot; class=&quot;headerlink&quot; title=&quot;윈도우에서 실행&quot;&gt;&lt;/a&gt;윈도우에서 실행
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>11장. MariaDB 설치/운영 , Windows에서 접속</title>
    <link href="http://KKimSangHeon.github.io/2017/07/12/ThisIsLinux30/"/>
    <id>http://KKimSangHeon.github.io/2017/07/12/ThisIsLinux30/</id>
    <published>2017-07-12T09:21:35.000Z</published>
    <updated>2017-07-14T02:38:30.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="마리아-DB-운영"><a href="#마리아-DB-운영" class="headerlink" title="마리아 DB 운영"></a>마리아 DB 운영</h3><h4 id="DBMS-설치"><a href="#DBMS-설치" class="headerlink" title="DBMS 설치"></a>DBMS 설치</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">카페에 올려놓은 마리아 db를 세개 다 받자.</div><div class="line"># yum -y remove mariadb-libs    // 버전이 달라 새로 설치하면 충돌우려..</div><div class="line"></div><div class="line"># yum -y localinstall Maria*</div><div class="line"># systemctl restart mysql //mysql이 오라클로 들어가자</div><div class="line">  //개발자들이 마리아를 만들어냄..  </div><div class="line"></div><div class="line"># systemctl status mysql</div><div class="line"># checkconfig mysql on  // systemctl enable mysql 과 동일</div><div class="line">              //상시가동하도록 설정</div><div class="line"></div><div class="line"># firewall-config   //방화벽 열기</div><div class="line">영구적 탭 -&gt; 다시불러오기</div><div class="line"># mysql   // 마리아디비 실행</div><div class="line">&gt; showdatabases;    //그냥 확인차</div><div class="line"></div><div class="line">원칙은</div><div class="line"># mysql -u root -p 라고 입력 후 비번입력해야함</div><div class="line">지금은 비번을 설정 하지 않았으므로 엔터만 누르면 된다.</div></pre></td></tr></table></figure>
<h4 id="마리아-디비-암호-설정"><a href="#마리아-디비-암호-설정" class="headerlink" title="마리아 디비 암호 설정"></a>마리아 디비 암호 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mysqladmin -u root password &apos;1234&apos;</div><div class="line">마리아 디비 사용자인 root는 비번이 1234</div><div class="line"></div><div class="line"># mysql -u root -p //로그인</div><div class="line">1234 입력</div><div class="line">&gt;exit</div></pre></td></tr></table></figure>
<h4 id="윈도우-클라이언트에서-마리아DB-접속"><a href="#윈도우-클라이언트에서-마리아DB-접속" class="headerlink" title="윈도우 클라이언트에서 마리아DB 접속"></a>윈도우 클라이언트에서 마리아DB 접속</h4><p>카페 접속해서 마리아디비 설치<br>리눅스는 서버 클라이언트 따로지만 윈도우용은 하나다.<br>다른건 설치하지 말고 클라이언트만 설치하자</p>
<h5 id="서버에서-실행"><a href="#서버에서-실행" class="headerlink" title="서버에서 실행"></a>서버에서 실행</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># mysql -u root -p</div><div class="line">&gt; USE mysql</div><div class="line">&gt;SELECT user,host FROM user WHERE user NOT LIKE &apos;&apos;;</div><div class="line">루트 사용자는 외부에서 접속할 수 없다는 것을 확인.</div><div class="line"></div><div class="line">&gt;GRANT ALL PRIVILEGES ON *.* TO winuser@&apos;192.168.111.%&apos; IDENTIFIED BY &apos;4321&apos;;</div><div class="line">    //192.168.111.XXX 는 허용하겠다.(윈도우 유저의 아이피의 마지막이 변동가능성이 있기 때문에 %로 처리)</div></pre></td></tr></table></figure>
<h5 id="윈도우에서-실행"><a href="#윈도우에서-실행" class="headerlink" title="윈도우에서 실행"></a>윈도우에서 실행</h5><p>cmd 열기<br>cd “c:\Program Files (x86)”<br>cd “MariaDB 10.0”<br>cd MariaDB 10.0<br>cd bin</p>
<p>mysql -h 192.168.111.100 -u winuser -p<br>4321 입력<br>show databases;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;마리아-DB-운영&quot;&gt;&lt;a href=&quot;#마리아-DB-운영&quot; class=&quot;headerlink&quot; title=&quot;마리아 DB 운영&quot;&gt;&lt;/a&gt;마리아 DB 운영&lt;/h3&gt;&lt;h4 id=&quot;DBMS-설치&quot;&gt;&lt;a href=&quot;#DBMS-설치&quot; class=&quot;he
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>10장. 웹 메일의 설치 및 사용</title>
    <link href="http://KKimSangHeon.github.io/2017/07/12/ThisIsLinux29/"/>
    <id>http://KKimSangHeon.github.io/2017/07/12/ThisIsLinux29/</id>
    <published>2017-07-11T18:40:05.000Z</published>
    <updated>2017-07-12T11:10:14.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="웹-메일의-설치-및-사용"><a href="#웹-메일의-설치-및-사용" class="headerlink" title="웹 메일의 설치 및 사용"></a>웹 메일의 설치 및 사용</h3><p>10장의 지금까지의 구현내용은 문제가 있다. 일반사용자는 POP3, SMTP 등에 대한 설정하는것에 대한 지식이 없으며 원하지도 않는다.<br>즉. 이메일 서버를 구축하려면 웹 메일까지 설정을 해주어야 한다.<br>우리는 이를 위해 다람쥐 메일이라고 불리는 squirrelmail을 사용한다.</p>
<h4 id="다람쥐-메일-설치-서버"><a href="#다람쥐-메일-설치-서버" class="headerlink" title="다람쥐 메일 설치(서버)"></a>다람쥐 메일 설치(서버)</h4><p>센토스에서 다람쥐는 제공하지 않으므로 페도라것을 사용해야한다. (페도라의 거의 모든 패키지는 센토스에서 돌아간다.)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"># wget http://download.hanbit.co.kr/centos/7/squirrelmail-1.4.22-13.fc20.noarch.rpm</div><div class="line"># yum -y localinstall squi*     //로컬설치</div><div class="line"># chown apache.apache -R /usr/share/squirrelmail/  //웹사용자인 아파치로 소유주 변경</div><div class="line"># chown apache.apache -R /var/lib/squirrelmail/</div><div class="line"># chown apache.apache -R /var/spool/squirrelmail/</div><div class="line"># chown apache.apache /etc/squirrelmail/config.php</div><div class="line"></div><div class="line"># /usr/share/squirrelmail/config/conf.pl    //설정할 수 있는 실행파일</div><div class="line">2입력</div><div class="line">1 (도메인 변경)</div><div class="line">naver.com</div><div class="line">A</div><div class="line">4</div><div class="line">mail.naver.com</div><div class="line">8</div><div class="line">other</div><div class="line">s</div><div class="line">r</div><div class="line">10</div><div class="line">1</div><div class="line">ko_KR</div><div class="line">2</div><div class="line">euc-kr</div><div class="line">s</div><div class="line">r</div><div class="line">s</div><div class="line">q</div><div class="line"></div><div class="line">간단하게 다람쥐 메일을 들어올 수 있게 설정</div><div class="line"># vi /etc/httpd/conf/httpd.conf 맨위에 다음 한줄 추가</div><div class="line">Alias /webmail/   /usr/share/squirrelmail/</div><div class="line"># systemctl restart httpd  </div><div class="line"># systemctl enable httpd   </div><div class="line">포트를 추가해야하는데 방화벽을 아까 꺼놨기 때문에 따로 하지 않겠다.</div><div class="line"></div><div class="line"></div><div class="line">웹을 www로 들어가기 떄문에 웹주소도 네임서버에 추가</div><div class="line"># vi /var/named/naver.com.db    맨뒤에 다음 한줄 추가</div><div class="line">www           IN     A  192.168.111.100</div><div class="line"># systemctl restart named</div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="클라이언트에서-테스트-해보자"><a href="#클라이언트에서-테스트-해보자" class="headerlink" title="클라이언트에서 테스트 해보자"></a>클라이언트에서 테스트 해보자</h4><p>파이어폭스에서 www.naver.com/webmail/ 입력<br>맨아래 예외 추가 -&gt; 보안예외 확인<br>lee / lee 입력<br>편지쓰기-&gt;  kim@daum.net  -&gt;전송<br>윈도우 클라이언트에서 받기를 눌러보자, 그 후 답장을 눌러 보내보자</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;웹-메일의-설치-및-사용&quot;&gt;&lt;a href=&quot;#웹-메일의-설치-및-사용&quot; class=&quot;headerlink&quot; title=&quot;웹 메일의 설치 및 사용&quot;&gt;&lt;/a&gt;웹 메일의 설치 및 사용&lt;/h3&gt;&lt;p&gt;10장의 지금까지의 구현내용은 문제가 있다. 일
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>10장. 센드메일 서버의 구현</title>
    <link href="http://KKimSangHeon.github.io/2017/07/11/ThisIsLinux28/"/>
    <id>http://KKimSangHeon.github.io/2017/07/11/ThisIsLinux28/</id>
    <published>2017-07-11T08:30:49.000Z</published>
    <updated>2017-07-11T18:19:07.383Z</updated>
    
    <content type="html"><![CDATA[<p>네임서버를 만들었으니 이메일을 보내는 메일서버를 만들어 보자.</p>
<h3 id="1-서버-메일서버를-만들자-naver"><a href="#1-서버-메일서버를-만들자-naver" class="headerlink" title="1.서버 메일서버를 만들자(naver)"></a>1.서버 메일서버를 만들자(naver)</h3><h4 id="1-1-서버에서-메일-서버를-만들자-서버에서-진행"><a href="#1-1-서버에서-메일-서버를-만들자-서버에서-진행" class="headerlink" title="1.1 서버에서 메일 서버를 만들자(서버에서 진행)"></a>1.1 서버에서 메일 서버를 만들자(서버에서 진행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># yum -y install sendmail-cf dovecot  </div><div class="line">          //sendmail-cf 보내는메일서버</div><div class="line">          //devoct 받는 메일서버</div><div class="line"></div><div class="line"># vi /etc/mail/sendmail.cf          </div><div class="line">:set number</div><div class="line">85를 Cwnaver.com 으로 수정</div><div class="line">264  Addr=127.0.0.1 를 지운다</div><div class="line">저장</div><div class="line"></div><div class="line">외부 호스트가 메일을 전달할 수 있도록 허가</div><div class="line"># vi /etc/mail/access  다음을 추가</div><div class="line">naver.com       RELAY</div><div class="line">daum.net        RELAY</div><div class="line">192.168.111     RELAY</div><div class="line"></div><div class="line"># makemap hash /etc/mail/access &lt; /etc/mail/access  //변경내용 적용</div><div class="line"></div><div class="line">사용자의 메일박스에서 메일을 꺼내 사용자에게 전달하는 도베캇 설정</div><div class="line"># vi /etc/dovecot/dovecot.conf</div><div class="line">:set number</div><div class="line">24행 30행 33행 주석제거</div><div class="line">저장</div><div class="line"># vi /etc/dovecot/conf.d/10-ssl.conf</div><div class="line">:set number</div><div class="line">8행 ssl=yes로 수정</div><div class="line">저장</div><div class="line"># vi /etc/dovecot/conf.d/10-mail.conf</div><div class="line">:set number</div><div class="line">25행 주석제거</div><div class="line">119행 mail_access_groups =mail 으로 수정</div><div class="line">159행 주석제거</div><div class="line">저장</div></pre></td></tr></table></figure>
<h4 id="1-2-서버에-사용자를-만들자-서버에서-진행"><a href="#1-2-서버에-사용자를-만들자-서버에서-진행" class="headerlink" title="1.2 서버에 사용자를 만들자(서버에서 진행)"></a>1.2 서버에 사용자를 만들자(서버에서 진행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># adduser lee</div><div class="line"># passwd lee</div><div class="line">암호 lee</div><div class="line"> 이 사용자는 lee@naver.com</div></pre></td></tr></table></figure>
<h4 id="1-3-서비스를-시작하자-서버에서-진행"><a href="#1-3-서비스를-시작하자-서버에서-진행" class="headerlink" title="1.3 서비스를 시작하자(서버에서 진행)"></a>1.3 서비스를 시작하자(서버에서 진행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># systemctl restart sendmail</div><div class="line"># systemctl enable sendmail</div><div class="line"></div><div class="line"># systemctl restart dovecot</div><div class="line"># systemctl enable dovecot</div></pre></td></tr></table></figure>
<h4 id="1-4-서버에서-만든-메일서버가-잘-작동하나-확인해보자-클라이언트에서-진행"><a href="#1-4-서버에서-만든-메일서버가-잘-작동하나-확인해보자-클라이언트에서-진행" class="headerlink" title="1.4 서버에서 만든 메일서버가 잘 작동하나 확인해보자(클라이언트에서 진행)"></a>1.4 서버에서 만든 메일서버가 잘 작동하나 확인해보자(클라이언트에서 진행)</h4><p>이를 위해 클라이언트에서 메일을 보낸다.(클라이언트에서 실행)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># su</div><div class="line"></div><div class="line"># vi /etc/resolv.conf</div><div class="line">nameserver 192.168.111.100</div><div class="line"></div><div class="line"># yum -y install evolution    //이메일 클라이언트 프로그램</div><div class="line"></div><div class="line">프로그램-&gt;오피스-&gt;에볼루션</div><div class="line">계속-&gt;계속    </div><div class="line">전체이름: 이네이버</div><div class="line">전자메일 주소: lee@naver.com</div><div class="line">계속</div><div class="line"></div><div class="line">서버종류 pop선택</div><div class="line">서버: mail.naver.com</div><div class="line">사용자이름: lee</div><div class="line">포트: 995</div><div class="line">암호화방식: SSL특정방식사용</div><div class="line">계속</div><div class="line">계속</div><div class="line"></div><div class="line">서버 mail.naver.com</div><div class="line">계속</div><div class="line"></div><div class="line">이름 : 네이버 메일</div><div class="line">계속</div><div class="line">적용</div><div class="line"></div><div class="line">계속 허용       //꼭 해야한다.</div><div class="line">암호: lee</div><div class="line">로그인 암호:centos</div><div class="line"></div><div class="line">새로만들기</div><div class="line">받는사람 lee@naver.com</div></pre></td></tr></table></figure><br>새로만들기를 눌러 lee@naver.com으로 메일을 하나 보내보자. 그러면 보낸편지함에 하나 들어있고 메일박스로 들어가있는상태. 그 후 보내기/받기를 누르면 받은편지함에 메일이 하나 생성된다.</p>
<h3 id="2-서버B-메일서버를-만들자-daum"><a href="#2-서버B-메일서버를-만들자-daum" class="headerlink" title="2.서버B 메일서버를 만들자(daum)"></a>2.서버B 메일서버를 만들자(daum)</h3><h4 id="2-1-서버B에-메일-서버를-만들자-서버B에서-진행"><a href="#2-1-서버B에-메일-서버를-만들자-서버B에서-진행" class="headerlink" title="2.1 서버B에 메일 서버를 만들자(서버B에서 진행)"></a>2.1 서버B에 메일 서버를 만들자(서버B에서 진행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># yum -y install sendmail-cf dovecot  </div><div class="line">          //sendmail-cf 보내는메일서버</div><div class="line">          //devoct 받는 메일서버</div><div class="line"></div><div class="line"># vi /etc/mail/sendmail.cf          </div><div class="line">:set number</div><div class="line">85를 Cwdaum.net 으로 수정</div><div class="line">264  Addr=127.0.0.1 를 지운다</div><div class="line">저장</div><div class="line"></div><div class="line">외부 호스트가 메일을 전달할 수 있도록 허가</div><div class="line"># vi /etc/mail/access  다음을 추가</div><div class="line">naver.com       RELAY</div><div class="line">daum.net        RELAY</div><div class="line">192.168.111     RELAY</div><div class="line"></div><div class="line"># makemap hash /etc/mail/access &lt; /etc/mail/access  //변경내용 적용</div><div class="line"></div><div class="line">사용자의 메일박스에서 메일을 꺼내 사용자에게 전달하는 도베캇 설정</div><div class="line"># vi /etc/dovecot/dovecot.conf</div><div class="line">:set number</div><div class="line">24행 30행 33행 주석제거</div><div class="line">저장</div><div class="line"># vi /etc/dovecot/conf.d/10-ssl.conf</div><div class="line">:set number</div><div class="line">8행 ssl=yes로 수정</div><div class="line">저장</div><div class="line"># vi /etc/dovecot/conf.d/10-mail.conf</div><div class="line">:set number</div><div class="line">25행 주석제거</div><div class="line">119행 mail_access_groups =mail 으로 수정</div><div class="line">159행 주석제거</div><div class="line">저장</div></pre></td></tr></table></figure>
<h4 id="2-2-서버B에-사용자를-만들자-서버B에서-진행"><a href="#2-2-서버B에-사용자를-만들자-서버B에서-진행" class="headerlink" title="2.2 서버B에 사용자를 만들자(서버B에서 진행)"></a>2.2 서버B에 사용자를 만들자(서버B에서 진행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># adduser kim</div><div class="line"># passwd kim</div><div class="line">암호 kim</div><div class="line"> 이 사용자는 kim@daum.net</div></pre></td></tr></table></figure>
<h4 id="2-3-서비스를-시작하자-서버B에서-진행"><a href="#2-3-서비스를-시작하자-서버B에서-진행" class="headerlink" title="2.3 서비스를 시작하자(서버B에서 진행)"></a>2.3 서비스를 시작하자(서버B에서 진행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># systemctl restart sendmail</div><div class="line"># systemctl enable sendmail</div><div class="line"></div><div class="line"># systemctl restart dovecot</div><div class="line"># systemctl enable dovecot</div><div class="line"></div><div class="line"># systemctl stop firewalld    //방화벽 끄기</div><div class="line"># systemctl disable firewalld //방화벽 끄기</div></pre></td></tr></table></figure>
<h3 id="3-최종테스트를-해보자"><a href="#3-최종테스트를-해보자" class="headerlink" title="3. 최종테스트를 해보자"></a>3. 최종테스트를 해보자</h3><h4 id="3-1-윈도우-클라이언트에서-해보자"><a href="#3-1-윈도우-클라이언트에서-해보자" class="headerlink" title="3.1 윈도우 클라이언트에서 해보자"></a>3.1 윈도우 클라이언트에서 해보자</h4><p>썬더버드를 받자. 이때 네이버에 접속되지 않는데 아까 도메인 서버를 100으로 세팅해놔서 그렇다..<br>이름 : 김다음<br>메일주소 : kim@daum.net<br>암호 : kim<br>POP3 선택하고 완료<br>lee@naver.com 으로 메일을 보내보자<br>클라이언트로 돌아와 보내기/받기를 눌러보자 그 후 회신을 눌러보자<br>그 후 윈도우 클라이언트로 와서 받기를 눌러보자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;네임서버를 만들었으니 이메일을 보내는 메일서버를 만들어 보자.&lt;/p&gt;
&lt;h3 id=&quot;1-서버-메일서버를-만들자-naver&quot;&gt;&lt;a href=&quot;#1-서버-메일서버를-만들자-naver&quot; class=&quot;headerlink&quot; title=&quot;1.서버 메일서버를
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>10장. 메일서버 개념, 메일서버를 위한 네임서버 구현</title>
    <link href="http://KKimSangHeon.github.io/2017/07/11/ThisIsLinux27/"/>
    <id>http://KKimSangHeon.github.io/2017/07/11/ThisIsLinux27/</id>
    <published>2017-07-10T15:56:35.000Z</published>
    <updated>2017-07-11T17:41:52.193Z</updated>
    
    <content type="html"><![CDATA[<h3 id="메일서버"><a href="#메일서버" class="headerlink" title="메일서버"></a>메일서버</h3><p>네임서버에 대한이해가 필수적이므로 이해하고 넘어올것.<br>E-mail의 송수신에서 사용되는 프로토콜</p>
<p>다음, 네이버의 메일서버 계정을 갖고있다면 kim@daum.net  /   lee.naver.com 가 있다.</p>
<p>kim@daum.net -&gt; lee.naver.com 메일전송<br>smtp를 통해 kim 메일서버의 큐에 들어가고 여유가 있을 때 smtp 프로토콜을 이용해 lee의 메일서버로 보내놓는다. 메일서버는 메일 박스에 넣어놓고 lee는 pop3 imap프로토콜을 써서 자신의 컴퓨터로 확인한다.<br>보내는 프로토콜 : smtp<br>받는 프로토콜 : POP3 IMAP</p>
<h3 id="실습계획"><a href="#실습계획" class="headerlink" title="실습계획"></a>실습계획</h3><p>Server : naver 메일서버, 네임서버 역할을 한다.<br>Server(B) : daum 메일 서버<br>WinClient : 메일 클라이언트<br>Client : 메일 클라이언트</p>
<h4 id="1-메일서버를-구현하기-전에-네임서버를-구현하자"><a href="#1-메일서버를-구현하기-전에-네임서버를-구현하자" class="headerlink" title="1. 메일서버를 구현하기 전에 네임서버를 구현하자"></a>1. 메일서버를 구현하기 전에 네임서버를 구현하자</h4><h5 id="1-1-다음을-서버에서-실행하자"><a href="#1-1-다음을-서버에서-실행하자" class="headerlink" title="1.1 다음을 서버에서 실행하자"></a>1.1 다음을 서버에서 실행하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># vi /etc/hostname    </div><div class="line">   첫줄 지우고 mail.naver.com 입력</div><div class="line"></div><div class="line"># vi /etc/hosts</div><div class="line">   맨 뒤에 다음 입력</div><div class="line">   192.168.111.100     mail.naver.com</div><div class="line"></div><div class="line"># yum -y install sendmail   //메일서버를 구현하려면 sendmail이 설치되어 있어야함</div><div class="line"># vi /etc/mail/local-host-names</div><div class="line">    아래 mail.naver.com 입력</div><div class="line"></div><div class="line"># vi /etc/sysconfig/network</div><div class="line">    HOSTNAME=mail.naver.com 입력</div><div class="line"></div><div class="line"># reboot</div></pre></td></tr></table></figure>
<h5 id="1-2-다음을-서버-B에서-실행하자"><a href="#1-2-다음을-서버-B에서-실행하자" class="headerlink" title="1.2 다음을 서버 B에서 실행하자"></a>1.2 다음을 서버 B에서 실행하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># yum -y install sendmail</div><div class="line"></div><div class="line"># vi /etc/hostname</div><div class="line">    첫줄 지우고 mail.daum.net 입력</div><div class="line"></div><div class="line"># vi /etc/hosts</div><div class="line">   맨 뒤에 다음 입력</div><div class="line">   192.168.111.200     mail.daum.net</div><div class="line"></div><div class="line"># vi /etc/mail/local-host-names</div><div class="line">    아래 mail.daum.net 입력</div><div class="line"></div><div class="line"># vi /etc/sysconfig/network</div><div class="line">    HOSTNAME=mail.daum.net 입력</div><div class="line"></div><div class="line"># reboot    </div></pre></td></tr></table></figure>
<h5 id="1-3-서버를-마스터네임-서버로-만들자-서버에서-실행하자"><a href="#1-3-서버를-마스터네임-서버로-만들자-서버에서-실행하자" class="headerlink" title="1.3 서버를 마스터네임 서버로 만들자 (서버에서 실행하자)"></a>1.3 서버를 마스터네임 서버로 만들자 (서버에서 실행하자)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"># yum -y install bind bind-chroot</div><div class="line"></div><div class="line"># vi /etc/named.conf</div><div class="line">:set number</div><div class="line">11행 127.0.0.1 지우고 any로</div><div class="line">12행 ::1 지우고 none로</div><div class="line">17행 localhost 지우고 any로</div><div class="line">여기까지만 하면 캐싱전용 네임서버이다.</div><div class="line">우리가 만들것은 마스터 네임서버이므로 맨아래 다음을 추가</div><div class="line">zone      &quot;naver.com&quot;     IN &#123;</div><div class="line">          type        master;</div><div class="line">          file        &quot;naver.com.db&quot;;</div><div class="line">          allow-update  &#123; none; &#125;;</div><div class="line">&#125;;</div><div class="line">zone 위에 커서 올리고 5yy 누르고 p(5줄 복사)</div><div class="line">zone      &quot;daum.net&quot;     IN &#123;</div><div class="line">          type        master;</div><div class="line">          file        &quot;daum.net.db&quot;;</div><div class="line">          allow-update  &#123; none; &#125;;</div><div class="line">&#125;;</div><div class="line">저장 후 종료</div><div class="line"></div><div class="line"># cd /var/named</div><div class="line"># touch naver.com.db</div><div class="line"># vi naver.com.db</div><div class="line">$TTL          3H</div><div class="line">@             SOA    @  root.  ( 2 1D 1H 1W 1H )</div><div class="line">              IN     NS @</div><div class="line">              IN     A  192.168.111.100</div><div class="line">              IN     MX 10    mail.naver.com.      </div><div class="line">              //달라진부분; mail exchange 메일이 오면 mail.naver.com한테 메일처리를 하게해라</div><div class="line">mail          IN     A  192.168.111.100</div><div class="line"></div><div class="line"># cp naver.com.db    daum.net.db</div><div class="line">      //내용이 비슷하니까 복붙</div><div class="line"># vi daum.net.db</div><div class="line">$TTL          3H</div><div class="line">@             SOA    @  root.  ( 2 1D 1H 1W 1H )</div><div class="line">              IN     NS @</div><div class="line">              IN     A  192.168.111.200</div><div class="line">              IN     MX 10    mail.daum.net.</div><div class="line"></div><div class="line">mail          IN     A  192.168.111.200</div><div class="line">으로 수정</div><div class="line"></div><div class="line"># named-checkconf   //name.conf파일을 확인</div><div class="line">    //아무메세지가 없으면 문법문제 없음</div><div class="line"># named-checkzone naver.com  naver.com.db</div><div class="line"># named-checkzone daum.net  daum.net.db</div><div class="line"></div><div class="line">포트는 여러개 열어야 하는데 복잡하므로 아얘</div><div class="line">포트문제는 생기지 않도록 다 열어놓자. 즉 방화벽을 꺼놓자.</div><div class="line"># systemctl  stop  firewalld    //방화벽 끄기</div><div class="line"># systemctl  disable firewalld  //재부팅해도 꺼지도록</div><div class="line"></div><div class="line"># systemctl restart named   //네임서버 시작</div><div class="line"># systemctl enable named    //재부팅해도 켜지도록</div><div class="line"></div><div class="line"># systemctl status named    //잘 돌고있는지 확인</div><div class="line"></div><div class="line"># nslookup //실제 내부에서 잘동작하는지 확인</div><div class="line">&gt;server 192.168.111.100</div><div class="line">&gt;mail.naver.com</div><div class="line">Address: 192.168.111.100  //성공</div><div class="line"></div><div class="line">&gt;mail.daum.net</div><div class="line">Address: 192.168.111.200  //성공</div></pre></td></tr></table></figure>
<h4 id="2-각-컴퓨터의-로컬네임-서버를-생성한-네임서버로-지정하자"><a href="#2-각-컴퓨터의-로컬네임-서버를-생성한-네임서버로-지정하자" class="headerlink" title="2.각 컴퓨터의 로컬네임 서버를 생성한 네임서버로 지정하자"></a>2.각 컴퓨터의 로컬네임 서버를 생성한 네임서버로 지정하자</h4><h5 id="2-1-서버의-네임서버를-지정"><a href="#2-1-서버의-네임서버를-지정" class="headerlink" title="2.1 서버의 네임서버를 지정"></a>2.1 서버의 네임서버를 지정</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># cd /etc/sysconfig/network-scripts/</div><div class="line"># ls      //수정할 파일을 확인하자 ens....</div><div class="line"># # vi ifcfg-ens32  // 껏다 켜도 유지되도록 설정</div><div class="line">DNS1=192.168.111.100 으로 하자</div><div class="line"># systemctl restart network</div><div class="line"># cat /etc/resolv.conf    //확인</div></pre></td></tr></table></figure>
<h5 id="서버-B의-네임서버를-지정"><a href="#서버-B의-네임서버를-지정" class="headerlink" title="서버 B의 네임서버를 지정"></a>서버 B의 네임서버를 지정</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># cd /etc/sysconfig/network-scripts/</div><div class="line"># ls      //수정할 파일을 확인하자 ens....</div><div class="line"># # vi ifcfg-ens32  // 껏다 켜도 유지되도록 설정</div><div class="line">DNS1=192.168.111.100 으로 하자</div><div class="line"># systemctl restart network</div><div class="line"># cat /etc/resolv.conf    //확인</div></pre></td></tr></table></figure>
<h5 id="2-2-클라이언트의-네임서버-지정"><a href="#2-2-클라이언트의-네임서버-지정" class="headerlink" title="2.2 클라이언트의 네임서버 지정"></a>2.2 클라이언트의 네임서버 지정</h5><p>클라이언트는 고정ip가 아니기 때문에 껏다 켜면 vmware가 제공하는 2번으로 바뀌기 때문에 클라이언트는 껏다 켜지 않겠다. 그러므로 conf파일만 수정하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ su -</div><div class="line"># vi /etc/resolv.conf</div><div class="line">nameserver 192.168.111.100</div><div class="line">으로 수정</div><div class="line"># exit</div><div class="line"></div><div class="line"># nslookup</div><div class="line">&gt; mail.daum.net</div><div class="line">Address: 192.168.111.200   //확인</div><div class="line"></div><div class="line">&gt; mail.naver.com</div><div class="line">Address: 192.168.111.100  //확인</div></pre></td></tr></table></figure></p>
<h5 id="2-3-윈도우-클라이언트-설정"><a href="#2-3-윈도우-클라이언트-설정" class="headerlink" title="2.3 윈도우 클라이언트 설정"></a>2.3 윈도우 클라이언트 설정</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cmd 열기</div><div class="line"></div><div class="line">ipconfig    //</div><div class="line">이더넷 어댑터 로컬 영역 연결</div><div class="line"></div><div class="line">netsh interface ip set dns &quot;로컬 영역 연결&quot; static 192.168.111.100</div><div class="line"></div><div class="line">ping mail.daum.net</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;메일서버&quot;&gt;&lt;a href=&quot;#메일서버&quot; class=&quot;headerlink&quot; title=&quot;메일서버&quot;&gt;&lt;/a&gt;메일서버&lt;/h3&gt;&lt;p&gt;네임서버에 대한이해가 필수적이므로 이해하고 넘어올것.&lt;br&gt;E-mail의 송수신에서 사용되는 프로토콜&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>9장. 마스터 네임서버 구축, 라운드 로빈 방식 네임서버</title>
    <link href="http://KKimSangHeon.github.io/2017/07/09/ThisIsLinux26/"/>
    <id>http://KKimSangHeon.github.io/2017/07/09/ThisIsLinux26/</id>
    <published>2017-07-09T05:49:08.000Z</published>
    <updated>2017-07-10T15:57:33.506Z</updated>
    
    <content type="html"><![CDATA[<p>앞에한건 캐싱전용이었다.<br>캐싱전용네임서버 - 자기가 관리하는건 없고 무조건 밖에 나가서 알아다가 알려줌.</p>
<p>마스터 네임 서버 - 자기가 관리하는 것들이 있다.</p>
<h4 id="마스터-네임-서버-구축"><a href="#마스터-네임-서버-구축" class="headerlink" title="마스터 네임 서버 구축"></a>마스터 네임 서버 구축</h4><h5 id="1-웹서버-하나-간단하게-만들자-서버"><a href="#1-웹서버-하나-간단하게-만들자-서버" class="headerlink" title="1. 웹서버 하나 간단하게 만들자(서버)"></a>1. 웹서버 하나 간단하게 만들자(서버)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># rpm -qa httpd   //설치가 되어있다.</div><div class="line"># systemctl status httpd  //시작되어있나 확인</div><div class="line"># systemctl restart httpd //시작</div><div class="line"># firewall-config</div><div class="line">영구적 - http 체크 - firewalld 다시불러오기</div><div class="line"># vi /var/www/html/index.html</div><div class="line">&lt;h1&gt; CentOS 7 홈피 입니다&lt;/h1&gt; //삽입</div></pre></td></tr></table></figure>
<h5 id="2-ftp서버-간단하게-만들자-서버B"><a href="#2-ftp서버-간단하게-만들자-서버B" class="headerlink" title="2. ftp서버 간단하게 만들자(서버B)"></a>2. ftp서버 간단하게 만들자(서버B)</h5><p>서버 B를 켠다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># yum -y install vsftpd</div><div class="line"># firewall-cmd --permanent --add-service=ftp  //방화벽설정</div><div class="line"># firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<h5 id="3-환경설정을-해주자-서버"><a href="#3-환경설정을-해주자-서버" class="headerlink" title="3. 환경설정을 해주자(서버)"></a>3. 환경설정을 해주자(서버)</h5><p>서버에서<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># vi /etc/named.conf</div><div class="line">:set number</div><div class="line">맨아래 가서</div><div class="line">zone &quot;centos.com&quot; IN &#123;type master;</div><div class="line">                      file &quot;centos.com.db&quot;;</div><div class="line">                      allow-update&#123;none;&#125;;</div><div class="line">&#125;;</div><div class="line">입력. 이 의미는 서버컴퓨터는 centos.com의 마스터 네임서버다. 그리고 상세정보는 centos.com.db(임의로 지은것)에 들어있다.</div><div class="line"></div><div class="line"># named-checkconf   //방금작성한것 문법적으로 잘못된것 없나 확인</div></pre></td></tr></table></figure></p>
<h5 id="4-centos-com-db를-만들자-서버"><a href="#4-centos-com-db를-만들자-서버" class="headerlink" title="4. centos.com.db를 만들자(서버)"></a>4. centos.com.db를 만들자(서버)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># cd /var/named</div><div class="line"># pwd</div><div class="line"># ls</div><div class="line"># touch centos.com.db</div><div class="line"># vi centos.com.db</div><div class="line">아래 추가</div><div class="line">$TTL 3H</div><div class="line">@    SOA  @   root. (2 1D 1H 1W 1H)</div><div class="line">     IN   NS  @</div><div class="line">     IN   A   192.168.111.100</div><div class="line"></div><div class="line">www  IN   A   192.168.111.100</div><div class="line">ftp  IN   A   192.168.111.200</div><div class="line"></div><div class="line">위 세줄은 항상 써주는것.</div><div class="line">네번째는 자기 자신의 ip 입력</div><div class="line">나머지 아래 두줄은 알려줄것.</div><div class="line"></div><div class="line"># named-checkzone centos.com centos.com.db   //오류있는지 확인</div><div class="line"># systemctl restart named</div><div class="line">방화벽 설정은 앞에서 해줬으니 안해도됨</div></pre></td></tr></table></figure>
<h5 id="5-접속-테스트해보자"><a href="#5-접속-테스트해보자" class="headerlink" title="5. 접속 테스트해보자"></a>5. 접속 테스트해보자</h5><p>클라이언트 켜자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ su -</div><div class="line">$ vi /etc/resolv.conf</div><div class="line">맨 아래 192.168.111.100 으로 수정</div><div class="line"></div><div class="line">www.centos.com 접속해보자</div></pre></td></tr></table></figure><br>ftp 접속해보자<br>서버 B에서 다음을 실행하자(ftp서비스 시작)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># systemctl restart vsftpd</div><div class="line"># systemctl status vsftpd</div></pre></td></tr></table></figure><br>클라이언트에서 접속해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ftp ftp.centos.com</div><div class="line"> // anonymous</div><div class="line"> //엔터</div></pre></td></tr></table></figure></p>
<h4 id="라운드-로빈-방식의-네임-서버"><a href="#라운드-로빈-방식의-네임-서버" class="headerlink" title="라운드 로빈 방식의 네임 서버"></a>라운드 로빈 방식의 네임 서버</h4><p>이전에 실습한 방식은 여러명이 동시에 접속할 경우 서버 하나에 부하가 걸린다. 그래서 웹 서버를 여러개 만들어서 요청이 들어올 때마다 번갈아가면서 요청처리.</p>
<h5 id="네이버가-이-방식을-쓴다"><a href="#네이버가-이-방식을-쓴다" class="headerlink" title="네이버가 이 방식을 쓴다."></a>네이버가 이 방식을 쓴다.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># nslookup</div><div class="line">www.naver.com</div><div class="line">두개가 넘어온다.</div></pre></td></tr></table></figure>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습."></a>실습.</h4><p>www.john.com 으로 접속 했을 때 각각 다른 페이지를 뿌려주는실습.(라운드로빈 방식 확인가능)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># nslookup</div><div class="line">&gt; www.yes24.com     //아이피 주소를 확인하기위해</div><div class="line">&gt; www.danawa.com   //아이피 주소를 확인하기위해</div><div class="line">&gt; www.nate.com     //아이피 주소를 확인하기위해</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># cd /var/named</div><div class="line"># vi centos.com.db</div><div class="line"></div><div class="line">아래 두줄 지우고 다음으로 대체</div><div class="line">www          IN      CNAME       webserver.centos.com.</div><div class="line">webserver    100     IN          A     61.111.13.51</div><div class="line">             200     IN          A     119.205.194.11</div><div class="line">             300     IN          A     120.50.131.112</div><div class="line"></div><div class="line">순차적으로 주소를 알려준다. 100,200,300 은 순차번호이다.</div><div class="line"></div><div class="line"># systemctl restart named</div><div class="line"># nslookup</div><div class="line">&gt;server 192.168.111.100</div><div class="line">&gt;www.centos.com</div><div class="line">결과가 세개가 온다.</div><div class="line"></div></pre></td></tr></table></figure>
<h5 id="클라이언트에서-접속해보자"><a href="#클라이언트에서-접속해보자" class="headerlink" title="클라이언트에서 접속해보자"></a>클라이언트에서 접속해보자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vi /etc/resolv.conf</div><div class="line">//192.168.111.100 이 맞나 확인</div><div class="line">//아니면 설정하기</div></pre></td></tr></table></figure>
<p>웹 브라우져 닫고<br>www.centos.com 들어가보자(여러번)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;앞에한건 캐싱전용이었다.&lt;br&gt;캐싱전용네임서버 - 자기가 관리하는건 없고 무조건 밖에 나가서 알아다가 알려줌.&lt;/p&gt;
&lt;p&gt;마스터 네임 서버 - 자기가 관리하는 것들이 있다.&lt;/p&gt;
&lt;h4 id=&quot;마스터-네임-서버-구축&quot;&gt;&lt;a href=&quot;#마스터
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
</feed>
