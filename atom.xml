<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2018-04-09T23:52:28.571Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenCV 설치</title>
    <link href="http://KKimSangHeon.github.io/2018/04/05/opencv-exam1/"/>
    <id>http://KKimSangHeon.github.io/2018/04/05/opencv-exam1/</id>
    <published>2018-04-04T23:23:32.000Z</published>
    <updated>2018-04-09T23:52:28.571Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://webnautes.tistory.com/1030" target="_blank" rel="external">http://webnautes.tistory.com/1030</a><br>참고로 나는 마지막 pkg_config 관련해서 vi ~/.bash_profile을 입력후<br>export PKG_CONFIG_PATH=”$LIB_DIR/opencv/lib64/pkgconfig” 을 입력했다</p>
<p>컴파일 방법<br>g++ -o facedetect facedetect.cpp $(pkg-config –libs –cflags opencv)<br>g++ -o facedetect facedetect.cpp ‘pkg-config –libs –cflags opencv’</p>
<p>참고할만한 예제<br><a href="http://hanmin-dev.tistory.com/13" target="_blank" rel="external">http://hanmin-dev.tistory.com/13</a> (이미지의 픽셀 RGB 구하는법 알려줌 Makefile 구성방법 알려줌)<br><a href="http://eehoeskrap.tistory.com/34?category=537364" target="_blank" rel="external">http://eehoeskrap.tistory.com/34?category=537364</a>  ( 픽셀 소금뿌리기)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://webnautes.tistory.com/1030&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://webnautes.tistory.com/1030&lt;/a&gt;&lt;br&gt;참고로 나는 마지막 pkg_config
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="아무거나" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EC%95%84%EB%AC%B4%EA%B1%B0%EB%82%98/"/>
    
    
  </entry>
  
  <entry>
    <title>리눅스 개인폴더에 설치된 디렉토리 사용하기</title>
    <link href="http://KKimSangHeon.github.io/2018/03/30/linux-bash-profile/"/>
    <id>http://KKimSangHeon.github.io/2018/03/30/linux-bash-profile/</id>
    <published>2018-03-29T23:29:17.000Z</published>
    <updated>2018-04-09T23:18:30.222Z</updated>
    
    <content type="html"><![CDATA[<p>서버에 curl이 설치되어 있고 내 로컬에도 curl이 설치되어 있을 때 내 curl을 사용하기 위한 방법</p>
<p>vi ~/.bash_profile을 열고 아래를 입력하고</p>
<p>export CURL_DIR=”$HOME/apps/usr/curl/bin”<br>export PATH=$CURL_DIR:$PATH</p>
<p>source ~/.bash_profile을 입력</p>
<p>curl -V를 통해 잘 적용되었나 확인</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;서버에 curl이 설치되어 있고 내 로컬에도 curl이 설치되어 있을 때 내 curl을 사용하기 위한 방법&lt;/p&gt;
&lt;p&gt;vi ~/.bash_profile을 열고 아래를 입력하고&lt;/p&gt;
&lt;p&gt;export CURL_DIR=”$HOME/apps/usr
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="관련정보" scheme="http://KKimSangHeon.github.io/categories/Linux/%EA%B4%80%EB%A0%A8%EC%A0%95%EB%B3%B4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>아파치 모듈추가</title>
    <link href="http://KKimSangHeon.github.io/2018/03/23/apache-add-module/"/>
    <id>http://KKimSangHeon.github.io/2018/03/23/apache-add-module/</id>
    <published>2018-03-23T11:39:06.000Z</published>
    <updated>2018-04-15T09:38:25.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="아파치-모듈-추가"><a href="#아파치-모듈-추가" class="headerlink" title="아파치 모듈 추가"></a>아파치 모듈 추가</h3><p>/home/sangheon/apps/apache 이라는 경로에 아파치가 설치되어있다고 가정.</p>
<ol>
<li><code>./apxs -n modulename -g</code> 로 모듈추가. 그럼 현재 위치(bin)에 modulename디렉토리가 생성된다.</li>
<li>/home/sangheon/apps/apache/conf 경로로 이동하여 httpd.conf를 열자</li>
<li>약 150라인 정도 다음을 추가하자.<br><code>LoadModule modulename_module modules/mod_modulename.so
&lt;Location /modulename&gt;
SetHandler modulename
&lt;/Location&gt;</code><br>위의 내용은 mod_modulename.c 파일을 참고하여 작성가능</li>
<li>/home/sangheon/apps/apache/bin 디렉토리에 이동하여 <code>./apxs -c -i /home/sangheon/apps/apache/bin/modulename/mod_modulename.c</code> 를 입력하자. 여기서 특정 라이브러리를 이용할 경우 뒤에 -l라이브러리 이름을 입력하자. curl을 이용할 경우 -lcurl을 입력</li>
<li>bin 디렉토리에서<code>./apachectl restart</code> 입력</li>
</ol>
<h2 id="만약-c-파일을-수정했을-경우엔-4번-5번을-다시-실행하면-된다"><a href="#만약-c-파일을-수정했을-경우엔-4번-5번을-다시-실행하면-된다" class="headerlink" title="만약 c 파일을 수정했을 경우엔 4번 5번을 다시 실행하면 된다."></a>만약 c 파일을 수정했을 경우엔 4번 5번을 다시 실행하면 된다.</h2><p>권한문제(sudo permission)로 서버를 실행시킬 수 없을 때 다음과 같이 입력하자.<br><code>sudo /bin/chown root.sangheon /home/sangheon/apps/apache/bin/httpd
sudo /bin/chmod 4755 /home/sangheon/apps/apache/bin/httpd</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;아파치-모듈-추가&quot;&gt;&lt;a href=&quot;#아파치-모듈-추가&quot; class=&quot;headerlink&quot; title=&quot;아파치 모듈 추가&quot;&gt;&lt;/a&gt;아파치 모듈 추가&lt;/h3&gt;&lt;p&gt;/home/sangheon/apps/apache 이라는 경로에 아파치가 설치
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="아무거나" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EC%95%84%EB%AC%B4%EA%B1%B0%EB%82%98/"/>
    
    
      <category term="아파치 모듈추가" scheme="http://KKimSangHeon.github.io/tags/%EC%95%84%ED%8C%8C%EC%B9%98-%EB%AA%A8%EB%93%88%EC%B6%94%EA%B0%80/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://KKimSangHeon.github.io/2018/03/20/mytip/"/>
    <id>http://KKimSangHeon.github.io/2018/03/20/mytip/</id>
    <published>2018-03-19T15:00:00.000Z</published>
    <updated>2018-04-10T23:50:46.417Z</updated>
    
    <content type="html"><![CDATA[<p>vi 관련</p>
<p>코드 정렬하기<br>ggvG=<br>gg는 파일 처음으로이동하고<br>v는 비쥬얼 모드로 전환하고<br>G는 끝까지 드래그<br>=는 정렬</p>
<p>함수 정의를 찾아가고싶을 때<br>ctag 를 사용하자<br><a href="http://bowbowbow.tistory.com/15" target="_blank" rel="external">http://bowbowbow.tistory.com/15</a></p>
<p> ~/.vimrc<br>set hlsearch<br>set nu<br>set autoindent<br>set scrolloff=2<br>set wildmode=longest,list<br>set ts=4<br>set sts=4<br>set sw=1<br>set autowrite<br>set autoread<br>set cindent<br>set bs=eol,start,indent<br>set history=256<br>set laststatus=2<br>set shiftwidth=4<br>set showmatch<br>set smartcase<br>set smarttab<br>set smartindent<br>set softtabstop=4<br>set tabstop=4<br>set ruler<br>set incsearch<br>highlight Comment term=bold cterm=bold ctermfg=4<br>set tags=/home1/irteam/sangheon/getimage/tags</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vi 관련&lt;/p&gt;
&lt;p&gt;코드 정렬하기&lt;br&gt;ggvG=&lt;br&gt;gg는 파일 처음으로이동하고&lt;br&gt;v는 비쥬얼 모드로 전환하고&lt;br&gt;G는 끝까지 드래그&lt;br&gt;=는 정렬&lt;/p&gt;
&lt;p&gt;함수 정의를 찾아가고싶을 때&lt;br&gt;ctag 를 사용하자&lt;br&gt;&lt;a hr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2장. 규칙3 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계해라</title>
    <link href="http://KKimSangHeon.github.io/2018/03/19/effectiveJava4/"/>
    <id>http://KKimSangHeon.github.io/2018/03/19/effectiveJava4/</id>
    <published>2018-03-18T23:00:36.000Z</published>
    <updated>2018-03-18T23:39:16.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="규칙3-생성자나-enum-자료형은-싱글턴-패턴을-따르도록-설계해라"><a href="#규칙3-생성자나-enum-자료형은-싱글턴-패턴을-따르도록-설계해라" class="headerlink" title="규칙3 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계해라"></a>규칙3 생성자나 enum 자료형은 싱글턴 패턴을 따르도록 설계해라</h2><p><code>싱글턴 : 객체를 하나만 만들 수 있는 클래스. 창관리자, 파일 시스템 같은 것들이 그 예다.</code><br> 싱글턴을 구현하는 방법은 두가지인데 두 방법 다 생성자는 private로 선언하고, 싱글턴 객체는 정적(static)멤버를 이용한다. 첫번째 방법의 경우 정적멤버는 final로 선언한다. 두 번째 방법은 public으로 선언된 정적 팩터리 메서드를 이용하는 것이다. 두 방법 다 리플렉션 기능을 통해 private 생성자를 호출할 수 있다는 점에 주의해야 한다.</p>
<p> 싱글턴을 구현하는 또다른 한가지의 방법은 원소가 하나뿐인 enum 자료형을 정의하는 것이다. 이는 좀 더 간결하며, 직렬화가 자동으로 처리된다. 또한 직렬화가 복잡하게 이루어져도 여러 객체가 생길일이 없으며 리플렉션을 통한 공격에도 안전하다.<br> 책에서는 이 방법이 싱글턴을 구현하는 가장 좋은 방법이라 추천한다.</p>
<h3 id="참고-URL"><a href="#참고-URL" class="headerlink" title="참고 URL"></a>참고 URL</h3><p>직렬화 : <a href="http://woowabros.github.io/experience/2017/10/17/java-serialize.html" target="_blank" rel="external">http://woowabros.github.io/experience/2017/10/17/java-serialize.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;규칙3-생성자나-enum-자료형은-싱글턴-패턴을-따르도록-설계해라&quot;&gt;&lt;a href=&quot;#규칙3-생성자나-enum-자료형은-싱글턴-패턴을-따르도록-설계해라&quot; class=&quot;headerlink&quot; title=&quot;규칙3 생성자나 enum 자료형은 싱
    
    </summary>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2장. 규칙2 생성자 인자가 많을 때는 Builder 패턴 적용을 고려하라.</title>
    <link href="http://KKimSangHeon.github.io/2018/03/15/effectiveJava3/"/>
    <id>http://KKimSangHeon.github.io/2018/03/15/effectiveJava3/</id>
    <published>2018-03-15T10:27:56.000Z</published>
    <updated>2018-03-18T09:57:03.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="규칙2-생성자-인자가-많을-때는-Builder-패턴-적용을-고려하라"><a href="#규칙2-생성자-인자가-많을-때는-Builder-패턴-적용을-고려하라" class="headerlink" title="규칙2. 생성자 인자가 많을 때는 Builder 패턴 적용을 고려하라."></a>규칙2. 생성자 인자가 많을 때는 Builder 패턴 적용을 고려하라.</h2><p>보통 생성자의 인자 혹은 정적팩터리의 인자가 많을 땐 점층적 생성자 패턴(telescping constructor pattern)을 적용한다. 17p<br><code>점층적 생성자 패턴 : 필수인자만 받는 생성자를 하나 정의하고, 선택적 인자를 하나 받는 생성자를 추가하고, 거기에 두 개의 선택적 인자를 받는 생성자를 추가하는 식으로 생성자들을 쌓아 올리듯 추가하는 것. 하지만 점층적 생성자 패턴은 설정할 필요가 없는 필드에도 인자를 전달해야하는 경우가 생긴다. 즉 인자수가 늘어나면 클라이언트 코드를 작성하기 어려워지고 읽기 어려워진다.</code></p>
<p>생성자의 인자가 많을 때 사용할 수 있는 두번째 방법은 자바빈(JavaBeans) 패턴이다. 18p<br><code>자바빈 패턴: 인자없는 생성자를 호출하여 객체부터 만든 다음, 설정메서드(setter)들을 호출하여 필수 필드뿐아니라 선택적 필드값 까지 채우는 것이다. 자바빈 패턴은 1회의 함수 호출로 객체 생성을 끝낼 수 없으므로 객체 일관성이 일시적으로 깨질 수 있다. 또한 변경 불가능(immutable)클래스를 만들 수 없다는점, 스레드 안정성을 제공하기 위해 해야할 일도 많아진다.</code></p>
<p>점층적 생성적 생성자 패턴의 안정성 , 자바빈 패턴의 가독성을 결합한 것이 바로 빌더(Builder)패턴이다.<br>필요한 객체를 직접 생성하는 대신 클라이언트는 먼저 필수인자들을 생성자 또는 정적 팩터리 메서드에 전부 전달하여 빌더객체(Builder object)를 만든다. 그런 다음 빌더 객체에 정의된 설정 메서드들을 호출하여 선택적 인자들을 추가 해 나간다. 그리고 마지막으로 아무런 인자 없이 build 메서드를 호출하여 변경 불가능 객체를 만든다.</p>
<h3 id="빌더패턴의-장점"><a href="#빌더패턴의-장점" class="headerlink" title="빌더패턴의 장점"></a>빌더패턴의 장점</h3><ol>
<li>작성하기 쉽고, 읽기 쉽다.</li>
<li>인자에 불변식(invariant)을 적용할 수 있다.</li>
<li>여러개의 varargs 인자(가변인자)를 받을수 있다.</li>
<li>하나의 빌더 객체로 여러 객체를 만들 수 있어 유연하다.</li>
</ol>
<h3 id="빌더패턴의-단점"><a href="#빌더패턴의-단점" class="headerlink" title="빌더패턴의 단점"></a>빌더패턴의 단점</h3><ol>
<li>객체를 생성하기 위해 빌더 객체를 생성해야한다. 오버헤드의 문제가 될 소지는 적지만 성능이 중요한 상황에서는 문제가 될 수 있다.</li>
</ol>
<h3 id="요약하자면"><a href="#요약하자면" class="headerlink" title="요약하자면"></a>요약하자면</h3><p>대부분의 인자가 선택적 인자이거나 인자가 많은 생성자나 정적 팩터리가 필요한 클래스를 설계할 때 유용하다. 가독성은 점층적 생성자 패턴보다 향상되며 자바빈을 사용할 때 보다 안전하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;규칙2-생성자-인자가-많을-때는-Builder-패턴-적용을-고려하라&quot;&gt;&lt;a href=&quot;#규칙2-생성자-인자가-많을-때는-Builder-패턴-적용을-고려하라&quot; class=&quot;headerlink&quot; title=&quot;규칙2. 생성자 인자가 많을 때는
    
    </summary>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2장. 규칙1 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보자.</title>
    <link href="http://KKimSangHeon.github.io/2018/03/14/effectiveJava2/"/>
    <id>http://KKimSangHeon.github.io/2018/03/14/effectiveJava2/</id>
    <published>2018-03-13T22:53:39.000Z</published>
    <updated>2018-03-18T09:35:25.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="규칙-1-생성자-대신-정적-팩터리-메서드를-사용할-수-없는지-생각해보자"><a href="#규칙-1-생성자-대신-정적-팩터리-메서드를-사용할-수-없는지-생각해보자" class="headerlink" title="규칙 1. 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보자."></a>규칙 1. 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보자.</h2><p>프로그래머가 알아야하는 또다른 객체생성 방법은 클래스에 public로 선언된 팩토리 메서드를 추가하는 것이다.</p>
<h3 id="이러한-방법의-장점은-다음과-같다"><a href="#이러한-방법의-장점은-다음과-같다" class="headerlink" title="이러한 방법의 장점은 다음과 같다."></a>이러한 방법의 장점은 다음과 같다.</h3><p>1.생성자와 달리 정적 팩토리 메소드에는 이름이 있다. (가독성 향상)</p>
<p>2.호출할 때마다 새로운 객체를 생성할 필요 없다.(객체생성 비용이 클 때 효율적, 개체 통제 클래스로의 역할)<br><code>개체 통제 클래스(instance-controlled class) : 어떤 시점에 어떤 객체가 얼마나 존재할지 제어가능한 클래스. 이를 통해 싱글턴 패턴을 따르도록 할수 있고, 객체생성이 불가능한 클래스를 만들 수 도 있다. 변경이 불가능한 클래스의 경우 두개의 같은 객체가 존재하지 못하도록 할 수 있다.</code></p>
<p>3.생성자와 달리 반환값 자료형의 하위 자료형 객체를 반환할 수 있다. (반환되는 객체의 클래스를 유연하게 결정 가능. EnumSet이 그 예시)</p>
<p>4.형인자 자료형(parameterized type) 객체를 만들 때 편하다.(자바 1.7부터는 자료형 유추가 가능해졌다 14p)</p>
<h3 id="단점은-다음과-같다"><a href="#단점은-다음과-같다" class="headerlink" title="단점은 다음과 같다."></a>단점은 다음과 같다.</h3><ol>
<li>public이나 protected로 선언된 생성자가 없으므로 하위 클래스를 만들 수 없다는 것이다.</li>
<li>정적 팩터리 메서드가 다른 정적 메서드와 확연히 구분되지 않는다는 것이다.<br>보통 정적 팩토리 메소드의 이름으로는 다음과같은 이름을 쓴다.<br>valueOf , of , getInstance , newInstance , getType , newType</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;규칙-1-생성자-대신-정적-팩터리-메서드를-사용할-수-없는지-생각해보자&quot;&gt;&lt;a href=&quot;#규칙-1-생성자-대신-정적-팩터리-메서드를-사용할-수-없는지-생각해보자&quot; class=&quot;headerlink&quot; title=&quot;규칙 1. 생성자 대신 정
    
    </summary>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java</title>
    <link href="http://KKimSangHeon.github.io/2018/03/12/effectiveJava1/"/>
    <id>http://KKimSangHeon.github.io/2018/03/12/effectiveJava1/</id>
    <published>2018-03-12T13:49:17.000Z</published>
    <updated>2018-03-12T15:03:26.275Z</updated>
    
    <content type="html"><![CDATA[<p>워낙 유명한 이책을 한번쯤 보고싶다는 생각을 했었고 이제서야 이 책을 읽으며 스스로 정리한 내용을 잊지 않기위해 블로그에 올려 공유하고자 한다.<br>다음은 이 책을 읽기위해 알아두자.</p>
<h2 id="1-자바는-네-가지-유형의-자료형을-지원한다"><a href="#1-자바는-네-가지-유형의-자료형을-지원한다" class="headerlink" title="1. 자바는 네 가지 유형의 자료형을 지원한다."></a>1. 자바는 네 가지 유형의 자료형을 지원한다.</h2><ul>
<li>인터페이스(어노테이션 포함)</li>
<li>클래스(enum 포함)</li>
<li>배열</li>
<li>기본 자료형(primitive)<br>여기서 위의 3개는 참조 자료형(reference type)으로 알려져있으며 모든 개체(instance)와 배열은 객체(object)이다. 하지만 기본 자료형은 객체가 아니다. 클래스의 멤버로는 필드(field), 메서드(method), 멤버 클래스(member class), 그리고 멤버 인터페이스(member interface) 등이 있다. 메서드의 시그니처(signature)는 그 이름과 형식 인자 자료형들로 구성된다. 시그니처에는 메서드의 반환값 자료형은 포함되지 않는다.<br><code>메소드 시그니처란 : 메소드의 이름과 매개변수 목록</code></li>
</ul>
<h2 id="2-자바-언어-명세서의-정의를-따르지-않는-것들"><a href="#2-자바-언어-명세서의-정의를-따르지-않는-것들" class="headerlink" title="2. 자바 언어 명세서의 정의를 따르지 않는 것들"></a>2. 자바 언어 명세서의 정의를 따르지 않는 것들</h2><ul>
<li>계승(inheritance)라는 용어를 하위 클래스 정의(subclassing)와 같은 뜻으로 사용한다.</li>
<li>인터페이스에는 계승이라는 용어 대신, 클래스가 인터페이스를 구현(implements)한다고 하거나, 한 인터페이스가 다른 인터페이스를 확장(extends)한다고 표현한다.</li>
<li>접근권한을 명시하지 않았을 때 가능한 접근 수준을 표현할 때는 기본 접근 권한 (default access)대신 의미가 분명한 package-private라는 용어를 사용한다.</li>
</ul>
<h2 id="3-API-관련"><a href="#3-API-관련" class="headerlink" title="3. API 관련"></a>3. API 관련</h2><ul>
<li>API를 사용해 프로그램을 작성하려는 프로그래머는 API의 사용자(user)라고 지칭한다.</li>
<li>어떤 API를 사용해 구현된 클래스는 API의 클라이언트(client)라고 부른다.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;워낙 유명한 이책을 한번쯤 보고싶다는 생각을 했었고 이제서야 이 책을 읽으며 스스로 정리한 내용을 잊지 않기위해 블로그에 올려 공유하고자 한다.&lt;br&gt;다음은 이 책을 읽기위해 알아두자.&lt;/p&gt;
&lt;h2 id=&quot;1-자바는-네-가지-유형의-자료형을-지
    
    </summary>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>리눅스마스터 2급</title>
    <link href="http://KKimSangHeon.github.io/2018/03/07/linuxmaster/"/>
    <id>http://KKimSangHeon.github.io/2018/03/07/linuxmaster/</id>
    <published>2018-03-07T14:51:28.000Z</published>
    <updated>2018-03-12T14:14:42.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="취득시기"><a href="#취득시기" class="headerlink" title="취득시기"></a>취득시기</h3><p>2018년 03월</p>
<h3 id="내용"><a href="#내용" class="headerlink" title="내용"></a>내용</h3><p>데비안, 레드햇 계열 리눅스의 기본적인 역사 그리고 간단한 명령어 정도만 알고있을 경우 일주일 정도면 취득가능하다. www.comcbt.com/ 에서 연도별 문제를 제공하며 총 5회분의 문제(약 400문제)정도를 풀어보고 시험을 봤었다. 용산공업고등학교에서 시험을 봤으며 학교의 정문을 찾는데 애를 먹었던것 말고는 불편했던점은 없다. 하루 2시간씩 약 일주일동안 공부하였으며 시험 3일 후엔 가답안이 나와 가채점이 가능하다는 것이 다른 자격증에 비해 좋았던것 같다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;취득시기&quot;&gt;&lt;a href=&quot;#취득시기&quot; class=&quot;headerlink&quot; title=&quot;취득시기&quot;&gt;&lt;/a&gt;취득시기&lt;/h3&gt;&lt;p&gt;2018년 03월&lt;/p&gt;
&lt;h3 id=&quot;내용&quot;&gt;&lt;a href=&quot;#내용&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/tags/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
      <category term="리눅스마스터 2급" scheme="http://KKimSangHeon.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4%EB%A7%88%EC%8A%A4%ED%84%B0-2%EA%B8%89/"/>
    
  </entry>
  
  <entry>
    <title>6장. 모듈</title>
    <link href="http://KKimSangHeon.github.io/2018/01/28/angular2-1/"/>
    <id>http://KKimSangHeon.github.io/2018/01/28/angular2-1/</id>
    <published>2018-01-28T12:03:56.000Z</published>
    <updated>2018-01-28T12:05:51.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6장-모듈"><a href="#6장-모듈" class="headerlink" title="6장. 모듈"></a>6장. 모듈</h1><p>앵귤러 애플리케이션을 구성하는 뼈대와 같은 역할. @NgModule 장식자를 이용한다<br>import {Component} from ‘@angular/core’;<br>와 같이 이용하는데 Component는 사용할 모듈이고, @angular/core는 패키지이다.</p>
<h3 id="라이브러리-모듈-147p"><a href="#라이브러리-모듈-147p" class="headerlink" title="라이브러리 모듈 147p"></a>라이브러리 모듈 147p</h3><p>앵귤러가 제공하는 모듈. ex) 지시자, 파이프, 장식자, 클래스, 인터페이스, 함수, Enum, 타입 별칭(type alias), 상수</p>
<h3 id="사용자-정의-모듈-147p"><a href="#사용자-정의-모듈-147p" class="headerlink" title="사용자 정의 모듈 147p"></a>사용자 정의 모듈 147p</h3><p>컴포넌트나 지시자와 같이 장식자를 이용한 모듈과 서비스와 함수 값과 같이 장식자가 없는 모듈로 구분됨.<br>외부로 공개할 모듈은 export를 이용해 선언(ES6부터 지원)</p>
<h3 id="애플리케이션-루트-모듈-149p"><a href="#애플리케이션-루트-모듈-149p" class="headerlink" title="애플리케이션 루트 모듈 149p"></a>애플리케이션 루트 모듈 149p</h3><p>앵귤러는 애플리케이션 루트 모듈이라는 최상위 모듈을 통행 애플리케이션 모듈을 구성한다. 하지만 이 안에 모든 모듈을 구성할 수 없기 떄문에 의미론적으로 - 특징모듈 (개별 컴포넌트 단위가 아닌 단위 애플리케이션을 구성하는 모듈)</p>
<ul>
<li>공유모듈 (다른 모듈에 포함되어 동작하는 모듈 (반복적으로 선언되는 모듈))</li>
<li>핵심모듈 (애플리케이션에서 항상 동작할 필요가 있거나 애플리케이션의 전체적인 동작에 핵심적인 역할을 하는 모듈(ex) 타이틀 컴포넌트)<br>로 나눔.</li>
</ul>
<p>애플리케이션 루트 모듈은 @Ngmodule 장식자를 이용해 정의한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Ngmodule(&#123;</div><div class="line">    imports : [BrowserModule, CommonModule, FormsModule ...] ,</div><div class="line">    providers : [] ,</div><div class="line">    declarations : [AppComponent, ...]</div><div class="line">    bootstrap : [AppComponent]</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<h1 id="Ngmodule내-import영역"><a href="#Ngmodule내-import영역" class="headerlink" title="@Ngmodule내 import영역"></a>@Ngmodule내 import영역</h1><h3 id="브라우저-모듈-BrowserModule-151p"><a href="#브라우저-모듈-BrowserModule-151p" class="headerlink" title="브라우저 모듈(BrowserModule) 151p"></a>브라우저 모듈(BrowserModule) 151p</h3><p>브라우저 모듈은 앵귤러가 브라우저에서 동작한다면 반드시 포함되어야함. 지시자, 파이프 같은 구성요소를 템플릿에 나타나게 하는 역할을 함.<br>브라우저 모듈은 공통 모듈을 재노출(re-exports) 한다는 것이다. 이 때문에 브라우저 모듈을 이미 선언했다면 공통 모듈을 선언하지 않아도 된다.</p>
<h3 id="공통모듈-CommonModule-151p"><a href="#공통모듈-CommonModule-151p" class="headerlink" title="공통모듈(CommonModule) 151p"></a>공통모듈(CommonModule) 151p</h3><p>템플릿에서 사용하는 ngIf나 ngFor와 관련된 기능을 포함하고 있는 모듈이다.</p>
<h3 id="폼모듈-FormsModule-152p"><a href="#폼모듈-FormsModule-152p" class="headerlink" title="폼모듈(FormsModule) 152p"></a>폼모듈(FormsModule) 152p</h3><p>템플릿에서 자주 사용하는 NgModel지시자나 내장 검증기 지시자 등을 포함하고 있다. 그래서 폼 모듈을 포함하면 NgModel과 같이 자주 사용하는 지시자를 별도로 추가하지 않아도 된다.</p>
<h3 id="AppRoutingModule-152p"><a href="#AppRoutingModule-152p" class="headerlink" title="AppRoutingModule 152p"></a>AppRoutingModule 152p</h3><p>사용자가 정의할 수 있는 라우팅 모듈이다. 애플리케이션 루트 모듈에 추가한 라우팅모듈은 애플리케이션 수준에서 라우팅을 수행한다.</p>
<h1 id="Ngmodule내-provider영역"><a href="#Ngmodule내-provider영역" class="headerlink" title="@Ngmodule내 provider영역"></a>@Ngmodule내 provider영역</h1><p>애플리케이션 전역에서 사용할 서비스를 등록.</p>
<h1 id="Ngmodule내-declarations영역"><a href="#Ngmodule내-declarations영역" class="headerlink" title="@Ngmodule내 declarations영역"></a>@Ngmodule내 declarations영역</h1><p>애플리케이션 레벨에서 사용하고자 하는 컴포넌트, 지시자 파이프를 선언한다.</p>
<h1 id="Ngmodule내-bootstrap영역"><a href="#Ngmodule내-bootstrap영역" class="headerlink" title="@Ngmodule내 bootstrap영역"></a>@Ngmodule내 bootstrap영역</h1><p>최상위 컴포넌트인 애플리케이션 컴포넌트를 등록</p>
<h1 id="router-outlet-152p"><a href="#router-outlet-152p" class="headerlink" title="router-outlet 152p"></a>router-outlet 152p</h1><p>하위 특정 컴포넌트로 라우팅 후 하위 컴포넌ㅌ를 표시할 목적으로 라우터 아룰렛 지시자를 포함한다. 라우터 아울렛에 표시할 컴포넌트가 있다면 애플리케이션 라우팅 모듈 설정에 등록한다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const appRoutes:Routes = [</div><div class="line">  &#123; path: &apos;&apos;, component: IntroComponet&#125;,</div><div class="line">  &#123; path: &apos;hello&apos;, component: HelloComponent&#125;,</div><div class="line">  ...</div><div class="line">];</div><div class="line"></div><div class="line">@NgModule(&#123;</div><div class="line">  imports: [RouterModule.forRoot(appRoutes)],</div><div class="line">  exports:[RouterModule]</div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>appRoutes 변수는 라우팅 설정을 담고 있으며 입력 URL에 대응하는 컴포넌트로 라우팅 되게 한다. appRoutes변수는 forRoot() 메소드를 이용해 등록한다. 유의할 점은 애플리케이션 라우팅 모듈에서만 한 번만 사용돼야 하고 특징 모듈에서는 사용하면 안된다.</p>
<p>애플리케이션 루트모듈에서는 다음과 같이 inports를 해줘야 한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Ngmodule(&#123;</div><div class="line">    imports : [AppRoutingModule ...] ,</div></pre></td></tr></table></figure></p>
<h2 id="핵심모듈-155p"><a href="#핵심모듈-155p" class="headerlink" title="핵심모듈 155p"></a>핵심모듈 155p</h2><p>앵귤러 어플리케이션 관점에서 핵심이 되는 모듈로 애플리케이션 루트 모듈에 한번 설정함을써 애플리케이션 레벨에서 사용할 수 있는 모듈을 말한다. 루트 모듈에 등록됐다는 것은 애플리케이션이 시작될 때 처음 한 번만 호출해서 전역으로 사용하겠다는 의미이다. 대표 예로 타이틀 컴포넌트가 있다. 보통 핵심 모듈은 /app/core에 위치시킨다.</p>
<h2 id="특징모듈-161p"><a href="#특징모듈-161p" class="headerlink" title="특징모듈 161p"></a>특징모듈 161p</h2><p>모듈이 많아지면 모듈 구성이 복잡해지며 지시자의 이름충돌 등의 문제가 발생할 수 있다. 이를 방지하기 위해 애플리케이션 루트 모듈에서 하위 모듈로 분리하는 것을 특징 모듈이라 한다. 특징 모듈에 선언한 모듈은 다른 모듈에 노출하거나 숨길수도 있다.</p>
<p>추가예정..</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;6장-모듈&quot;&gt;&lt;a href=&quot;#6장-모듈&quot; class=&quot;headerlink&quot; title=&quot;6장. 모듈&quot;&gt;&lt;/a&gt;6장. 모듈&lt;/h1&gt;&lt;p&gt;앵귤러 애플리케이션을 구성하는 뼈대와 같은 역할. @NgModule 장식자를 이용한다&lt;br&gt;impor
    
    </summary>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/Web/"/>
    
      <category term="Angular2" scheme="http://KKimSangHeon.github.io/categories/Web/Angular2/"/>
    
    
      <category term="Angular2" scheme="http://KKimSangHeon.github.io/tags/Angular2/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>5장. 서비스</title>
    <link href="http://KKimSangHeon.github.io/2018/01/28/angular2/"/>
    <id>http://KKimSangHeon.github.io/2018/01/28/angular2/</id>
    <published>2018-01-28T12:02:55.000Z</published>
    <updated>2018-03-12T13:50:18.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5장-서비스"><a href="#5장-서비스" class="headerlink" title="5장. 서비스"></a>5장. 서비스</h1><p>앵귤러JS(앵귤러2아님)에서는 기능을 컨트롤러에서 분리하기 위해 서비스 메소드를 써야할지 팩토리 메소드를 써야할지 혼란이 있었으나 2에서는 팩토리와 서비스를 서비스로 단일화 하였고 메소드에서 클래스로 변경하였다.<br>서비스는 공통관심사를 묶어놓았다.<br>provider제공자 그리고 @Injectable() 장식자 이용</p>
<h3 id="서비스-특징"><a href="#서비스-특징" class="headerlink" title="서비스 특징"></a>서비스 특징</h3><ol>
<li>서비스는 의존성 주입이 가능하다. 132p</li>
<li>객체지향적으로 이용가능</li>
<li>목 객체 서비스로 이용가능(서버,외부의 의존성없이 테스트 코드 작성할 때 유용) 135p</li>
<li>프로미스 서비스 (콜백헬과같은 비정상적인 호출형태를 개선하기 위해 나옴) 138p</li>
<li>서비스를 이용한 데이터 교환 가능(부모는 provider 설정을 해줘야하지만 자식은 안한다)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;5장-서비스&quot;&gt;&lt;a href=&quot;#5장-서비스&quot; class=&quot;headerlink&quot; title=&quot;5장. 서비스&quot;&gt;&lt;/a&gt;5장. 서비스&lt;/h1&gt;&lt;p&gt;앵귤러JS(앵귤러2아님)에서는 기능을 컨트롤러에서 분리하기 위해 서비스 메소드를 써야할지 팩토
    
    </summary>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/Web/"/>
    
      <category term="Angular2" scheme="http://KKimSangHeon.github.io/categories/Web/Angular2/"/>
    
    
      <category term="Angular2" scheme="http://KKimSangHeon.github.io/tags/Angular2/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>유용한 사이트 모음</title>
    <link href="http://KKimSangHeon.github.io/2018/01/27/usefulsite/"/>
    <id>http://KKimSangHeon.github.io/2018/01/27/usefulsite/</id>
    <published>2018-01-27T13:41:25.000Z</published>
    <updated>2018-02-12T23:34:32.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="알고리즘-코딩관련"><a href="#알고리즘-코딩관련" class="headerlink" title="알고리즘, 코딩관련"></a>알고리즘, 코딩관련</h3><p><a href="https://app.codility.com/programmers/lessons/1-iterations/" target="_blank" rel="external">https://app.codility.com/programmers/lessons/1-iterations/</a></p>
<h3 id="트렌드-분석"><a href="#트렌드-분석" class="headerlink" title="트렌드 분석"></a>트렌드 분석</h3><p><a href="https://trends.google.com/trends/?hl=ko" target="_blank" rel="external">https://trends.google.com/trends/?hl=ko</a><br>검색어를 입력하여 해당검색어에 대한 연관이슈 등에 대해 알 수 있다..</p>
<h3 id="IT-관련"><a href="#IT-관련" class="headerlink" title="IT 관련"></a>IT 관련</h3><p><a href="http://www.itfind.or.kr/" target="_blank" rel="external">http://www.itfind.or.kr/</a><br>IT 관련 이슈를 접할 수 있으며 정기간행물또한 유용하다.</p>
<h3 id="면접"><a href="#면접" class="headerlink" title="면접"></a>면접</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;알고리즘-코딩관련&quot;&gt;&lt;a href=&quot;#알고리즘-코딩관련&quot; class=&quot;headerlink&quot; title=&quot;알고리즘, 코딩관련&quot;&gt;&lt;/a&gt;알고리즘, 코딩관련&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://app.codility.com/progra
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4장. 컴포넌트</title>
    <link href="http://KKimSangHeon.github.io/2018/01/15/angular2/"/>
    <id>http://KKimSangHeon.github.io/2018/01/15/angular2/</id>
    <published>2018-01-15T14:22:50.000Z</published>
    <updated>2018-02-08T23:29:29.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4장-컴포넌트"><a href="#4장-컴포넌트" class="headerlink" title="4장. 컴포넌트"></a>4장. 컴포넌트</h1><h2 id="컴포넌트"><a href="#컴포넌트" class="headerlink" title="컴포넌트"></a>컴포넌트</h2><p>앵귤러에서 화면하는 구성하는 중요한 구성요소이다.</p>
<h3 id="웹-컴포넌트"><a href="#웹-컴포넌트" class="headerlink" title="웹 컴포넌트"></a>웹 컴포넌트</h3><p>HTML , CSS, 자바스크립트를 하나의 단위로 묶어주는 기술이다. 웹 컴포넌트 기술은 하나의 기능이 아니라 여러가지 기술들이 합쳐져 하나의 웹 컴포넌트를 구성<br> 웹 컴포넌트는 앵귤러2 컴포넌트의 기반기술이다 앵귤러 2 컴포넌트는 웹 컴포넌트의 기술요소를 기반으로 하므로 웹 컴포넌트를 이해하면 앵귤러 컴포넌트를 이해하는 데 도움된다.</p>
<ol>
<li>HTML 템플릿</li>
<li>템플릿 호출</li>
<li>쉐도우 DOM</li>
<li>커스텀 엘리먼트</li>
</ol>
<h3 id="중첩컴포넌트-85p"><a href="#중첩컴포넌트-85p" class="headerlink" title="중첩컴포넌트 85p"></a>중첩컴포넌트 85p</h3><p>부모 컴포넌트가 여러 자식컴포넌트를 포함하는 경우</p>
<h3 id="컴포넌트-트리-86p"><a href="#컴포넌트-트리-86p" class="headerlink" title="컴포넌트 트리 86p"></a>컴포넌트 트리 86p</h3><p>평면적으로 나열된 컴포넌트가 어떤 포함 관계를 가지는지 알수있게 해줌</p>
<h3 id="컴포넌트-기반-개발-87p"><a href="#컴포넌트-기반-개발-87p" class="headerlink" title="컴포넌트 기반 개발 87p"></a>컴포넌트 기반 개발 87p</h3><p>컴포넌트를 개발의 중심에 두고 개발하는것.</p>
<h2 id="컴포넌트-89p"><a href="#컴포넌트-89p" class="headerlink" title="컴포넌트 89p"></a>컴포넌트 89p</h2><p>컴포넌트 내부는 크게 import 영역, @Component 장식자(selector, template, styles로 구성됨), 컴포넌트 클래스 영역으로 나뉜다.</p>
<h2 id="부모가-자식한테-값-전달"><a href="#부모가-자식한테-값-전달" class="headerlink" title="부모가 자식한테 값 전달"></a>부모가 자식한테 값 전달</h2><p>부모가 속성바인드를 통해 값을 전달하면 자식이 값을 받는 방법은 2가지가 있다.</p>
<h3 id="input-장식자-99p"><a href="#input-장식자-99p" class="headerlink" title="@input 장식자 99p"></a>@input 장식자 99p</h3><p>외부에서 전달된 값을 받기 위해 사용하는 장식자</p>
<h3 id="inputs-102p"><a href="#inputs-102p" class="headerlink" title="inputs 102p"></a>inputs 102p</h3><p>부모가 name1, name2 속성으로 어떠한 값을 전달하면 자식은 @Component장식자 안에 inputs:[‘name1’,’name2’]로 값을 받을 수 있다. 자식의 클래스에서도 name1, name2를 지정해줘야함</p>
<h2 id="자식이-부모한테-값-전달-103p"><a href="#자식이-부모한테-값-전달-103p" class="headerlink" title="자식이 부모한테 값 전달 103p"></a>자식이 부모한테 값 전달 103p</h2><p>@Output 장식자로 선언한 변수를 EventEmitter로 초기화한다. 그리고 부모에게 보낼 시점이 되면 emit()메소드를 사용해 부모로 이벤트를 전달한다.</p>
<h3 id="ViewChild-장식자-107p"><a href="#ViewChild-장식자-107p" class="headerlink" title="@ViewChild 장식자 107p"></a>@ViewChild 장식자 107p</h3><p>화면 DOM에 접근해 첫 번째로 위치한 지시자의 내부 상태(지시자의 속성값)나 정보(컴포넌트 지시자의 경우 내부 메서드)를 가져온다</p>
<h3 id="ViewChildren-장식자-109p"><a href="#ViewChildren-장식자-109p" class="headerlink" title="@ViewChildren 장식자 109p"></a>@ViewChildren 장식자 109p</h3><p>@ViewChild는 하나의 엘리먼트 상태를 갖고왔지만 @ViewChildren 장식자는 여러 지시자의 상태를 한번에 취할 수 있다.</p>
<h3 id="ContentChild-장식자-112p"><a href="#ContentChild-장식자-112p" class="headerlink" title="@ContentChild 장식자 112p"></a>@ContentChild 장식자 112p</h3><p>콘텐츠 DOM을 탐색해 지시자 엘리먼트의 상태를 QueryList에 담는 역할을 한다.</p>
<h3 id="ContentChildren-장식자-114p"><a href="#ContentChildren-장식자-114p" class="headerlink" title="@ContentChildren 장식자 114p"></a>@ContentChildren 장식자 114p</h3><p>컴포넌트 내부에 위치한 엘리먼트나 지시자에 정보를 담고 있는 쿼리리스트를 얻는다.</p>
<h3 id="쉐도우-DOM의-선택자-118p"><a href="#쉐도우-DOM의-선택자-118p" class="headerlink" title="쉐도우 DOM의 선택자 118p"></a>쉐도우 DOM의 선택자 118p</h3><p>그냥 styles:[‘span{font-style}’] 이런식으로 하면 해당 컴포넌트의 span만 적용된다. 이를 범위를 넓히거나 좁힐때 사용하는것이 쉐도우 DOM의 선택자이다.<br>1.:host 선택자<br>2.:host-context 선택자<br>3.:deep 선택자</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;4장-컴포넌트&quot;&gt;&lt;a href=&quot;#4장-컴포넌트&quot; class=&quot;headerlink&quot; title=&quot;4장. 컴포넌트&quot;&gt;&lt;/a&gt;4장. 컴포넌트&lt;/h1&gt;&lt;h2 id=&quot;컴포넌트&quot;&gt;&lt;a href=&quot;#컴포넌트&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/categories/Web/"/>
    
      <category term="Angular2" scheme="http://KKimSangHeon.github.io/categories/Web/Angular2/"/>
    
    
      <category term="Angular2" scheme="http://KKimSangHeon.github.io/tags/Angular2/"/>
    
      <category term="Web" scheme="http://KKimSangHeon.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>마인즈랩</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/interview6/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/interview6/</id>
    <published>2018-01-13T13:31:35.000Z</published>
    <updated>2018-03-31T10:06:32.287Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2017년 9월</p>
<h3 id="면접내용"><a href="#면접내용" class="headerlink" title="면접내용"></a>면접내용</h3><p>판교에서 열린 취업박람회에 참가하여 처음면접을 진행했으며 개발팀이 아닌 분들과 면접을 진행했습니다. 진행했던 프로젝트 그리고 어필하고 싶은 분야에 대한 프로젝트에 대해 설명했습니다.</p>
<p>2차면접은 사무실 내 회의실에서 진행하였으며 각팀의 개발팀 팀장님들 그리고 전무님과 면접을 진행했습니다. 면접 질문은 다음과 같습니다.</p>
<ul>
<li>자기소개</li>
<li>영업시키면 어떻게 할 지낼것인지</li>
<li>진행했던 프로젝트에 대한 설명</li>
<li>지원동기</li>
<li>자신있는 언어</li>
<li>그 언어의 특징 및 장점</li>
<li>자기소개서 기반 질문</li>
</ul>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>면접의 난이도는 높은편은 아니나 자신이 진행했던 프로젝트 그리고 자신있는 언어가 한개이상은 있어야 되는것 같습니다. 직무는 면접 후 결정되었으며 전무님의 질문이 개발을 좋아하시는 분이란걸 느낄수 있게 했습니다. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2017년 9월&lt;/p&gt;
&lt;h3 id=&quot;면접내용&quot;&gt;&lt;a href=&quot;#면접내용&quot; class=&quot;headerlink&quot; title=&quot;면
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="minds lab" scheme="http://KKimSangHeon.github.io/tags/minds-lab/"/>
    
      <category term="마인즈랩" scheme="http://KKimSangHeon.github.io/tags/%EB%A7%88%EC%9D%B8%EC%A6%88%EB%9E%A9/"/>
    
  </entry>
  
  <entry>
    <title>아이티센 정보시스템 개발</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/interview5/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/interview5/</id>
    <published>2018-01-13T13:23:16.000Z</published>
    <updated>2018-01-13T13:41:42.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2016년 11월</p>
<h3 id="면접내용"><a href="#면접내용" class="headerlink" title="면접내용"></a>면접내용</h3><p>1차면접은 인사팀, 개발팀 총 3분이 면접관으로 들어오십니다. 지원자는 2명이 면접에 참가합니다.<br>주로 인성위주의 질문이며 진행했던 프로젝트에 대한 질문또한 주십니다.<br>2차면접은 대표님, 인사팀 등등 총 5분정도의 분들이 면접관으로 들어오시며 지원자는 3명이 면접에 참가했습니다.</p>
<p>1차 2차 모두 인성위주, 진행했던 프로젝트에 대한 질문이 주를 이뤘으며 좋은분위기속에서 면접을 마쳤습니다.<br>기억나는 면접질문은 다음과 같습니다.</p>
<ul>
<li>자기소개</li>
<li>자기소개서 위주의 질문</li>
<li>핵심가치에 대한 질문</li>
<li>팀장으로서 팀원을 이끌어본 경험</li>
<li>3가지 가치와 경험에 대한 설명</li>
<li>포부</li>
<li>지방으로 파견가도 괜찮은지</li>
</ul>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>좋은분위기속에서 면접진행되었으며 사옥이 우주선 비슷하게 생겨 신기하다는 생각이 들었습니다. 인턴활동을 진행하면서 들었는데 다른팀의 면접분위기는 무서웠다고 합니다. 면접관에 따라 분위기가 좌우되는것 같습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2016년 11월&lt;/p&gt;
&lt;h3 id=&quot;면접내용&quot;&gt;&lt;a href=&quot;#면접내용&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="itcen" scheme="http://KKimSangHeon.github.io/tags/itcen/"/>
    
      <category term="정보시스템 개발" scheme="http://KKimSangHeon.github.io/tags/%EC%A0%95%EB%B3%B4%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="아이티센" scheme="http://KKimSangHeon.github.io/tags/%EC%95%84%EC%9D%B4%ED%8B%B0%EC%84%BC/"/>
    
  </entry>
  
  <entry>
    <title>휴맥스 웹개발</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/interview3/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/interview3/</id>
    <published>2018-01-13T13:06:26.000Z</published>
    <updated>2018-02-22T14:50:05.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2017년 10월</p>
<h3 id="면접내용"><a href="#면접내용" class="headerlink" title="면접내용"></a>면접내용</h3><p>휴맥스 사옥에서 면접 진행하였으며 사옥이 엄청 좋았던 기억이 납니다..<br>총 네분의 면접관분들(실무진 3분 인사팀 1분)과 두명의 지원자가 면접을 진행합니다.<br>면접 질문은 다음과 같습니다.</p>
<ul>
<li>자기소개</li>
<li>영어로 자기소개</li>
<li>html, css, dom의 역할</li>
<li>oop의 특징</li>
<li>반응형 웹이란</li>
<li>소프트웨어 방법론 질문</li>
<li>관심있는 기술</li>
<li>궁금한점</li>
<li>할수있는 언어</li>
</ul>
<h3 id="소감"><a href="#소감" class="headerlink" title="소감"></a>소감</h3><p>영어자기소개는 꼭 준비하는게 좋을것 같습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2017년 10월&lt;/p&gt;
&lt;h3 id=&quot;면접내용&quot;&gt;&lt;a href=&quot;#면접내용&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="웹개발" scheme="http://KKimSangHeon.github.io/tags/%EC%9B%B9%EA%B0%9C%EB%B0%9C/"/>
    
      <category term="휴맥스" scheme="http://KKimSangHeon.github.io/tags/%ED%9C%B4%EB%A7%A5%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>사조시스템즈 전산</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/interview2/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/interview2/</id>
    <published>2018-01-13T13:06:20.000Z</published>
    <updated>2018-01-13T14:54:27.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="시기"><a href="#시기" class="headerlink" title="시기"></a>시기</h3><p>2016년 10월</p>
<h3 id="면접내용"><a href="#면접내용" class="headerlink" title="면접내용"></a>면접내용</h3><ul>
<li>1차면접<br>1차면접은 면접관 3분과 봤습니다. 기억나는 질문은 아래와 같습니다.</li>
<li>자기소개</li>
<li>설날같은 때 지인에게 참치를 팔아줘야 하는데 어떻게 팔 것인가</li>
<li>집이 어디인지</li>
<li>진행했던 프로젝트에 대한 질문.</li>
<li>주량은 얼마나 되는지</li>
<li>흡연여부</li>
<li>지원동기</li>
<li>우리회사, 그룹사가 무슨 일을하는지</li>
</ul>
<p>1차면접의 합격여부는 당일 알려줬습니다.</p>
<ul>
<li>2차면접</li>
</ul>
<p>2차면접은 회장님? 대표님? 과 진행됩니다. 이미 뭐 합격자는 결정되어있던것 같으며 인성위주로 질문하시고 더 멀리보기위해서는 더 높게 올라가라라고 말씀해주신게 인상깊었습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;시기&quot;&gt;&lt;a href=&quot;#시기&quot; class=&quot;headerlink&quot; title=&quot;시기&quot;&gt;&lt;/a&gt;시기&lt;/h3&gt;&lt;p&gt;2016년 10월&lt;/p&gt;
&lt;h3 id=&quot;면접내용&quot;&gt;&lt;a href=&quot;#면접내용&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EB%A9%B4%EC%A0%91/"/>
    
    
      <category term="면접" scheme="http://KKimSangHeon.github.io/tags/%EB%A9%B4%EC%A0%91/"/>
    
      <category term="전산" scheme="http://KKimSangHeon.github.io/tags/%EC%A0%84%EC%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>SQLD, SQL개발자</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/certificate4/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/certificate4/</id>
    <published>2018-01-13T11:50:17.000Z</published>
    <updated>2018-01-13T13:05:35.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="취득시기"><a href="#취득시기" class="headerlink" title="취득시기"></a>취득시기</h3><p>2017년 11월</p>
<h3 id="내용"><a href="#내용" class="headerlink" title="내용"></a>내용</h3><p>총 한번의 시험이 있으며 앞부분의 이론적인 부분은 배점이 낮지만 절대 무시하면 안됩니다. 그 말이 이 말같고 이 말이 저 말같은 문제에 낚여 과락이라는 결과가 나올 수 있습니다. 공식교재와 풀이문제집을 구매해서 공부하였으며 책이 잘 읽히는 부분도 있지만 그렇지 않은 부분도 있었습니다. 총 한달정도 기간동안 천천히 공부했으며 공부내용은 개발자로서 살아가는데 많은 도움이 될 것 같으며 DB에 대한 상식 또한 넓어진것 같습니다. 개발자로서 따면 좋은 자격증이라 생각합니다. 하지만 시험당시가 조금 당황스러웠습니다. 문제에 오탈자가 한 두개가 아니라 집중할만하면 계속되는 감독관의 오타수정 알림으로 인해 시험이 5번넘게 중단되었습니다. 대놓고 짜증내는 사람도 있었으며 시험 종료 후 추가시간은 제공되지 않았습니다. 책의 내용, 문제는 개발자로서 알아야 할 상식이 많은것은 분명하나 문제 출제에 조금더 신경써주면 좋을것 같습니다. 전 이제 시험볼일은 없겠지만요 ㅋㅋ  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;취득시기&quot;&gt;&lt;a href=&quot;#취득시기&quot; class=&quot;headerlink&quot; title=&quot;취득시기&quot;&gt;&lt;/a&gt;취득시기&lt;/h3&gt;&lt;p&gt;2017년 11월&lt;/p&gt;
&lt;h3 id=&quot;내용&quot;&gt;&lt;a href=&quot;#내용&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/tags/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
      <category term="SQLD" scheme="http://KKimSangHeon.github.io/tags/SQLD/"/>
    
      <category term="SQL 개발자" scheme="http://KKimSangHeon.github.io/tags/SQL-%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>정보처리기사</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/certificate3/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/certificate3/</id>
    <published>2018-01-13T11:50:03.000Z</published>
    <updated>2018-01-13T13:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="취득시기"><a href="#취득시기" class="headerlink" title="취득시기"></a>취득시기</h3><p>2016년 12월</p>
<h3 id="내용"><a href="#내용" class="headerlink" title="내용"></a>내용</h3><p>필기의 경우 기출문제만 풀어본다면 합격할 수 있는 수준입니다. 전자계산기의 경우 반복해서 숙달해서 풀이법을 익히는게 중요하며 네트워크는 그냥 암기해야하는것 같습니다…  실기의 경우 16년 3회차부터 주관식으로 변경되어 어려워졌다는 말이 많은데 제가 봤던 16년 3회의 경우 그렇게 어렵지만은 않았습니다. 5년치의 실기 문제를 모두 풀어보고 시험에 임했으나 DB과목은 6년전의 문제와 비슷한 유형으로 나와 아차싶었지만 다행이 좋은 점수를 받을 수 있었습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;취득시기&quot;&gt;&lt;a href=&quot;#취득시기&quot; class=&quot;headerlink&quot; title=&quot;취득시기&quot;&gt;&lt;/a&gt;취득시기&lt;/h3&gt;&lt;p&gt;2016년 12월&lt;/p&gt;
&lt;h3 id=&quot;내용&quot;&gt;&lt;a href=&quot;#내용&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/tags/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
      <category term="정보처리기사" scheme="http://KKimSangHeon.github.io/tags/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC/"/>
    
  </entry>
  
  <entry>
    <title>컴퓨터활용능력 1급</title>
    <link href="http://KKimSangHeon.github.io/2018/01/13/certificate2/"/>
    <id>http://KKimSangHeon.github.io/2018/01/13/certificate2/</id>
    <published>2018-01-13T11:49:58.000Z</published>
    <updated>2018-01-13T13:06:05.364Z</updated>
    
    <content type="html"><![CDATA[<h3 id="취득시기"><a href="#취득시기" class="headerlink" title="취득시기"></a>취득시기</h3><p>2013년 7월</p>
<h3 id="내용"><a href="#내용" class="headerlink" title="내용"></a>내용</h3><p>필기는 워드프로세서와 겹치는 부분이 있으며 조금 더 확자된 부분이 있어 그부분만 조금 더 공부하고 쉽게 합격했습니다. 하지만 실기의 경우 생각만큼 쉽지만은 않았습니다. 11년 10월 입대전에 컴활이나 따고 가자해서 시작해서 11년 8월에 필기를 취득하고 13년 7월 전역후 한달동안 빡세게 공부해서 필기시험 만료를 눈앞에두고 취득할 수 있었습니다.<br>전역하고 보니 필기시험 합격의 만료 전까지 실기시험이 3번밖에 없던터라 무작정 이번에 딴다는 각오로 3번 다 시험을 신청했습니다. 첫 시험은 어려웠음에도 불구하고 1점차이로 떨어졌고 두번째 시험에서 합격했습니다. 시험지마다 난이도도 조금씩 차이가 있는것 같으며 운도 어느정도 따라주었던거 같습니다. 실기의 경우 프로시저의 어려운 부분은 과감하게 포기하고 쉬운영역만 공부하였으며 엑셀, 엑세스는 사용방법을 빠삭하게 익혔으며 단축키의 사용법 또한 완벽하게 익혔습니다.<br>컴활을 취득하기 위해 공부했던 내용은 일상생활속에서 생각보다 많은 도움을 주며 단순 취업용 뿐만아니라 엑셀실력 향상에도 많은 도움을 주었습니다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;취득시기&quot;&gt;&lt;a href=&quot;#취득시기&quot; class=&quot;headerlink&quot; title=&quot;취득시기&quot;&gt;&lt;/a&gt;취득시기&lt;/h3&gt;&lt;p&gt;2013년 7월&lt;/p&gt;
&lt;h3 id=&quot;내용&quot;&gt;&lt;a href=&quot;#내용&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/"/>
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/categories/%EA%B8%B0%ED%83%80/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
    
      <category term="자격증" scheme="http://KKimSangHeon.github.io/tags/%EC%9E%90%EA%B2%A9%EC%A6%9D/"/>
    
      <category term="컴퓨터활용능력 1급" scheme="http://KKimSangHeon.github.io/tags/%EC%BB%B4%ED%93%A8%ED%84%B0%ED%99%9C%EC%9A%A9%EB%8A%A5%EB%A0%A5-1%EA%B8%89/"/>
    
  </entry>
  
</feed>
