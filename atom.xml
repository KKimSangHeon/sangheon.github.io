<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-07-08T12:45:04.982Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>8장. SSH서버, VNC서버</title>
    <link href="http://KKimSangHeon.github.io/2017/07/08/ThisIsLinux23/"/>
    <id>http://KKimSangHeon.github.io/2017/07/08/ThisIsLinux23/</id>
    <published>2017-07-08T09:16:00.000Z</published>
    <updated>2017-07-08T12:45:04.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSH서버"><a href="#SSH서버" class="headerlink" title="SSH서버"></a>SSH서버</h3><p>텔넷과 용도는 동일하지만 보안이 강화되어있음<br>명령문을 입력 시 암호화 되어서 날라간다. SSH서버를 쓰는것이 권장사항이다. CentOS에서 쓰는 SSH서느는 openSSH 서버라 함.</p>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><h5 id="1-서버가-설치되었는지-확인"><a href="#1-서버가-설치되었는지-확인" class="headerlink" title="1.서버가 설치되었는지 확인"></a>1.서버가 설치되었는지 확인</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep openssh</div><div class="line">설치되어있다.</div></pre></td></tr></table></figure>
<h5 id="2-가동되고-있는지-확인"><a href="#2-가동되고-있는지-확인" class="headerlink" title="2.가동되고 있는지 확인"></a>2.가동되고 있는지 확인</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># systemctl status sshd</div><div class="line">Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled)      //enable는 상시가동이라는 뜻</div><div class="line">Active: active (running) since 토 2017-07-08 17:43:06 KST; 1h 5min ago //돌고 있다.</div><div class="line">즉 ssh는 기본적으로 centos에서 깔려있고 가동되어 있다.</div><div class="line">기본적으로 쓰인다!!!</div></pre></td></tr></table></figure>
<h5 id="3-방화벽-열렸는지-여부-확인"><a href="#3-방화벽-열렸는지-여부-확인" class="headerlink" title="3.방화벽 열렸는지 여부 확인"></a>3.방화벽 열렸는지 여부 확인</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># firewall-config</div><div class="line">쭉 내리면 ssh가 켜져있다.</div></pre></td></tr></table></figure>
<h5 id="4-새로운-리눅스-Client-에서-접속해보자"><a href="#4-새로운-리눅스-Client-에서-접속해보자" class="headerlink" title="4.새로운 리눅스(Client)에서 접속해보자"></a>4.새로운 리눅스(Client)에서 접속해보자</h5><p>클라이언트 켜자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep openssh  //깔려있나확인</div><div class="line"></div><div class="line"># ssh teluser@192.168.111.100   //telnet와 접속방법이 다름</div><div class="line"># ifconfig  //서버컴퓨터의 아이피 확인</div></pre></td></tr></table></figure></p>
<h5 id="5-윈도우에서-접속해보자"><a href="#5-윈도우에서-접속해보자" class="headerlink" title="5.윈도우에서 접속해보자"></a>5.윈도우에서 접속해보자</h5><p>Putty 설치<br>192.168.111.100 접속<br>참고로 ssh는 포트 22 telnet는 23<br>한글이 깨지면 오른쪽 누르고 유니코드로 전환<br>abc.txt를 하나 만들고 gedit abc.txt를 실행하면 되질 않는다.<br>왜냐하면 텔넷,SSH는 텍스트 모드로만 전송이 되기 때문에.<br>즉 그래픽 명령어는 아얘 쓸 수 없다.</p>
<h4 id="그럼-telnet-ssh-다른점이-없는건가"><a href="#그럼-telnet-ssh-다른점이-없는건가" class="headerlink" title="그럼 telnet ssh 다른점이 없는건가?"></a>그럼 telnet ssh 다른점이 없는건가?</h4><p>그렇다. 기능은 같으나 ssh가 보안이 추가된 것이다.</p>
<h3 id="VNC-서버"><a href="#VNC-서버" class="headerlink" title="VNC 서버"></a>VNC 서버</h3><p>X 윈도우 환경으로 원격접속을 사용하고 싶을 때.<br>telnet ,ssh 보다 많이 느리다. 그래픽이 왔다갔다하기 때문에!</p>
<h4 id="1-VNC-설치-및-설정"><a href="#1-VNC-설치-및-설정" class="headerlink" title="1.VNC 설치 및 설정"></a>1.VNC 설치 및 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep tiger  //설치유무 확인</div><div class="line">//미니멈 버전이 깔려있다. 다시깔자</div><div class="line"># yum -y install tigervnc-server</div></pre></td></tr></table></figure>
<p>VNC는 사용자한테 너 접속해, 너 화면번호 몇번 써 를 지정해야한다.</p>
<h4 id="2-센토스-사용자-너-1번화면으로-접속해를-설정"><a href="#2-센토스-사용자-너-1번화면으로-접속해를-설정" class="headerlink" title="2.센토스 사용자 너 1번화면으로 접속해를 설정"></a>2.센토스 사용자 너 1번화면으로 접속해를 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</div><div class="line">//1번화면을 쓰기위한 작업</div><div class="line"># vi /etc/systemd/system/vncserver@\:1.service</div><div class="line"> :set number</div><div class="line">40행,41행 의 &lt;USER&gt;을 지워버리고 centos로 고침</div><div class="line"> 그리고 저장 후 종료</div></pre></td></tr></table></figure>
<h4 id="3-방화벽-열기"><a href="#3-방화벽-열기" class="headerlink" title="3.방화벽 열기"></a>3.방화벽 열기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># firewall-config</div></pre></td></tr></table></figure>
<p>설정에서 영구적 선택<br>쭉 내려서 vnc-server체크<br>옵션에서 firewalld 다시불러오기 클릭</p>
<h4 id="4-centos사용자가-1번화면으로-들어올-때-전용-비밀번호를-생성"><a href="#4-centos사용자가-1번화면으로-들어올-때-전용-비밀번호를-생성" class="headerlink" title="4.centos사용자가 1번화면으로 들어올 때 전용 비밀번호를 생성"></a>4.centos사용자가 1번화면으로 들어올 때 전용 비밀번호를 생성</h4><p>즉 vnc 전용 비밀번호 생성<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># su - centos</div><div class="line"># vncserver</div><div class="line">암호는 123456으로 설정</div></pre></td></tr></table></figure></p>
<h4 id="5-접속해보자"><a href="#5-접속해보자" class="headerlink" title="5.접속해보자"></a>5.접속해보자</h4><p>리눅스 클라이언트에서 접속<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep tiger  //깔려있지 않은것을 확인</div><div class="line"></div><div class="line"># su -c &apos;yum -y install tigervnc&apos;   //루트 권한으로 실행하는것.</div><div class="line"># vncviewer 192.168.111.100:1   //1은 디스플레이 번호</div><div class="line">  password 입력</div></pre></td></tr></table></figure><br>윈도우 클라이언트에서 접속<br>카페이서 tigervnc 설치파일 깔기<br>옵션해서 해상도를 낮추면 사용할만 함(color level)<br>tigervnc vncviewer을 켜고<br>192.168.111.100:1 입력하고 암호 123456</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SSH서버&quot;&gt;&lt;a href=&quot;#SSH서버&quot; class=&quot;headerlink&quot; title=&quot;SSH서버&quot;&gt;&lt;/a&gt;SSH서버&lt;/h3&gt;&lt;p&gt;텔넷과 용도는 동일하지만 보안이 강화되어있음&lt;br&gt;명령문을 입력 시 암호화 되어서 날라간다. SSH서버를
    
    </summary>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>8장. 텔넷서버</title>
    <link href="http://KKimSangHeon.github.io/2017/07/08/ThisIsLinux22/"/>
    <id>http://KKimSangHeon.github.io/2017/07/08/ThisIsLinux22/</id>
    <published>2017-07-08T08:32:45.000Z</published>
    <updated>2017-07-08T09:08:30.455Z</updated>
    
    <content type="html"><![CDATA[<p>이번장은 상당히 중요하다. 앞으로의 모든 장은 네트워크 서버를 구축하는데 8장이 첫 구축이다. 그러므로 8장을 잘 이해하면 큰 흐름을 이해 할 수 있다.</p>
<h4 id="텔넷서버"><a href="#텔넷서버" class="headerlink" title="텔넷서버"></a>텔넷서버</h4><p>오랫동안 전통적으로 사용되어 온 원격 접속 방법이다.<br>텔넷 서버에 접속하려면 텔넷 클라이언트를 쓰면 된다. 각 서버마다 해당되는 클라이언트가 존재한다.</p>
<h4 id="텔넷-서버-구축-단계"><a href="#텔넷-서버-구축-단계" class="headerlink" title="텔넷 서버 구축 단계"></a>텔넷 서버 구축 단계</h4><p>1.텔넷 서버 설치<br>2.텔넷 서비스 시작<br>3.텔넷 전용 사용자 생성<br>4.방화벽 설정(포트 열기)<br>5.텔넷 서비스 상시가동<br>6.클라이언트에서 접속</p>
<h3 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h3><p>모든 가상머신을 초기화하자!</p>
<h5 id="1-텔넷-서버-설치"><a href="#1-텔넷-서버-설치" class="headerlink" title="1.텔넷 서버 설치"></a>1.텔넷 서버 설치</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># rpm -qa  | grep telnet     //텔넷이 설치되었나 확인</div><div class="line"># yum -y install telnet-server    //설치되어있지 않아 설치</div></pre></td></tr></table></figure>
<h5 id="2-텔넷-서버-서비스-시작"><a href="#2-텔넷-서버-서비스-시작" class="headerlink" title="2.텔넷 서버 서비스 시작"></a>2.텔넷 서버 서비스 시작</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># systemctl restart telnet.socket</div><div class="line">    //restart는 시작이 안되어있으면 새로 시작하고 시작되어있으면 재시작함.</div><div class="line"></div><div class="line"># systemctl status telnet.socket  </div><div class="line">      //가동여부 확인</div></pre></td></tr></table></figure>
<h5 id="3-텔넷-전용-사용자-생성"><a href="#3-텔넷-전용-사용자-생성" class="headerlink" title="3.텔넷 전용 사용자 생성"></a>3.텔넷 전용 사용자 생성</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># adduser teluser</div><div class="line"># passwd teluser  //1234로 설정</div></pre></td></tr></table></figure>
<h5 id="4-방화벽-설정-포트-열기"><a href="#4-방화벽-설정-포트-열기" class="headerlink" title="4.방화벽 설정(포트 열기)"></a>4.방화벽 설정(포트 열기)</h5><p>외부에서 접속이 가능하기 위해서 여는 것이므로 일단 내부에서 잘 접속이 되는지 확인 후 에 방화벽을 열자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># yum -y install telnet //텔넷 클라이언트 프로그램 설치</div><div class="line"># telnet 127.0.0.1    //자기 자신으로 접속</div><div class="line">  teluser / 1234 입력</div><div class="line"># exit //종료  </div><div class="line"></div><div class="line"> 이제 방화벽 설정하자</div><div class="line"># firewall-config   //설정차을 띄우자</div><div class="line"> 설정 영구적 탭 선택  //서버는 한번 쓰는게 아니라 영원히 쓰기 때문에.</div><div class="line"> 영역 탭의 public 선택 후 서비스에서 telnet 체크</div><div class="line"> 옵션-&gt;Firewall 다시불러오기</div><div class="line"> 이제 포트가 열렸다.</div></pre></td></tr></table></figure></p>
<h5 id="5-텔넷-서비스-상시가동"><a href="#5-텔넷-서비스-상시가동" class="headerlink" title="5.텔넷 서비스 상시가동"></a>5.텔넷 서비스 상시가동</h5><p>포트가 열렸지만 컴퓨터가 껏다 켜면 제대로 작동안하기 때문에 다음을 입력<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># systemctl enable telnet.socket    //껏다 켜도 유지됨</div></pre></td></tr></table></figure></p>
<h5 id="6-클라이언트에서-접속"><a href="#6-클라이언트에서-접속" class="headerlink" title="6.클라이언트에서 접속"></a>6.클라이언트에서 접속</h5><p>이제 윈 클라이언트를 부팅하고 접속해보자.<br>접속을 위해서는 서버의 IP주소가 필요하다. 서버에서 다음을 입력<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ifconfig //192.168.111.100</div></pre></td></tr></table></figure><br>IP주소 확인 했으니 윈 클라이언트로 가서 제어판-프로그램-프로그램 및기능<br>Windows 기능 사용/사용안함 가서 맨아래 텔넷 클라이언트 기능 설치</p>
<p>윈도우 cmd를 열자<br>그 후 telnet 192.168.111.100<br>teluser /1234 입력 후 엔터<br>접속이 된다.<br>exit로 종료</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이번장은 상당히 중요하다. 앞으로의 모든 장은 네트워크 서버를 구축하는데 8장이 첫 구축이다. 그러므로 8장을 잘 이해하면 큰 흐름을 이해 할 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;텔넷서버&quot;&gt;&lt;a href=&quot;#텔넷서버&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>7장. 셸 스크립트 프로그래밍</title>
    <link href="http://KKimSangHeon.github.io/2017/07/08/ThisIsLinux21/"/>
    <id>http://KKimSangHeon.github.io/2017/07/08/ThisIsLinux21/</id>
    <published>2017-07-08T01:54:28.000Z</published>
    <updated>2017-07-08T05:39:45.800Z</updated>
    
    <content type="html"><![CDATA[<p>Centos의 기본 셸은 bash<br>셸은 명령어를 해석 해 주는 것이다.<br> -Alias, History, 연산 등의 기능을 갖는다.</p>
<h4 id="환경변수"><a href="#환경변수" class="headerlink" title="환경변수"></a>환경변수</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># echo $PATH //명령어를 실행하면</div><div class="line">          //명령어를 찾는 폴더들이 출력됨.</div></pre></td></tr></table></figure>
<h4 id="셸-스크립트-프로그래밍"><a href="#셸-스크립트-프로그래밍" class="headerlink" title="셸 스크립트 프로그래밍"></a>셸 스크립트 프로그래밍</h4><p>C언어와 유사하다.<br>변수, 반복문,제어문 등의 사용이 가능<br>vi, gedit으로 작성 가능</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># vi name.sh  //셸의 약자로 sh</div><div class="line">다음과 같이 입력</div><div class="line"></div><div class="line">#!/bin/sh     //셸은 이것을 무조건 쓴다.</div><div class="line">echo &quot;사용자이름: &quot;$USERNAME</div><div class="line">exit 0</div><div class="line"></div><div class="line">vi를 빠져나와서</div><div class="line"></div><div class="line"># sh name.sh  //실행 방법 1</div><div class="line"></div><div class="line"># chmod u+x name.sh   //실행방법2</div><div class="line"># ./name.sh       //실행방법2</div></pre></td></tr></table></figure>
<h5 id="변수의-기본"><a href="#변수의-기본" class="headerlink" title="변수의 기본"></a>변수의 기본</h5><p>변수를 사용하기 전에 미리 선언하지 않으며, 변수에 처음 값이 할당되면서 자동으로 변수가 생성<br>모든 변수는 ‘문자열(String)’로 취급<br>변수 이름은 대소문자를 구분<br>변수를 대입할 때 ‘=’ 좌우에는 공백이 없어야함</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># testval = Hello //에러발생. 공백존재</div><div class="line"></div><div class="line"># testval=Hello</div><div class="line"># echo $testval   //Hello 출력됨</div><div class="line"></div><div class="line"># testval=Yes Sir   //에러발생</div><div class="line"></div><div class="line"># testval=&quot;Yes Sir&quot;</div><div class="line"># echo $testval   //Yes Sir 출력</div><div class="line"></div><div class="line"># testval=7+5</div><div class="line"># echo testval    //7+5 출력</div><div class="line"></div><div class="line"># testval=&apos;expr 7+5&apos;</div><div class="line"># echo testval    //12 출력</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos의 기본 셸은 bash&lt;br&gt;셸은 명령어를 해석 해 주는 것이다.&lt;br&gt; -Alias, History, 연산 등의 기능을 갖는다.&lt;/p&gt;
&lt;h4 id=&quot;환경변수&quot;&gt;&lt;a href=&quot;#환경변수&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>6장 사용자별 공간 할당(쿼터)</title>
    <link href="http://KKimSangHeon.github.io/2017/07/07/ThisIsLinux20/"/>
    <id>http://KKimSangHeon.github.io/2017/07/07/ThisIsLinux20/</id>
    <published>2017-07-07T14:55:51.000Z</published>
    <updated>2017-07-07T15:54:10.207Z</updated>
    
    <content type="html"><![CDATA[<h4 id="쿼터"><a href="#쿼터" class="headerlink" title="쿼터"></a>쿼터</h4><p>사용자마다 용량 제한을 두는것이다.<br>ex.클라우드 서비스를 가입하면 데이터 양이 한정되어있음.</p>
<h4 id="쿼터-실습"><a href="#쿼터-실습" class="headerlink" title="쿼터 실습"></a>쿼터 실습</h4><p>설치 직후로 초기화하자.</p>
<p>새로운 디스크를 추가해서 쿼터 전용 디스크로 하자<br>사용자의 홈 디렉토리는 별도의 디스크로 하는것이 효과적이다. 그리고 사용자별 쿼터도 지정해보자</p>
<h5 id="1-20기가짜리-하나-디스크-달자"><a href="#1-20기가짜리-하나-디스크-달자" class="headerlink" title="1. 20기가짜리 하나 디스크 달자"></a>1. 20기가짜리 하나 디스크 달자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># fdisk /dev/sdb</div><div class="line"># mkfs.ext4 /dev/sdb1</div><div class="line"># mkdir /userHome     //앞으로 추가되는 사용자는</div><div class="line">              userHome를 홈 디렉토리로 함</div><div class="line"># mount /dev/sdb1  /userHome/</div><div class="line"># vi /etc/fstab</div><div class="line">/dev/sdb1     /userHome   ext4    defaults   1   2  추가</div></pre></td></tr></table></figure>
<h5 id="2-유저-두명-추가하자"><a href="#2-유저-두명-추가하자" class="headerlink" title="2. 유저 두명 추가하자"></a>2. 유저 두명 추가하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># useradd -d /userHome/john  john   </div><div class="line">          //홈디렉토리를 지정하면서 유저생성</div><div class="line"># useradd -d /userHome/bann  bann   </div><div class="line">                    //홈디렉토리를 지정하면서 유저생성   </div><div class="line"></div><div class="line"># ls -l /userHome     //확인</div><div class="line"></div><div class="line"># passwd john   //암호는 1234로 설정</div><div class="line"></div><div class="line"># passwd bann   //암호는 1234로 설정</div></pre></td></tr></table></figure>
<h5 id="3-아까-추가한-디스크를-쿼터용으로-설정하자"><a href="#3-아까-추가한-디스크를-쿼터용으로-설정하자" class="headerlink" title="3. 아까 추가한 디스크를 쿼터용으로 설정하자"></a>3. 아까 추가한 디스크를 쿼터용으로 설정하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># vi /etc/fstab</div><div class="line">defaults 를 아래와 같이 변경</div><div class="line">defaults,usrjquota=aquota.user,jqfmt=vfsv0</div><div class="line"></div><div class="line">리부트 해도 되지만 귀찮으니까</div><div class="line"># mount --options remount  /userHome</div><div class="line"># mount  //맨아래서 확인</div></pre></td></tr></table></figure>
<h5 id="4-쿼터디비생성"><a href="#4-쿼터디비생성" class="headerlink" title="4. 쿼터디비생성"></a>4. 쿼터디비생성</h5><p>명령어들에 대해 관심있으면 책을보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># cd /userHome/</div><div class="line"># quotaoff -avug</div><div class="line"># quotacheck -augmn</div><div class="line"># rm -rf aquota.*</div><div class="line"># quotacheck -augmn</div><div class="line"># touch aquota.user aquota.group</div><div class="line"># chmod 600 aquota.*</div><div class="line"># quotacheck -augmn</div><div class="line"># quotaon -avug</div><div class="line"></div><div class="line"># ls -l   //aquota.group , user 생긴것 확인</div></pre></td></tr></table></figure></p>
<h5 id="5-개인별-쿼터-설정"><a href="#5-개인별-쿼터-설정" class="headerlink" title="5. 개인별 쿼터 설정"></a>5. 개인별 쿼터 설정</h5><p>블록(block)이 현재 사용하는 키로바이트 수</p>
<p>소프트제한(soft)- 넘어갈수 있지만 기간이 있음<br>하드제한(hard) -완전히 못넘어감</p>
<p>소프트를 100으로 주고 하드를 150을 주었을 때<br>130을 저장하면 몇일 이내에 30메가를 줄여야함.</p>
<p>inodes- 파일의 개수를 제한하는것<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># edquota -u john //유저 존에 대해 쿼터를 수정하겠다.</div><div class="line"></div><div class="line">소프트 10240(10메가) 하드 15360(15메가)를 주고 저장</div><div class="line"></div><div class="line"># su - john  //존으로 로그인</div><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 test1</div><div class="line">      // 파일 복사</div><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 test2</div><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 test3</div><div class="line">쿼터가 넘어갔다고 경고 뜸</div><div class="line"># ls -l     //데이터가 잘 들어갔다.</div><div class="line"></div><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 test4</div><div class="line">sdb1: write failed, user block limit reached.</div><div class="line">cp: `test4&apos;에 쓰는 도중 오류 발생: 디스크 할당량이 초과됨</div><div class="line">cp: failed to extend `test4&apos;: 디스크 할당량이 초과됨</div><div class="line"> 오류뜬다.</div><div class="line"></div><div class="line"># ls -l</div><div class="line">//마지막 데이터는 용량이 다름 즉 짤려있음</div><div class="line"></div><div class="line"># quota  // 내가 얼마나쓰고 있는지 확인</div><div class="line">block 현재 사용량</div><div class="line">grace가 6일동안 봐준다는것.</div></pre></td></tr></table></figure></p>
<h5 id="6-존이-한것을-밴한테-그대로-적용하기"><a href="#6-존이-한것을-밴한테-그대로-적용하기" class="headerlink" title="6. 존이 한것을 밴한테 그대로 적용하기"></a>6. 존이 한것을 밴한테 그대로 적용하기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># exit    //존 로그아웃</div><div class="line"># repquota /userHome    //쿼터확인</div><div class="line"></div><div class="line"># edquota -p john bann</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;쿼터&quot;&gt;&lt;a href=&quot;#쿼터&quot; class=&quot;headerlink&quot; title=&quot;쿼터&quot;&gt;&lt;/a&gt;쿼터&lt;/h4&gt;&lt;p&gt;사용자마다 용량 제한을 두는것이다.&lt;br&gt;ex.클라우드 서비스를 가입하면 데이터 양이 한정되어있음.&lt;/p&gt;
&lt;h4 id=&quot;쿼터
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>6장. LVM 개념과 구현, RAID에 CentOS 설치</title>
    <link href="http://KKimSangHeon.github.io/2017/07/07/ThisIsLinux19/"/>
    <id>http://KKimSangHeon.github.io/2017/07/07/ThisIsLinux19/</id>
    <published>2017-07-07T03:42:04.000Z</published>
    <updated>2017-07-07T06:58:12.212Z</updated>
    
    <content type="html"><![CDATA[<h4 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h4><p>Logical Volume Manage<br>여러개의 하드디스크를 합쳐서 한 개의 파일 시스템으로 사용하는것으로 필요에 따라 다시 나눌 수 있다.<br>예로 2테라 두개를 합친 후 1테라 3테라로 나눠서 사용한다.</p>
<h5 id="물리-볼륨"><a href="#물리-볼륨" class="headerlink" title="물리 볼륨:"></a>물리 볼륨:</h5><p>sda1, sdb1 등의 파티션</p>
<h5 id="볼륨-그룹"><a href="#볼륨-그룹" class="headerlink" title="볼륨 그룹:"></a>볼륨 그룹:</h5><p>물리 볼륨을 합쳐서 1개의 물리그룹으로 만드는것.</p>
<h5 id="논리-볼륨"><a href="#논리-볼륨" class="headerlink" title="논리 볼륨:"></a>논리 볼륨:</h5><p>볼륨 그룹을 1개 이상으로 나눠서 논리 그룹으로 나눈 것</p>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><p>3기가, 2기가를 볼륨 그룹으로 만들고<br>3기가, 1기가, 1기가 논리 볼륨으로 만들어보자</p>
<h5 id="1-2기가-3기가-디스크-추가"><a href="#1-2기가-3기가-디스크-추가" class="headerlink" title="1. 2기가, 3기가 디스크 추가"></a>1. 2기가, 3기가 디스크 추가</h5><p>버츄어머신 에딧에서..</p>
<h5 id="2-파티션-설정"><a href="#2-파티션-설정" class="headerlink" title="2. 파티션 설정"></a>2. 파티션 설정</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># fdisk /dev/sdb</div><div class="line">n</div><div class="line">p</div><div class="line">1</div><div class="line">엔터</div><div class="line">엔터</div><div class="line">t</div><div class="line">8e</div><div class="line">w</div><div class="line"></div><div class="line"># fdisk /dev/sdc</div><div class="line">n</div><div class="line">p</div><div class="line">1</div><div class="line">엔터</div><div class="line">엔터</div><div class="line">t</div><div class="line">8e</div><div class="line">w</div></pre></td></tr></table></figure>
<h5 id="3-피지컬-볼륨으로-만들기"><a href="#3-피지컬-볼륨으로-만들기" class="headerlink" title="3. 피지컬 볼륨으로 만들기"></a>3. 피지컬 볼륨으로 만들기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># pvcreate /dev/sdb1</div><div class="line"># pvcreate /dev/sdc1</div></pre></td></tr></table></figure>
<h5 id="4-볼륨-그룹으로-만들기"><a href="#4-볼륨-그룹으로-만들기" class="headerlink" title="4. 볼륨 그룹으로 만들기"></a>4. 볼륨 그룹으로 만들기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vgcreate myVG /dev/sdb1 /dev/sdc1</div><div class="line"></div><div class="line"># vgdisplay   //볼륨그룹 확인</div></pre></td></tr></table></figure>
<h5 id="5-1기가-3기가-1기가로-나누자"><a href="#5-1기가-3기가-1기가로-나누자" class="headerlink" title="5. 1기가 3기가 1기가로 나누자"></a>5. 1기가 3기가 1기가로 나누자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># lvcreate --size 1G --name myLG1 myVG</div><div class="line"># lvcreate --size 3G --name myLG2 myVG</div><div class="line"># lvcreate --extents 100%FREE --name myLG3 myVG</div><div class="line">        //나머지 다써라</div><div class="line"></div><div class="line"># ls -l /dev/myVG   //확인</div></pre></td></tr></table></figure>
<h5 id="6-포멧하자"><a href="#6-포멧하자" class="headerlink" title="6. 포멧하자"></a>6. 포멧하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mkfs.ext4 /dev/myVG/myLG1</div><div class="line"># mkfs.ext4 /dev/myVG/myLG2</div><div class="line"># mkfs.ext4 /dev/myVG/myLG3</div></pre></td></tr></table></figure>
<h5 id="7-마운트하자"><a href="#7-마운트하자" class="headerlink" title="7. 마운트하자"></a>7. 마운트하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mkdir /lvm1  /lvm2  /lvm3</div><div class="line"># mount /dev/myVG/myLG1 /lvm1</div><div class="line"># mount /dev/myVG/myLG2 /lvm2</div><div class="line"># mount /dev/myVG/myLG3 /lvm3</div><div class="line"></div><div class="line"># df //확인</div></pre></td></tr></table></figure>
<h5 id="8-fstab에-등록하자"><a href="#8-fstab에-등록하자" class="headerlink" title="8. fstab에 등록하자"></a>8. fstab에 등록하자</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># vi /etc/fstab</div><div class="line"></div><div class="line">팁 yy 한다음에 pp하면 복붙이된다.</div><div class="line">/dev/myVG/myLG1         /lvm1    ext4     defaults      1 2</div><div class="line">/dev/myVG/myLG2         /lvm2    ext4     defaults      1 2</div><div class="line">/dev/myVG/myLG3         /lvm3    ext4     defaults      1 2</div></pre></td></tr></table></figure>
<h3 id="RAID-1-방식으로-디스크에-CentOS를-설치하자"><a href="#RAID-1-방식으로-디스크에-CentOS를-설치하자" class="headerlink" title="RAID 1 방식으로 디스크에 CentOS를 설치하자"></a>RAID 1 방식으로 디스크에 CentOS를 설치하자</h3><p>392p 보고 하자</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mdadm --detail -scan //확인해보자</div><div class="line"></div><div class="line"># mdadm --detail /dev/md/root   //자세히보자</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;LVM&quot;&gt;&lt;a href=&quot;#LVM&quot; class=&quot;headerlink&quot; title=&quot;LVM&quot;&gt;&lt;/a&gt;LVM&lt;/h4&gt;&lt;p&gt;Logical Volume Manage&lt;br&gt;여러개의 하드디스크를 합쳐서 한 개의 파일 시스템으로 사용하는것으로 필요에
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>6장. RAID6 와 RAID 1+0</title>
    <link href="http://KKimSangHeon.github.io/2017/07/07/ThisIsLinux18/"/>
    <id>http://KKimSangHeon.github.io/2017/07/07/ThisIsLinux18/</id>
    <published>2017-07-07T00:47:34.000Z</published>
    <updated>2017-07-07T02:18:58.856Z</updated>
    
    <content type="html"><![CDATA[<h4 id="RAID6"><a href="#RAID6" class="headerlink" title="RAID6"></a>RAID6</h4><p>패리티가 2개이기 때문에 신뢰성이 높다</p>
<h4 id="RAID-1-0"><a href="#RAID-1-0" class="headerlink" title="RAID 1+0"></a>RAID 1+0</h4><p>RAID 0,1 쓰는것</p>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><p>디스크 10개 스냅샷으로 돌아온 후 2기가 짜리 하나를 지워버린다.</p>
<h5 id="RAID-6-생성"><a href="#RAID-6-생성" class="headerlink" title="RAID 6 생성"></a>RAID 6 생성</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># mdadm --create /dev/md6 --level=6 --raid-devices=4 /dev/sdb1 /dev/sdc1 /dev/sdd1 /dev/sde1</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md6    //포멧</div><div class="line"></div><div class="line"># mkdir /raid6</div><div class="line"></div><div class="line"># mount /dev/md6 /raid6</div><div class="line"></div><div class="line"># df    //2기가 확인</div></pre></td></tr></table></figure>
<h5 id="RAID-1-0-생성"><a href="#RAID-1-0-생성" class="headerlink" title="RAID 1+0 생성"></a>RAID 1+0 생성</h5><p>이는 RAID 1을 두개 먼저 생성해야한다.</p>
<p>md2 ,md3를 RAID1으로 만들고 이 두개를 RAID 0으로 묶는다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># mdadm --create /dev/md2 --level=1 --raid-devices=2 /dev/sdf1 /dev/sdg1    </div><div class="line">            //raid1 md2로 생성</div><div class="line"></div><div class="line"># mdadm --create /dev/md3 --level=1 --raid-devices=2 /dev/sdh1 /dev/sdi1    </div><div class="line">            //raid1 md3로 생성</div><div class="line"></div><div class="line"># mdadm --create /dev/md10 --level=0 --raid-devices=2 /dev/md2 /dev/md3   </div><div class="line">            //md2, md3로 raid0 생성</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md10   //포멧</div><div class="line"></div><div class="line"># mkdir /raid10</div><div class="line"></div><div class="line"># mount /dev/md10  /raid10</div><div class="line"></div><div class="line"># df</div></pre></td></tr></table></figure>
<h5 id="잘동작하나-확인"><a href="#잘동작하나-확인" class="headerlink" title="잘동작하나 확인"></a>잘동작하나 확인</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 /raid6/testFile</div><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 /raid10/testFile</div><div class="line"></div><div class="line"># vi /etc/fstab</div><div class="line"></div><div class="line">/dev/md6    /raid6   ext4   defaults    1     2</div><div class="line">/dev/md10   /raid10  ext4   defaults    1     2</div><div class="line">//재부팅되도 마운트 유지하기 위해 추가</div></pre></td></tr></table></figure>
<h5 id="고장내보자"><a href="#고장내보자" class="headerlink" title="고장내보자"></a>고장내보자</h5><p>SCSI 3, 5 ,8, 9 디스크 없애고 부트</p>
<p>RAID 6 확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># mdadm --run /dev/md6    //md6 실행</div><div class="line"># df //확인</div><div class="line"># ls -l /raid6      //데이터 확인</div><div class="line"></div><div class="line"># mdadm --detail /dev/md6</div></pre></td></tr></table></figure></p>
<p>RAID 1+0 확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mdadm --run /dev/md2</div><div class="line"># mdadm --run /dev/md3</div><div class="line"></div><div class="line"># mdadm --detail /dev/md10</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;RAID6&quot;&gt;&lt;a href=&quot;#RAID6&quot; class=&quot;headerlink&quot; title=&quot;RAID6&quot;&gt;&lt;/a&gt;RAID6&lt;/h4&gt;&lt;p&gt;패리티가 2개이기 때문에 신뢰성이 높다&lt;/p&gt;
&lt;h4 id=&quot;RAID-1-0&quot;&gt;&lt;a href=&quot;#RAID
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>RAID 0,1,5 의 고장과 원상 복구</title>
    <link href="http://KKimSangHeon.github.io/2017/07/06/ThisIsLinux17/"/>
    <id>http://KKimSangHeon.github.io/2017/07/06/ThisIsLinux17/</id>
    <published>2017-07-06T03:33:07.000Z</published>
    <updated>2017-07-06T09:26:17.105Z</updated>
    
    <content type="html"><![CDATA[<p>SCSI 2,4,6,9를 고장내 놓고 잘동작하는 지 확인 해 보겠다.</p>
<p>잘 동작하나 확인하기 위해 고장내기 전에 파일을 옮긴다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># cp /boot/vmlinuz-3*  /raidLinear/testFile</div><div class="line"># cp /boot/vmlinuz-3*  /raid0/testFile</div><div class="line"># cp /boot/vmlinuz-3*  /raid1/testFile</div><div class="line"># cp /boot/vmlinuz-3*  /raid5/testFile</div><div class="line"></div><div class="line"># halt -p</div></pre></td></tr></table></figure><br>vmplayer을 켜고 SCSI 2,4,6,9 디스크를 제거<br>쫌 지나면 응급복구모드로 실행이됨<br>암호를 입력해주자</p>
<p>ls -l /dev/sd* 을 하니까 당겨져 있다. sdc가 sdb 이런식으로</p>
<p>RAID 1, 5 는 데이터가 살아있어야 한다.</p>
<h4 id="RAID-1-확인"><a href="#RAID-1-확인" class="headerlink" title="RAID 1 확인"></a>RAID 1 확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># df    //마운트가 다 끊겨있다.</div><div class="line"># mdadm --run /dev/md1   //강제로 가동시키는 것</div><div class="line">시작되었다.</div><div class="line"># df  //raid1가 마운트 된것을 확인.</div><div class="line"># ls -l /raid1    //데이터가 잘 있는지 확인</div><div class="line"># mdadm --detail /dev/md1   //하나는 살아있고 하나는 removed인것을 확인</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="RAID-5-확인"><a href="#RAID-5-확인" class="headerlink" title="RAID 5 확인"></a>RAID 5 확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># mdadm --run /dev/md5   //강제로 가동시키는 것</div><div class="line">시작되었다.</div><div class="line"># df  //raid5가 마운트 된것을 확인.</div><div class="line"># ls -l /raid5    //데이터가 잘 있는지 확인</div><div class="line"># mdadm --detail /dev/md5   //하나는 살아있고 하나는 removed인것을 확인</div></pre></td></tr></table></figure>
<h4 id="RAIDLinear-확인"><a href="#RAIDLinear-확인" class="headerlink" title="RAIDLinear  확인"></a>RAIDLinear  확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mdadm --run /dev/md9   //강제로 가동시키는 것</div><div class="line">실행할 수 없다. 결함을 허용하지 않음</div></pre></td></tr></table></figure>
<h4 id="RAID-0-확인"><a href="#RAID-0-확인" class="headerlink" title="RAID 0 확인"></a>RAID 0 확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># mdadm --run /dev/md0   //강제로 가동시키는 것</div><div class="line">실행할 수 없다. 결함을 허용하지 않음</div></pre></td></tr></table></figure>
<h4 id="시스템이-재대로-실행되도록-해보자"><a href="#시스템이-재대로-실행되도록-해보자" class="headerlink" title="시스템이 재대로 실행되도록 해보자"></a>시스템이 재대로 실행되도록 해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># mdadm --stop /dev/md9     //종료</div><div class="line"># mdadm --stop /dev/md0     //종료</div><div class="line"></div><div class="line"># vi /etc/fstab</div><div class="line">md9,md0 주석 하고</div><div class="line"># reboot</div><div class="line"></div><div class="line">리부트를 했는데 복구모드로 실행이 된다면 컨트롤 D를 누르고</div><div class="line">실행한 다음에 재 마운트를 해주면 된다.</div><div class="line"></div><div class="line"># df    //마운트가 되어있는것 확인.</div></pre></td></tr></table></figure>
<h4 id="새로운-디스크를-장착하여-원상복구를-시켜보자"><a href="#새로운-디스크를-장착하여-원상복구를-시켜보자" class="headerlink" title="새로운 디스크를 장착하여 원상복구를 시켜보자"></a>새로운 디스크를 장착하여 원상복구를 시켜보자</h4><p>Linear RAID, RAID 0 은 데이터를 살릴 순 없다.<br>그러나 RAID 1, RAID 5는 데이터를 살릴 수 있다.</p>
<p>vmplayer에서 디스크 4개를 1기가씩 주고 추가하자. 알아서 빈곳을 잘 찾아간다.</p>
<p>우리가 조금전 추가했던것은 sdc, sde, sdg, sdi 이다.<br>2,4,6,9 로 들어갔으므로..</p>
<p>RAID 0, Linear Raid는 새로 만들어주어야 한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># ls -l /dev/sd*    //</div><div class="line"># fdisk /dev/sdc~sdi 까지</div><div class="line">  n 입력</div><div class="line">  p 입력</div><div class="line">  엔터 엔터</div><div class="line">  t 입력</div><div class="line">  fd 입력</div><div class="line">  w 입력</div><div class="line"></div><div class="line"># mdadm --stop /dev/md9   //다시만들기위해 stop</div><div class="line"># mdadm --create /dev/md9 --level=linear --raid-devices=2 /dev/sdb1 /dev/sdc1</div><div class="line">#mdadm --detail /dev/md9 //확인해보자</div><div class="line"></div><div class="line"># mdadm --stop /dev/md0   //다시만들기위해 stop</div><div class="line"># mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/sdd1 /dev/sde1</div><div class="line"># mdadm --detail /dev/md9 //확인해보자</div></pre></td></tr></table></figure></p>
<p>RAID 1, RAID 5는 새로만들면 안되고 추가해주어야 한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># mdadm /dev/md1 --add /dev/sdg1</div><div class="line"></div><div class="line"># mdadm /dev/md5 --add /dev/sdi1</div><div class="line"></div><div class="line"># vi /etc/fstab</div><div class="line"></div><div class="line">/dev/md9    /raidLinear   ext4    defaults    1 2</div><div class="line">/dev/md0    /raid0   ext4         defaults    1 2</div><div class="line">/dev/md1    /raid1   ext4    defaults    1 2</div><div class="line">/dev/md5    /raid5   ext4    defaults    1 2</div><div class="line"></div><div class="line">이렇게 바꿔준다.</div><div class="line"># reboot</div><div class="line"># df      //마운트 확인.</div></pre></td></tr></table></figure></p>
<p>데이터를 한번 확인해보자.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># ls -l /raid0</div><div class="line">drwx------ 2 root root   16384  7월  6 17:26 lost+found</div><div class="line">-rwxr-xr-x 1 root root 4902656  7월  6 17:31 testFile</div><div class="line"></div><div class="line"># ls -l /raid1</div><div class="line">drwx------ 2 root root   16384  7월  6 17:27 lost+found</div><div class="line">-rwxr-xr-x 1 root root 4902656  7월  6 17:31 testFile</div><div class="line"></div><div class="line"># ls -l /raid5</div><div class="line">drwx------ 2 root root   16384  7월  6 17:29 lost+found</div><div class="line">-rwxr-xr-x 1 root root 4902656  7월  6 17:31 testFile</div><div class="line"></div><div class="line"># ls -l /raidLinear</div><div class="line">drwx------ 2 root root   16384  7월  6 17:25 lost+found</div><div class="line">-rwxr-xr-x 1 root root 4902656  7월  6 17:31 testFile</div></pre></td></tr></table></figure>
<p>raid 1그리고 raid5 는 데이터가 있을것이라 예상했지만 raid0 그리고 raidLinear도 데이터가 존재한다. 어떻게 된 것일까? 운이 좋게 지워지지않은 영역에 존재하는 것일 것이다. 그러므로 데이터를 신뢰 할 수 없으며 이는 포멧을 해주는 것이 좋다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># umount /dev/md0   //포멧하기전에 마운트를 끊음</div><div class="line"># umount /dev/md9</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md0  //포멧</div><div class="line"># mkfs.ext4 /dev/md9</div><div class="line"></div><div class="line"># reboot    //리부트를 하지않고 바로 마운트를 해줘도됨.</div><div class="line">          //어차피 리부트하면 마운트되어있으니까 아무거나 선택!</div></pre></td></tr></table></figure>
<p>raid 1, raid 5 의 고장난 디스크에 대해서 따로 작업을 해 줘야할줄 알았는데 –add만 하면 되어서 생각보다 간단하다고 생각했다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SCSI 2,4,6,9를 고장내 놓고 잘동작하는 지 확인 해 보겠다.&lt;/p&gt;
&lt;p&gt;잘 동작하나 확인하기 위해 고장내기 전에 파일을 옮긴다.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>6장. RAID 정의 및 개념,구현</title>
    <link href="http://KKimSangHeon.github.io/2017/07/06/ThisIsLinux16/"/>
    <id>http://KKimSangHeon.github.io/2017/07/06/ThisIsLinux16/</id>
    <published>2017-07-06T00:13:09.000Z</published>
    <updated>2017-07-06T07:00:53.610Z</updated>
    
    <content type="html"><![CDATA[<h4 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h4><p>Redundant Array of Inexpensive Disks<br>여러개의 디스크를 하나처럼 사용하는 RAID를 알아보자<br>비용절감 + 신뢰성 향상 + 성능 향상<br>1테라 디스크 3개를 하나로 묶어서 3테라 디스크처럼 쓴다</p>
<h5 id="하드웨어-RAID"><a href="#하드웨어-RAID" class="headerlink" title="하드웨어 RAID"></a>하드웨어 RAID</h5><p>여러개의 하드디스크를 가지고 장비를 만들어서 사용. 장비업체에서 제공하기 떄문에 사용법이 다를 수 있다. 그리고 상당히 고가이다. 하드웨어RAID가 안정성이 높다.</p>
<h5 id="소프트웨어-RAID"><a href="#소프트웨어-RAID" class="headerlink" title="소프트웨어 RAID"></a>소프트웨어 RAID</h5><p>디스크를 장착만하면 운영체제 레벨에서 하나로 묶을 수 있다.</p>
<h5 id="Linear-RAID-339p-그림보기"><a href="#Linear-RAID-339p-그림보기" class="headerlink" title="Linear RAID (339p 그림보기)"></a>Linear RAID (339p 그림보기)</h5><p>최소 2개이상의 디스크를 하나로 묶음<br>앞 디스크 부터 차례로 저장<br>100TB 100TB 100TB 를 사용하면 총 300TB가 된다. 즉 공간효율성이 100%임.</p>
<h5 id="RAID-0-339p-그림보기"><a href="#RAID-0-339p-그림보기" class="headerlink" title="RAID 0 (339p 그림보기)"></a>RAID 0 (339p 그림보기)</h5><p>모든 디스크에 동시에 저장되는 개념<br>그러므로 하드디스크가 3개면 /3 시간으로 저장됨<br>신뢰성이 낮다.<br>빠르지만 전부 잃어버려도 큰 문제가 되지 않는 자료가 적당하다.<br>3TB 100TB 100TB 를 사용하면 총 9TB가 된다. 즉 디스크 크기가 다르면 공간효율성이 100%가 되지 않음.<br>그래서 RAID를 구성할 떈 같은회사 같은 용량의 디스크로 구성한다.<br>디스크 세개중에 하나만 고장나도 디스크를 못쓴다.</p>
<h5 id="RAID-1"><a href="#RAID-1" class="headerlink" title="RAID 1"></a>RAID 1</h5><p>미러링이라 부름<br>1TB 1TB 를 사용하면 1TB 사용가능<br>결함 허용을 제공= 신뢰성 높음. 즉 둘중에 하나가 고장나도 데이터가 보존된다.<br>공간효율이 나쁘므로 비용이 비싸다는 단점이 있다.</p>
<h5 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID 5"></a>RAID 5</h5><p>RAID 2,3,4의 장점을 포용하기 때문에 2,3,4를 사용할 필요가 없다.<br>RAID1의 데이터 안정성 +RAID0의 공간 효율성을 추구 디스크 개수 -1개의 공간을 사용. 즉 4개일 경우 3개를 사용(75%) 100개일 경우 99개를 사용(99%)<br>즉 가격이 저렴하면서 안정적인것.<br>최소한 3개 이상의 하드디스크가 필요하며 오류가 발생했을 때는 패리티(Parity)를 이용해서 데이터를 복구<br>결함 허용을 제공 - 즉 디스크 하나가 고장나도 사용 복구 가능<br>하지만 디스크가 하나가 고장났을 때는 복구가 가능하지만 디스크가 2개가 고장날 경우에는 복구 불가능.<br>그래서 100개를 사용하였을 경우에는 불안하다.(2개 이상 고장날 확률이 높아지므로)<br>즉 적은 디스크를 활용할 경우 공간효율은 낮아지지만 신뢰도는 높아진다.<br>일반적으로 RAID 5는 7개에서 10개정도의 디스크로 구성</p>
<h5 id="RAID-6"><a href="#RAID-6" class="headerlink" title="RAID 6"></a>RAID 6</h5><p>패리트를 2개 쓴다. 즉 디스크가 2개가 고장나도 복구가능. 최소 4개이상의 디스크가 필요함.(패리티를 2개 쓰므로)<br>패리티를 2개 쓰는 알고리즘의 효율성이 떨어져서 성능이 떨어지는 단점이 있어 많이 사용하지는 않음.</p>
<h5 id="RAID1-0-RAID-RAID0"><a href="#RAID1-0-RAID-RAID0" class="headerlink" title="RAID1 + 0 = RAID + RAID0"></a>RAID1 + 0 = RAID + RAID0</h5><p>신뢰성(안정성)과 성능(속도)이 동시에 뛰어난 방법<br>RAID1로 구성된것을 RAID 0 으로 묶음. 그림참고</p>
<h5 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h5><p>SCSI 0:1 부터 0:10 까지 진행.</p>
<p>SCSI 0:1  SCSI 0:2 - Linear RAID</p>
<p>SCSI 0:3  SCSI 0:4 - RAID 0</p>
<p>SCSI 0:5  SCSI 0:6 - RAID 1</p>
<p>SCSI 0:8  SCSI 0:9  SCSI 0:10 - RAID 5</p>
<p>SCSI 0:1 만 2GB로 구성하고 나머지는 다 1GB로 구성</p>
<p>에디트 쪽에서 디스크 2기가 1개 1기가 8개 추가.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ls -l /dev/sd*      //장착이 잘 되었나 확인</div></pre></td></tr></table></figure>
<p>9번 반복<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># fdisk /dev/sdb ~sdj 까지 반복</div><div class="line">n   p   엔터 엔터</div><div class="line">p //로 확인해보면 시스템이 리눅스인데 RAID로 변경해야한다.</div><div class="line">t 엔터</div><div class="line">L 누르면 도움말이 나온다.</div><div class="line">fd를 입력 후 엔터</div><div class="line">p를 눌러 확인</div><div class="line">w를 눌러 저장</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ls -l /dev/sd*      //장착이 잘 되었나 확인</div></pre></td></tr></table></figure>
<h4 id="과정-설명"><a href="#과정-설명" class="headerlink" title="과정 설명"></a>과정 설명</h4><p>1.mdadm 명령어로 논리 볼륨 생성<br>2.mkfs.ext4 명령어로 파일시스템 생성(포멧)<br>3.mount 적용<br>위 3가지 과정은 6장에서 하드디스크 1개추가 과정과 같다.</p>
<h4 id="Linear-RAID-만들기"><a href="#Linear-RAID-만들기" class="headerlink" title="Linear RAID 만들기"></a>Linear RAID 만들기</h4><p>sdb1 sdc1 이용<br>mdadm RAID를 만들고 없애는 명령어</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># fdisk -l /dev/sdb /dev/sdc // 아까 한것이 잘 적용되었나 확인</div><div class="line"></div><div class="line"># mdadm --create /dev/md9 --level=linear --raid-devices=2 /dev/sdb1 /dev/sdc1</div><div class="line">        //RAID md9를 만드는데 리니어로 디바이스는</div><div class="line">        //개수 2개로 2개는 /dev/sdb1 /dev/sdc1 로</div><div class="line"></div><div class="line"># mdadm --detail --scan     //돌고있는지 확인</div><div class="line"># mdadm --detail /dev/md9   //md9에 대해 자세히 보자</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md9    //포멧하자</div><div class="line"></div><div class="line"># mkdir /raidLinear   //디렉토리 생성</div><div class="line"></div><div class="line"># mount /dev/md9 /raidLinear/ //마운트</div><div class="line"></div><div class="line"># df      //마운트 확인</div><div class="line"># vi /etc/fstab     //재부팅하면 마운트가 풀리므로 설정</div><div class="line"></div><div class="line">/dev/md9    /raidLinear   ext4    defaults    0 0    </div><div class="line">맨 아래 추가</div><div class="line"></div><div class="line"># reboot</div><div class="line"># df    //마운트 확인</div></pre></td></tr></table></figure>
<h4 id="RAID-0-만들기"><a href="#RAID-0-만들기" class="headerlink" title="RAID 0 만들기"></a>RAID 0 만들기</h4><p>sdd sde로 한다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># mdadm --create /dev/md0 --level=0 --raid-devices=2 /dev/sdd1 /dev/sde1</div><div class="line"></div><div class="line"># mdadm --detail --scan     //돌고있는지 확인</div><div class="line"># mdadm --detail /dev/md0   //md9에 대해 자세히 보자</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md0    //포멧하자</div><div class="line"></div><div class="line"># mkdir /raid0   //디렉토리 생성</div><div class="line"></div><div class="line"># mount /dev/md0 /raid0/ //마운트</div><div class="line"></div><div class="line"># df      //마운트 확인</div><div class="line"></div><div class="line"># vi /etc/fstab     //재부팅하면 마운트가 풀리므로 설정</div><div class="line"></div><div class="line">/dev/md0    /raid0   ext4    defaults    0 0   </div><div class="line">추가</div></pre></td></tr></table></figure></p>
<h4 id="RAID-1-1"><a href="#RAID-1-1" class="headerlink" title="RAID 1"></a>RAID 1</h4><p>sdf sdg 사용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># mdadm --create /dev/md1 --level=1 --raid-devices=2 /dev/sdf1 /dev/sdg1</div><div class="line">y입력  // raid1은 부트 디바이스로 사용 할 수 없는데 만들겠냐는 뜻</div><div class="line"></div><div class="line"># mdadm --detail /dev/md1   //확인해보자</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md1    //포멧하자</div><div class="line"></div><div class="line"># mkdir /raid1   //디렉토리 생성</div><div class="line"></div><div class="line"># mount /dev/md1 /raid1/ //마운트</div><div class="line"></div><div class="line"># df      //마운트 확인</div><div class="line"></div><div class="line"># vi /etc/fstab     //재부팅하면 마운트가 풀리므로 설정</div><div class="line">/dev/md1    /raid1   ext4    defaults    0 0   </div><div class="line">추가</div></pre></td></tr></table></figure></p>
<h4 id="RAID-5-1"><a href="#RAID-5-1" class="headerlink" title="RAID 5"></a>RAID 5</h4><p>sdh sdi sdj 사용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># mdadm --create /dev/md5 --level=5 --raid-devices=3 /dev/sdh1 /dev/sdi1 /dev/sdj1</div><div class="line"></div><div class="line">망가졌다는 메세지 나오는데 무시하면된다. (컴퓨터가 착각함!)</div><div class="line"></div><div class="line"># mdadm --detail /dev/md5   //확인해보자</div><div class="line"></div><div class="line"># mkfs.ext4 /dev/md5    //포멧하자</div><div class="line"></div><div class="line"># mkdir /raid5   //디렉토리 생성</div><div class="line"></div><div class="line"># mount /dev/md5 /raid5/ //마운트</div><div class="line"></div><div class="line"># df      //마운트 확인</div><div class="line"></div><div class="line"># vi /etc/fstab     //재부팅하면 마운트가 풀리므로 설정</div><div class="line"></div><div class="line">/dev/md5    /raid5   ext4    defaults    0 0  </div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;RAID&quot;&gt;&lt;a href=&quot;#RAID&quot; class=&quot;headerlink&quot; title=&quot;RAID&quot;&gt;&lt;/a&gt;RAID&lt;/h4&gt;&lt;p&gt;Redundant Array of Inexpensive Disks&lt;br&gt;여러개의 디스크를 하나처럼 사용하는 RA
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>6장. IDE/SCSI 장치 구성, 하드디스크 1개 추가</title>
    <link href="http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux15/"/>
    <id>http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux15/</id>
    <published>2017-07-05T07:33:36.000Z</published>
    <updated>2017-07-05T11:05:49.132Z</updated>
    
    <content type="html"><![CDATA[<p>하드디스크 관리는 관리자 입장에서 기본적인것이다.<br>디스크가 모자르면 디스크를 추가해야한다..</p>
<p>이런걸 어떻게 할지 알아보자</p>
<h4 id="IDE-SCSI-장치에-대해"><a href="#IDE-SCSI-장치에-대해" class="headerlink" title="IDE SCSI 장치에 대해"></a>IDE SCSI 장치에 대해</h4><p>IDE는 케이블을 2개 꽂을수가 있다. 여기에 하드디스크를 장착하거나 DVD롬을 장착할 수 있다. 즉 두개의 IDE가 있으면 4개를 장착할 수 있다. 0:0 , 0:1, 1:0 , 1:1 이렇게 구분된다(4개일 경우)</p>
<p>SCSI는 총 16개의 SCSI 하드디스크를 꽂을 수 있는 케이블이 따져있다. 0,7번은 VMware가 사용하므로 사용할 수 없다.<br>마찬가지로 SCSI 0:0 ,0:1 로 구분된다.</p>
<p>326p를 통해 그림으로 확인가능</p>
<p>우리가 80GB 의 하드디스크를 추가했는데 이를 sda라 그런다<br>만일 하나더 추가하면 sdb라 그런다.<br>정식이름은 /dev/sda 이다.<br>여기서 파티션을 나누면 sda1,sda2로 나뉜다. 즉 sda는 하드디스크 자체를 의미하며 sda1은 파티션1 sda2는 파티션2를 의미한다.</p>
<p>땅 자체를 사는것을 하드디스크를 추가하는것으로 보면되고 축구장으로 사용하기 위해 특정부분에 선을 긋는것을 파티션을 나눈다고 보면된다. 또한 파티션은 특정디렉터리에 마운트를 해줘야함.</p>
<h4 id="하드디스크-1개-장착과정"><a href="#하드디스크-1개-장착과정" class="headerlink" title="하드디스크 1개 장착과정"></a>하드디스크 1개 장착과정</h4><p>1.SCSI 0:1에 물리적인 하드디스크 하나 장착 이는 /dev/sdb이다.</p>
<p>2.fdisk 명령어를 통해 파티션을 나눔(실습에서는 파티션1개로)./dev/sdb1 파티션이 생긴다.</p>
<p>3.파티션을 사용하기 위해서는 포멧을 해줘야한다.(mkfs.ext4를 사용)</p>
<p>4.그러면 완전히 준비된 하드디스크가 생기는데 이를 특정 폴더에 마운트해야한다.</p>
<p>5.마운트는 컴퓨터를 끄면 마운트가 끊어지므로 /etc/fstab 파일을 편집해 주어야 한다.</p>
<hr>
<h5 id="1-SCSI-0-1에-물리적인-하드디스크-하나-장착-이는-dev-sdb이다"><a href="#1-SCSI-0-1에-물리적인-하드디스크-하나-장착-이는-dev-sdb이다" class="headerlink" title="1.SCSI 0:1에 물리적인 하드디스크 하나 장착 이는 /dev/sdb이다."></a>1.SCSI 0:1에 물리적인 하드디스크 하나 장착 이는 /dev/sdb이다.</h5><p>에디트에서 애드를 선택하고 다음<br>스카시를 선택하고 다음<br>맨위를 하고 다음<br>1기가로 선택하고 싱글파일 선택하고 다음<br>어드밴스드를 눌러 0:1로 되어있는것을 확인</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ls -l /dev/sd*</div><div class="line">brw-rw---- 1 root disk 8,  0  7월  5 18:02 /dev/sda</div><div class="line">brw-rw---- 1 root disk 8,  1  7월  5 18:02 /dev/sda1</div><div class="line">brw-rw---- 1 root disk 8,  2  7월  5 18:02 /dev/sda2</div><div class="line">brw-rw---- 1 root disk 8, 16  7월  5 18:02 /dev/sdb</div><div class="line"></div><div class="line">sda는 초기 설정때 설정한것. 파티션을 두개로 나눠서 sda1, sda2로 나뉜다.</div><div class="line"></div><div class="line">왜 sdb1은 없지? 파티션을 나누지 않았으므로!</div></pre></td></tr></table></figure>
<h5 id="2-fdisk-명령어를-통해-파티션을-나눔-실습에서는-파티션1개로-dev-sdb1-파티션이-생긴다"><a href="#2-fdisk-명령어를-통해-파티션을-나눔-실습에서는-파티션1개로-dev-sdb1-파티션이-생긴다" class="headerlink" title="2.fdisk 명령어를 통해 파티션을 나눔(실습에서는 파티션1개로)./dev/sdb1 파티션이 생긴다."></a>2.fdisk 명령어를 통해 파티션을 나눔(실습에서는 파티션1개로)./dev/sdb1 파티션이 생긴다.</h5><p>파티션을 나눠보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># fdisk /dev/sdb</div><div class="line">n       //새로운 파티션 추가</div><div class="line">p    // p(primary)는 주 파티션 e(extended)는 확장파티션을 의미</div><div class="line">      //p는 4개까지 나눌 수 있음</div><div class="line">      //4개 이상하고싶으면 3개는 p로하고 하나는 e로 잡아서</div><div class="line">      //e 파티션안을 나눠서 늘리면 된다. 이는 굉장히 드문경우</div><div class="line">      //일반적으로는 p를 쓰면 충분하다.</div><div class="line">1    //sdb1로 하겠다.      </div><div class="line">엔터       // 2047까지는 시스템 부분이므로</div><div class="line">          // 어디서 부터 시작할꺼냐. 엔터하면 2048부터</div><div class="line">엔터       //끝까지 쓰겠다.   </div><div class="line">p     //최종확인</div><div class="line">w     //적용      </div><div class="line"></div><div class="line"># ls -l /dev/sd*      //생성된 것 확인</div><div class="line">brw-rw---- 1 root disk 8,  0  7월  5 18:02 /dev/sda</div><div class="line">brw-rw---- 1 root disk 8,  1  7월  5 18:02 /dev/sda1</div><div class="line">brw-rw---- 1 root disk 8,  2  7월  5 18:02 /dev/sda2</div><div class="line">brw-rw---- 1 root disk 8, 16  7월  5 18:11 /dev/sdb</div><div class="line">brw-rw---- 1 root disk 8, 17  7월  5 18:11 /dev/sdb1</div></pre></td></tr></table></figure><br>파일 시스템을 생성하자.</p>
<h5 id="3-파티션을-사용하기-위해서는-포멧을-해줘야한다-mkfs-ext4를-사용"><a href="#3-파티션을-사용하기-위해서는-포멧을-해줘야한다-mkfs-ext4를-사용" class="headerlink" title="3.파티션을 사용하기 위해서는 포멧을 해줘야한다.(mkfs.ext4를 사용)"></a>3.파티션을 사용하기 위해서는 포멧을 해줘야한다.(mkfs.ext4를 사용)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkfs.ext4 /dev/sdb1</div></pre></td></tr></table></figure>
<h5 id="4-그러면-완전히-준비된-하드디스크가-생기는데-이를-특정-폴더에-마운트해야한다"><a href="#4-그러면-완전히-준비된-하드디스크가-생기는데-이를-특정-폴더에-마운트해야한다" class="headerlink" title="4.그러면 완전히 준비된 하드디스크가 생기는데 이를 특정 폴더에 마운트해야한다."></a>4.그러면 완전히 준비된 하드디스크가 생기는데 이를 특정 폴더에 마운트해야한다.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># mkdir /mydata</div><div class="line"># mount /dev/sdb1 /mydata</div><div class="line"></div><div class="line"># df // 마운트 된것을 확인</div><div class="line"></div><div class="line"># cp /boot/vmlinuz-3.10.0-123.el7.x86_64 /mydata/data1  // 새로운 디스크에 데이터 복사</div><div class="line"></div><div class="line"># df //확인 (용량 늘어난것 확인)</div></pre></td></tr></table></figure>
<h5 id="5-마운트는-컴퓨터를-끄면-마운트가-끊어지므로-etc-fstab-파일을-편집해-주어야-한다"><a href="#5-마운트는-컴퓨터를-끄면-마운트가-끊어지므로-etc-fstab-파일을-편집해-주어야-한다" class="headerlink" title="5.마운트는 컴퓨터를 끄면 마운트가 끊어지므로 /etc/fstab 파일을 편집해 주어야 한다."></a>5.마운트는 컴퓨터를 끄면 마운트가 끊어지므로 /etc/fstab 파일을 편집해 주어야 한다.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vi /etc/fstab   </div><div class="line">/dev/sdb1   /mydata   ext4    defaults     0 0 입력 후 vi종료</div><div class="line">                    //dev/sdb1을 /mydata에 마운트하는것. ext4를 이용해</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;하드디스크 관리는 관리자 입장에서 기본적인것이다.&lt;br&gt;디스크가 모자르면 디스크를 추가해야한다..&lt;/p&gt;
&lt;p&gt;이런걸 어떻게 할지 알아보자&lt;/p&gt;
&lt;h4 id=&quot;IDE-SCSI-장치에-대해&quot;&gt;&lt;a href=&quot;#IDE-SCSI-장치에-대해&quot; cla
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>5장. 리눅스에 Windows 설치 KDE데스크톱 설치</title>
    <link href="http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux14/"/>
    <id>http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux14/</id>
    <published>2017-07-05T06:37:05.000Z</published>
    <updated>2017-07-05T07:35:30.122Z</updated>
    
    <content type="html"><![CDATA[<h4 id="리눅스-안에서-윈도우를-깔아보자"><a href="#리눅스-안에서-윈도우를-깔아보자" class="headerlink" title="리눅스 안에서 윈도우를 깔아보자"></a>리눅스 안에서 윈도우를 깔아보자</h4><p>CentOS에서 제공하는 가상머신을 이용하자<br>즉 가상머신에서 가상머신을 만드는…<br>램 올리고, 가상화 켜주고 311p참고</p>
<p>iso 파일을 받고 내폴더에 붙여넣기 해준다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mkdir /iso</div><div class="line"># mv 600* /iso    //파일이름이 600으로 시작함.</div><div class="line"># ls -l /iso</div></pre></td></tr></table></figure>
<p>실습에서는 313p 의 2-0을 생략한다.<br>프로그램 -시스템 도구 -가상머진 관리자<br>로컬 선택 후 새가상머신 생성 왼쪽위 그림(노란색)<br>Win2008 입력후 로컬설치매체 선택후 앞으로<br>iso파일 선택하고 윈도우서버 2008 선택하고 앞으로<br>그대로 두고 앞으로<br>설치전에 사용자 설정 선택 후 완료<br>디스플레이를 VNC로 하고 적용<br>왼쪽 위 설치시작</p>
<h4 id="KDE-데스크톱을-설치해보자"><a href="#KDE-데스크톱을-설치해보자" class="headerlink" title="KDE 데스크톱을 설치해보자"></a>KDE 데스크톱을 설치해보자</h4><p>센토스는 기본적으로 그놈데스크탑이 들어있다. 윈도우와 비슷한 KDE 데스크탑을 운영할 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ yum grouplist | grep KDE  //KDE 패키지그룹을 조회</div><div class="line">su -c &apos;yum -y groupinstall &quot;KDE Plasma Workspaces&quot;&apos;</div><div class="line">          //조회됨</div><div class="line"></div><div class="line">$ su -c &apos;yum -y groupinstall &quot;KDE Plasma Workspaces&quot;&apos;</div><div class="line">        //루트권한으로 &apos;&apos;안에 있는 명령어 실행(KDE 설치)</div></pre></td></tr></table></figure><br>자동로그인 해제 . 321p 참고<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ reboot</div></pre></td></tr></table></figure><br>톱니 누르고 KDE Plasma 작업공간 선택후 암호 입력 후 로그인</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;리눅스-안에서-윈도우를-깔아보자&quot;&gt;&lt;a href=&quot;#리눅스-안에서-윈도우를-깔아보자&quot; class=&quot;headerlink&quot; title=&quot;리눅스 안에서 윈도우를 깔아보자&quot;&gt;&lt;/a&gt;리눅스 안에서 윈도우를 깔아보자&lt;/h4&gt;&lt;p&gt;CentOS에서 제
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>5장. 노틸러스, FireFox업그레이드, 기타 X윈도 유틸리티</title>
    <link href="http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux13/"/>
    <id>http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux13/</id>
    <published>2017-07-05T04:47:34.000Z</published>
    <updated>2017-07-05T06:36:48.389Z</updated>
    
    <content type="html"><![CDATA[<h4 id="노틸러스"><a href="#노틸러스" class="headerlink" title="노틸러스"></a>노틸러스</h4><p>윈도우 탐색기와 비슷하다.<br>실행법 : 프로그램-보조프로그램-파일</p>
<p>내폴더가 홈 디렉토리이다.<br>컴퓨터가 / 폴더이다.<br>rpm 파일도 설치 가능<br>복붙도 가능 컨트롤 씨브이<br>289p 참고</p>
<h4 id="파이어폭스-업그레이드"><a href="#파이어폭스-업그레이드" class="headerlink" title="파이어폭스 업그레이드"></a>파이어폭스 업그레이드</h4><p>설치하고<br>압축풀고</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># mv firefox /usr/local   //압축푼것 위치이동</div><div class="line"># chown -R root.root /usr/local/firefox/ 루트에게 권한줌</div><div class="line"># cd /usr/local/bin</div><div class="line"># ln -s /usr/local/firefox/firefox . //링크를 걸어줌</div><div class="line"></div><div class="line">파폭을 실행하면 에러가 나는데</div><div class="line"></div><div class="line"># cd /usr/local/firefox/browser/extensions/</div><div class="line"># rm -rf *</div><div class="line">해주고 리부트</div></pre></td></tr></table></figure>
<h4 id="어도비리더-설치"><a href="#어도비리더-설치" class="headerlink" title="어도비리더 설치"></a>어도비리더 설치</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget http://download.hanbit.co.kr/centos/7/AdobeReader_kor-8.1.7-1.i486.rpm</div><div class="line"></div><div class="line"># su -c &apos;yum -y localinstall Adobe*&apos;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;노틸러스&quot;&gt;&lt;a href=&quot;#노틸러스&quot; class=&quot;headerlink&quot; title=&quot;노틸러스&quot;&gt;&lt;/a&gt;노틸러스&lt;/h4&gt;&lt;p&gt;윈도우 탐색기와 비슷하다.&lt;br&gt;실행법 : 프로그램-보조프로그램-파일&lt;/p&gt;
&lt;p&gt;내폴더가 홈 디렉토리이다.&lt;b
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>5장. X윈도 테마, GRUB 배경화면</title>
    <link href="http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux12/"/>
    <id>http://KKimSangHeon.github.io/2017/07/05/ThisIsLinux12/</id>
    <published>2017-07-05T02:57:03.000Z</published>
    <updated>2017-07-05T04:38:22.934Z</updated>
    
    <content type="html"><![CDATA[<p>이 챕터는 책에서 중요도가 가장 떨어진다!<br>서버관리자가 되었을 때 리눅스를 PC로 사용하는 사람에게 도움을 주기위해 알아둘 필요는 있다.</p>
<h4 id="테마-설치하기"><a href="#테마-설치하기" class="headerlink" title="테마 설치하기"></a>테마 설치하기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa gnome-tweak-tool  //설치되어있나 확인</div><div class="line">$ gnome-tweak-tool    //툴 켜서 설정변경</div></pre></td></tr></table></figure>
<h4 id="GRUB-이미지-설정"><a href="#GRUB-이미지-설정" class="headerlink" title="GRUB 이미지 설정"></a>GRUB 이미지 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ su -c &apos;yum -y install grub2-starfield-theme&apos;</div><div class="line">  //암호입력    //su -c는 슈퍼바이저 권한으로 실행하는것</div><div class="line">$ vi /etc/default/grub</div><div class="line"></div><div class="line">GRUB_TIMEOUT=5</div><div class="line">GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</div><div class="line">GRUB_DEFAULT=saved</div><div class="line">GRUB_DISABLE_SUBMENU=true</div><div class="line">#GRUB_TERMINAL_OUTPUT=&quot;console&quot;     //여기 주석처리</div><div class="line">GRUB_CMDLINE_LINUX=&quot;rd.lvm.lv=centos/swap vconsole.font=latarcyrheb-sun16 rd.lvm.lv=centos/root crashkernel=auto  vconsole.keymap=us rhgb quiet&quot;</div><div class="line">GRUB_DISABLE_RECOVERY=&quot;true&quot;</div><div class="line">GRUB_THEME=&quot;/boot/grub2/themes/system/theme.txt&quot;  //여기추가</div><div class="line"></div><div class="line">vi 저장후 종료</div></pre></td></tr></table></figure>
<p>이미지 파일을 centos폴더에 저장 (ball.png)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /home/centos/ball.png /boot/grub2/themes/system</div></pre></td></tr></table></figure><br>실행하여 그림 이동</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vi /boot/grub2/themes/system/theme.txt //</div><div class="line">:set number</div><div class="line"></div><div class="line">34행가서 이미지 파일이름 변경</div><div class="line"># grub2-mkconfig -o /boot/grub2/grub.cfg  //적용</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;이 챕터는 책에서 중요도가 가장 떨어진다!&lt;br&gt;서버관리자가 되었을 때 리눅스를 PC로 사용하는 사람에게 도움을 주기위해 알아둘 필요는 있다.&lt;/p&gt;
&lt;h4 id=&quot;테마-설치하기&quot;&gt;&lt;a href=&quot;#테마-설치하기&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 응급복구, GRUB, 커널 컴파일</title>
    <link href="http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux11/"/>
    <id>http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux11/</id>
    <published>2017-07-04T07:09:17.000Z</published>
    <updated>2017-07-04T10:28:12.394Z</updated>
    
    <content type="html"><![CDATA[<h4 id="응급복구"><a href="#응급복구" class="headerlink" title="응급복구"></a>응급복구</h4><p>261p 참고<br>이게 문제가 될 소지가 있지않냐?<br>그래서 처음 켤때 선택하는거에서 암호를 걸어야 한다.</p>
<h4 id="GRUB-부트로더"><a href="#GRUB-부트로더" class="headerlink" title="GRUB 부트로더"></a>GRUB 부트로더</h4><p>/etc/default/grub 파일과 /etc/grup.d/ 디렉터리의 파일을 수정한 후 ‘grub2-mkconfig’ 명령어를 실행해 설정함</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># vi /etc/default/grub</div><div class="line">timeout = 30 으로 변경</div><div class="line">distributor = &quot;Hello&quot; 로 변경</div><div class="line"># grub2-mkconfig -o /boot/grub2/grub.cfg // 변경사항 반영</div><div class="line"></div><div class="line">//여기서 부터 선택하는 곳에서 e 키 못누르게 비번 설정하는것</div><div class="line"># vi /etc/grub.d/00_header</div><div class="line">맨 아래 가서 다음코드 추가</div><div class="line">cat &lt;&lt; EOF</div><div class="line">set superusers=&quot;thisuser&quot;</div><div class="line">password thisuser 4321</div><div class="line">EOF</div><div class="line">여기까지!</div><div class="line">vi 빠져나와서</div><div class="line"># grub2-mkconfig -o /boot/grub2/grub.cfg // 변경사항 반영</div><div class="line">$ reboot</div><div class="line">선택하는곳에서 e 누르면 암호 누르도록 함</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="커널"><a href="#커널" class="headerlink" title="커널"></a>커널</h4><p>커널 : 하드웨어를 제어하는 기능<br>모든 하드웨어를 제어하는 코드를 다 넣으면 커널이 너무 커지고 무거워진다. 그러므로 잘 안쓰는 하드웨어 코드는 모듈에 빼내서 필요할때마다 사용<br>즉 모듈은 필요할때 쓸 수 있도록 커널의 코드를 밖으로 빼낸것이다!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ uname -r //커널버전확인</div><div class="line">$ wget &quot;https://kernel.org/pub/linux/kernel/v3.x/linux-3.17.4.tar.xz&quot;</div><div class="line">  //교재와 동일한 커널 설치</div><div class="line">$ mv linux-3.17.4.tar.xz /usr/src</div><div class="line">$ cd /usr/src</div><div class="line">$ tar xfJ linux-3.17.4.tar.xz   //압축을 풀자</div><div class="line">$ cd linux-3.17.4/</div><div class="line"></div><div class="line">커널은 c 코드이므로 설치를 위해 컴파일러를 깔자</div><div class="line">$ yum -y install gcc gcc-c++ qt qt-devel</div><div class="line">$ make mrproper // 커널설정 초기화</div><div class="line">$ make xconfig  //커널의 환경설정</div><div class="line">  설정 후</div><div class="line">$ make clean</div><div class="line">$make ;  make modules_install ; make install  //순서대로 진행됨.</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;응급복구&quot;&gt;&lt;a href=&quot;#응급복구&quot; class=&quot;headerlink&quot; title=&quot;응급복구&quot;&gt;&lt;/a&gt;응급복구&lt;/h4&gt;&lt;p&gt;261p 참고&lt;br&gt;이게 문제가 될 소지가 있지않냐?&lt;br&gt;그래서 처음 켤때 선택하는거에서 암호를 걸어야 한다.
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 파이프/필터, 프로세스, 서비스/소켓</title>
    <link href="http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux10/"/>
    <id>http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux10/</id>
    <published>2017-07-04T05:52:52.000Z</published>
    <updated>2017-07-04T06:31:35.759Z</updated>
    
    <content type="html"><![CDATA[<h4 id="파이프"><a href="#파이프" class="headerlink" title="파이프"></a>파이프</h4><p>두개의 프로그램을 연결해주는 통로<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -l /etc | more   //앞에서 뒤로 넘김</div></pre></td></tr></table></figure></p>
<h4 id="필터"><a href="#필터" class="headerlink" title="필터"></a>필터</h4><p>필요한것만 걸러주는 명령어</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ps -ef //현재 작동중인 프로세스 보여줌</div><div class="line"></div><div class="line">$ ps -ef | grep bash    //bash와 관련된 프로세스만</div><div class="line">                      //보여줌</div><div class="line"></div><div class="line">$ rpm -qa | grep gedit  //gedit 관련된것만 보여줌</div></pre></td></tr></table></figure>
<h4 id="리다이렉션-보내는-것"><a href="#리다이렉션-보내는-것" class="headerlink" title="리다이렉션(보내는 것)"></a>리다이렉션(보내는 것)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ls -l &gt; file.txt //결과를file.txt로 만드는것</div><div class="line">              //file.txt가 존재할 경우 덮어쓰고</div><div class="line">              //존재하지 않을경우 새로 만들고 작성</div><div class="line"></div><div class="line">$ ls -l &gt;&gt; file.txt //결과를file.txt로 만드는것</div><div class="line">                    //file.txt가 존재할 경우 뒤에다 이어서 작성하고</div><div class="line">                    //존재하지 않을경우 새로만들고 작성</div><div class="line"></div><div class="line">$ cat sort &lt; file.txt &gt; out.txt //file.txt를 정렬해서 out.txt에 넣어라</div></pre></td></tr></table></figure>
<h4 id="프로세스-데몬"><a href="#프로세스-데몬" class="headerlink" title="프로세스, 데몬"></a>프로세스, 데몬</h4><p>프로세스는 하드디스크에 저장된 실행코드가 메모리에 로딩되어 활성화 된것.</p>
<h5 id="포그라운드-프로세스"><a href="#포그라운드-프로세스" class="headerlink" title="포그라운드 프로세스"></a>포그라운드 프로세스</h5><p>실행하면 화면에 나타나서 사용자와 상호작용을 하는 프로세스</p>
<h5 id="백그라운드-프로세스"><a href="#백그라운드-프로세스" class="headerlink" title="백그라운드 프로세스"></a>백그라운드 프로세스</h5><p>화면에 나타나지 않고 실행되는 프로세스<br>백신 , 서버 데몬(=서비스,=서버 프로세스)등</p>
<h4 id="프로세스번호"><a href="#프로세스번호" class="headerlink" title="프로세스번호"></a>프로세스번호</h4><p>각각의 프로세스는 할당된 번호가 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ps -ef | grep bash    //bash관련된 프로세스만 보여줌</div><div class="line"></div><div class="line">root       693     1  0 13:43 ?        00:00:00 /bin/bash /usr/sbin/ksmtuned</div><div class="line"></div><div class="line">693은 자기 프로세스 번호고 1은 부모프로세스 번호이다.</div></pre></td></tr></table></figure></p>
<h4 id="작업-번호"><a href="#작업-번호" class="headerlink" title="작업 번호"></a>작업 번호</h4><p>현재 실행되고 있는 백그라운드 프로세스의 순차번호</p>
<h4 id="부모프로세스-자식프로세스"><a href="#부모프로세스-자식프로세스" class="headerlink" title="부모프로세스 ,자식프로세스"></a>부모프로세스 ,자식프로세스</h4><p>모든 프로세스는 부모프로세스를 갖는다.<br>부모 프로세스를 kill하면 자식프로세스도 자동으로 죽음.</p>
<h4 id="프로세스-관련-명령"><a href="#프로세스-관련-명령" class="headerlink" title="프로세스 관련 명령"></a>프로세스 관련 명령</h4><h5 id="ps-프로세스-보기"><a href="#ps-프로세스-보기" class="headerlink" title="ps 프로세스 보기"></a>ps 프로세스 보기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ps -ef | grep bash  //bash 관련 프로세스 보여줌</div></pre></td></tr></table></figure>
<h5 id="kill-프로세스-종료"><a href="#kill-프로세스-종료" class="headerlink" title="kill 프로세스 종료"></a>kill 프로세스 종료</h5><p>파이어폭스 kill하기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ ps -ef | grep fire  //파폭 관련 프로세스 보기</div><div class="line">root      2637  1934  0 13:49 ?        00:00:04 /usr/lib64/firefox/firefox</div><div class="line">//프로세스번호가 2637이다.</div><div class="line">$ kill 2637</div><div class="line">//가끔 킬 해도 죽지 않는 경우가 있는데 그경우 -9 옵션을 준다.</div><div class="line">$ kill -9 2637</div></pre></td></tr></table></figure></p>
<h5 id="pstree-프로세스-트리로-보기"><a href="#pstree-프로세스-트리로-보기" class="headerlink" title="pstree 프로세스 트리로 보기"></a>pstree 프로세스 트리로 보기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$pstree //프로세스 구조를 트리로 보여줌</div></pre></td></tr></table></figure>
<h5 id="실습-포그라운드-gt-백그라운드-gt-포그라운드"><a href="#실습-포그라운드-gt-백그라운드-gt-포그라운드" class="headerlink" title="실습 (포그라운드-&gt;백그라운드-&gt;포그라운드)"></a>실습 (포그라운드-&gt;백그라운드-&gt;포그라운드)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ yes &gt; /dev/null   //y를 계속생성하는 프로세스 생성</div><div class="line">ctrl+ z 입력.</div><div class="line">$ bg //백그라운드 보는것.</div><div class="line">    //처음에 했던 동작이 남아있다.</div><div class="line">[1]+ yes &gt; /dev/null &amp;</div><div class="line"></div><div class="line">$ fg 1    //1번작업을 다시 포그라운드로 갖고와라</div></pre></td></tr></table></figure>
<h5 id="실습-포그라운드-gt-백그라운드-gt-포그라운드-1"><a href="#실습-포그라운드-gt-백그라운드-gt-포그라운드-1" class="headerlink" title="실습 (포그라운드-&gt;백그라운드-&gt;포그라운드)"></a>실습 (포그라운드-&gt;백그라운드-&gt;포그라운드)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ gedit &amp; //지에딧을 백그라운드로 돌려라.</div><div class="line">        //콘솔을 계속 사용할 수 있게된다.</div><div class="line"></div><div class="line">$ vi &amp;  //백그라운드로 돌아가긴 하는데 의미없다.</div><div class="line">        //vi는 포그라운드로 돌려야 하므로  </div><div class="line">$ bg    //vi의 백그라운드 번호를 알고</div><div class="line">$ fg 1   //vi를 포그라운드로 갖고옴</div></pre></td></tr></table></figure>
<h4 id="서비스와-소켓"><a href="#서비스와-소켓" class="headerlink" title="서비스와 소켓"></a>서비스와 소켓</h4><h5 id="서비스"><a href="#서비스" class="headerlink" title="서비스"></a>서비스</h5><p>웹 서버 = 웹 서비스<br>FTP 서버 = FTP 서비스</p>
<p>서비스의 실행 스크립트 파일은 /usr/lib/systemd/system/ 디렉터리에 ‘서비스이름.service’라는 이름으로 확인할 수 있다. 예를들어 웹 서비스는 httpd.service라는 이름의 파일로 존재</p>
<h5 id="소켓"><a href="#소켓" class="headerlink" title="소켓"></a>소켓</h5><p>서비스는 항상 가동되지만 소켓은 필요할 떄만 구동된다. 외부에서 특정 서비스가 요청되었을 때. 그래서 약간 느리다.<br>/usr/lib/systemd/system/ 디렉터리에 소켓이름.socket 이름으로 존재</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;파이프&quot;&gt;&lt;a href=&quot;#파이프&quot; class=&quot;headerlink&quot; title=&quot;파이프&quot;&gt;&lt;/a&gt;파이프&lt;/h4&gt;&lt;p&gt;두개의 프로그램을 연결해주는 통로&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 네트워크 관련 개념과 명령어,SELinux</title>
    <link href="http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux9/"/>
    <id>http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux9/</id>
    <published>2017-07-04T04:29:36.000Z</published>
    <updated>2017-07-04T05:09:11.039Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>우리가 사용하는 인터넷은 tcp/ip 기반이다. 가장널리사용되는 프로토콜의 한 종류</p>
<h4 id="호스트이름-도메인이름"><a href="#호스트이름-도메인이름" class="headerlink" title="호스트이름 도메인이름"></a>호스트이름 도메인이름</h4><p>호스트이름 : 컴퓨터에 지정된 이름<br>도메인 이름 : hanbit.co.kr rkxdms gudtlr</p>
<h4 id="IP-주소"><a href="#IP-주소" class="headerlink" title="IP 주소"></a>IP 주소</h4><p>랜카드에 부여되는 중복되지 않는 유일한 주소</p>
<h4 id="네트워크-주소"><a href="#네트워크-주소" class="headerlink" title="네트워크 주소"></a>네트워크 주소</h4><p>같은 네트워크에 속해있는 공통된 주소</p>
<h4 id="브로드캐스트-주소"><a href="#브로드캐스트-주소" class="headerlink" title="브로드캐스트 주소"></a>브로드캐스트 주소</h4><p>제일 뒤가 255인 주소<br>내부 네트워크의 모든 컴퓨터가 듣게 되는 주소</p>
<h4 id="게이트웨이-라우터"><a href="#게이트웨이-라우터" class="headerlink" title="게이트웨이, 라우터"></a>게이트웨이, 라우터</h4><p>라우터=게이트웨이<br>네트워크 간에 데이터를 전송하는 컴퓨터 또는 장비</p>
<h4 id="넷마스크-클래스"><a href="#넷마스크-클래스" class="headerlink" title="넷마스크, 클래스"></a>넷마스크, 클래스</h4><p>넷마스크 : 네트워크의 규모를 결정<br>ex(255.255.255.0)</p>
<h4 id="DNS-서버-네임서버"><a href="#DNS-서버-네임서버" class="headerlink" title="DNS 서버= 네임서버"></a>DNS 서버= 네임서버</h4><p>URL을 IP로 변환해주는 서버</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ nmtui //네트워크와 관련된 작업진행</div><div class="line"></div><div class="line">$ rdate -s time.bora.net  //시간설정</div><div class="line">$ nmtui     //설정 변경후 종료 네트워크매니저텍스트ui</div><div class="line">$ systemctl restart network //네트워크 재시작 (해줘야함)</div><div class="line"></div><div class="line">$ ifconfig  //네트워크장치에 할당된 ip주소 확인</div><div class="line">$ ifdown ens32  //이거는 systemctl restart network</div><div class="line">                //보다 강력하게 서버를 끄는것.</div><div class="line">$ ifup ens32    //서버 재시작              </div><div class="line"></div><div class="line">$ nslookup  naver.com //DNS서버의 작동을 테스트</div><div class="line"></div><div class="line">$ ping www.yahoo.com //네트워크 응답 확인</div><div class="line">$ ping -3 www.yahoo.com   //세번만 피을 때려라</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="주요-파일"><a href="#주요-파일" class="headerlink" title="주요 파일"></a>주요 파일</h4><p>네트워크 기본적인 정보가 설정되어 있는 파일<br>/etc/sysconfig/network  </p>
<p>/etc/sysconfig/network-scripts/ifcfg-ens32<br>ens32 장치에 설정된 네트워크 정보가 모두 들어있는 파일<br>ens32가 아니라 eno일수도 있다.<br>BOOTPROTO = none 고정아이피를 쓰겠다.<br>DNS1  DNS가 여러개 나올 수 있으므로 1이 필요<br>ONBOOT =”yes” 네트워크를 쓰겠다</p>
<p>/etc/resolv.conf<br>DNS 서버의 정보와 호스트 이름이 들어있다.<br>168.126.63.1 //kt에서 제공하는 네임서버이다<br>            //네임서버가 없을 때 사용가능</p>
<h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><p>보안에 취약한 리눅스를 보호하기 위해 탄생<br>책에서는 실습을 위해 기능을 꺼두었다.<br>/etc/sysconfig/selinux를 편집하였다.<br>SELINUX=disabled 이렇게..</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;TCP-IP&quot;&gt;&lt;a href=&quot;#TCP-IP&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP&quot;&gt;&lt;/a&gt;TCP/IP&lt;/h4&gt;&lt;p&gt;우리가 사용하는 인터넷은 tcp/ip 기반이다. 가장널리사용되는 프로토콜의 한 종류&lt;/p&gt;
&lt;h4
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 파일 압축과 묶기, CRON과 AT</title>
    <link href="http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux8/"/>
    <id>http://KKimSangHeon.github.io/2017/07/04/ThisIsLinux8/</id>
    <published>2017-07-04T00:26:28.000Z</published>
    <updated>2017-07-04T01:55:03.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="파일-압축"><a href="#파일-압축" class="headerlink" title="파일 압축"></a>파일 압축</h3><p>유닉스는 압축하는 파일이 여러개이다. 그래서 확장자도 여러개이다. 점점 개선이 되면서 여러개가 생긴것이다. 예전것도 쓰고 최신것도 쓰므로 모두 사용할줄 알아야함<br>gzip-&gt;bzip2-&gt;xz 순으로 발전해옴 xz가 압축률도 제일좋다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># cp glist.txt file1.txt    //파일 복사</div><div class="line"># cp glist.txt file2.txt</div><div class="line"># cp glist.txt file3.txt</div><div class="line"># xz file1.txt</div><div class="line"># bzip2 file2.txt</div><div class="line"># gzip file3.txt</div><div class="line"></div><div class="line"># ls-l file*</div><div class="line">-rw-r--r-- 1 root root 1080  7월  4 09:31 file1.txt.xz</div><div class="line">-rw-r--r-- 1 root root 1072  7월  4 09:31 file2.txt.bz2</div><div class="line">-rw-r--r-- 1 root root 1053  7월  4 09:31 file3.txt.gz</div><div class="line"></div><div class="line"># xz -d file.txt.xz   //압축해제</div><div class="line"></div><div class="line"># bzip2 -d file2.txt.bz2 //압축해제</div><div class="line"></div><div class="line"># gzip -d file3.txt.gz  //압축해제</div><div class="line"># gunzip file3.txt.gz //위와 같음</div><div class="line"></div></pre></td></tr></table></figure>
<p>gz로 압축한게 제일작은데? 파일마다 다르다!! 일반적으로는 gz가 효울이 제일 떨어진다. 그래서 일반적으로 커널파일을 xz로 배포한다.<br>리눅스에서의 압축은 파일을 압축해서 원본파일이 사라진다는것을 주의하자.</p>
<h4 id="파일-묶기"><a href="#파일-묶기" class="headerlink" title="파일 묶기"></a>파일 묶기</h4><p>리눅스는 압축, 묶기가 다르다<br>묶기는 원본파일이 유지되며 하나로 묶은것이라 보면된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># tar cvf bin.tar bin1 bin2 bin3    //bin1,2,3이 bin.tar로 묶임</div><div class="line"># rm -f bin?    //bin1,2,3 제거</div><div class="line"></div><div class="line"># tar xvf bin.tar //풀기</div><div class="line"># ls -l</div><div class="line">-rw-r--r--  1 root root 14714880  7월  4 09:41 bin.tar</div><div class="line">-rwxr-xr-x  1 root root  4902656  7월  4 09:40 bin1</div><div class="line">-rwxr-xr-x  1 root root  4902656  7월  4 09:40 bin2</div><div class="line">-rwxr-xr-x  1 root root  4902656  7월  4 09:40 bin3</div><div class="line"></div></pre></td></tr></table></figure><br>묶으면서 압축을 진행해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># rm -f bin.tar</div><div class="line"># tar cvfj bin.tar.bz2 bin1 bin2 bin3  //bz2형식으로 압축하면서 묶어줌</div><div class="line"></div><div class="line"></div><div class="line"># rm -f bin.tar.bz2</div><div class="line"># tar cvfJ bin.tar.xz bin1 bin2 bin3  //xz형식으로 압축하면서 묶어줌</div><div class="line">                                      //J가 대문자이다.</div><div class="line"># tar xvfJ bin.tar.xz /etc/sysconfig  //xz압축해제 +tar 풀기</div></pre></td></tr></table></figure></p>
<h4 id="파일-위치-검색"><a href="#파일-위치-검색" class="headerlink" title="파일 위치 검색"></a>파일 위치 검색</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># find /etc  -name &quot;*.conf&quot;    //etc밑에 확장명이 conf 인것을 찾음</div><div class="line"># find /etc  -name &quot;*.conf&quot; &gt; conf.txt  //위 대상으로 conf.txt로 저장</div><div class="line"></div><div class="line"># find /home -user centos   //centos 사용자의 파일들 검색</div><div class="line"></div><div class="line"># find /usr/bin -size +95k -size -100k    //사이즈가 95kb 이상</div><div class="line">                                        //100kb 이하인것 검색</div><div class="line"># find /usr/bin -size +95k -size -100k</div><div class="line">          -exec ls -l &#123;&#125; \;  // 윗줄의 결과가 중괄호 속에 들어가서</div><div class="line">                            // ls -l 명령어 실행</div></pre></td></tr></table></figure>
<h4 id="시스템-설정"><a href="#시스템-설정" class="headerlink" title="시스템 설정"></a>시스템 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># yum -y install system-config-date</div><div class="line"># system-config-date  //날짜 설정 가능</div><div class="line"></div><div class="line"># nmtui   //네트워크 설정</div><div class="line"></div><div class="line"># firewall-config</div></pre></td></tr></table></figure>
<h4 id="CRON과-AT"><a href="#CRON과-AT" class="headerlink" title="CRON과 AT"></a>CRON과 AT</h4><p>CRON : 주기적으로 반복되는 일을 자동적으로 실행될 수 있도록 실행</p>
<p>42 4 1 ** root run-parts /etc/cron.hourly<br>42 : 42분<br>4 : 4시<br>1 : 1일<br>* : 매 월<br>* : 매 요일</p>
<p>01 * * * * root run-parts  /etc/cron.daily<br>맨 뒤는 요일이므로 제외하고<br>매월<br>매일<br>매시<br>1분마다.</p>
<p>02 4 * * * root run-parts  /etc/cron.weekly<br>매일 4시 2분마다 실행하라</p>
<p>03 4 * * 0 root run-parts  /etc/cron.monthly<br>일요일 4시 3분마다 실행해라</p>
<hr>
<p>AT : 한번 실행되는것<br># at 3:00am tomorrow -&gt;내일 새벽 3시<br># at 11:00pm January 30 -&gt;1월 30일 오후 11시<br># at now + 1 hours -&gt;한시간 후<br>그 후 예약 명령어 입력후 엔터<br>완료되면 ctrl + d</p>
<p>쉘 스크립트 : 윈도우의 배치파일처럼 실행할 명령어가 쭉 나열되어있는것</p>
<h4 id="CRON-실습"><a href="#CRON-실습" class="headerlink" title="CRON 실습"></a>CRON 실습</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># systemctl status crond  //크론이 돌고있는지 확인</div><div class="line"></div><div class="line"># vi /etc/crontab</div><div class="line">01 3 15 * * root run-parts /etc/cron.monthly</div><div class="line"> //한줄 추가 매달 매 요일 15일마다 3시 1분에</div><div class="line"></div><div class="line"># cd /etc/cron.monthly/</div><div class="line"></div><div class="line"># vi myBackup.sh</div><div class="line"></div><div class="line">다음을 입력</div><div class="line">#!/bin/sh   // 써줘야함</div><div class="line"></div><div class="line">set $(date)   //날짜를 읽어옴</div><div class="line">fname=&quot;backup-$2$3.tar.xz&quot;    //$2는 월 $3은 일</div><div class="line"></div><div class="line">tar cfJ /backup/$fname  /home   // /home폴더를 묶음</div><div class="line"></div><div class="line">vi 종료</div><div class="line"></div><div class="line"># chmod ugo+x myBackup.sh   //쉘스크립트 파일 실행권한부여</div><div class="line"></div><div class="line"># mkdir /backup   //백업파일 보관할 장소 생성</div><div class="line"></div><div class="line"># systemctl restart crond //예약하는 작업이 재시작된다.</div><div class="line"></div><div class="line"># date 011503002019       //테스트를 위해 시간을 변경</div><div class="line">    //월일시분년</div><div class="line">2019. 01. 15. (화) 03:00:00 KST 로 변경됨</div><div class="line"></div><div class="line"># systemctl restart crond  // 시간적용을 위해 재시작</div><div class="line"></div><div class="line">1분이 지나고</div><div class="line"></div><div class="line"># ls-l /backup/</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="AT-실습"><a href="#AT-실습" class="headerlink" title="AT 실습"></a>AT 실습</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># rdate -s time.bora.net  //서버에 가서 정확한 시간을 세팅함</div><div class="line"># at 4:00 am tomorrow   //내일 새벽 4시에 할 명령어 입력</div><div class="line"></div><div class="line">at&gt; yum -y update</div><div class="line">at&gt; reboot</div><div class="line"></div><div class="line">입력 후 ctrl + d</div><div class="line"></div><div class="line"># at -l 예약된것 확인</div><div class="line">1	Wed Jul  5 04:00:00 2017 a root</div><div class="line"></div><div class="line"># atrm 1  //1번 목록 제거</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;파일-압축&quot;&gt;&lt;a href=&quot;#파일-압축&quot; class=&quot;headerlink&quot; title=&quot;파일 압축&quot;&gt;&lt;/a&gt;파일 압축&lt;/h3&gt;&lt;p&gt;유닉스는 압축하는 파일이 여러개이다. 그래서 확장자도 여러개이다. 점점 개선이 되면서 여러개가 생긴것이다
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. RPM 사용법, YUM 사용법</title>
    <link href="http://KKimSangHeon.github.io/2017/07/03/ThisIsLinux7/"/>
    <id>http://KKimSangHeon.github.io/2017/07/03/ThisIsLinux7/</id>
    <published>2017-07-03T09:58:51.000Z</published>
    <updated>2017-07-04T01:56:17.645Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><p>초창기 리눅스는 설치가 어려웠다 .소스코드를 갖고와서 적재적소에 컴파일을 해야했다. 그래서 일반사용자가 사용하기엔 거의 불가능했다. 이러한 이유로 외면을 받았었다. 결국 Redhat에서 RPM(Redhat Package Manager)을 내놓았다. 윈도우의 setup.exe 라고 생각하면 된다.</p>
<p>gedit-3.8.3-6.el7.x86_64.rpm</p>
<p>패키지이름 : gedit -&gt; 패키지(프로그램)의 이름<br>버전 : 3.8.3 -&gt; 대게 3자리수로 구성. 주버전, 부버전, 패치버전<br>릴리즈번호 : 6 -&gt; 문제점을 개선할 때마다 붙여지는 번호   //noarch:모든CPU<br>CentOS버전 : el7 -&gt; CentOS에서 배포할 경우에 붙여짐<br>아키텍처 : x86_64 -&gt; 64비트 CPU를 의미</p>
<h4 id="자주쓰는-RPM-명령어-옵션"><a href="#자주쓰는-RPM-명령어-옵션" class="headerlink" title="자주쓰는 RPM 명령어 옵션"></a>자주쓰는 RPM 명령어 옵션</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ rpm -Uvh 패키지파일이름.rpm</div><div class="line">    // U -&gt; (대문자)패키지가 설치/업그레이드</div><div class="line">    // v -&gt; 설치진행과정의 확인</div><div class="line">    // h -&gt; 설치진행과정을 &quot;#&quot;마크로 화면에 출력</div><div class="line"></div><div class="line">$ rpm -e 패키지이름  //패키지 삭제</div><div class="line"></div><div class="line">$ rpm -qa 패키지이름  //패키지가 설치되었는지 확인</div><div class="line"></div><div class="line">$ rpm -qf 파일의 절대경로 // 파일이 어느 패키지에 포함된 것인지 확인</div><div class="line"></div><div class="line">$ rpm -qlp 패키지파일이름.rpm //패키지 파일에 어떤 파일들이 포함되었는지 확인</div><div class="line"></div><div class="line">$ rpm -qip 패키지파일이름.rpm //패키지 파일의 상세정보</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa mc  //mc 패키지가 설치되었나 확인</div><div class="line"></div><div class="line">$ rpm -Uvh mc-4.8.7-8.el7.x86_64.rpm //설치</div><div class="line"></div><div class="line">$ rpm -qa mc  //mc 패키지가 설치되었나 확인</div><div class="line"></div><div class="line">$ rpm -qi mc  //mc 패키지 정보 출력</div><div class="line"></div><div class="line">$ rpm -e mc-4.8.7-8.el7.x86_64.rpm  //삭제</div><div class="line">오류: mc-4.8.7-8.el7.x86_64.rpm 패키지가 설치되어 있지 않습니다</div><div class="line">//설치파일을 삭제하는것이다.!!!!</div><div class="line"></div><div class="line">$ rpm -e mc  //패키지 이름만으로 삭제</div></pre></td></tr></table></figure>
<h3 id="YUM의-등장"><a href="#YUM의-등장" class="headerlink" title="YUM의 등장"></a>YUM의 등장</h3><p>Yellowdog Updater Modified</p>
<p>rpm의 경우 의존성 문제가 존재함. 이를 해결하기 위해 나온것이 YUM<br>의존성 문제란? A를 설치하기 위해 B가 먼저 설치되어있어야 하는것.<br>rpm은 B가 설치되어있지 않을 경우 A패키지 설치를 시도할 경우 B를 설치해야 한다고 알려주기는 하나 대략적으로 알려주고, B또한 다른 패키지에 의존성이 있을수도 있어 불편함을 유발한다.</p>
<p>yum은 인터넷이 정상적으로 동작해야 작동함. yum은 의존성이 있는것을 모두 알아서 설치해준다!!! 즉 yum 명령어는 내부적으로 rpm명령을 실행하는것!!</p>
<h4 id="yum의-동작과정"><a href="#yum의-동작과정" class="headerlink" title="yum의 동작과정"></a>yum의 동작과정</h4><p>1.yum install을 입력한다<br>2./etc/yum.repos.d/ 를 참고하여 URL을 확인하고<br>3.전체 패키지 목록 파일을 요청한다(CentOS 7 패키지 저장소로)<br>4.전체 패키지 목록 파일만 다운로드<br>5.설치할 패키지와 관련된 패키지의 이름을 화면에 출력<br>6.y를 입력하면 설치에 필요한 패키지 파일을 요청함<br>7.설치할 패키지 파일을 다운로드해서 자동 설치<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ yum install 패키지이름   //패키지 설치</div><div class="line"></div><div class="line">$ yum -y install 패키지이름   //패키지 설치(y안눌러도 됨)</div><div class="line"></div><div class="line">$ yum remove 패키지이름  //패키지 제거</div><div class="line"></div><div class="line">$ yum localinstall rpm파일이름.rpm  //로컬에 존재하는 rpm으로 설치</div><div class="line">      // 만약 의존성이 있을경우 그 대상은 레파지토리에서 깐다.</div><div class="line"></div><div class="line">$ yum info mc   //mc패키지에 관한 정보확인      </div><div class="line"></div><div class="line">$ yum groupinstall &quot;패키지 그룹이름&quot; //예로 자바를 깐다면 jdk</div><div class="line">                          //이클립스 등 한꺼번에 설치됭</div><div class="line"></div><div class="line">$ yum clean all           //캐시를 지우는것.</div><div class="line">                      //yum이 이상할때 써보자                          </div></pre></td></tr></table></figure></p>
<h4 id="yum고급실습"><a href="#yum고급실습" class="headerlink" title="yum고급실습"></a>yum고급실습</h4><p>네트워크를 거치지 않고 마운트 시킨 dvd에서 받는다. 교재 221참고<br>dvd에 없으면 네트워크에서 갖고온다.</p>
<h4 id="yum-grouplist"><a href="#yum-grouplist" class="headerlink" title="yum grouplist"></a>yum grouplist</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ yum grouplist   //그룹리스트 조회</div><div class="line">$ yum grouplist hidden //숨겨진것까지 조회</div><div class="line"></div><div class="line">//영어로 그룹을 설치하는것이 좋다.. 그러므로</div><div class="line"></div><div class="line">$ chvt 2 //2번 가상터미널로 이동</div><div class="line">$ root</div><div class="line"> password</div><div class="line"></div><div class="line">$ yum grouplist hidden &gt; glist.txt  //glist.txt로 생성</div><div class="line"></div><div class="line">$ chvt 1  //x 윈도모드로 이동</div></pre></td></tr></table></figure>
<h4 id="226p-비타민퀴즈"><a href="#226p-비타민퀴즈" class="headerlink" title="226p 비타민퀴즈"></a>226p 비타민퀴즈</h4><p>223p를 따라 설정 후</p>
<h1 id="yum-groupinstall-“GNOME-Desktop”-입력"><a href="#yum-groupinstall-“GNOME-Desktop”-입력" class="headerlink" title="yum groupinstall “GNOME Desktop” 입력"></a>yum groupinstall “GNOME Desktop” 입력</h1>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RPM&quot;&gt;&lt;a href=&quot;#RPM&quot; class=&quot;headerlink&quot; title=&quot;RPM&quot;&gt;&lt;/a&gt;RPM&lt;/h3&gt;&lt;p&gt;초창기 리눅스는 설치가 어려웠다 .소스코드를 갖고와서 적재적소에 컴파일을 해야했다. 그래서 일반사용자가 사용하기엔 거의
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 파일의 소유권/허가권, 링크</title>
    <link href="http://KKimSangHeon.github.io/2017/07/03/ThisIsLinux6/"/>
    <id>http://KKimSangHeon.github.io/2017/07/03/ThisIsLinux6/</id>
    <published>2017-07-03T04:33:03.000Z</published>
    <updated>2017-07-03T05:45:36.399Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># touch sample.txt  //빈 파일생성</div><div class="line"># ls -l</div><div class="line">-rw-r--r--  1 root   root         0  7월  3 13:35 sample.txt</div></pre></td></tr></table></figure>
<p>1.맨앞의 -는 파일의 유형을 의미.<br>  -: 일반파일<br>  d: 디렉토리<br>  l: 링크파일</p>
<p>2.rw-r–r–는 세개씩 끊어 읽으면 된다.<br>2-1.  맨앞 세개는 소유자의 파일접근권한 (rw-)<br>즉 소유자는 읽기, 쓰기 가능, 실행 불가</p>
<p>2-2.  두번째는 그룹의 파일접근권한<br>읽기만 가능</p>
<p>2-3.  세번째는 그 외의 사용자의 파일접근권한이다.<br>읽기만 가능<br>또한 rw-r–r–는 3자리씩 끊어서 보면 644로 볼수 있다.<br>rwxrwxrwx는? 666</p>
<p>3.1은 링크의 수</p>
<p>4.root는 파일 소유자 이름</p>
<p>5.root는 파일 소유 그룹이름</p>
<p>6.0은 파일의 크기</p>
<p>7.7월  3 13:35는 마지막 변경 날짜/시간</p>
<p>8.sample.txt는 파일이름</p>
<h4 id="chmod-파일-허가권-변경"><a href="#chmod-파일-허가권-변경" class="headerlink" title="chmod 파일 허가권 변경"></a>chmod 파일 허가권 변경</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># chmod 655 sample.txt</div><div class="line"># ls -l sample.txt</div><div class="line">-rw-r-xr-x 1 root root 0  7월  3 13:35 sample.txt</div><div class="line"></div><div class="line">$ chmod o-x  test      //일반사용자(o : ordinary)는 -x (x:execute) 실행 못하도록</div><div class="line">$ ls -l test</div><div class="line">-rwxrwxrw- 1 centos centos 52  7월  3 13:52 test</div><div class="line">        //마지막 x가 빠짐</div><div class="line"></div><div class="line">$ chmod ug-w test    //소유주(u: user), 소유그룹(g: group) 쓰기권한 제거</div><div class="line">$ ls -l test</div><div class="line">-r-xr-xrw- 1 centos centos 52  7월  3 13:52 test</div><div class="line">        //3번째 6번째 w가 빠짐</div><div class="line"></div><div class="line">$ chmod ugo-r test  //전부다 읽기권한 제거</div><div class="line">$ ls -l test   </div><div class="line">---x--x-w- 1 centos centos 52  7월  3 13:52 test</div><div class="line">        //r이 제거된것 확인</div><div class="line"></div><div class="line">$ chmod uo+rw test  //소유주, 기타사용자에게 읽기,쓰기 허용</div><div class="line">$ ls -l test  </div><div class="line">-rwx--xrw- 1 centos centos 52  7월  3 13:52 test</div><div class="line"></div><div class="line">//숫자를 넣지 않고 하는것을 심볼릭방법이라 하는데 이것이 더 편할 때가 있다.</div><div class="line">숫자로 할 경우 기존의 권한도 알아야 하기 때문에..</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="chown-파일-소유자-변경"><a href="#chown-파일-소유자-변경" class="headerlink" title="chown 파일 소유자 변경"></a>chown 파일 소유자 변경</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># chown centos sample.txt   //centos로 소유권을 넘김</div><div class="line"># ls -l sample.txt</div><div class="line">-rw-r-xr-x 1 centos root 0  7월  3 13:35 sample.txt  //소유권 변경됨</div></pre></td></tr></table></figure>
<h4 id="chgrp-파일-소유-그룹-변경"><a href="#chgrp-파일-소유-그룹-변경" class="headerlink" title="chgrp 파일 소유 그룹 변경"></a>chgrp 파일 소유 그룹 변경</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># chgrp centos sample.txt</div><div class="line"># ls -l sample.txt</div><div class="line">-rw-r-xr-x 1 centos centos 0  7월  3 13:35 sample.txt</div></pre></td></tr></table></figure>
<h4 id="chown-파일-소유자-그룹-변경"><a href="#chown-파일-소유자-그룹-변경" class="headerlink" title="chown 파일 소유자, 그룹 변경"></a>chown 파일 소유자, 그룹 변경</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># chown root.root sample.txt</div><div class="line"># ls -l sample.txt</div><div class="line">-rw-r-xr-x 1 root root 0  7월  3 13:35 sample.txt</div></pre></td></tr></table></figure>
<h4 id="에-대한-이해"><a href="#에-대한-이해" class="headerlink" title="./에 대한 이해"></a>./에 대한 이해</h4><p>파일을 실행하기 위해서는 아래의 명령어를 입력해야한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ./파일명</div></pre></td></tr></table></figure><br>./는 왜 붙는것일까?<br>그냥 파일명만 입력하면 찾지못하는데 그 이유는 현재 디렉토리가 경로에 없어서 그렇다.<br>그래서 ./을 넣어주는 것이다. 앞에서 배웠듯이 . 은 현재 디렉토리를 의미하는것을 떠올려보자.<br>즉 ./파일명 는 현재 디렉터리 아래에 있는 파일명을 실행하라는 것이다.</p>
<h4 id="su-해당사용자로-로그인"><a href="#su-해당사용자로-로그인" class="headerlink" title="su 해당사용자로 로그인"></a>su 해당사용자로 로그인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># su - centos   //centos계정으로 로그인</div><div class="line">      //루트계정일 경우 암호를 묻지않는다.</div><div class="line">      //-를 붙이면 디렉토리가 centos디렉토리로 변경되가</div><div class="line">      //붙이지 않으면 변경되지 않는다.</div></pre></td></tr></table></figure>
<h4 id="실습해보자"><a href="#실습해보자" class="headerlink" title="실습해보자."></a>실습해보자.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"># touch test    //test 파일 생성</div><div class="line"></div><div class="line"># vi test     //이후 명령어(ex ls) 입력 그후 저장후 종료</div><div class="line"></div><div class="line"># ./test      //test 파일 실행</div><div class="line"></div><div class="line">실행되지 않음.   </div><div class="line"></div><div class="line"># chmod 755 test    //실행권한을 모두 준다.</div><div class="line"></div><div class="line"># ./test    //실행된다.</div><div class="line"></div><div class="line">현재 파일의 소유권은 root이다.</div><div class="line"></div><div class="line"># chown centos.centos test  //소유자,그룹을 변경</div><div class="line"></div><div class="line"># su - centos   //센토스 사용자로 접근</div><div class="line">              //이때 암호는 물어보지 않음. 루트에서 이동하는것이므로</div><div class="line"></div><div class="line">$ ls -l /root/test    //허가 거부가 된다.</div><div class="line">                    //왜냐하면 /root 디렉토리가 일반사용자는 들어올수 없게 되어있음.</div><div class="line">                    //그러므로 파일을 이동시키거나, /root 디렉토리에 다른사용자가 들어</div><div class="line">                    //올수 있게 허가해주어야 한다. 후자는 좋지 않은 방법이므로 전자를</div><div class="line">                    //활용하자</div><div class="line"></div><div class="line"># exit                //centos계정 로그아웃</div><div class="line"></div><div class="line"># mv test ~centos     //centos 홈폴더로 test파일이동.</div><div class="line"></div><div class="line"># su - centos   //다시 centos로 로그인</div><div class="line"></div><div class="line">$ chmod 777 test</div><div class="line"></div><div class="line">$ chown root.root test  //소유권을 다시 root로 변경</div><div class="line">                      //불가능하다. 어딜감히 root로 변경해</div><div class="line">                      //악성코드를 심고 할 수도 있고..위험함..</div><div class="line">                      //그래서 이 명령어는 루트사용자만 가능!!!</div><div class="line"></div><div class="line">$ chmod o-x  test      //일반사용자(o : ordinary)는 -x (x:execute) 실행 못하도록</div><div class="line">$ ls -l</div><div class="line">-rwxrwxrw- 1 centos centos 52  7월  3 13:52 test</div><div class="line">                    //마지막에 -가 들어간것을 확인</div><div class="line"></div><div class="line">$ chmod ug-w test    //소유주(u: user), 소유그룹(g: group) 쓰기권한 제거</div><div class="line">$ ls -l test</div><div class="line">-r-xr-xrw- 1 centos centos 52  7월  3 13:52 test</div><div class="line">                    //3번째 6번째 w가 빠짐</div><div class="line"></div><div class="line">$ chmod ugo-r test  //전부다 읽기권한 제거</div><div class="line">$ ls -l test   </div><div class="line">---x--x-w- 1 centos centos 52  7월  3 13:52 test</div><div class="line">        //r이 제거된것 확인</div><div class="line"></div><div class="line">$ chmod uo+rw test  //소유주, 기타사용자에게 읽기,쓰기 허용</div><div class="line">$ ls -l test  </div><div class="line">-rwx--xrw- 1 centos centos 52  7월  3 13:52 test</div><div class="line"></div><div class="line">//숫자를 넣지 않고 하는것을 심볼릭방법이라 하는데 이것이 더 편할 때가 있다.</div><div class="line">숫자로 할 경우 기존의 권한도 알아야 하기 때문에..                    </div></pre></td></tr></table></figure>
<h4 id="링크"><a href="#링크" class="headerlink" title="링크"></a>링크</h4><p>파일의 링크는 하드링크, 심볼릭 링크가 있다.<br>윈도우의 바로가기처럼 연결되어있는것은 심볼릭링크 소프트 링크라 한다.</p>
<p>원본파일이 inode블록(실제 파일정보를 갖고있는것)을 가르키고 inode블록은 원본파일 데이터를 가르킨다.</p>
<p>하드링크파일은 inode를 직접 가르키며<br>심볼링크파일은 새로운 inode를 만들고 새로운 inode는 원본파일 포인터를 하나 더만들고 그것을 가르킨다. 원본파일 포인터는 원본파일을 가르킨다. 교재 201p를 참고하자.</p>
<p>주로 하드링크보다는 심볼릭 링크를 생성한다.</p>
<h5 id="실습해보기"><a href="#실습해보기" class="headerlink" title="실습해보기"></a>실습해보기</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># mkdir linktest</div><div class="line"># cd linktest/</div><div class="line"># vi basefile //아무거나 입력후 저장후 종료</div><div class="line">//원본파일이 생겼으므로 inode 블록이 생성되었을것이다.</div><div class="line"># ls -il basefile //inode 번호 확인</div><div class="line">405679049 -rw-r--r-- 1 root root 34  7월  3 14:36 basefile</div><div class="line">  //405679049이 inode 번호</div><div class="line"></div><div class="line"># ln basefile hardlink  //하드링크 생성</div><div class="line"># ln -s basefile softlink //소프트링크생성</div><div class="line"># ls -il</div><div class="line"></div><div class="line">405679049 -rw-r--r-- 2 root root 34  7월  3 14:36 basefile</div><div class="line">405679049 -rw-r--r-- 2 root root 34  7월  3 14:36 hardlink</div><div class="line">405679048 lrwxrwxrwx 1 root root  8  7월  3 14:40 softlink -&gt; basefile</div><div class="line"></div><div class="line">//basefile inode와 hardlink inode가 같다. softlink의 inode는 새로 만들어서 basefile을 가르킨다.</div><div class="line"></div><div class="line"># mv basefile ../     //원본파일을 앞 디렉토리로 이동시킴</div><div class="line"># ls -il</div><div class="line"></div><div class="line"># cat hardlink  // 출력이 될까 안될까?</div><div class="line">        //출력이 된다. 그 이유는 원본 inode를 가르키기 때문에!</div><div class="line"></div><div class="line"># cat softlink  // 출력이 될까 안될까.?</div><div class="line">        //안된다. 원본파일이 없어졌기 때문에.</div><div class="line"></div><div class="line"># mv ../basefile    //다시 원상복구 시킴  (앞디렉토리로간 basefile 델꼬옴)</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 사용자 및 그룹 관리</title>
    <link href="http://KKimSangHeon.github.io/2017/07/03/ThisIsLinux5/"/>
    <id>http://KKimSangHeon.github.io/2017/07/03/ThisIsLinux5/</id>
    <published>2017-07-03T02:29:09.000Z</published>
    <updated>2017-07-03T04:32:32.265Z</updated>
    
    <content type="html"><![CDATA[<p>리눅스는 다중 사용자 시스템이다. 즉 서버 한대에 여러명이 접속한다. 그러므로 사용자를 관리하고 그룹을 관리하는게 중요한 이슈이다.<br>기본적으로 rootㄹ는 슈퍼유저가 관리하며 모든 사용자는 하나 이상의 그룹에 소속되어야 한다.<br>사용자는 /etc/passwd에 정의되어 있다.<br>아래의 명령문을 실행시켜 vi 에디터로 확인해보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># vi /etc/passwd</div></pre></td></tr></table></figure><br>마지막 줄엔 다음과같은 코드가 존재한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">centos:x:1000:1000:centos:/home/centos:/bin/bash</div></pre></td></tr></table></figure><br>이에 대해 자세히 알아보자.</p>
<p>1.centos =<br>  사용자가 centos 이다.</p>
<p>2.x =<br>  비밀번호</p>
<p>3.1000 =<br>  centos라는 사용자의 ID</p>
<p>4.1000 =<br>  centos사용자는 반드시 소속된 그룹이 있어야하는데 이는 소속된 그룹의 ID 즉 그룹번호이다.<br>어떻게 그룹번호를 갖고 그룹명을 알까? /etc/group 파일에 정의되어 있다. 이 파일을 vi 에디터로 열면 그룹이름:그룹비밀번호:그룹의ID(그룹번호)의 형식을 갖는다.<br>centos:x:1000:centos  // 그룹이름:그룹비밀번호:그룹의ID(그룹번호)<br>이게 무슨뜻일까? centos라는 사용자가 centos그룹에 속해 있다는 것이다. 마지막 centos 는 생략이 가능하며 신경쓰지 않아도 된다.<br>예를 들면 홍길동이라는 부서에 홍길동 사원이 존재하는것이다. 회사에서는 부서를 만들고 사원을 뽑는다. 마찬가지로 centos도 새로운 사용자를 만들면 사용자 이름과 같은 그룹을 만들고 이 그룹에 해당시킨다.<br>이것과 관련해 실습을 진행해보자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># useradd myuser    //유저 등록</div><div class="line"># tail -5 /etc/passwd    //해당파일의 마지막 5줄만 보기</div><div class="line"></div><div class="line">myuser:x:1001:1001::/home/myuser:/bin/bash  //그룹번호 1001을 기억</div><div class="line"></div><div class="line"># tail -5 /etc/group    //해당파일의 마지막 5줄만 보기</div><div class="line"></div><div class="line">myuser:x:1001:  //사용자 이름과 같은 그룹이 만들어졌고 그 그룹에 사용자가 속해있다.</div></pre></td></tr></table></figure></p>
<p>5.centos =<br>  전체이름이다. 생략이 가능하다</p>
<p>6./home/centos centos =<br>  사용자의 홈 디렉토리</p>
<p>7./bin/bash =<br>  사용할 기본 쉘</p>
<h4 id="실습해보자"><a href="#실습해보자" class="headerlink" title="실습해보자"></a>실습해보자</h4><p>디렉토리 설명<br>/etc/passwd : 사용자 정보가 있음<br>/etc/shadow : 사용자 비밀번호가 있음(비밀번호는 암호화되어서 저장됨)<br>/etc/group  : 그룹정보가 있음</p>
<h5 id="실습-1"><a href="#실습-1" class="headerlink" title="실습 1"></a>실습 1</h5><p>유저 생성, 유저 그룹지정, 그룹생성<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"># useradd user1         //user1생성</div><div class="line"># tail -5 /etc/passwd   //생성되었는지 확인</div><div class="line">user1:x:1001:1001::/home/user1:/bin/bash  //잘생성됨</div><div class="line"></div><div class="line"># tail -5 /etc/shadow     //사용자의 비밀번호를 확인해보자</div><div class="line">user1:!!:17350:0:99999:7:::   //비밀번호를 설정하지 않았지만 암호화 되어있다.</div><div class="line"></div><div class="line"># tail -5 /etc/group    //사용자의 그룹이 생성되었나 확인해보자</div><div class="line">user1:x:1001:           //잘 생성되었다</div><div class="line"></div><div class="line">하지만 바람직하지 않다.! user1의 그룹이 user1이라니 말이되나!</div><div class="line"></div><div class="line">다시실습해보자 이번에는 그룹을 먼저 생성하고 사용자를 소속시키자</div><div class="line"></div><div class="line"># userdel -r user1 //보통 현업에선 -r옵션을 넣어 디렉토리까진 지우지 않는다.</div><div class="line">                  //하지만 실습이므로 과감하게 지운다.</div><div class="line"># groupadd centosGroup    //그룹생성</div><div class="line"></div><div class="line"># tail -5 /etc/group    //잘생성되었나 확인</div><div class="line">centosGroup:x:1001:   //잘생성됨</div><div class="line"></div><div class="line"># useradd -g centosGroup user1  //centosGroup에 소속된 user1생성</div><div class="line"># useradd -g centosGroup user2  //centosGroup에 소속된 user2생성</div><div class="line"></div><div class="line"># tail -5 /etc/passwd     //잘 생성되었나 확인.</div><div class="line">user1:x:1001:1001::/home/user1:/bin/bash</div><div class="line">user2:x:1002:1001::/home/user2:/bin/bash</div><div class="line">  //잘 생성되었고 사용자 ID는 다르지만 같은 그룹ID를 갖는다.</div><div class="line"></div><div class="line"># passwd user1   //암호지정. 이후 1234 1234입력</div><div class="line">                //일반사용자는 암호를 8자 미만으로 지정못하지만</div><div class="line">                //루트사용자는 8자 미만으로 지정해줄수 있다.</div><div class="line"></div><div class="line"># passwd user2   //암호지정. 이후 1234 1234입력</div><div class="line"></div><div class="line"># tail -5 /etc/shadow   //user1,user2의 암호를 보자</div><div class="line">                      //user1,user2의 암호를 1234로 지정하였지만</div><div class="line">                      //암호화된 값이 다르다!!</div></pre></td></tr></table></figure></p>
<h5 id="실습-2"><a href="#실습-2" class="headerlink" title="실습 2"></a>실습 2</h5><p>x윈도에서 사용자권한관리 - x윈도가 없으면 안되므로 비추<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum -y install system-config-users  //system-config-users패키지 설치</div><div class="line"># system-config-users   //x윈도우 상에서 사용자 관리가 가능하다!</div></pre></td></tr></table></figure></p>
<h3 id="관련-명령어"><a href="#관련-명령어" class="headerlink" title="관련 명령어"></a>관련 명령어</h3><p>189p 참고<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">-u : ID 지정</div><div class="line">-g : 그룹지정</div><div class="line">-d : 홈디렉터리지정</div><div class="line">-s : 쉘 지정</div><div class="line"></div><div class="line"># useradd shkim //새로운 사용자를 추가</div><div class="line"></div><div class="line"># passwd shkim //사용자의 비밀번호를 지정하거나 변경</div><div class="line"></div><div class="line"># usermod -g root shkim  //사용자의 속성을 변경</div><div class="line"></div><div class="line"># userdel shkim //사용자는 지우나 디렉토리를 제거하지 않음.</div><div class="line">            //-r 옵션이 존재. 이는 사용자가 사용하던 디렉토리까지 제거</div><div class="line"></div><div class="line"># change -m 2 shkim  //사용자의 암호를 주기적으로 변경하도록 설정</div><div class="line">          //-m 2는 최소 이틀이상 써야한다.(189p 참고)</div><div class="line"></div><div class="line"># groups // 사용자가 속한 그룹을 보여줌</div><div class="line"></div><div class="line"># groupadd newgroup   //새로운 그룹을 새성          </div><div class="line"></div><div class="line"># groupmod  -n newgroup mygroup//그룹의 속성을 변경 newgroup을 mygroup로 변경</div><div class="line"></div><div class="line"># groupdel newgroup //그룹을 삭제</div><div class="line"></div><div class="line"># gpasswd newgroup  //그룹의 암호설정</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;리눅스는 다중 사용자 시스템이다. 즉 서버 한대에 여러명이 접속한다. 그러므로 사용자를 관리하고 그룹을 관리하는게 중요한 이슈이다.&lt;br&gt;기본적으로 rootㄹ는 슈퍼유저가 관리하며 모든 사용자는 하나 이상의 그룹에 소속되어야 한다.&lt;br&gt;사용자는
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>4장. 리눅스 기본 명령어</title>
    <link href="http://KKimSangHeon.github.io/2017/07/02/ThisIsLinux4/"/>
    <id>http://KKimSangHeon.github.io/2017/07/02/ThisIsLinux4/</id>
    <published>2017-07-02T06:25:50.000Z</published>
    <updated>2017-07-02T08:19:39.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="기본명령어"><a href="#기본명령어" class="headerlink" title="기본명령어"></a>기본명령어</h3><p>당연히 알고있어야 하는것들이다! 자연스럽게 사용할줄 알아야함!</p>
<p>폴더 == 디렉토리<br>리눅스는 숨김파일일 경우 파일명 앞에 . 이 붙는다. (폴더도 마찬가지)</p>
<p>$ ls -l 명령어를 실행하였을 때<br>-로 시작하면 파일 d로 시작하면 디렉토리</p>
<h4 id="ls-파일-목록보기"><a href="#ls-파일-목록보기" class="headerlink" title="ls 파일 목록보기"></a>ls 파일 목록보기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ ls    // 파일이나 폴더의 목록을 보는것 윈도우의 dir.</div><div class="line"></div><div class="line">$ ls /etc/sysconfig   //특정 폴더내의 목록을 보는것</div><div class="line"></div><div class="line">$ ls -a   //숨김파일까지 보는것.</div><div class="line"></div><div class="line">$ ls -l  // 자세히 보는것</div><div class="line">         //-로 시작하면 파일 d로 시작하면 디렉토리</div><div class="line"></div><div class="line">$ ls *.cfg //확장자가 cfg인것</div><div class="line"></div><div class="line">$ ls ls my* // my로 시작하는것들 조회</div><div class="line"></div><div class="line">$ ls -al //숨김파일까지 자세히 조회</div><div class="line">          // -a, -l 의 결합</div></pre></td></tr></table></figure>
<h4 id="cd-디렉토리-이동"><a href="#cd-디렉토리-이동" class="headerlink" title="cd 디렉토리 이동"></a>cd 디렉토리 이동</h4><p>x윈도가 있으면 편하겠지만 없으면 이동이 명령어로만 가능하기 때문에 익숙해지자.</p>
<p>cd 명령어를 쓴 후에는 pwd 를 통해 현재 디렉토리를 보자. 리눅스의 디렉터리 구조를 이해 할 수 있게된다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ cd /etc/sysconfig/</div><div class="line">$ pwd     //현재 디렉터리 위치 출력</div><div class="line"></div><div class="line">$ cd /    // 최상위폴더로 이동(루트 디렉토리라함)</div><div class="line">          // $ cd / 명령어의 경우 다음 명령창이 아래와 같이 나온다.</div><div class="line">          // [root@localhost /]#</div><div class="line"></div><div class="line"></div><div class="line">$ cd      //  &quot;/루트 디렉토리&quot;(현재 사용자의 홈폴더)로 이동</div><div class="line">          //  $ cd 명령어의 경우 다음 명령창이 아래와 같이 나온다.</div><div class="line">          //  [root@localhost ~]</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$ cd /etc       //루트 디렉토리의 etc로 이동(절대경로)</div><div class="line">$ cd etc        //현재 디렉토리에서 etc로 이동 (상대경로)</div><div class="line">$ cd ..         //현재 디렉토리의 바로 앞 디렉토리로 이동</div><div class="line">$ cd .          //현재 디렉토리 반환</div><div class="line"></div><div class="line">$ cd ~centos  //해당 사용자의 홈 디렉토리로 이동</div><div class="line">              //즉 $ cd~사용자 == $ cd</div><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="여기서-주의할점"><a href="#여기서-주의할점" class="headerlink" title="여기서 주의할점!"></a>여기서 주의할점!</h4><p>우리가 서버에서 사용하는 계정은 root이라는 점을 잊지말자.<br>$ cd / 명령어를 실행하면 루트 디렉토리 즉 최상위 폴더로 이동하는데 여기서 ls를 입력하면 root 폴더가 하나 있다. 이 두가지를 혼동하는 경우가 많은데 주의 하도록 하자. 루트 디렉토리 그리고 루트 디렉토리에 존재하는 root 폴더는 다르며 루트 디렉토리안의 root 폴더는 root계정이기 때문에 존재하는것이다. 강의에서는 루트 디렉토리 그리고 /root 디렉토리 로 구분한다.</p>
<h4 id="에-대한-이해"><a href="#에-대한-이해" class="headerlink" title="..에 대한 이해"></a>..에 대한 이해</h4><p>다음을 이해해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost /]# cd /etc/sysconfig/network-scripts/</div><div class="line">[root@localhost network-scripts]# cd ../../../root</div><div class="line">[root@localhost ~]# pwd</div><div class="line">/root</div></pre></td></tr></table></figure></p>
<h4 id="에-대한-이해-1"><a href="#에-대한-이해-1" class="headerlink" title=".에 대한 이해"></a>.에 대한 이해</h4><p>다음을 이해해보자<br>이거를 어디다 쓸까 싶지만 현재 디렉토리의 어떤것을 실행하거나 어떤 것을 현재 디렉토리로 옮길 때 사용된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cd .</div><div class="line">[root@localhost ~]# pwd</div><div class="line">/root</div></pre></td></tr></table></figure></p>
<h4 id="touch-비어있는-파일-생성"><a href="#touch-비어있는-파일-생성" class="headerlink" title="touch 비어있는 파일 생성"></a>touch 비어있는 파일 생성</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch        //비어있는 파일 생성</div></pre></td></tr></table></figure>
<h4 id="rm-파일-삭제"><a href="#rm-파일-삭제" class="headerlink" title="rm 파일 삭제"></a>rm 파일 삭제</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rm file1    // 삭제명령어 (삭제할것인지 재확인함)</div><div class="line"></div><div class="line">$ rm -f file1   // 삭제 명령어(삭제할것인지 확인하지 않고 삭제)</div></pre></td></tr></table></figure>
<h4 id="cp-복사"><a href="#cp-복사" class="headerlink" title="cp 복사"></a>cp 복사</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp file3 file4  //file3가 file4로 복사됨</div><div class="line"></div><div class="line">$ cp -r /etc/sysconfig .  //  /etc/sysconfig폴더를 현재 폴더에 복사한다. -r은 디렉토리 복사일 때 필요함</div></pre></td></tr></table></figure>
<h4 id="mv-이동-및-파일명-변경"><a href="#mv-이동-및-파일명-변경" class="headerlink" title="mv 이동 및 파일명 변경"></a>mv 이동 및 파일명 변경</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mv myfile3.txt /root/sysconfig    //myfile3.txt파일을 /root/sysconfig 로 이동</div><div class="line"></div><div class="line">$ mv file file3     //파일이름을 file에서 file3로 변경</div></pre></td></tr></table></figure>
<h4 id="mkdir-디렉토리-생성"><a href="#mkdir-디렉토리-생성" class="headerlink" title="mkdir 디렉토리 생성"></a>mkdir 디렉토리 생성</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir folder1   //folder1 디렉토리 생성</div><div class="line"></div><div class="line">$ mkdir -p dir1/dir2/dir3     // dir1/dir2/dir3 디렉토리를 생성</div><div class="line">                      //  디렉토리가 3개가 만들어지는것이 아니라 dir1 안에 dir2 안에 dir3가 만들어진다.</div></pre></td></tr></table></figure>
<h4 id="rmdir-디렉토리-제거"><a href="#rmdir-디렉토리-제거" class="headerlink" title="rmdir 디렉토리 제거"></a>rmdir 디렉토리 제거</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ rmdir folder1   //디렉토리 제거 (폴더가 비어있을 경우 가능)</div><div class="line"></div><div class="line">$ rmdir -r folder1  //내부에 파일이 있는 디렉토리 제거</div><div class="line">              //(안에 들어있는 파일 하나하나 지울것인지 다물어본다.)</div><div class="line"></div><div class="line">$ rm -rf dir1   //묻지도 따지지도 않고 dir1 디렉토리 제거</div><div class="line">                //매우 위험하다!! 주의해서 사용</div></pre></td></tr></table></figure>
<h4 id="cat-파일-읽기"><a href="#cat-파일-읽기" class="headerlink" title="cat 파일 읽기"></a>cat 파일 읽기</h4><p>사실 vi를 써도 되지만 그게 귀찮을 떄 사용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat anaconda.ks.cfg</div></pre></td></tr></table></figure></p>
<h4 id="head-파일-읽기"><a href="#head-파일-읽기" class="headerlink" title="head 파일 읽기"></a>head 파일 읽기</h4><p>맨 위의 10줄만 보기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ head anaconda-ks.cfg</div></pre></td></tr></table></figure></p>
<h4 id="tail-파일-읽기"><a href="#tail-파일-읽기" class="headerlink" title="tail 파일 읽기"></a>tail 파일 읽기</h4><p>맨 밑의 10줄만 보기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tail anaconda-ks.cfg</div></pre></td></tr></table></figure></p>
<h4 id="more-less-페이지-단위로-읽기"><a href="#more-less-페이지-단위로-읽기" class="headerlink" title="more,less 페이지 단위로 읽기"></a>more,less 페이지 단위로 읽기</h4><p>페이지 단위로 끊어 읽기 스페이스는 다음페이지 B는 이전페이지 종료하려면 Q<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ more anaconda-ks.cfg</div><div class="line"></div><div class="line">$ less anaconda-ks.cfg  //less more보다 몇가지 명령어가 더 존재함</div></pre></td></tr></table></figure></p>
<h4 id="file-파일이-어떤-파일인지-확인"><a href="#file-파일이-어떤-파일인지-확인" class="headerlink" title="file 파일이 어떤 파일인지 확인"></a>file 파일이 어떤 파일인지 확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ file file1    //디렉터리인지, 링크인지, 비었는지 등을 알려준다.</div></pre></td></tr></table></figure>
<p>$ file /dev/cdrom 은 링크이다. 내 환경에서는 sr0을 가르키지만 다를 수 있다는 점을 알고있자.</p>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ clear     //화면을 깨끗하게 해준다.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;기본명령어&quot;&gt;&lt;a href=&quot;#기본명령어&quot; class=&quot;headerlink&quot; title=&quot;기본명령어&quot;&gt;&lt;/a&gt;기본명령어&lt;/h3&gt;&lt;p&gt;당연히 알고있어야 하는것들이다! 자연스럽게 사용할줄 알아야함!&lt;/p&gt;
&lt;p&gt;폴더 == 디렉토리&lt;br&gt;리눅
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
</feed>
