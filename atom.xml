<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-08-09T04:41:54.150Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11.소켓과 스레드의 결합</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata12/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata12/</id>
    <published>2017-08-09T04:15:08.000Z</published>
    <updated>2017-08-09T04:41:54.150Z</updated>
    
    <content type="html"><![CDATA[<p>여러 클라이언트가 접속가능한 서버<br><figure class="highlight java"><figcaption><span>EchoServerReceiveThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// 반복문 내에서 blocking이 되기떄문에 CPU를 많이먹지 않는다.</span></div><div class="line">			<span class="keyword">new</span> EchoServerReceiveThread( socket ).start();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">			<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consoLog</span><span class="params">( String log )</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"[server:"</span> );</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>EchoServerReceiveThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerReceiveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Socket socket;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoServerReceiveThread</span><span class="params">( Socket socket )</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 4. 연결성공</span></div><div class="line">		InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">		<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">		String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">		consoleLog(<span class="string">"connected from "</span>+ remoteHostAddress);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line"></div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is, <span class="string">"UTF-8"</span>));</div><div class="line"></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">			<span class="comment">// auto flush를 true로 한다. true로 안하면</span></div><div class="line">			<span class="comment">// 버퍼가 다찬다음 나가기 때문에 늦게나간다.</span></div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				<span class="comment">// 6. 데이터 읽기</span></div><div class="line">				String message = br.readLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123; <span class="comment">// 정상종료</span></div><div class="line">					consoleLog(<span class="string">"disconnection by client"</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				consoleLog(<span class="string">" received : "</span> + message);</div><div class="line"></div><div class="line">				<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">				pw.println(message);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">			consoleLog(<span class="string">"sudden closed by client"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consoleLog</span><span class="params">(String log)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"[Server: "</span>+getId() + <span class="string">"]"</span> + log);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;여러 클라이언트가 접속가능한 서버&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;EchoServerReceiveThread.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>10.쓰레드</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata11/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata11/</id>
    <published>2017-08-09T02:42:34.000Z</published>
    <updated>2017-08-09T04:14:24.003Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>MultiThreadEx.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadEx</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> AlphabetThread();		<span class="comment">//쓰레드 생성방법1</span></div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> DigitThread());	<span class="comment">//쓰레드 생성방법2</span></div><div class="line">		<span class="comment">//매개변수로 Runnable이 구현된 객체를 받음</span></div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;	<span class="comment">//쓰레드 생성방법3</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">for</span>( <span class="keyword">char</span> c = <span class="string">'A'</span>; c&lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">					System.out.print( c );</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;			</div><div class="line">		&#125;).start();;</div><div class="line"></div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>DigitThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.print( i );</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep( <span class="number">1000</span> );</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>AlphabetThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlphabetThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">			System.out.print( c );</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep( <span class="number">1000</span> );</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MultiThreadEx.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>9. TCP 소켓 프로그래밍1</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata10/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata10/</id>
    <published>2017-08-09T00:05:06.000Z</published>
    <updated>2017-08-09T02:42:16.840Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP : 스트림(stream) 통신 프로토콜<br>양쪽의 소켓이 연결된 상태에서 통신이 가능하다. (연결지향 프로토콜)<br>신뢰성 있는 데이터 통신<br>한 번 연결이 되면 연결이 끊어 질 때까지 송신한 데이터는 차례대로 목적지의 소켓에 전달<br>자바는  java.net 패키지에  TCP 소켓 프로그래밍을  쉽게 하도록  관련 클래스를  제공하고 있다.<br>라이브러리의 사용법과  동작순서를 정확하게 이해하고 있어야 한다.<br>ServerSocket과 Socket 클래스를 사용하게 된다.  </p>
<figure class="highlight java"><figcaption><span>TCPServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPSever</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// blocking</span></div><div class="line"></div><div class="line">			<span class="comment">// 4. 연결성공</span></div><div class="line">			InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">			<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">			String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">			System.out.println(<span class="string">"[server] connected from "</span> + remoteHostAddress + remoteHostPort);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line">				OutputStream os = socket.getOutputStream();</div><div class="line"></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					<span class="comment">// 6. 데이터 읽기</span></div><div class="line">					<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">					<span class="keyword">int</span> readByteCount = is.read(buffer); <span class="comment">// block</span></div><div class="line"></div><div class="line">					<span class="keyword">if</span> (readByteCount &lt;= -<span class="number">1</span>) &#123;	<span class="comment">//정상종료</span></div><div class="line">						System.out.println(<span class="string">"[server] disconnection by client"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					String data = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, readByteCount, <span class="string">"utf-8"</span>);</div><div class="line">					System.out.println(<span class="string">"[server] received : "</span> + data);</div><div class="line"></div><div class="line">					<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">					os.write(data.getBytes(<span class="string">"utf-8"</span>));</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span>(SocketException e) &#123;</div><div class="line">				<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">				System.out.println(<span class="string">"[server] sudden closed by client"</span>);</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">						socket.close();</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>TCPClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> Socket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 서버 연결</span></div><div class="line">			socket.connect(<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">			<span class="comment">// 3. I/O 받아오기</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line">			OutputStream os = socket.getOutputStream();</div><div class="line"></div><div class="line">			<span class="comment">// 4. 쓰기 / 읽기</span></div><div class="line">			String data = <span class="string">"hello"</span>;</div><div class="line">			os.write( data.getBytes( <span class="string">"utf-8"</span> ));</div><div class="line"></div><div class="line">			<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">			<span class="keyword">int</span> readByteCount = is.read( buffer );</div><div class="line">			<span class="keyword">if</span>( readByteCount &lt;= -<span class="number">1</span>) &#123;</div><div class="line">				System.out.println( <span class="string">"[client] disconnection by server"</span>);				</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			data = <span class="keyword">new</span> String( buffer, <span class="number">0</span>, readByteCount, <span class="string">"utf-8"</span>);</div><div class="line">			System.out.println(<span class="string">"[client] received:"</span>+ data);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>에코서버, 클라이언트 만들기</p>
<figure class="highlight java"><figcaption><span>EchoServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// blocking</span></div><div class="line"></div><div class="line">			<span class="comment">// 4. 연결성공</span></div><div class="line">			InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">			<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">			String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">			System.out.println(<span class="string">"[server] connected from "</span> + remoteHostAddress + remoteHostPort);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line"></div><div class="line"></div><div class="line">				BufferedReader br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader( is, <span class="string">"UTF-8"</span> ));</div><div class="line"></div><div class="line">				PrintWriter pw = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">												<span class="comment">// auto flush를 true로 한다. true로 안하면</span></div><div class="line">												<span class="comment">//버퍼가 다찬다음 나가기 때문에 늦게나간다.</span></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					<span class="comment">// 6. 데이터 읽기</span></div><div class="line">					String message = br.readLine();</div><div class="line"></div><div class="line">					<span class="keyword">if</span> ( message == <span class="keyword">null</span> ) &#123;	<span class="comment">//정상종료</span></div><div class="line">						System.out.println(<span class="string">"[server] disconnection by client"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					System.out.println(<span class="string">"[server] received : "</span> + message);</div><div class="line"></div><div class="line">					<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">					pw.println(message);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span>(SocketException e) &#123;</div><div class="line">				<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">				System.out.println(<span class="string">"[server] sudden closed by client"</span>);</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">						socket.close();</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>EchoClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">static</span> Scanner scanner;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> Socket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 서버 연결</span></div><div class="line">			socket.connect(<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">			<span class="comment">// 3. I/O 받아오기</span></div><div class="line">			BufferedReader br =</div><div class="line">					<span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter( <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream(),<span class="string">"UTF-8"</span>),<span class="keyword">true</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 4. 쓰기 / 읽기</span></div><div class="line">			 scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				System.out.print( <span class="string">"&gt;&gt;"</span> );</div><div class="line">				String message = scanner.nextLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(<span class="string">"exit"</span>.equals(message)) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//메세지 보내기</span></div><div class="line">				pw.println( message );</div><div class="line"></div><div class="line">				<span class="comment">//에코 메시지 받기</span></div><div class="line">				String echoMessage = br.readLine();</div><div class="line">				<span class="keyword">if</span>( echoMessage == <span class="keyword">null</span>) &#123;</div><div class="line">					System.out.println(<span class="string">"[client] Disconnection by Server"</span>);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//출력</span></div><div class="line">				System.out.println( <span class="string">"&lt;&lt;"</span> + echoMessage );</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			scanner.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h4&gt;&lt;p&gt;TCP : 스트림(stream) 통신 프로토콜&lt;br&gt;양쪽의 소켓이 연결된 상태에서 통신이 가능하다. (연결지향 프로토콜
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>8. 네트워크와 소켓의 이해</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata9/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata9/</id>
    <published>2017-08-07T05:01:36.000Z</published>
    <updated>2017-08-08T07:09:50.450Z</updated>
    
    <content type="html"><![CDATA[<h5 id="네트워크란"><a href="#네트워크란" class="headerlink" title="네트워크란?"></a>네트워크란?</h5><p>“유/무선 으로 연결되어 있는  Device들의  집합 ”</p>
<h5 id="네트워킹"><a href="#네트워킹" class="headerlink" title="네트워킹?"></a>네트워킹?</h5><p>디바이스들 간에 미리 정의된 프로토콜을 사용하여 데이터를 교환 하는것.<br>이를위해서는 프로토콜이 필요하다.</p>
<h5 id="클라이언트-서버구조"><a href="#클라이언트-서버구조" class="headerlink" title="클라이언트 서버구조"></a>클라이언트 서버구조</h5><p>Client  -&gt; Server<br>request</p>
<p>Server -&gt; Client<br>response(ACK)</p>
<p>서버 : 서버프로그램이 돌고있는 장비</p>
<h5 id="프로토콜"><a href="#프로토콜" class="headerlink" title="프로토콜"></a>프로토콜</h5><p>디바이스간 데이터 통신을 위해 필요한 규약<br>Hyper Text Transfer Protocol<br>File Transfer Protocol<br>SMTP 등등.</p>
<h5 id="패킷"><a href="#패킷" class="headerlink" title="패킷"></a>패킷</h5><p>패킷은 Header, Body부분으로 나뉜다.<br>Header은 Address, checksum 등 으로 구성되고<br>Body는 Data로 구성된다.</p>
<h4 id="소켓"><a href="#소켓" class="headerlink" title="소켓"></a>소켓</h4><h5 id="소켓-1"><a href="#소켓-1" class="headerlink" title="소켓?"></a>소켓?</h5><p>TCP / IP 프로토콜의 프로그래머 인터페이스를 의미<br>네트워크 프로그래밍에서 개발자에게 네트워크에 접근할 수  있는 인터페이스 제공</p>
<h5 id="포트"><a href="#포트" class="headerlink" title="포트?"></a>포트?</h5><p>프로세스를 구분할 수 있는 주소<br>16비트 정수를 사용한다.</p>
<p>Address =&gt; IP Address</p>
<p>Socket Address =&gt; IP Address + Port</p>
<figure class="highlight java"><figcaption><span>LocalHost.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalHost</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String hostName = inetAddress.getHostName();</div><div class="line">			String hostAddress = inetAddress.getHostAddress();</div><div class="line">			<span class="keyword">byte</span>[] addresses = inetAddress.getAddress();	<span class="comment">//byte배열로 ip 받아오는 함수</span></div><div class="line"></div><div class="line">			System.out.println(hostName);	<span class="comment">//컴퓨터이름</span></div><div class="line">			System.out.println(hostAddress); <span class="comment">//ipconfig의 결과와 같음</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; addresses.length ; i++) &#123;</div><div class="line">				System.out.print( addresses[i] &amp; <span class="number">0x000000ff</span>);</div><div class="line">					<span class="comment">//MSB로 인해 음수가 나와 마스킹을 해주는것.</span></div><div class="line">				<span class="keyword">if</span>( i &lt; <span class="number">3</span> ) &#123;</div><div class="line">					System.out.print(<span class="string">"."</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NSLookup기능을 구현해보자.</p>
<figure class="highlight java"><figcaption><span>NSLookup.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSLookup</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		String host = <span class="string">""</span>;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (!(host.equals(<span class="string">"exit"</span>))) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				System.out.print(<span class="string">"&gt;"</span>);</div><div class="line">				host = sc.nextLine();</div><div class="line"></div><div class="line"></div><div class="line">				InetAddress[] inetAddresses = InetAddress.getAllByName(host);</div><div class="line"></div><div class="line">				<span class="keyword">for</span> (InetAddress inetAddress : inetAddresses) &#123;</div><div class="line">					System.out.println(inetAddress.getHostAddress());</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;네트워크란&quot;&gt;&lt;a href=&quot;#네트워크란&quot; class=&quot;headerlink&quot; title=&quot;네트워크란?&quot;&gt;&lt;/a&gt;네트워크란?&lt;/h5&gt;&lt;p&gt;“유/무선 으로 연결되어 있는  Device들의  집합 ”&lt;/p&gt;
&lt;h5 id=&quot;네트워킹&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>7. 스트림</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata8/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata8/</id>
    <published>2017-08-07T00:17:29.000Z</published>
    <updated>2017-08-08T02:11:38.343Z</updated>
    
    <content type="html"><![CDATA[<h5 id="InputStream-1-byte-단위로-읽는놈"><a href="#InputStream-1-byte-단위로-읽는놈" class="headerlink" title="InputStream - 1 byte 단위로 읽는놈"></a>InputStream - 1 byte 단위로 읽는놈</h5><p>ByteInputStream<br>FileInputStream</p>
<p>FilterInputStream(보조스트림)</p>
<h5 id="OutputStream-1-byte-단위로-쓰는놈"><a href="#OutputStream-1-byte-단위로-쓰는놈" class="headerlink" title="OutputStream - 1 byte 단위로 쓰는놈"></a>OutputStream - 1 byte 단위로 쓰는놈</h5><p>ByteOutputStream<br>FileOutputStream</p>
<p>FilterOutputStream(보조스트림)</p>
<h5 id="Reader-char-2byte-자바에서는-3byte-UTF-8-단위로-읽는놈"><a href="#Reader-char-2byte-자바에서는-3byte-UTF-8-단위로-읽는놈" class="headerlink" title="Reader - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 읽는놈"></a>Reader - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 읽는놈</h5><p>FileReader(InputStreamReader을 상속)<br>BufferedReader</p>
<h5 id="Writer-char-2byte-자바에서는-3byte-UTF-8-단위로-쓰는놈"><a href="#Writer-char-2byte-자바에서는-3byte-UTF-8-단위로-쓰는놈" class="headerlink" title="Writer - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 쓰는놈"></a>Writer - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 쓰는놈</h5><p>FileWriter<br>BufferedWriter</p>
<h4 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h4><p>1.주 스트림을 소스에 꽂는다.<br>2.보조스트림은 주 스트림에 꽂는다.<br>3.프로그램에서 보조스트림을 사용해서 읽는다.</p>
<figure class="highlight java"><figcaption><span>IOExample.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] src = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">		<span class="keyword">byte</span>[] dest = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">		InputStream is = <span class="keyword">new</span> ByteArrayInputStream( src );</div><div class="line">		OutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>( (data = is.read()) != -<span class="number">1</span> ) &#123;	<span class="comment">//data에 1바이트식 저장됨</span></div><div class="line">			os.write(data);		</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		dest = ((ByteArrayOutputStream)os).toByteArray();</div><div class="line"></div><div class="line">		System.out.println( Arrays.toString( src ));</div><div class="line">		System.out.println( Arrays.toString( dest ));</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>FileCopy.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopy</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		OutputStream os = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			is = <span class="keyword">new</span> FileInputStream( <span class="string">"./dooly.png"</span> );</div><div class="line"></div><div class="line">			os = <span class="keyword">new</span> FileOutputStream( <span class="string">"./dooly2.png "</span>);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> data = <span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( (data = is.read()) !=-<span class="number">1</span> ) &#123;</div><div class="line">				os.write( data );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일없음"</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);			</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span>( is != <span class="keyword">null</span>) &#123;</div><div class="line">			is.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( os != <span class="keyword">null</span>)</div><div class="line">			os.close();</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>123.txt를 UTF-8로 만들고(직접만들자)<br>FileReader로 1바이트씩 읽어보고<br>FileInputStream으로 3(UTF-8이므로..) 바이트씩 읽어보자</p>
<figure class="highlight java"><figcaption><span>FileReaderTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Reader reader = <span class="keyword">null</span>;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//비교를 위해서 두개를 만들었다.</span></div><div class="line">			reader = <span class="keyword">new</span> FileReader( <span class="string">"./hello.txt"</span> );	<span class="comment">//char 기반</span></div><div class="line">			is = <span class="keyword">new</span> FileInputStream( <span class="string">"./hello.txt "</span>);	<span class="comment">//바이트기반</span></div><div class="line"></div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;			</div><div class="line">			<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span>( (data = reader.read()) != -<span class="number">1</span> ) &#123;</div><div class="line">				count++;</div><div class="line">				System.out.println( (<span class="keyword">char</span>)data );</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println( <span class="string">"\n읽은 회수: "</span> + count );</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"========="</span>);</div><div class="line"></div><div class="line">			count = <span class="number">0</span>;</div><div class="line">			data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( (data = is.read() )!= -<span class="number">1</span>) &#123;</div><div class="line">				count++;</div><div class="line">				System.out.println( (<span class="keyword">char</span>) data);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"파일 없음 "</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러:"</span> + e);			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( reader != <span class="keyword">null</span>) &#123;</div><div class="line">					reader.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( is != <span class="keyword">null</span>) &#123;</div><div class="line">					is.close();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>보조스트림을 사용하여 보자</p>
<figure class="highlight java"><figcaption><span>BufferedOutputStreamTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedOutputStreamTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedOutputStream bos = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			bos = <span class="keyword">new</span> BufferedOutputStream( <span class="keyword">new</span> FileOutputStream( <span class="string">"./123.txt"</span> ), <span class="number">5</span> );</div><div class="line">						<span class="comment">//버퍼가 5의 크기를 갖는다 5만큼 차면 flush(비우기)가 발생함</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'1'</span> ; i &lt;= <span class="string">'9'</span> ; i++) &#123;</div><div class="line">				bos.write( i );</div><div class="line">				<span class="comment">//bos.flush();		//한번쓰고 플러시하고를 반복.(버퍼를 5로 설정한 의미가 없어짐..)</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일 없음: "</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( bos!= <span class="keyword">null</span>) &#123;</div><div class="line">					bos.close();</div><div class="line">				&#125;				</div><div class="line">			&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>주스트림 FileReader을 꽂고<br>보조스트림 BufferedReader을 꽂음.</p>
<figure class="highlight java"><figcaption><span>BufferedOutputStreamTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> FileReader(<span class="string">"./src/io/BufferedReaderTest.java"</span>));</div><div class="line"></div><div class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">			String line = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>((line = br.readLine())!= <span class="keyword">null</span>) &#123;</div><div class="line">				System.out.println(++index + <span class="string">" : "</span> + line);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span>( FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일없음: "</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(br != <span class="keyword">null</span>) &#123;</div><div class="line">					br.close();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				System.out.println(<span class="string">"파일없음"</span>+e);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>MS 949로 텍스트 파일을 하나만들자.<br>FileInputStream 주 스트림을 바이트단위로 꽂고</p>
<figure class="highlight java"><figcaption><span>InputStreamReaderTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Reader reader = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			reader =</div><div class="line">					<span class="keyword">new</span> InputStreamReader(  <span class="keyword">new</span> FileInputStream(<span class="string">"./ms949.txt"</span>), <span class="string">"MS949"</span> );</div><div class="line"></div><div class="line">			<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( ( data = reader.read()) != -<span class="number">1</span> ) &#123;</div><div class="line">				System.out.println( (<span class="keyword">char</span>)data );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일이 없음:"</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"IOException:"</span>+e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( reader!=<span class="keyword">null</span>) &#123;</div><div class="line">					reader.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>System.in으로 부터 스트림을 생성해보자<br><figure class="highlight java"><figcaption><span>KeyboardTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in, <span class="string">"UTF-8"</span>));	<span class="comment">//키보드에서 라인 단위로 읽기 위해 br사용</span></div><div class="line">				<span class="comment">//readLine() 메소드를 쓰기위해</span></div><div class="line"></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				System.out.print( <span class="string">"&gt;&gt;"</span> );</div><div class="line">				String line = br.readLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (line == <span class="keyword">null</span> ) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">"exit"</span>.equals( line )) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				System.out.println(line);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset : "</span>+e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(br != <span class="keyword">null</span>) &#123;</div><div class="line">					br.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>파일 객체사용해보자.<br>tokenizer도 사용해보자<br><figure class="highlight java"><figcaption><span>PhoneList01.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneList01</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">		File file = <span class="keyword">new</span> File( <span class="string">"./phone.txt"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span>( file.exists() == <span class="keyword">false</span> ) &#123;</div><div class="line">			System.out.println( <span class="string">"파일이 존재하지 않습니다"</span> );</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"========== 파일정보 ========="</span> );</div><div class="line">		System.out.println( <span class="string">"경로"</span> + file.getAbsolutePath() );</div><div class="line">		System.out.println( <span class="string">"크기: "</span>+ file.length()+<span class="string">"Bytes"</span> );</div><div class="line"></div><div class="line"></div><div class="line">		Date date = <span class="keyword">new</span> Date( file.lastModified() );</div><div class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">		System.out.println( <span class="string">"마지막 수정일:"</span> + sdf.format(date));</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"전화번호"</span>);</div><div class="line">		br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader( <span class="keyword">new</span> FileInputStream(file),<span class="string">"UTF-8"</span>) );</div><div class="line"></div><div class="line">		String line = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">//System.out.println(line);</span></div><div class="line">			StringTokenizer st =</div><div class="line">					<span class="keyword">new</span> StringTokenizer(line, <span class="string">"\t "</span>);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span>( st.hasMoreTokens() ) &#123;</div><div class="line">				String s = st.nextToken();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</div><div class="line">					System.out.print( s + <span class="string">":"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>( index ==<span class="number">1</span> ) &#123;</div><div class="line">					System.out.print( s+ <span class="string">"-"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>( index == <span class="number">2</span>) &#123;</div><div class="line">					System.out.print( s+ <span class="string">"-"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					System.out.print( s);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				index++;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			System.out.print(<span class="string">"\n"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">catch</span> ( UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset"</span>);</div><div class="line">		&#125;  <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span>( br !=<span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					br.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>위에서 했던 작업을 Scanner로 간편하게 해보자<br><figure class="highlight java"><figcaption><span>PhoneList02.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneList02</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner scanner = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File file = <span class="keyword">new</span> File(<span class="string">"./phone.txt"</span>);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (file.exists() == <span class="keyword">false</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"파일이 존재하지 않습니다"</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"========== 파일정보 ========="</span>);</div><div class="line">			System.out.println(<span class="string">"경로"</span> + file.getAbsolutePath());</div><div class="line">			System.out.println(<span class="string">"크기: "</span> + file.length() + <span class="string">"Bytes"</span>);</div><div class="line"></div><div class="line">			Date date = <span class="keyword">new</span> Date(file.lastModified());</div><div class="line">			SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">			System.out.println(<span class="string">"마지막 수정일:"</span> + sdf.format(date));</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"전화번호"</span>);</div><div class="line">			<span class="comment">// 여기까지는 PhoneList01과 같다</span></div><div class="line"></div><div class="line">			scanner = <span class="keyword">new</span> Scanner(file);</div><div class="line">			<span class="keyword">while</span>( scanner.hasNext() ) &#123;</div><div class="line">				String name = scanner.next();</div><div class="line">				String phone1 = scanner.next();</div><div class="line">				String phone2 = scanner.next();</div><div class="line">				String phone3 = scanner.next();</div><div class="line"></div><div class="line">				System.out.println(name + <span class="string">":"</span> + phone1 + <span class="string">"-"</span> + phone2 + <span class="string">"-"</span> + phone3);</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> ( scanner != <span class="keyword">null</span> ) &#123;</div><div class="line">				scanner.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;InputStream-1-byte-단위로-읽는놈&quot;&gt;&lt;a href=&quot;#InputStream-1-byte-단위로-읽는놈&quot; class=&quot;headerlink&quot; title=&quot;InputStream - 1 byte 단위로 읽는놈&quot;&gt;&lt;/a&gt;InputS
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>6. 제네릭, 가변변수, 익명클래스, Collection프레임워크</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata7/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata7/</id>
    <published>2017-08-07T00:04:17.000Z</published>
    <updated>2017-08-07T06:04:14.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="제네릭"><a href="#제네릭" class="headerlink" title="제네릭"></a>제네릭</h3><p>오버로딩을 대체할 수 있으며 유용하다.</p>
<p>메소드에 제네릭을 적용<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T,P,Q,R&gt; <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">( T t )</span> </span>&#123;</div><div class="line">  System.out.println(t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">  println( <span class="number">10</span> );</div><div class="line">  println( <span class="keyword">true</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>메소드 반환형에 제네릭 적용<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T, P&gt; <span class="function">List&lt;P&gt; <span class="title">println</span><span class="params">( T t )</span> </span>&#123;</div><div class="line">  System.out.println( t );</div><div class="line"></div><div class="line">  List&lt;P&gt; list = <span class="keyword">new</span> ArrayList&lt;P&gt;();</div><div class="line"></div><div class="line">  <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>제네릭 배열을 어떻게 동적으로 생성하느냐<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">( E[] objects, <span class="keyword">int</span> capacity )</span> </span>&#123;</div><div class="line">  <span class="comment">//buffer = new E[ capacity ];	오류발생</span></div><div class="line">  <span class="comment">//방법1.</span></div><div class="line">  buffer = ( E[] ) Array.newInstance(objects.getClass(), capacity);</div><div class="line">  <span class="comment">//방법2. 방법2가 더 선호된다. 객체를 생성하지 않아도 된다는점 때문에</span></div><div class="line">  buffer = ( E[] )Array.newInstance(Object.class, capacity);</div><div class="line">  <span class="comment">//방법3. 방법 2와 일치하는방식이다.</span></div><div class="line">  buffer = ( E[] )<span class="keyword">new</span> Object[capacity];</div><div class="line">  <span class="comment">//방법 3을 제일 많이 쓴다.</span></div><div class="line"></div><div class="line">  <span class="keyword">this</span>.capacity = capacity;</div><div class="line">  currentIndex = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>제네릭 호출 방식<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    MyStack&lt;String&gt; stack = <span class="keyword">new</span> MyStack&lt;String&gt;(<span class="number">3</span>);</div><div class="line">    <span class="comment">//String의 스택을 생성한다.</span></div><div class="line"></div><div class="line">    MyStack&lt;?&gt; stack = <span class="keyword">new</span> MyStack&lt;String&gt;(<span class="number">3</span>);</div><div class="line">    <span class="comment">//모든 타입의 객체를 생성하겠다.</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> .... f(List&lt;? extends Shape&gt;)&#123;</div><div class="line">  <span class="comment">// Shape를 상속한 것들의 리스트를 파라미터로 받음</span></div><div class="line">  <span class="comment">//와일드 카드를 사용해서 제네릭 타입 제한하기.</span></div><div class="line">    ...</div><div class="line">&#125;  </div></pre></td></tr></table></figure></p>
<h3 id="가변변수"><a href="#가변변수" class="headerlink" title="가변변수"></a>가변변수</h3><p>가변변수를 배우기 전에는 파라미터에 배열을 넣을 생각을 할 것이다. 하지만 이를 대체할 수 있는것이 가변변수이다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">  println2( <span class="string">"둘리"</span> );</div><div class="line">  println2( <span class="string">"둘리"</span>, <span class="string">"마이콜"</span> );</div><div class="line">  println2( <span class="string">"둘리"</span>, <span class="string">"마이콜"</span>, <span class="string">"또치"</span>);</div><div class="line"></div><div class="line">  <span class="comment">//println3( new String[]&#123;"둘리", "마이콜", "또치"&#125;); 배열사용</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println2</span><span class="params">(String ... params)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>( String s : params)&#123;</div><div class="line">      System.out.println(s);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>아래의 경우 Object를 파라미터로 주면 캐스팅을 계속 해줘야한다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">println</span><span class="params">( T t)</span> </span>&#123;</div><div class="line">  System.out.println(t);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Object o )</span> </span>&#123;</div><div class="line">  System.out.println(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="익명클래스"><a href="#익명클래스" class="headerlink" title="익명클래스"></a>익명클래스</h3><p>파라미터를 전달하는 부분에서 객체를 생성하여 메소드를 호출.<br>객체를 생성하지 않고 메소드 호출부분에서 객체를 생성함.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//anonymous class object</span></div><div class="line">draw( <span class="keyword">new</span> Drawable() &#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">				System.out.println(<span class="string">"한 번만 만들고 버릴 도형을 그렸습니다"</span>);</div><div class="line">  &#125;			</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection인터페이스는 inteator() 메소드를 갖고 있다.<br>List, Set 클래스는 Collection클래스를 구현하며 List는 중복허용, 순서를 갖는다. 그러나 Set는 중복을 허용하지 않으며 순서를 갖지 않는다.<br>List인터페이스는 add, get, remove를 갖는다.<br>LinkedList, ArrayList가 List 인터페이스를 구현한다.</p>
<p>ArrayList는 빈번한 삽입,삭제가 일어나는 경우 사용하면 안된다. 그 과정이 길기 떄문에.<br>LinkedList는 삽입삭제가 유용하나 10000번째 놈이면 10000번을 next해야한다.</p>
<p>멀티스레드에서 ArrayList, LinkedList의 add를 사용할 때는 동기화 처리를 해줘야한다. 하지만 Vector은 멀티스레드 환경에서 동기화를 해주지 않아도 된다.</p>
<h4 id="ArrayList-LinkedList-VectorTest2"><a href="#ArrayList-LinkedList-VectorTest2" class="headerlink" title="ArrayList , LinkedList, VectorTest2"></a>ArrayList , LinkedList, VectorTest2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">                            LinkedList&lt;String&gt;();</div><div class="line">                            Vector&lt;String&gt;();</div><div class="line"></div><div class="line">		<span class="comment">//삽입</span></div><div class="line">		list.add( <span class="string">"둘리"</span> );</div><div class="line">		list.add( <span class="string">"마이콜"</span> );</div><div class="line">		list.add( <span class="string">"도우넛"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//순회1</span></div><div class="line">		<span class="keyword">int</span> count = list.size();</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count ; i++) &#123;</div><div class="line">			String s = list.get( i );</div><div class="line">			System.out.println(i);			</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//제거</span></div><div class="line">		list.remove( <span class="number">1</span> );</div><div class="line"></div><div class="line">		<span class="comment">//순회2</span></div><div class="line">		Iterator&lt;String&gt; it = list.iterator();</div><div class="line">		<span class="keyword">while</span>( it.hasNext() ) &#123;</div><div class="line">			String s = it.next();</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//순회3</span></div><div class="line">		<span class="keyword">for</span>( String s : list) &#123;</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>1.2 시대의 Vector인터페이스는 addElement, elementAt, removeElement, elements메소드를 갖고 있다. 그 후 1.2이후에 생긴 List를 구현하여 List의 메소드를 갖는다. Vector를 사용하려면 Vector 메소드를 사용하거나 List 인터페이스 내부의 메소드만 사용하든가 해야 복잡해지지 않는다.</p>
<p>과거 Vector을 사용하는 방식. 호환성 때문에 존재할뿐.. 사용일 지양하자.<br><figure class="highlight java"><figcaption><span>VectorTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Vector&lt;String&gt; v = <span class="keyword">new</span> Vector&lt;String&gt;();</div><div class="line"></div><div class="line">		v.addElement( <span class="string">"둘리"</span> );</div><div class="line">		v.addElement( <span class="string">"마이콜"</span> );</div><div class="line">		v.addElement( <span class="string">"도우넛"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//순회1</span></div><div class="line">		Enumeration&lt;String&gt; e = v.elements();</div><div class="line">		<span class="keyword">while</span>( e.hasMoreElements() ) &#123;</div><div class="line">			String s = e.nextElement();</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//삭제</span></div><div class="line">		v.removeElementAt( <span class="number">1</span> );</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"====================="</span>);</div><div class="line">		<span class="comment">//순회2</span></div><div class="line">		<span class="keyword">int</span> count = v.size();</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt; count; i++) &#123;</div><div class="line">			String s = v.elementAt( i );</div><div class="line">			System.out.println( s );</div><div class="line">		&#125;</div><div class="line"> 	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>Set 인터페이스는 key, value로 구성된다. key를 통해 value에 접근할 수 있다.<br>HashSet, TreeSet가 Map인터페이스를 구현한다.<br>hashCode를 오버라이드 하여 사용하여야 한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Set&lt;Value&gt; set = <span class="keyword">new</span> HashSet&lt;Value&gt;();</div><div class="line"></div><div class="line">		Value v1 =<span class="keyword">new</span> Value(<span class="number">10</span>);</div><div class="line">		Value v2 =<span class="keyword">new</span> Value(<span class="number">5</span>);</div><div class="line">		Value v3 =<span class="keyword">new</span> Value(<span class="number">10</span>);</div><div class="line">		Value v4 =<span class="keyword">new</span> Value(<span class="number">20</span>);</div><div class="line"></div><div class="line">		set.add(v1);</div><div class="line">		set.add(v2);</div><div class="line">		set.add(v3);</div><div class="line">		set.add(v4);</div><div class="line"></div><div class="line">    <span class="comment">//존재여부 확인</span></div><div class="line">		System.out.println(set.contains(<span class="keyword">new</span> Value(<span class="number">10</span>)));</div><div class="line"></div><div class="line">    <span class="comment">//삭제</span></div><div class="line">    set.remove( <span class="keyword">new</span> Value(<span class="number">10</span>) );</div><div class="line"></div><div class="line">		<span class="comment">//순회</span></div><div class="line">		Iterator&lt;Value&gt; it = set.iterator();</div><div class="line">		<span class="keyword">while</span>( it.hasNext() )&#123;</div><div class="line">			Value v = it.next();</div><div class="line">			System.out.println(v);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>성능향상을 위해 hash를 오버라이드 한다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">( <span class="keyword">int</span> value )</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.value = value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Value [value="</span> + value + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + value;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Value other = (Value) obj;</div><div class="line">		<span class="keyword">if</span> (value != other.value)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;String&gt;();</div><div class="line"></div><div class="line">		stack.push(<span class="string">"둘리"</span>);</div><div class="line">		stack.push(<span class="string">"마이콜"</span>);</div><div class="line">		stack.push(<span class="string">"도우넛"</span>);</div><div class="line">		stack.push(<span class="string">"길동"</span>);</div><div class="line"></div><div class="line">		System.out.println( stack.isEmpty() );</div><div class="line">		System.out.println( stack.pop() );</div><div class="line">		System.out.println( stack.pop() );</div><div class="line">		System.out.println( stack.peek() ); <span class="comment">//pop을 하지않고 확인만</span></div><div class="line">		System.out.println( stack.pop() );</div><div class="line">		System.out.println( stack.pop() );</div><div class="line"></div><div class="line">		<span class="comment">//스택은 비어있는 경우 pop호출 시 예외가 발생한다.</span></div><div class="line">		System.out.println( stack.pop() );</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line"></div><div class="line">		queue.offer(<span class="string">"둘리"</span>);</div><div class="line">		queue.offer(<span class="string">"마이콜"</span>);</div><div class="line">		queue.offer(<span class="string">"도우너"</span>);</div><div class="line">		queue.offer(<span class="string">"길동"</span>);</div><div class="line"></div><div class="line">		System.out.println( queue.isEmpty() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line"></div><div class="line">		System.out.println( queue.peek() );</div><div class="line"></div><div class="line">		System.out.println( queue.poll() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line"></div><div class="line">		System.out.println( queue.isEmpty() );</div><div class="line">		System.out.println( queue.poll() );</div><div class="line">		<span class="comment">//스택은 예외가 발생했지만 큐는 null이 리턴된다.</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>Map 인터페이스가 존재하는데 HashMap, HashTable가 이를 구현한다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line"></div><div class="line">  map.put(<span class="string">"둘리"</span>, <span class="number">100</span>);</div><div class="line">  map.put(<span class="string">"마이콜"</span>, <span class="number">50</span>);</div><div class="line">  map.put(<span class="string">"도우넛"</span>, <span class="number">80</span>);</div><div class="line">  map.put(<span class="string">"길동"</span>, <span class="number">90</span>);</div><div class="line"></div><div class="line">  <span class="comment">//중복</span></div><div class="line">  map.put( <span class="string">"둘리"</span> , <span class="number">0</span>);		<span class="comment">//덮어쓴다.</span></div><div class="line"></div><div class="line">  <span class="comment">//auto unboxing</span></div><div class="line">  <span class="keyword">int</span> score = map.get( <span class="string">"둘리"</span> );</div><div class="line">  System.out.println(score);</div><div class="line"></div><div class="line">  map.remove( <span class="string">"둘리"</span> );</div><div class="line"></div><div class="line">  <span class="comment">//평균 ( 키를 모르는데 어떻게할까?)</span></div><div class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">  Set&lt;String&gt; keySet = map.keySet();</div><div class="line">  Iterator&lt;String&gt; it = keySet.iterator();</div><div class="line">  <span class="keyword">while</span>( it.hasNext() ) &#123;</div><div class="line">    String key = it.next();</div><div class="line">    System.out.println( key );</div><div class="line">    <span class="keyword">int</span> s = map.get( key );</div><div class="line">    sum += s;</div><div class="line">  &#125;</div><div class="line">  System.out.println( <span class="string">"평균 : "</span>+ sum / keySet.size() );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;제네릭&quot;&gt;&lt;a href=&quot;#제네릭&quot; class=&quot;headerlink&quot; title=&quot;제네릭&quot;&gt;&lt;/a&gt;제네릭&lt;/h3&gt;&lt;p&gt;오버로딩을 대체할 수 있으며 유용하다.&lt;/p&gt;
&lt;p&gt;메소드에 제네릭을 적용&lt;br&gt;&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>5.자바기본API(유틸리티API)</title>
    <link href="http://KKimSangHeon.github.io/2017/08/04/bigdata6/"/>
    <id>http://KKimSangHeon.github.io/2017/08/04/bigdata6/</id>
    <published>2017-08-04T05:10:31.000Z</published>
    <updated>2017-08-07T06:04:11.439Z</updated>
    
    <content type="html"><![CDATA[<h4 id="날짜"><a href="#날짜" class="headerlink" title="날짜"></a>날짜</h4><p>date 보다는 calendar을 쓰라고 권고한다.</p>
<h5 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h5><figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Date now = <span class="keyword">new</span> Date();</div><div class="line">		System.out.println( now );</div><div class="line">		printDate1(now);</div><div class="line">		printDate2(now);</div><div class="line"></div><div class="line">		<span class="comment">// 특정시간 세팅(200/08/04)</span></div><div class="line">		Date d1 = <span class="keyword">new</span> Date(<span class="number">100</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line">		printDate2( d1 );</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//1970년 1월 1일 00:00:00 기준</span></div><div class="line">		<span class="comment">//milliseconds 값을 세팅</span></div><div class="line">		Date d3 = <span class="keyword">new</span> Date( <span class="number">24L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> * <span class="number">365</span> * <span class="number">30</span>);</div><div class="line">		printDate2(d3);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDate1</span><span class="params">( Date date )</span> </span>&#123;</div><div class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat( <span class="string">"YYYY년 MM월 dd일 hh시 mm분 ss초"</span> );</div><div class="line"></div><div class="line">		System.out.println(sdf.format(date));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDate2</span><span class="params">( Date date)</span> </span>&#123;</div><div class="line">		<span class="comment">//년도 (+1900)</span></div><div class="line">		<span class="keyword">int</span> year = date.getYear();</div><div class="line"></div><div class="line">		<span class="comment">//월(0~11)</span></div><div class="line">		<span class="keyword">int</span> month = date.getMonth();</div><div class="line"></div><div class="line">		<span class="comment">//일</span></div><div class="line">		<span class="keyword">int</span> day = date.getDay();</div><div class="line"></div><div class="line">		<span class="comment">//시</span></div><div class="line">		<span class="keyword">int</span> hour = date.getHours();</div><div class="line"></div><div class="line">		<span class="comment">//분</span></div><div class="line">		<span class="keyword">int</span> minutes = date.getMinutes();</div><div class="line"></div><div class="line">		<span class="comment">//초</span></div><div class="line">		<span class="keyword">int</span> seconds = date.getSeconds();</div><div class="line"></div><div class="line">		System.out.println(</div><div class="line">				(year + <span class="number">1900</span>) + <span class="string">"년 "</span> +</div><div class="line">				(month + <span class="number">1</span>)+ <span class="string">"월 "</span> +</div><div class="line">				day + <span class="string">"일 "</span> +</div><div class="line">				hour + <span class="string">"시 "</span> +</div><div class="line">				minutes + <span class="string">"분"</span> +</div><div class="line">				seconds + <span class="string">"초"</span></div><div class="line">				);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="싱글톤"><a href="#싱글톤" class="headerlink" title="싱글톤"></a>싱글톤</h4><p>어플리케이션에서  객체 하나만 유지하고 싶을 떄 이 방법을 쓴다.<br><figure class="highlight java"><figcaption><span>Singleton.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</div><div class="line">			instance = <span class="keyword">new</span> Singleton();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> instance;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//생성자를 private로 하여 객체 생성을 외부에서 불가능하도록</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>싱글톤 클래스를 활용해보자<br><figure class="highlight java"><figcaption><span>SingletonTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Singleton s1 = Singleton.getInstance();</div><div class="line">	Singleton s2 = Singleton.getInstance();</div><div class="line">	Singleton s3 = Singleton.getInstance();</div><div class="line"></div><div class="line">	System.out.println(s1 == s2);</div><div class="line">	System.out.println(s2 == s3);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p>Calendar클래스는 추상클래스이다.(객체생성 불가능)<br><figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//		Calendar cal = new Calendar();	//추상클래스라 객체생성 불가능</span></div><div class="line">		Calendar cal = Calendar.getInstance();</div><div class="line">		<span class="comment">//어플리케이션에서 이 객체 하나만 유지하고 싶을 떄 이 방법을 쓴다. 싱글톤 패턴이라함</span></div><div class="line">		printDate( cal );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDate</span><span class="params">( Calendar cal )</span> </span>&#123;</div><div class="line">		String[] days = &#123;<span class="string">"일"</span>,<span class="string">"월"</span>,<span class="string">"화"</span>,<span class="string">"수"</span>,<span class="string">"목"</span>,<span class="string">"금"</span>,<span class="string">"토"</span>&#125;;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> year = cal.get( Calendar.YEAR );</div><div class="line">		<span class="keyword">int</span> month = cal.get( Calendar.MONTH );</div><div class="line">		<span class="keyword">int</span> date = cal.get( Calendar.DATE );</div><div class="line"></div><div class="line">		<span class="comment">//1(일요일) ~ 7(토요일)</span></div><div class="line">		<span class="keyword">int</span> day = cal.get( Calendar.DAY_OF_WEEK);</div><div class="line"></div><div class="line">		<span class="keyword">int</span> hour = cal.get( Calendar.HOUR );</div><div class="line">		<span class="keyword">int</span> minute = cal.get( Calendar.MINUTE );</div><div class="line">		<span class="keyword">int</span> seconds = cal.get( Calendar.SECOND );</div><div class="line"></div><div class="line">		System.out.println(</div><div class="line">				(year) + <span class="string">"년 "</span> +</div><div class="line">				(month + <span class="number">1</span>)+ <span class="string">"월 "</span> +</div><div class="line">				date + <span class="string">"일 "</span> +</div><div class="line">				<span class="string">"("</span> + days[day-<span class="number">1</span>] + <span class="string">")"</span> +</div><div class="line">				hour + <span class="string">"시 "</span> +</div><div class="line">				minute + <span class="string">"분"</span> +</div><div class="line">				seconds + <span class="string">"초"</span></div><div class="line">				);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;날짜&quot;&gt;&lt;a href=&quot;#날짜&quot; class=&quot;headerlink&quot; title=&quot;날짜&quot;&gt;&lt;/a&gt;날짜&lt;/h4&gt;&lt;p&gt;date 보다는 calendar을 쓰라고 권고한다.&lt;/p&gt;
&lt;h5 id=&quot;Date&quot;&gt;&lt;a href=&quot;#Date&quot; class=&quot;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>4. 자바기본 API(equals, wrapper클래스)</title>
    <link href="http://KKimSangHeon.github.io/2017/08/03/bigdata5/"/>
    <id>http://KKimSangHeon.github.io/2017/08/03/bigdata5/</id>
    <published>2017-08-03T02:25:31.000Z</published>
    <updated>2017-08-07T06:04:11.018Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>String 인스턴스 안에는 char 배열이 존재하는것이다.<br>String은 toString를 오버라이딩 하여 안에 내용이 출력된다.<br>toString를 오버라이딩 하여 인스턴스에 대한 정보를 확인할 수 있게 만드는 것은 좋은 습관이다. 디버깅할때 편하다는 장점이 있다.</p>
<h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><h5 id="결과를-예측해보자"><a href="#결과를-예측해보자" class="headerlink" title="결과를 예측해보자"></a>결과를 예측해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Point point1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">		Point point2 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">20</span>);</div><div class="line">		Point point3 = point2;</div><div class="line"></div><div class="line">		<span class="comment">// ==연산자에서 두 개의 항이 객체 참조 변수 인 경우</span></div><div class="line">		<span class="comment">// 두 개체의 동일 여부(동일성)</span></div><div class="line">		System.out.println( point1 == point2 );	<span class="comment">//false</span></div><div class="line">		System.out.println( point2 == point3 );	<span class="comment">//true</span></div><div class="line"></div><div class="line">		<span class="comment">//equals는 오버라이딩이 되지 않았을 경우 참조값 비교를 함.(동질성 비교)</span></div><div class="line">		<span class="comment">//해쉬코드를 갖고와서 비교를함(해쉬코드==참조값)</span></div><div class="line">		System.out.println( point1.equals(point2) ); <span class="comment">//false</span></div><div class="line">		System.out.println( point2.equals(point3) ); <span class="comment">//true</span></div><div class="line"></div><div class="line">		System.out.println(<span class="string">"================"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//String 객체와 비교</span></div><div class="line">		<span class="comment">//String는 equals가 오버라이딩 되어있다.</span></div><div class="line">		String s1 = <span class="keyword">new</span> String( <span class="string">"hello"</span> );</div><div class="line">		String s2 = <span class="keyword">new</span> String( <span class="string">"hello"</span> );</div><div class="line">		String s3 = s2;</div><div class="line"></div><div class="line">		System.out.println( s1 == s2 );		<span class="comment">//false</span></div><div class="line">		System.out.println( s2 == s3 );		<span class="comment">//true</span></div><div class="line">		System.out.println( s1.equals(s2) );	<span class="comment">//true</span></div><div class="line">		System.out.println( s2.equals(s3) );	<span class="comment">//true</span></div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h5 id="equals를-오버라이딩-해보자"><a href="#equals를-오버라이딩-해보자" class="headerlink" title="equals를 오버라이딩 해보자"></a>equals를 오버라이딩 해보자</h5><p>hashCode()메소드도 오버라이딩이 필요하다.<br>자바에서는 hashCode() equal() 메소드를 동시에 오버라이드 해야한다.<br>equals 조건을 제곱으로 한다면 hashCode도 제곱으로 변경해주어야 한다.<br>그렇지 않으면 해쉬맵 해쉬 셋을 쓸 때 어려워진다.<br><figure class="highlight java"><figcaption><span>Point.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">31</span>;</div><div class="line">		<span class="keyword">int</span> result = <span class="number">1</span>;</div><div class="line">		result = prime * result + x;</div><div class="line">		result = prime * result + y;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span> == obj)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		Point other = (Point) obj;</div><div class="line">		<span class="keyword">if</span> (x != other.x)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">if</span> (y != other.y)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h5 id="결과를-예측해보자-1"><a href="#결과를-예측해보자-1" class="headerlink" title="결과를 예측해보자"></a>결과를 예측해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String Literal		</span></div><div class="line"><span class="comment">// 문자열 상수 Pool에 있는것을 재사용함</span></div><div class="line"><span class="comment">// 문자열 상수 Pool을 공유하기 때문에 문자열의 수정이 불가능하다.</span></div><div class="line"><span class="comment">// str1의 변경은 가능하나 문자열 상수인 hello의 값이 변경 불가능하다는것.</span></div><div class="line">String str1 = <span class="string">"hello"</span>;</div><div class="line">String str2 = <span class="string">"hello"</span>;</div><div class="line">String str3 = str2;</div><div class="line"></div><div class="line">System.out.println( str1 == str2 );	<span class="comment">//true</span></div><div class="line">System.out.println( str2 == str3 );	<span class="comment">//true</span></div></pre></td></tr></table></figure>
<h5 id="new-String-“문자열”-“문자열”의-차이는"><a href="#new-String-“문자열”-“문자열”의-차이는" class="headerlink" title="new String(“문자열”) “문자열”의 차이는?"></a>new String(“문자열”) “문자열”의 차이는?</h5><p>위의 결과를 보고 잘 생각해 보자<br>문자열은 변경되지 않는다는점을 잘 생각하자.<br>변한다면 참고하고 있는 다른 참조변수들이 피해를 본다..</p>
<h5 id="잘생각해보자"><a href="#잘생각해보자" class="headerlink" title="잘생각해보자"></a>잘생각해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	String str1 = <span class="string">"abc"</span>;</div><div class="line">	String str2 = <span class="string">"cde"</span>;</div><div class="line">	String str3 = str2;</div><div class="line"></div><div class="line">	str2 = str3.toUpperCase();</div><div class="line"></div><div class="line">	System.out.println(str1);</div><div class="line">	System.out.println(str2);</div><div class="line">	System.out.println(str3);</div><div class="line"></div><div class="line">	String str4 = str2.concat(<span class="string">"??"</span>);</div><div class="line">	System.out.println(str2);</div><div class="line">	System.out.println(str4);</div><div class="line"></div><div class="line"><span class="comment">//		String s = "!";</span></div><div class="line"><span class="comment">//		String str5 = s.concat(str2);</span></div><div class="line"><span class="comment">//		Method chain		</span></div><div class="line">	String str5 = <span class="string">"!"</span>.concat(str2);	<span class="comment">//위의 코드와 별다른 차이가 없다.</span></div><div class="line"></div><div class="line">	System.out.println(str5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="String-메소드의-사용법-및-활용"><a href="#String-메소드의-사용법-및-활용" class="headerlink" title="String 메소드의 사용법 및 활용"></a>String 메소드의 사용법 및 활용</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest03</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		String s= <span class="string">"abcAbcabcABC"</span>;</div><div class="line"></div><div class="line">		<span class="comment">//charAt</span></div><div class="line">		<span class="keyword">char</span> c = s.charAt( <span class="number">2</span> );</div><div class="line">		System.out.println( c );</div><div class="line"></div><div class="line">		<span class="comment">//indexOf</span></div><div class="line">		System.out.println( s.indexOf( <span class="string">"Abc"</span> ) );	<span class="comment">//3</span></div><div class="line">		System.out.println( s.indexOf(<span class="string">"ab"</span>) );		<span class="comment">//0</span></div><div class="line">		System.out.println( s.lastIndexOf(<span class="string">"ab"</span>) );	<span class="comment">//6</span></div><div class="line">		System.out.println( s.indexOf( <span class="string">"XYZ"</span> ));	<span class="comment">//-1 반환</span></div><div class="line"></div><div class="line">		<span class="comment">//replace</span></div><div class="line">		System.out.println( s.replace(<span class="string">"bc"</span>, <span class="string">"12"</span>) );	<span class="comment">//s가 바뀌지는 않음</span></div><div class="line">		System.out.println( s.replaceAll(<span class="string">"bc"</span>, <span class="string">"12"</span>) );	<span class="comment">//s가 바뀌지는 않음</span></div><div class="line"></div><div class="line">		<span class="comment">//substring</span></div><div class="line">		System.out.println( s.substring( <span class="number">3</span>, <span class="number">7</span>) );	<span class="comment">//3~6까지 나온다</span></div><div class="line"></div><div class="line">		<span class="comment">//case</span></div><div class="line">		System.out.println( s.toLowerCase() );</div><div class="line">		System.out.println( s.toUpperCase() );</div><div class="line"></div><div class="line">		<span class="comment">//concat</span></div><div class="line">		String str1 = <span class="string">" ab cd "</span>;</div><div class="line">		String str2 = <span class="string">",efg"</span>;</div><div class="line"></div><div class="line">		str1 = str1.concat(str2);</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//trim</span></div><div class="line">		System.out.println( <span class="string">"---"</span> + str1 + <span class="string">"---"</span> );		<span class="comment">//--- ab cd ,efg---</span></div><div class="line">		System.out.println( <span class="string">"---"</span> + str1.trim() + <span class="string">"---"</span> );<span class="comment">//---ab cd ,efg---</span></div><div class="line"></div><div class="line">		<span class="comment">//split</span></div><div class="line">		String[] tokens = str1.split(<span class="string">","</span>);</div><div class="line">		<span class="keyword">for</span>( String token : tokens) &#123;				<span class="comment">// ab cd</span></div><div class="line">			System.out.println( token );			<span class="comment">// efg</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">//split 예외</span></div><div class="line">		tokens = <span class="string">"abcdefg"</span>.split( <span class="string">","</span> );</div><div class="line">		<span class="keyword">for</span>( String token : tokens) &#123;</div><div class="line">			System.out.println( token );	<span class="comment">//abcdefg</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		tokens = <span class="string">""</span>.split( <span class="string">","</span> );</div><div class="line">		System.out.println( tokens.length );	<span class="comment">// 1</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>StringBuffer는 가변크기의 버퍼를 가짐.<br>“abc” + “cde”    (String) 보다는 StringBuffer를 쓰는게 낫다.<br>전자의 경우 런타임 때 “abc”를 스트링 버퍼로 만들고 append(“cde”)후 toString()를 통해 값을 반환한다.<br>String를 사용해도 되지만 append의 작업이 많을 경우 StringBuffer사용하는것이 빠르다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//생성</span></div><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer( <span class="string">"this"</span> );</div><div class="line"></div><div class="line">System.out.println(sb.length() + <span class="string">":"</span> + sb.capacity());	<span class="comment">//4:20</span></div><div class="line"><span class="comment">//버퍼의 크기를 문자의 크기보다 크게 생성함(append를 염두)</span></div><div class="line"></div><div class="line"><span class="comment">//문자열추가</span></div><div class="line">sb.append(<span class="string">" is pencil"</span>);</div><div class="line">System.out.println( sb );</div><div class="line"></div><div class="line"><span class="comment">//삽입</span></div><div class="line">sb.insert(<span class="number">7</span>, <span class="string">" my"</span>);</div><div class="line">System.out.println( sb );	<span class="comment">//this is my pencil</span></div><div class="line"></div><div class="line"><span class="comment">//치환</span></div><div class="line">sb.replace( <span class="number">8</span>, <span class="number">10</span>, <span class="string">"your"</span> );</div><div class="line">System.out.println( sb );</div><div class="line"></div><div class="line"><span class="comment">//버퍼 크기</span></div><div class="line">sb.setLength( <span class="number">3</span> );</div><div class="line">System.out.println( sb );</div><div class="line"></div><div class="line"><span class="comment">//문자열 + 연산은 내부적으로 StringBuffer 객체로 변환</span></div><div class="line">String s1 = <span class="string">"Hello"</span> + <span class="string">" World"</span> + <span class="number">10</span> +<span class="keyword">true</span>;</div><div class="line">System.out.println(s1);		<span class="comment">//Hello World10true</span></div><div class="line"><span class="comment">//다음과 코드가 같은것.</span></div><div class="line"></div><div class="line">String s2 = <span class="keyword">new</span> StringBuffer( <span class="string">"Hello"</span> ).append( <span class="string">" World"</span> ).append( <span class="number">10</span> ).append( <span class="keyword">true</span> ).toString();</div><div class="line"></div><div class="line">System.out.println(s1);	<span class="comment">//Hello World10true</span></div><div class="line">System.out.println(s2);	<span class="comment">//Hello World10true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Wrapper-클래스"><a href="#Wrapper-클래스" class="headerlink" title="Wrapper 클래스"></a>Wrapper 클래스</h4><p>기본형 보다는 Wrapper 클래스를 쓰고자하는 움직임이 많이 발생하고 있다.</p>
<figure class="highlight java"><figcaption><span>WrapperClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClassTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Integer i = <span class="keyword">new</span> Integer(<span class="number">10</span>);</div><div class="line">		Character c = <span class="keyword">new</span> Character( <span class="string">'c'</span> );</div><div class="line">		Float f = <span class="keyword">new</span> Float ( <span class="number">3.14</span> );</div><div class="line">		Boolean b = <span class="keyword">new</span> Boolean( <span class="keyword">true</span> );</div><div class="line"></div><div class="line">		<span class="comment">//Auto Boxing</span></div><div class="line">		Integer j = <span class="number">10</span>;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">//int k = 20 + j.intValue();</span></div><div class="line">		<span class="comment">//Auto Unboxing</span></div><div class="line">		<span class="keyword">int</span> k = <span class="number">20</span> + j;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">( Integer a, Integer b )</span> </span>&#123;</div><div class="line">		<span class="comment">// 상수풀 운영원칙 때문에 객체이지만 내부를 수정할 수 없다.</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="정규식을활용하여-정수인지-확인"><a href="#정규식을활용하여-정수인지-확인" class="headerlink" title="정규식을활용하여 정수인지 확인"></a>정규식을활용하여 정수인지 확인</h5><figure class="highlight java"><figcaption><span>WrapperClassTest2.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperClassTest2</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println( Character.toLowerCase( <span class="string">'a'</span> ));</div><div class="line">		System.out.println( Character.isDigit( <span class="string">'1'</span> ));</div><div class="line">		System.out.println( Character.isDigit( <span class="string">'@'</span> ));</div><div class="line"></div><div class="line">		<span class="comment">//String는 isdigit가 존재하지 않는다.</span></div><div class="line">		String s = <span class="string">"1234"</span>;</div><div class="line">		<span class="keyword">if</span>(s.matches(<span class="string">"-?\\d+"</span>) == <span class="keyword">false</span> ) &#123;</div><div class="line">			System.out.println(<span class="string">"숫자가 아닙니다"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> i = Integer.parseInt(s);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// 프로그램 로직(변수 검증) 할 때는</span></div><div class="line">		<span class="comment">// try - catch 문으로 하지 말것.</span></div><div class="line">		<span class="comment">// 비용이 많이든다.</span></div><div class="line"></div><div class="line">		<span class="comment">//정규식을 활용하자</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h4&gt;&lt;p&gt;String 인스턴스 안에는 char 배열이 존재하는것이다.&lt;br&gt;String은 toString를
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>3. 패키지, 예외</title>
    <link href="http://KKimSangHeon.github.io/2017/08/03/bigdata4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/03/bigdata4/</id>
    <published>2017-08-03T01:41:54.000Z</published>
    <updated>2017-08-07T06:04:10.611Z</updated>
    
    <content type="html"><![CDATA[<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>탐색의 경우 O(n)   / 삽입 삭제의 경우 간단.</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>탐색의 경우 O(1)   / 삽입 삭제의 경우 쭉~ 밀려남</p>
<h4 id="패키지"><a href="#패키지" class="headerlink" title="패키지"></a>패키지</h4><p>java.lang.* - 명시적으로 지정하지 않아도 자동으로 import 되는 패키지.<br>자바 프로그램이 기본적으로 필요로 하는 클래스와 인터페이스 포함</p>
<p>java.io.* - 데이터를 입력받고 출력할 수 있도록 하는 클래스 포함</p>
<p>java.net.* - 네트워크를 통하여 통신할 수 있도록 해주는 클래스 포함</p>
<p>java.util.* - 날짜/시간 조작, 난수 발생 등 각종 유틸리티 클래스와 인터페이스 포함</p>
<h4 id="예외처리"><a href="#예외처리" class="headerlink" title="예외처리"></a>예외처리</h4><h5 id="예외"><a href="#예외" class="headerlink" title="예외"></a>예외</h5><p>프로그램이 실행되는 동안 발생할 수 있는 비정상적인 조건<br>번역시의 에러가 아닌 실행시의 에러를 예외라 함</p>
<h5 id="자바에서의-예외처리"><a href="#자바에서의-예외처리" class="headerlink" title="자바에서의 예외처리"></a>자바에서의 예외처리</h5><p>예외처리를 위한 Exception 클래스 정의<br>기본적인 예외는 자바에 미리 정의된 예외를 통해 처리 가능<br>사용자가 필요한 예외를 직접 정의할 수 있음<br>예상되는 예외는 미리 처리해주면 무조건적인 프로그램의 종료를 피할 수 있음<br>예외처리의 사용은 프로그램의 신뢰성을 높여줌</p>
<h5 id="try-catch-문"><a href="#try-catch-문" class="headerlink" title="try catch 문"></a>try catch 문</h5><p>catch문에서 예외가 발생하면 복구시키는게 목표이다. 하지만 그게 말이 쉽지 복구라는건 불가능한 경우가 많이있다.<br>try catch는 가독성을 떨어뜨린다는 단점이 있다.<br>ex) 상대방이 랜선을 뽑아서 캐치에 왔다면 어쩔래</p>
<p>finally는 옵션이다.<br>주로 자원정리가 목적이다. 예외가 발생하던 안하던 들어감.<br>심지어 try에서 return 을 해도 finally가 실행된다.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  result = <span class="number">1000</span> / a;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(ArithmeticException e) &#123;</div><div class="line">  System.out.println(<span class="string">"예외발생"</span>);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  System.out.println(<span class="string">"자원정리"</span>);   <span class="comment">//실행된다.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="checked-Exception"><a href="#checked-Exception" class="headerlink" title="checked Exception"></a>checked Exception</h5><p>메소드를 사용하기 위해서는 반드시 예외를 처리해 줘야함 (ex&gt; FileInputStream)</p>
<h4 id="실습1"><a href="#실습1" class="headerlink" title="실습1."></a>실습1.</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  FileInputStream fis = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    fis = <span class="keyword">new</span> FileInputStream( <span class="string">"./hello.txt"</span> );</div><div class="line">    <span class="keyword">int</span> data = fis.read();</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span>(FileNotFoundException|NullPointerException e) &#123;</div><div class="line">    <span class="comment">/*여러개의 예외를 처리*/</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">  <span class="comment">/*모든예외를 처리하고 싶을 때*/</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="실습2-나의-Exception-정의"><a href="#실습2-나의-Exception-정의" class="headerlink" title="실습2. 나의 Exception 정의"></a>실습2. 나의 Exception 정의</h4><p>MyException 정의<br><figure class="highlight java"><figcaption><span>MyException.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>( <span class="string">"MyException Occurs"</span> );		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">( String message )</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>( message );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MyClass 정의</p>
<figure class="highlight java"><figcaption><span>MyClass.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">danger</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">		System.out.println( <span class="string">"some code1"</span> );</div><div class="line">		System.out.println( <span class="string">"some code2"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span>( <span class="number">1</span>==<span class="number">1</span> ) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"MyClass Exception 발행"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"some code3"</span> );</div><div class="line">		System.out.println( <span class="string">"some code4"</span> );</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyClassTest 정의<br><figure class="highlight java"><figcaption><span>MyClassTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			MyClass myClass = <span class="keyword">new</span> MyClass();</div><div class="line">			myClass.danger();</div><div class="line">		&#125; <span class="keyword">catch</span> (MyException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;		</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;LinkedList&quot;&gt;&lt;a href=&quot;#LinkedList&quot; class=&quot;headerlink&quot; title=&quot;LinkedList&quot;&gt;&lt;/a&gt;LinkedList&lt;/h4&gt;&lt;p&gt;탐색의 경우 O(n)   / 삽입 삭제의 경우 간단.&lt;/p&gt;
&lt;h4 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>2. 오버로드,오버로딩,추상클래스,인터페이스</title>
    <link href="http://KKimSangHeon.github.io/2017/08/03/bigdata3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/03/bigdata3/</id>
    <published>2017-08-03T00:27:12.000Z</published>
    <updated>2017-08-07T06:04:10.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="오버로드"><a href="#오버로드" class="headerlink" title="오버로드"></a>오버로드</h4><p>아래는 다 다른 메소드이다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></div><div class="line">..</div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="title">a</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">float</span> b)</span></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">void</span> <span class="title">a</span> <span class="params">(<span class="keyword">float</span> a, <span class="keyword">int</span> b)</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<h4 id="아규먼트-파라미터"><a href="#아규먼트-파라미터" class="headerlink" title="아규먼트 , 파라미터"></a>아규먼트 , 파라미터</h4><p>아규먼트는 int ,float 등 형을 의미<br>파라미터는 실제적인 데이터 10, 0.5 등을 의미.</p>
<h4 id="식별자"><a href="#식별자" class="headerlink" title="식별자"></a>식별자</h4><p>클래스 이름, 변수이름, 메소드 이름을 식별자라 한다.<br>대소문자 가능 숫자 가능 하지만 앞에는 안되고 특수문자는 $ _ 만 사용가능.</p>
<h4 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h4><p>기본으로 디폴트 생성자가 만들어지지만 생성자가 하나라도 정의되어 있으면 디폴트 생성자가 생성되지 않는다.</p>
<h4 id="다형성"><a href="#다형성" class="headerlink" title="다형성"></a>다형성</h4><p>외부에서 사용할 땐 일관되게 사용하는것.<br>오버로딩, 오버라이딩을 통해 구현</p>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>this 키워드는 메소드 호출을 받는 객체를 의미한다.<br>현재 사용중인 객체 그 자체를 의미한다.<br>this() 는  클래스의 한 생성자에서 다른 생성자를 호출 할 때 사용할 수 있다</p>
<h4 id="오버로딩"><a href="#오버로딩" class="headerlink" title="오버로딩"></a>오버로딩</h4><p>부모에있는 메소드와 시그니쳐가 동일(접근제어자 , 반환형, 메소드이름, 아규먼트)</p>
<h4 id="생성자-관련-문제"><a href="#생성자-관련-문제" class="headerlink" title="생성자 관련 문제"></a>생성자 관련 문제</h4><p>상속관계에서 자식 클래스의 인스턴스를 생성하면 부모 혹은 자식 생성자중 어떤것이 먼저 호출될까?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">부모 생성자</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span></span>&#123;</div><div class="line">  syso(<span class="string">"부모 호출됨"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">자식 생성자</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">  syso(<span class="string">"자식 호출됨"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>부모 생성자가 먼저 호출된다.<br>즉 자식 메소드의 생성자 안에(8행) super(); (기본생성자 호출)가 자동으로 삽입된것이다.</p>
<p>int형 매개변수가 존재하는 부모 생성자를 호출하려면 8행에 super(35); 를 넣어주면 된다.</p>
<h4 id="캐스팅"><a href="#캐스팅" class="headerlink" title="캐스팅"></a>캐스팅</h4><p>형은 높은데에서 낮은곳으로 가면 명시적으로 알려줘야 하지만 , 인스턴스는높은곳(부모)  낮은곳(자식) 으로 가려면 명시를 해줘야 한다.<br>다운캐스팅의 예(Explicity Casting 명시적 캐스팅)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//방법 1</span></div><div class="line">Person p = <span class="keyword">new</span> Student();</div><div class="line">Student s1 = (Student)p;</div><div class="line"></div><div class="line"><span class="comment">//방법 2</span></div><div class="line">((Student)p).set();   </div></pre></td></tr></table></figure></p>
<p>업캐스팅의 예(Implicity Casting 암시적 캐스팅)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person p2 = s1;</div></pre></td></tr></table></figure></p>
<h4 id="추상클래스"><a href="#추상클래스" class="headerlink" title="추상클래스"></a>추상클래스</h4><h5 id="추상화"><a href="#추상화" class="headerlink" title="추상화"></a>추상화</h5><p>객체들이 가지고 있는 속성과 기능 중에 중요한 것들은 남기고 필요 없는 불필요한 것은 없애는것. 또는 공통된 것들을 그룹핑해서 한곳에다 모아놓는것.</p>
<h5 id="추상클래스-1"><a href="#추상클래스-1" class="headerlink" title="추상클래스"></a>추상클래스</h5><p>new를 통해 객체를 생성하지는 못한다.<br>필드를 갖을 수 있고, 구현된 메소드를 갖을 수 있다.<br>추상 클래스를 상속하는 클래스는 반드시 추상 클래스의 추상 메소드를 구현해야 함<br>추상 클래스간의 상속에서는 추상클래스를 구현하지 않아도 됨<br>추상 클래스의 활용<br>여러 클래스들이 상당수 공통점을 가지고 있으나 부분적으로 그 처리 방식이 다를 경우 부모 클래스를 추상 클래스로 정의하여 자식 클래스들이 각각 해당 메소드를 구현</p>
<h5 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h5><p>부모클래스<br><figure class="highlight java"><figcaption><span>Shape.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String fillColor;</div><div class="line">	<span class="keyword">private</span> String lineColor;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">calcArea</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Shape 클래스를 상속<br><figure class="highlight java"><figcaption><span>Rectangle.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x2;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y2;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"사각형을 그렸습니다."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calcArea</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ((x1+x2)*(y1+y2));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Shape 클래스를 상속<br><figure class="highlight java"><figcaption><span>Circle.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y1;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> radius;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> radius)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.x1 = x1;</div><div class="line">		<span class="keyword">this</span>.y1 = y1;</div><div class="line">		<span class="keyword">this</span>.radius = radius;		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"원을 그렸습니다."</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calcArea</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)(Math.PI * radius * radius);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>main 메소드<br><figure class="highlight java"><figcaption><span>PaintApp.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> paint;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaintApp</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		drawShape( <span class="keyword">new</span> Rectangle());</div><div class="line">		drawShape( <span class="keyword">new</span> Circle(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">( Shape shape )</span> </span>&#123;</div><div class="line">		shape.draw();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h4><p>객체를 사용할 수 있는 목록. 즉 메소드 목록이다.<br>UML 에서는 &lt;<interface>&gt; 라고 하고 그림.<br>기능의 명세이다. Drawable라는 인터페이스를 구현하여 draw 메소드를 오버라이딩하여 사용.<br>Drawable 인터페이스를 구현하면 그릴수 있다는 것을 암시.<br>서로 관계가 없는 물체들이 상호 작용을 하기 위해서 사용하는 장치나 시스템<br>클래스 구조상의 관계와 상관 없이 클래스들에 의해 구현되어질 수 있는 규약<br>인터페이스 안에서는 인터페이스 끼리 다중상속이 된다.<br>public interface Drivable extends A,B{…..}</interface></p>
<h5 id="실습-1"><a href="#실습-1" class="headerlink" title="실습"></a>실습</h5><p>인터페이스 정의<br><figure class="highlight java"><figcaption><span>Drawable.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drawable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;		<span class="comment">//자동으로 abstract가 됨</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Point클래스가 Drawable 인터페이스를 구현함<br><figure class="highlight java"><figcaption><span>Paint.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Drawable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> y;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println( <span class="string">"점[x="</span> + x + <span class="string">",y="</span> + y +<span class="string">"]을 그렸습니다."</span>);			</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</div><div class="line">		show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ColorPoint가 Point클래스를 상속하여 Drawable를 구현한 효과를 갖음<br><figure class="highlight java"><figcaption><span>ColorPoint.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> paint;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String color;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ColorPoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, String color)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(x, y);</div><div class="line">		<span class="keyword">this</span>.color = color;		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">..</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//완전</span></div><div class="line">		<span class="keyword">super</span>.show();</div><div class="line">		System.out.println( <span class="string">"color "</span> + color);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>메인메소드<br><figure class="highlight java"><figcaption><span>PaintApp.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaintApp</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		draw(<span class="keyword">new</span> ColorPoint(<span class="number">200</span>,<span class="number">200</span>,<span class="string">"yellow"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">( Drawable drawable )</span> </span>&#123;<span class="comment">//Drawable를 구현하고 있으면 draw를 해줄게</span></div><div class="line">		drawable.draw();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="인터페이스-추상클래스-차이"><a href="#인터페이스-추상클래스-차이" class="headerlink" title="인터페이스 추상클래스 차이"></a>인터페이스 추상클래스 차이</h5><p>인터페이스는<br>서로 관계가 없는 물체들이 상호 작용을 하기 위해서 사용하는 장치나 시스템<br>클래스 구조상의 관계와 상관 없이 클래스들에 의해 구현되어질 수 있는 규약<br>하나 또는 그 이상의 클래스들에서 똑같이 구현되어질 법한 메소드를 선언하는 경우</p>
<p>추상클래스는<br>객체들이 가지고 있는 속성과 기능 중에 중요한 것들은 남기고 필요 없는 불필요한 것은 없애는것. 또는 공통된 것들을 그룹핑해서 한곳에다 모아놓는것.</p>
<h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>일반클래스 : 모두 완결한 메소드  /  필드를 가질 수 있음 / 객체화 가능</p>
<p>추상클래스 : 완결한 메소드, 추상메소드 / 필드 가질 수 있음 / 객체화 불가</p>
<p>인터페이스 : 모든 추상 메소드 / 필드 가질 수 없음 / 객체화 불가</p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 객체가 Circle 클래스의 인스턴스 인가?</div><div class="line">System.out.println( c instanceof Circle );</div><div class="line"></div><div class="line">// 객체가 Drawable 인터페이스를 구현하였는가?</div><div class="line">System.out.println( c instanceof Drawable );</div><div class="line"></div><div class="line">// 객체가 Rectangle 클래스의 인스턴스 인가?</div><div class="line">System.out.println( c instanceof Rectangle );</div><div class="line"></div><div class="line">// 객체가 Shape 클래스의 인스턴스 인가?</div><div class="line">System.out.println( c instanceof Shape );</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;오버로드&quot;&gt;&lt;a href=&quot;#오버로드&quot; class=&quot;headerlink&quot; title=&quot;오버로드&quot;&gt;&lt;/a&gt;오버로드&lt;/h4&gt;&lt;p&gt;아래는 다 다른 메소드이다.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>깃허브 사용</title>
    <link href="http://KKimSangHeon.github.io/2017/08/01/bigdata2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/01/bigdata2/</id>
    <published>2017-08-01T04:04:28.000Z</published>
    <updated>2017-08-07T06:03:38.957Z</updated>
    
    <content type="html"><![CDATA[<p>깃허브란 형상관리 툴이다.</p>
<p>A(팀장,a모듈담당) B(b모듈담당) C(c모듈담당) 개발자가 하나의 프로젝트를 개발중이다.</p>
<p>A 가 프로젝트(모듈 a,b,c 포함)를 올린다.</p>
<p>그 후 B C 에게 그 사실을 알린다.</p>
<p>B C 는 프로젝트를 내려받고</p>
<p>B,C가 자신의 모듈을 수정 후 커밋을 한다.</p>
<p>A,B,C는 수정된 것을 내려 받은 후 테스트를 한다.</p>
<p>git가 있으며 내부에는 Repository가 있다.</p>
<p>git는 레파지토리가 2개 존재한다.<br>하나는 로컬이고 하나는 원격이다.</p>
<p>로컬 레파지토리에 프로젝트를 올리는것을 commit 라고 하며 로컬 레파지토리를 원격 레파지토리에 맞추는 것을 push 라고 한다.</p>
<p>원격 레파지토리에서 프로젝트를 로컬레파지토리로 갖고오는것을 full 내 프로젝트로 반영하는것은 fetch라고 한다.</p>
<h4 id="하지만-보통-로컬레파지토리와-프로젝트를-같이-놓는다-편의상"><a href="#하지만-보통-로컬레파지토리와-프로젝트를-같이-놓는다-편의상" class="headerlink" title="하지만 보통 로컬레파지토리와 프로젝트를 같이 놓는다.(편의상)"></a>하지만 보통 로컬레파지토리와 프로젝트를 같이 놓는다.(편의상)</h4><h3 id="1-내-프로젝트-올리기"><a href="#1-내-프로젝트-올리기" class="headerlink" title="1.내 프로젝트 올리기"></a>1.내 프로젝트 올리기</h3><h5 id="이클립스에서-실행"><a href="#이클립스에서-실행" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h5><p>1.이클립스 - show view - git Repository 선택<br>2.프로젝트 우클릭 후 - team - share …-체크-create누름(로컬레파지토리 프로젝트를 같이하는것.)</p>
<h5 id="깃허브에서-실행"><a href="#깃허브에서-실행" class="headerlink" title="깃허브에서 실행"></a>깃허브에서 실행</h5><p>1.레파지토리 new - 프로젝트 이름이랑 동일하게 생성(굳이 안해도되나 편의상)<br>2.깃 주소를 복사</p>
<h5 id="이클립스에서-실행-1"><a href="#이클립스에서-실행-1" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h5><p>1.git Repository탭 - remote - Configure fetch 체크(push 체크하면 올리기만 되고 받기는 안된다.) - change 버튼 클릭 - save Fetch 클릭<br>2.project explorer탭으로 - team - commit - Unsatage Changes에 있는 것들을 staged Changed로 내림. 커밋메세지는 추가할 수 있도록 하자. - commit and push 클릭 - next - finish</p>
<h3 id="2-타-프로젝트-받기"><a href="#2-타-프로젝트-받기" class="headerlink" title="2.타 프로젝트 받기."></a>2.타 프로젝트 받기.</h3><p>방법1. 깃허브에서 다운받아서 임포트하기.</p>
<p>방법2. 프로젝트를 fork한다.</p>
<h4 id="깃허브에서-실행-1"><a href="#깃허브에서-실행-1" class="headerlink" title="깃허브에서 실행"></a>깃허브에서 실행</h4><p>원하는 프로젝트로 가서 fork를 누르고<br>내 레파지토리로 가보자. 자신의 레파지토리에 생성되있는게 있을것임.<br>이제 자기 레파지토리에 있는것을 잡아 땡겨보자<br>clone or download 에서 url 복사</p>
<h4 id="이클립스에서-실행-2"><a href="#이클립스에서-실행-2" class="headerlink" title="이클립스에서 실행"></a>이클립스에서 실행</h4><p>git Repository탭으로 가서 컨트롤+v<br>next-next - browse 눌러서 자기 워크스페이스 선택 (로컬 레파지토리와 프로젝트저장소를 하나로 합치는것.)<br>working tree 선택 후 오른쪽 누르고 import .. 클릭 후 finish</p>
<p>Project explorer 탭으로 가서 보면 에러가 난다. (환경설정이 달라서 나는 에러이다.)<br>프로젝트 우클릭 후 - properties - java build path 선택- Libraries 탭 선택 - 더블클릭 후 - alternate JRE 에서 선택</p>
<h3 id="3-레파지토리-삭제"><a href="#3-레파지토리-삭제" class="headerlink" title="3.레파지토리 삭제"></a>3.레파지토리 삭제</h3><p>해당레파지토리로 가서 - 세팅 - 레파지토리 이름 입력</p>
<p>이클립스에서 실행<br>team - disconnect  후 delete Repository 클릭<br>하나로 뭉쳐놨기 때문에 맨위 하나만 선택하면 된다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;깃허브란 형상관리 툴이다.&lt;/p&gt;
&lt;p&gt;A(팀장,a모듈담당) B(b모듈담당) C(c모듈담당) 개발자가 하나의 프로젝트를 개발중이다.&lt;/p&gt;
&lt;p&gt;A 가 프로젝트(모듈 a,b,c 포함)를 올린다.&lt;/p&gt;
&lt;p&gt;그 후 B C 에게 그 사실을 알린다.
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="기타" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/%EA%B8%B0%ED%83%80/"/>
    
    
  </entry>
  
  <entry>
    <title>1.자바프로그래밍 기본</title>
    <link href="http://KKimSangHeon.github.io/2017/08/01/bigdata1/"/>
    <id>http://KKimSangHeon.github.io/2017/08/01/bigdata1/</id>
    <published>2017-08-01T00:05:28.000Z</published>
    <updated>2017-08-07T06:03:34.364Z</updated>
    
    <content type="html"><![CDATA[<h4 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h4><p>많은 클래스, 파일로 프로그램이 구성된다. 클래스는 데이터를 갖고 있고 메소드는 데이터를 다루게 된다. 객체의 데이터를 다루기 위해서는 외부에서 메소드를 호출해야 한다.</p>
<p>하드웨어는 컴포넌트화로 인해 빠른 발전이 이루어졌다. 소프트웨어 또한 이에 따라 컴포넌트화로 발전하게 되었다.</p>
<p>객체지향은 설계분석이 가능하다. 요구사항 분석-&gt;추상화-&gt;객체관계 분석(상속,의존 등)</p>
<p>캡슐화, 상속, 다형성의 특징을 갖는다.</p>
<p>코드의 재사용성이 높다. 추상화 과정으로 인해 가능해지는것. 상속을 통해 부모에 존재하는 메소드 사용가능.<br>잘못된 예: 홈쇼핑 프로젝트에서 만든 Person 클래스를 ERP를 만드는곳에서 Person을 만드는데 사용한다.</p>
<p>예외처리를 통해 신뢰성이 높아진다.</p>
<p>java는 운영체제에 영향을 받지 않는다는 특징.</p>
<p>JRE + API + javac + rt.jar = JDK</p>
<h4 id="객체와-클래스"><a href="#객체와-클래스" class="headerlink" title="객체와 클래스"></a>객체와 클래스</h4><p>객체는 정보를 효율적으로 관리하기 위하여 의미를 부여하고 분류하는 논리적 단위<br>클래스를 사용자 데이터 타입 이라고도 한다.</p>
<p>객체의 구성요서는 속성(필드,인스턴스 변수)이 필요하다.<br>클래스 내부에 있는 변수는 필드 혹은 속성이라 한다.!<br>기능은 메소드라 한다.</p>
<h4 id="컴파일-과정"><a href="#컴파일-과정" class="headerlink" title="컴파일 과정"></a>컴파일 과정</h4><p>네비게이터로 bin 폴더를 보자.<br>코들를 짜면 bin 폴더 내부에 클래스파일이 컴파일되어 생성된다.</p>
<h4 id="메소드-영역"><a href="#메소드-영역" class="headerlink" title="메소드 영역"></a>메소드 영역</h4><p>필드정보(클래스에 대한 정보. getClass() 메소드를 통해 얻을 수 있다.), 메소드 코드, main메소드, static 변수, static 메소드</p>
<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><p>지역변수. 자바는 전역변수의 개념이 없으므로 모든 변수는 여기에 생성됨.</p>
<h4 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h4><p>객체</p>
<h4 id="접근자"><a href="#접근자" class="headerlink" title="접근자"></a>접근자</h4><p>public - 내부, 같은 패키지, 자식접근, 외부 가능.</p>
<p>protected - 내부, 같은 패키지, 자식접근 가능.</p>
<p>(default) - 쓰지않는것을 권고한다. 내부, 같은 패키지에서 접근가능.</p>
<p>private - 내부에서만 접근 가능.</p>
<h4 id="정보은닉"><a href="#정보은닉" class="headerlink" title="정보은닉"></a>정보은닉</h4><p>데이터는 private를 넣고 접근할 때 메소드를 쓴다. 엔터프라이즈에서는 이러한 메소드를 빈이라고 부른다.</p>
<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>final은 클래스 앞, 변수앞 , 필드 앞에도 정의할 수 있다.<br>final은 여기가 마지막이라는 뜻.<br>상수는 대문자로 만들라는 관례가 있다.!<br>따지고 보면 변수와는 별 다른게 없지만 알아보기 편하게!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> VALUE = <span class="number">10</span>;</div><div class="line"></div><div class="line">VALUE = <span class="number">30</span>; <span class="comment">//에러발생</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">.....</div><div class="line">&#125;</div><div class="line">이 경우 다른클래스가 Test클래스를 상속할 수 없음.</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Sring <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line">오버라이딩 금지!!</div></pre></td></tr></table></figure>
<h5 id="생각해보자"><a href="#생각해보자" class="headerlink" title="생각해보자"></a>생각해보자</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println( <span class="string">"점[x="</span> + x + <span class="string">",y="</span> + y +<span class="string">"]을 그렸습니다."</span>);			</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">boolean</span> visible)</span> </span>&#123;	<span class="comment">//외부에서 매개변수를 통해 보이고 안보이고를 show메소드로만 통제</span></div><div class="line">  <span class="keyword">if</span>(visible) &#123;</div><div class="line">    show();</div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    System.out.println( <span class="string">"점[x="</span> + x + <span class="string">",y="</span> + y +<span class="string">"]을 지움."</span>);			</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>코드를 위와 같이 구현 시 사용자는 show라는 메소드에 접근하고 boolean 값만을 통해 출력 미출력을 통제할 수 있다. 이 형태가 좋은 이유는 show , notShow 와 같은 메소드를 만들어서 사용자가 모든 메소드를 알고 있어야하는 상황을 없앨 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;특징&quot;&gt;&lt;a href=&quot;#특징&quot; class=&quot;headerlink&quot; title=&quot;특징&quot;&gt;&lt;/a&gt;특징&lt;/h4&gt;&lt;p&gt;많은 클래스, 파일로 프로그램이 구성된다. 클래스는 데이터를 갖고 있고 메소드는 데이터를 다루게 된다. 객체의 데이터를 다루기
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Chat-Bot</title>
    <link href="http://KKimSangHeon.github.io/2017/07/17/Chat-Bot/"/>
    <id>http://KKimSangHeon.github.io/2017/07/17/Chat-Bot/</id>
    <published>2017-07-17T08:49:17.000Z</published>
    <updated>2017-07-20T07:06:31.615Z</updated>
    
    <content type="html"><![CDATA[<h4 id="과정"><a href="#과정" class="headerlink" title="과정"></a>과정</h4><p>기본적인 틀 구축</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save cheerio</div></pre></td></tr></table></figure>
<h2 id="node-js에서-제이쿼리의-선택자를-쓸-수-있게되어-설치"><a href="#node-js에서-제이쿼리의-선택자를-쓸-수-있게되어-설치" class="headerlink" title="node.js에서 제이쿼리의 선택자를 쓸 수 있게되어 설치."></a>node.js에서 제이쿼리의 선택자를 쓸 수 있게되어 설치.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save request</div></pre></td></tr></table></figure>
<p>url에 접속하여 html을 다운받을 수 있게된다.</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save async</div></pre></td></tr></table></figure>
<h2 id="비동기-방식을-사용할-수-있게-된다"><a href="#비동기-방식을-사용할-수-있게-된다" class="headerlink" title="비동기 방식을 사용할 수 있게 된다."></a>비동기 방식을 사용할 수 있게 된다.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save node-cron</div></pre></td></tr></table></figure>
<h2 id="주기적인-작업을-실행시키기-위해-설치하였다"><a href="#주기적인-작업을-실행시키기-위해-설치하였다" class="headerlink" title="주기적인 작업을 실행시키기 위해 설치하였다."></a>주기적인 작업을 실행시키기 위해 설치하였다.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save iconv</div></pre></td></tr></table></figure>
<h2 id="html을-가져-왔을-때-한글-깨짐을-막을-수-있다"><a href="#html을-가져-왔을-때-한글-깨짐을-막을-수-있다" class="headerlink" title="html을 가져 왔을 때 한글 깨짐을 막을 수 있다."></a>html을 가져 왔을 때 한글 깨짐을 막을 수 있다.</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pm2 -g</div></pre></td></tr></table></figure>
<p>서버가 문제가 생겼을 경우 재시작 시켜주며 성능향상에 기여한다.<br>pm2의 명령어는 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pm2 start 서버.js --name 별칭     //실행하면서 별칭을 붙여준다.</div><div class="line">pm2 list  //실행되고 있는 pm2리스트를 조회</div><div class="line"></div><div class="line">pm2 stop 별칭   // pm2를 중지한다.</div><div class="line">pm2 restart 별칭    //pm2 재시작한다.</div><div class="line">pm2 delete 별칭     //pm2 종료</div><div class="line"></div><div class="line">pm2 show 별칭// 정보확인</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;과정&quot;&gt;&lt;a href=&quot;#과정&quot; class=&quot;headerlink&quot; title=&quot;과정&quot;&gt;&lt;/a&gt;과정&lt;/h4&gt;&lt;p&gt;기본적인 틀 구축&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Node.js" scheme="http://KKimSangHeon.github.io/tags/Node-js/"/>
    
      <category term="Kakao talk open API" scheme="http://KKimSangHeon.github.io/tags/Kakao-talk-open-API/"/>
    
      <category term="챗봇" scheme="http://KKimSangHeon.github.io/tags/%EC%B1%97%EB%B4%87/"/>
    
      <category term="MySQL" scheme="http://KKimSangHeon.github.io/tags/MySQL/"/>
    
      <category term="CentOS" scheme="http://KKimSangHeon.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>19장. PXE 서버, 킥스타트</title>
    <link href="http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux42/"/>
    <id>http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux42/</id>
    <published>2017-07-16T12:22:55.000Z</published>
    <updated>2017-07-16T14:03:03.582Z</updated>
    
    <content type="html"><![CDATA[<p>Centos를 100개 깔아야 하는 상황에는 여러가지 방법이 있겠지만 PXE 설치서버를 구성해놓는다면 쉽게 설치가 가능하다!<br>1.DHCP 서버, TFTP 서버, syslinux부팅파일, FTP 또는 웹서버를 PXE 설치 서버에 구성해 놓는다. 즉 PXE는 하나의 프로그램이 아니라 여러개의 프로그램을 잘 조합해 놓은것을 의미<br>2.Centos를 설치할 PC의 전원을 켠다.<br>3.설치할 파일을 네트워크로 전송해서 자동으로 설치</p>
<p>PXE는 초기 설치화면 즉 언어설정 전 까지만 완료해 주지만 킥스타트는 초기설정까지 해준다.</p>
<h3 id="1-PXE-설치"><a href="#1-PXE-설치" class="headerlink" title="1.PXE 설치"></a>1.PXE 설치</h3><h4 id="1-1-서버에서-설정"><a href="#1-1-서버에서-설정" class="headerlink" title="1.1 서버에서 설정"></a>1.1 서버에서 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum -y install syslinux dhcp tftp-server vsftpd //관련패키지 설치</div></pre></td></tr></table></figure>
<h4 id="1-1-DHCP-설정"><a href="#1-1-DHCP-설정" class="headerlink" title="1.1 DHCP 설정"></a>1.1 DHCP 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># systemctl stop firewalld</div><div class="line"># systemctl disable firewalld</div><div class="line"></div><div class="line"># vi /etc/dhcp/dhcpd.conf</div><div class="line">맨아래 다음 입력</div><div class="line">subnet 192.168.111.0 netmask 255.255.255.0 &#123;</div><div class="line">    option routers 192.168.111.2;</div><div class="line">    option subnet-mask 255.255.255.0;</div><div class="line">    range dynamic-bootp 192.168.111.120  192.168.111.199;</div><div class="line">    option domain-name-servers 192.168.111.2;</div><div class="line">    allow booting;</div><div class="line">    allow bootp;</div><div class="line">    next-server 192.168.111.100;</div><div class="line">    filename &quot;pxelinux.0&quot;;</div><div class="line">&#125;</div><div class="line">입력 후 종료</div></pre></td></tr></table></figure>
<h4 id="1-2-TFTP-설정"><a href="#1-2-TFTP-설정" class="headerlink" title="1.2 TFTP 설정"></a>1.2 TFTP 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vi /etc/xinetd.d/tftp</div><div class="line">disable = no 로 변경</div><div class="line">저장후 종료</div></pre></td></tr></table></figure>
<h4 id="1-3-ftp로-iso이미지-접근가능하게"><a href="#1-3-ftp로-iso이미지-접근가능하게" class="headerlink" title="1.3 ftp로 iso이미지 접근가능하게"></a>1.3 ftp로 iso이미지 접근가능하게</h4><p>오른쪽위 cd모양 우클릭 - 세팅 - Use ISO image… - Centos이미지 찾고 위에 Connected, Connect at power on 체크 - OK<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># umount /dev/cdrom</div><div class="line"># mount /dev/cdrom /var/ftp/pub</div><div class="line">  ftp를 접속할 경우 cd롬파일을 접근가능</div></pre></td></tr></table></figure></p>
<h4 id="1-4-부팅에-필요한-파일-준비"><a href="#1-4-부팅에-필요한-파일-준비" class="headerlink" title="1.4 부팅에 필요한 파일 준비"></a>1.4 부팅에 필요한 파일 준비</h4><p>tftp는 부팅파일을 전송하는 역할이다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># cp /var/ftp/pub/images/pxeboot/vmlinuz /var/lib/tftpboot/</div><div class="line"># cp /var/ftp/pub/images/pxeboot/initrd.img /var/lib/tftpboot/</div><div class="line"># cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</div><div class="line"># ls -l /var/lib/ftpboot</div><div class="line"></div><div class="line"># mkdir /var/lib/tftpboot/pxelinux.cfg</div><div class="line"># cd /var/lib/tftpboot/pxelinux.cfg</div><div class="line"># touch default   //부팅에 관련된 파일 생성</div><div class="line"># vi default   다음을 입력</div><div class="line">DEFAULT         CentOS7_Auto_Install</div><div class="line"></div><div class="line">LABEL           CentOS7_Auto_Install</div><div class="line">        kernel  vmlinuz</div><div class="line">        APPEND  initrd=initrd.img  repo=ftp://192.168.111.100/pub</div><div class="line"></div><div class="line"># ps -ef | grep dnsmasq   //충동하는 프로세스 kill위해</div><div class="line"># kill -9 1696</div><div class="line"># systemctl disable dnsmasq</div></pre></td></tr></table></figure></p>
<h4 id="1-5-관련-서비스-시작"><a href="#1-5-관련-서비스-시작" class="headerlink" title="1.5 관련 서비스 시작"></a>1.5 관련 서비스 시작</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># systemctl restart dhcpd     //서비스 시작</div><div class="line"># systemctl restart vsftpd</div><div class="line"># systemctl restart xinetd   //tftp임</div><div class="line"># systemctl enable dhcpd    //상시가동</div><div class="line"># systemctl enable vsftpd</div><div class="line"># systemctl enable xinetd</div></pre></td></tr></table></figure>
<h4 id="1-6-VMware에서-제공하는-DHCP를-끄자"><a href="#1-6-VMware에서-제공하는-DHCP를-끄자" class="headerlink" title="1.6 VMware에서 제공하는 DHCP를 끄자"></a>1.6 VMware에서 제공하는 DHCP를 끄자</h4><p>워크스테이션 키고 - Edit - Virtual Network Editor - change setting 누르고-VMnet8선택 - Use local DHCP .. 체크 해제 후 - OK<br>이제 서버에서만 DHCP 서버를 제공한다.</p>
<h4 id="1-7-새로운-PC를-만들자"><a href="#1-7-새로운-PC를-만들자" class="headerlink" title="1.7 새로운 PC를 만들자"></a>1.7 새로운 PC를 만들자</h4><p>버츄어 머신에서 진행하자<br>버츄어머신 네임을 TestCom으로<br>로케이션을 Centos 폴더 내 TestCom으로 하자<br>그 후 부팅하면 설치가 된다.</p>
<h3 id="2-킥스타트-설치"><a href="#2-킥스타트-설치" class="headerlink" title="2.킥스타트 설치"></a>2.킥스타트 설치</h3><p>킥스타트는 교재를 참고하자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos를 100개 깔아야 하는 상황에는 여러가지 방법이 있겠지만 PXE 설치서버를 구성해놓는다면 쉽게 설치가 가능하다!&lt;br&gt;1.DHCP 서버, TFTP 서버, syslinux부팅파일, FTP 또는 웹서버를 PXE 설치 서버에 구성해 놓는다
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>18장. 방화벽 컴퓨터를 만들자</title>
    <link href="http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux41/"/>
    <id>http://KKimSangHeon.github.io/2017/07/16/ThisIsLinux41/</id>
    <published>2017-07-16T02:04:12.000Z</published>
    <updated>2017-07-16T04:31:45.506Z</updated>
    
    <content type="html"><![CDATA[<p>방화벽은 내부, 외부를 차단해주는 장비 또는 컴퓨터라고 생각하면 된다. 방화벽으로 인해 외부에서 내부 네트워크로 함부러 침입할 수 없다. 그 기법중 많이 쓰이는 것이 사설IP이다.<br>방화벽 컴퓨터는 랜카드가 두개여야 된다. 내부와 결합되는(사설 IP) 랜카드 외부와 연결되는 랜카드(공인IP)</p>
<p>실습에서 192.168.xxx는 공인 ip<br>10.1.xxx 는 내부ip로 사용한다<br>책 737을 통해 네트워크 구성을 확인하자</p>
<h4 id="1-서버-B-설정-웹서버로-사용할것임"><a href="#1-서버-B-설정-웹서버로-사용할것임" class="headerlink" title="1. 서버 B 설정(웹서버로 사용할것임)"></a>1. 서버 B 설정(웹서버로 사용할것임)</h4><p>서버B의 네트워크 세팅에 들어가서 네트워크 어댑터 클릭 후 Bridged 클릭<br>그러면 네트워크가 Bridged네트워크 안으로 들어옴(사설ip로 사용하기로 함)<br>그 후 ip를 변경하자</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># nmtui edit ens32</div><div class="line">Address를 10.1.1.20/24로 변경</div><div class="line">Gateway를 10.1.1.1로 변경</div><div class="line">Dns 168.126.63.1로 변경  //kt에서 운영하는 dns 서버</div><div class="line">ok버튼</div><div class="line"># reboot</div><div class="line"></div><div class="line"># ip addr</div><div class="line"> inet이 10.1.1.20 인지 확인</div></pre></td></tr></table></figure>
<h4 id="2-클라이언트-설정-클라이언트에서-실행"><a href="#2-클라이언트-설정-클라이언트에서-실행" class="headerlink" title="2. 클라이언트 설정(클라이언트에서 실행)"></a>2. 클라이언트 설정(클라이언트에서 실행)</h4><p>클라이언트의 네트워크 세팅에 들어가서 네트워크 어댑터 클릭 후 Bridged 클릭 그러면 네트워크가 Bridged네트워크 안으로 들어옴<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># nmtui edit ens33</div><div class="line">IPv4 CONFIGURATION을 Manual로 바꾸고 Show 엔터</div><div class="line">Address를 10.1.1.10/24</div><div class="line">Gateway는 10.1.1.1</div><div class="line">DNS Server는 168.126.63.1  </div><div class="line">OK 엔터</div><div class="line"># reboot</div><div class="line"></div><div class="line"># ip addr</div></pre></td></tr></table></figure></p>
<h4 id="3-서버B-클라이언트-사설네트워크-테스트"><a href="#3-서버B-클라이언트-사설네트워크-테스트" class="headerlink" title="3. 서버B,클라이언트 사설네트워크 테스트"></a>3. 서버B,클라이언트 사설네트워크 테스트</h4><p>현재까지 구현한것(서버B,클라이언트)은 게이트웨이가 구현되어있지 않으므로 외부로 나갈 수 없다. 하지만 사설네트워크로 안에서는 연결되어 있으므로 ping이 왔다갔다 하는지 확인해보자</p>
<p>클라이언트에서 실행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ping -c 3  10.1.1.20</div></pre></td></tr></table></figure></p>
<h4 id="4-서버-구성-서버에서-실행"><a href="#4-서버-구성-서버에서-실행" class="headerlink" title="4. 서버 구성(서버에서 실행)"></a>4. 서버 구성(서버에서 실행)</h4><h4 id="4-1-랜카드-하나가-외부로-연결-잘-되어있는지-확인해보자"><a href="#4-1-랜카드-하나가-외부로-연결-잘-되어있는지-확인해보자" class="headerlink" title="4.1 랜카드 하나가 외부로 연결 잘 되어있는지 확인해보자"></a>4.1 랜카드 하나가 외부로 연결 잘 되어있는지 확인해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># nmtui edit ens32</div><div class="line">게이트웨이, DNS Servers가 192.168.111.2로 잘 되어있다.</div><div class="line"># halt -p</div></pre></td></tr></table></figure>
<p>서버에 랜카드를 하나 더 달자.<br>vmware 워크스테이션에서 Edit virtual machins settings를 눌러 Add 후 Network Adapter 선택 다음 후 Bridged 선택하고 Finish 그 후 부팅<br>추가한 장치가 ens32인지 확인해보자<br>날짜 옆에 랜카드 모양을 누르면 ens34가 추가되어 있다. 네트워크설정 클릭 후 오른쪽 아래 톱니모양(유선연결1)을 누르고 신원을 누르자. 그 후 ens34로 입력하자<br>다음 IPv4를 선택하여 자동을 수동으로 변경하자<br>그 후 주소 10.1.1.1<br>네트마스크 255.255.255.0<br>게이트웨이 10.1.1.1<br>네임서버 끄자<br>IPv6로 가서 끄자<br>이제 적용을 누르고 재부팅하자</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vi /etc/sysconfig/network-scripts/ifcfg-ens34</div><div class="line">6,7행 지워버리기</div><div class="line"># systemctl restart network</div><div class="line"># ifconfig</div><div class="line">ens32 는 192.168.111.100번으로 ens34는 10.1.1.1</div></pre></td></tr></table></figure>
<p>이제 하드웨어 설정은 끝났다</p>
<h4 id="5-클라이언트에서-핑을-날려보자"><a href="#5-클라이언트에서-핑을-날려보자" class="headerlink" title="5. 클라이언트에서 핑을 날려보자"></a>5. 클라이언트에서 핑을 날려보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ping 10.1.1.1</div></pre></td></tr></table></figure>
<h4 id="6-서버에-정책을-적용시켜보자"><a href="#6-서버에-정책을-적용시켜보자" class="headerlink" title="6. 서버에 정책을 적용시켜보자"></a>6. 서버에 정책을 적용시켜보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># vi /etc/sysctl.conf</div><div class="line">net.ipv4.ip_foward=1 맨아래 입력</div><div class="line"></div><div class="line"># echo 1 &gt; /proc/sys/net/ipv4/ip_forward</div><div class="line">      //아무 메세지 안나오면 성공</div><div class="line"># cat /proc/sys/net/ipv4/ip_forward</div><div class="line">      //1출력됨</div><div class="line"></div><div class="line">포워딩성공!</div><div class="line"></div><div class="line"># iptables --policy FORWARD DROP</div><div class="line"># iptables --policy INPUT DROP</div><div class="line"># iptables --policy OUTPUT DROP</div><div class="line"></div><div class="line">ens34 장치를 설정해주자</div><div class="line">input 설정</div><div class="line"># iptables --append INPUT --in-interface ens34 --source 10.1.1.0/24 --match state --state NEW,ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line">output 설정</div><div class="line"># iptables --append OUTPUT --out-interface ens34 --destination 10.1.1.0/24 --match state --state NEW,ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line"># iptables --append FORWARD --in-interface ens34 --source 10.1.1.0/24 --destination 0.0.0.0/0 --match state --state NEW,ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line">ens32 설정</div><div class="line"># iptables --append FORWARD --in-interface ens32 --destination 10.1.1.0/24 --match state --state ESTABLISHED --jump ACCEPT</div><div class="line"></div><div class="line"># iptables --table nat --append POSTROUTING --out-interface ens32 --jump MASQUERADE</div><div class="line"></div><div class="line">설정한것 저장</div><div class="line"># service iptables save</div><div class="line"># firewall-config</div><div class="line">영구적 - 마스커레이딩 - 마스커레이딩영역 체크 - 옵션 다시불러오기</div></pre></td></tr></table></figure>
<h4 id="7-클라이언트에서-인터넷-해보자"><a href="#7-클라이언트에서-인터넷-해보자" class="headerlink" title="7.클라이언트에서 인터넷 해보자"></a>7.클라이언트에서 인터넷 해보자</h4><p>이 경우 클라이언트는 자신의 ip(10.1.1.0)이 아닌 Server IP(192.168.111.100)으로 접속하게 된다. 이를 확인해보자</p>
<h4 id="7-1-윈-클라이언트를-켜자"><a href="#7-1-윈-클라이언트를-켜자" class="headerlink" title="7.1 윈 클라이언트를 켜자"></a>7.1 윈 클라이언트를 켜자</h4><p>파일질라서버를 카페에서 받자<br>에딧 -유저- 오른쪽add -centos 입력- password centos -ok<br>왼쪽 add 아무 디렉토리 선택- write/delete 선택 -ok<br>cmd 열고 netsh advfirewall firewall add rule name=”FTP서버” dir=in action=allow protocol=tcp localport=21<br>방화벽 설정 입력<br>ipconfig<br>아이피를 기억하자 (지금은 192.168.111.128임)</p>
<h4 id="7-2-클라이언트에서-FTP-접속해보자"><a href="#7-2-클라이언트에서-FTP-접속해보자" class="headerlink" title="7.2 클라이언트에서 FTP 접속해보자"></a>7.2 클라이언트에서 FTP 접속해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># su</div><div class="line"># yum -y install ftp</div><div class="line"># ftp 192.168.111.128</div><div class="line">centos</div><div class="line">centos</div><div class="line">&gt;pwd</div><div class="line">&gt;ls</div></pre></td></tr></table></figure>
<h4 id="7-3-윈도우-클라이언트에서-누가-접속했는지-확인해보자"><a href="#7-3-윈도우-클라이언트에서-누가-접속했는지-확인해보자" class="headerlink" title="7.3 윈도우 클라이언트에서 누가 접속했는지 확인해보자"></a>7.3 윈도우 클라이언트에서 누가 접속했는지 확인해보자</h4><p>netstat /an<br>찾다 보면 192.168.111.100이 들어온것을 확인할 수 있다.<br>즉 사설네트워크 컴퓨터는 외부로 나갈 때 192.168.111.100으로 나간다!</p>
<h4 id="8-서버B를-웹서버로-만들고-윈-클라이언트로-접속해보자"><a href="#8-서버B를-웹서버로-만들고-윈-클라이언트로-접속해보자" class="headerlink" title="8. 서버B를 웹서버로 만들고 윈 클라이언트로 접속해보자"></a>8. 서버B를 웹서버로 만들고 윈 클라이언트로 접속해보자</h4><h4 id="8-1-서버-B에서-실행"><a href="#8-1-서버-B에서-실행" class="headerlink" title="8.1 서버 B에서 실행"></a>8.1 서버 B에서 실행</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># yum -y install httpd</div><div class="line"># firewall-cmd --add-service=http    //포트열자</div><div class="line"># cd /var/www/html</div><div class="line"># touch index.html</div><div class="line"># vi index.html</div><div class="line">Centos7-Web Server 입력</div><div class="line">저장 후 종료</div><div class="line"></div><div class="line"># systemctl restart httpd</div><div class="line"># systemctl enable httpd</div></pre></td></tr></table></figure>
<h4 id="8-2-서버에서-80번-포트로-연결오면-서버-B로-연결해라를-설정"><a href="#8-2-서버에서-80번-포트로-연결오면-서버-B로-연결해라를-설정" class="headerlink" title="8.2 서버에서 80번 포트로 연결오면 서버 B로 연결해라를 설정"></a>8.2 서버에서 80번 포트로 연결오면 서버 B로 연결해라를 설정</h4><p>서버에서 실행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># iptables --table nat --append PREROUTING --proto tcp --in-interface ens32 --dport 80 --jump DNAT --to-destination 10.1.1.20</div><div class="line"># service iptables save   //저장</div></pre></td></tr></table></figure></p>
<h4 id="8-3-윈도우-클라이언트에서-접속해보자"><a href="#8-3-윈도우-클라이언트에서-접속해보자" class="headerlink" title="8.3 윈도우 클라이언트에서 접속해보자"></a>8.3 윈도우 클라이언트에서 접속해보자</h4><p>192.168.111.100 으로 접속하자</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;방화벽은 내부, 외부를 차단해주는 장비 또는 컴퓨터라고 생각하면 된다. 방화벽으로 인해 외부에서 내부 네트워크로 함부러 침입할 수 없다. 그 기법중 많이 쓰이는 것이 사설IP이다.&lt;br&gt;방화벽 컴퓨터는 랜카드가 두개여야 된다. 내부와 결합되는(사
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>17장. 프록시 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux40/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux40/</id>
    <published>2017-07-15T09:55:25.000Z</published>
    <updated>2017-07-15T11:04:12.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="프록시서버"><a href="#프록시서버" class="headerlink" title="프록시서버?"></a>프록시서버?</h3><p>웹서핑을 할 경우 웹브라우저가 외부로 가서 파일을 가져와 읽게 되는것이다. 두 브라우져가 같은곳을 접속하면 따로 가져오게 되는 현상이 발생할 수 있다.<br> 하지만 프록시 서버를 지정해놓으면 프록시 서버가 캐시에 a사이트 데이터를 저장 해놓고 다른 웹브라우져가 a서버를 요청하면 a 데이터를 보내준다.</p>
<h4 id="프록시서버-구현-서버에서"><a href="#프록시서버-구현-서버에서" class="headerlink" title="프록시서버 구현(서버에서)"></a>프록시서버 구현(서버에서)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># yum -y install squid    //설치</div><div class="line"># vi /etc/squid/squid.conf</div><div class="line">:set nu</div><div class="line">:26</div><div class="line">acl centos7  src 192.168.111.0/255.255.255.0  //c클래스 지정</div><div class="line">:54</div><div class="line">http_access allow centos7</div><div class="line">:62</div><div class="line">주석 제거 하고 100을 1000으로</div><div class="line">맨아래 다음추가</div><div class="line">visible_hostname        centos7</div><div class="line"></div><div class="line"># firewall-config</div><div class="line">영구적 선택 - 포트 - 추가 3128 - 다시불러오기</div><div class="line"># systemctl stop firewalld    //맘편하게 방화벽 끄는것</div><div class="line"># systemctl restart squid</div><div class="line"># systemctl enable squid</div><div class="line"># systemctl status squid</div></pre></td></tr></table></figure>
<h4 id="웹브라우저에서-프록시서버-지정-클라이언트"><a href="#웹브라우저에서-프록시서버-지정-클라이언트" class="headerlink" title="웹브라우저에서 프록시서버 지정(클라이언트)"></a>웹브라우저에서 프록시서버 지정(클라이언트)</h4><p>파이어폭스를 켜고 - 편집 - 환경설정 -고급 - 네트워크 - 설정 - 프록시 수동설정 192.168.111.100  포트 3128 입력 - 확인</p>
<h4 id="윈도우클라이언트에서-지정-윈클라이언트"><a href="#윈도우클라이언트에서-지정-윈클라이언트" class="headerlink" title="윈도우클라이언트에서 지정(윈클라이언트)"></a>윈도우클라이언트에서 지정(윈클라이언트)</h4><p>도구 -인터넷옵션 -LAN설정 프록시서버 192.168.111.100 3128 입력</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;프록시서버&quot;&gt;&lt;a href=&quot;#프록시서버&quot; class=&quot;headerlink&quot; title=&quot;프록시서버?&quot;&gt;&lt;/a&gt;프록시서버?&lt;/h3&gt;&lt;p&gt;웹서핑을 할 경우 웹브라우저가 외부로 가서 파일을 가져와 읽게 되는것이다. 두 브라우져가 같은곳을 접
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>16장. DHCP 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux39/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux39/</id>
    <published>2017-07-15T07:09:22.000Z</published>
    <updated>2017-07-15T09:54:45.098Z</updated>
    
    <content type="html"><![CDATA[<p>DHCP(Dynamic Host Configuration Protocol) 서버는 자동으로 네트워크 정보(IP주소, 서브넷 마스크, 게이트웨이 주소,DNS 서버 주소)를 할당해 주는것이다. 일반 PC는 자신에게 고정IP가 할당되어있지 않아도 DHCP서버가 할당해준다. 그러므로 일반사용자는 IP에 대한 지식 없이도 인터넷 사용이 가능해진다.</p>
<p>Vmware에서 제공하는 DHCP 서버의 기능은 중지시켜야 한다.</p>
<h4 id="클라이언트-설정"><a href="#클라이언트-설정" class="headerlink" title="클라이언트 설정"></a>클라이언트 설정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># ifconfig</div><div class="line">ip를 DHCP로부터 할당받은것.</div><div class="line"># cat /etc/resolv.conf</div><div class="line">nameserver 또한 DHCP로 부터 할당받은것.</div></pre></td></tr></table></figure>
<h4 id="1-DHCP-기능중지"><a href="#1-DHCP-기능중지" class="headerlink" title="1. DHCP 기능중지"></a>1. DHCP 기능중지</h4><p>워크스테이션 - Edit - Virtual Network Editor - change setting 선택 - VMnet8선택 - DHCP Setting 선택<br>128부터 254까지를 할당하는 것을 확인</p>
<p>Use local DHCP …. 클릭 해제<br>Apply<br>이제 IP를 자동으로 할당받지 못한다.</p>
<h4 id="2-DHCP-서버-설정하자"><a href="#2-DHCP-서버-설정하자" class="headerlink" title="2. DHCP 서버 설정하자."></a>2. DHCP 서버 설정하자.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># yum -y install dhcp</div><div class="line"># ps -ef | grep dnsmasq   //dhcp와 충돌하므로 죽이자.</div><div class="line">nobody    1696     1  0 18:21 ?        00:00:00 /sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf</div><div class="line">root      3514  2462  0 18:28 pts/0    00:00:00 grep --color=auto dnsmasq</div><div class="line"></div><div class="line"># kill -9 1696    //다를 수 있다.</div><div class="line"># systemctl disable dnsmasq //껏다켜도 실행 되지 않도록.</div><div class="line"></div><div class="line"># vi /etc/dhcp/dhcpd.conf   //dhcp 설정파일</div><div class="line">아래를 추가하자. (엔터로 인한 공백이 존재하면 안된다)</div><div class="line"></div><div class="line">ddns-update-style  interim;</div><div class="line">subnet  192.168.111.0   netmask 255.255.255.0 &#123;</div><div class="line">        option  routers  192.168.111.2;   </div><div class="line">                          //라우터설정</div><div class="line">        option  subnet-mask  255.255.255.0;</div><div class="line">                          //서브넷마스크설정</div><div class="line">        range   dynamic-bootp 192.168.111.30  192.168.111.50;</div><div class="line">                          //ip범위 설정 30~50까지 20개</div><div class="line">        option  domain-name-servers 192.126.63.1;</div><div class="line">                          //dns설정(kt에서 제공하는것)</div><div class="line">        default-lease-time      10000;</div><div class="line">                          //디폴트 임대시간</div><div class="line">        max-lease-time          50000;</div><div class="line">                          //최대임대시간</div><div class="line">&#125;             </div><div class="line"></div><div class="line"># ls /var/lib/dhcpd</div><div class="line">dhcpd.leases에 ip를 임대해준것에 대한 기록이 있다.</div><div class="line"></div><div class="line"># systemctl restart dhcpd</div><div class="line"># systemctl enable dhcpd  //상시가동</div><div class="line"># systemctl status dhcpd  //잘 작동하는지 확인</div><div class="line"></div><div class="line"># systemctl stop firewalld</div><div class="line"></div><div class="line"># systemctl restart dhcpd</div></pre></td></tr></table></figure>
<h4 id="3-클라이언트에서-IP-할당받아보자"><a href="#3-클라이언트에서-IP-할당받아보자" class="headerlink" title="3. 클라이언트에서 IP 할당받아보자"></a>3. 클라이언트에서 IP 할당받아보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># su -c &apos;systemctl restart network&apos;</div><div class="line">password 입력</div><div class="line"># ifconfig    //아이피 확인해보자</div><div class="line">192.168.111.30을 받았다. (아까 30~50을 지정해줌)</div></pre></td></tr></table></figure>
<h4 id="4-윈도우-클라이언트에서-IP-할당받아보자"><a href="#4-윈도우-클라이언트에서-IP-할당받아보자" class="headerlink" title="4. 윈도우 클라이언트에서 IP 할당받아보자"></a>4. 윈도우 클라이언트에서 IP 할당받아보자</h4><p>네트워크 - 공유센터 - 어댑터 - 로컬 영역 연결을 사용안함으로 했다가 사용으로 변경 - cmd를 켜고 ipconfig 를 입력하면<br>192.168.111.31을 받은것을 확인할 수 있다.</p>
<h4 id="5-서버에서-빌려간것들을-확인해보자"><a href="#5-서버에서-빌려간것들을-확인해보자" class="headerlink" title="5. 서버에서 빌려간것들을 확인해보자"></a>5. 서버에서 빌려간것들을 확인해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cat /var/lib/dhcpd/dhcpd.leases</div><div class="line">IP를 언제빌려갔고 누가 빌려갔고 맥어드레스 등을 확인할 수 있다.</div></pre></td></tr></table></figure>
<h4 id="6-다시-워크스테이션의-DHCP를-켜자"><a href="#6-다시-워크스테이션의-DHCP를-켜자" class="headerlink" title="6. 다시 워크스테이션의 DHCP를 켜자"></a>6. 다시 워크스테이션의 DHCP를 켜자</h4><p>워크스테이션 - Edit - Virtual Network Editor - change setting 선택 - VMnet8선택 - DHCP Setting 선택 - Use local DHCP …선택</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DHCP(Dynamic Host Configuration Protocol) 서버는 자동으로 네트워크 정보(IP주소, 서브넷 마스크, 게이트웨이 주소,DNS 서버 주소)를 할당해 주는것이다. 일반 PC는 자신에게 고정IP가 할당되어있지 않아도 DH
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>15장. Samba 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux38/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux38/</id>
    <published>2017-07-15T05:37:36.000Z</published>
    <updated>2017-07-15T07:08:30.947Z</updated>
    
    <content type="html"><![CDATA[<p>NFS 유닉스와 유닉스 유닉스와 리눅스간 파일공유이고<br>삼바는 유닉스(리눅스)와 윈도우즈간에 공유하는것.</p>
<h3 id="1-윈도우가-삼바-서버"><a href="#1-윈도우가-삼바-서버" class="headerlink" title="1.윈도우가 삼바 서버"></a>1.윈도우가 삼바 서버</h3><h4 id="1-1-윈도우-클라이언트를-삼바-서버로-만들자-윈클라이언트실행"><a href="#1-1-윈도우-클라이언트를-삼바-서버로-만들자-윈클라이언트실행" class="headerlink" title="1.1 윈도우 클라이언트를 삼바 서버로 만들자(윈클라이언트실행)"></a>1.1 윈도우 클라이언트를 삼바 서버로 만들자(윈클라이언트실행)</h4><p>C 드라이브에 smbShare 폴더만든다. 그 폴더 속성 들어가서 공유탭의 공유버튼 누르고 Everyone 선택하고 추가 그 후 Everyone은 읽기/쓰기로 선택</p>
<p>명령프롬프트 관리자 모드로 열고 net user root 1234 /add 입력.<br>    //윈도우즈 사용자 추가<br>ipconfig<br>192.168.11.131임을 기억하자</p>
<h4 id="1-2-삼바-클라이언트로-접속해보자-서버에서-실행"><a href="#1-2-삼바-클라이언트로-접속해보자-서버에서-실행" class="headerlink" title="1.2 삼바 클라이언트로 접속해보자(서버에서 실행)"></a>1.2 삼바 클라이언트로 접속해보자(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep samba</div><div class="line"># smbclient -L 192.168.111.131</div><div class="line">1234입력</div><div class="line"></div><div class="line"># mkdir /sambaMount</div><div class="line"># mount -t cifs //192.168.111.131/smbShare /sambaMount</div><div class="line">        //윈도우는 //로 해야함</div><div class="line">1234입력</div><div class="line"></div><div class="line"># ls -l /sambaMount</div><div class="line"></div><div class="line"># cp /boot/vmlinuz-* /sambaMount</div></pre></td></tr></table></figure>
<h3 id="2-리눅스가-삼바-서버"><a href="#2-리눅스가-삼바-서버" class="headerlink" title="2. 리눅스가 삼바 서버"></a>2. 리눅스가 삼바 서버</h3><p>윈도우는 삼바 클라이언트라는 개념이 없다. 그래서 리눅스가 윈도우인척 폴더를 공유해 놓으면 윈도우 클라이언트는 해당폴더가 윈도우가 공유했는지 리눅스가 공유한지 모르고 그냥 쓰게 된다.</p>
<h4 id="2-1-리눅스-서버를-삼바-서버로-만들자-서버에서-실행"><a href="#2-1-리눅스-서버를-삼바-서버로-만들자-서버에서-실행" class="headerlink" title="2.1 리눅스 서버를 삼바 서버로 만들자(서버에서 실행)"></a>2.1 리눅스 서버를 삼바 서버로 만들자(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># yum -y install samba</div><div class="line">관련파일 카페에서 받자</div><div class="line"># cd 다운로드</div><div class="line"># yum -y localinstall system-config-samba*</div><div class="line">여기서 에러날 경우 카페 자료실을 참고하자</div><div class="line"></div><div class="line"># systemctl restart smb</div><div class="line"># systemctl enable smb</div><div class="line"></div><div class="line"># ls /share     / //share 폴더를 공유하자</div><div class="line"># chmod 707 /share</div><div class="line"># system-config-samba</div><div class="line">설정- 서버설정 - workgroup/centOS 7 입력-</div><div class="line">              보안탭가서 인증모드 공유로 하고 확인</div><div class="line">workgroup은 윈도우의 그룹이다.</div><div class="line"></div><div class="line">+를 누르고 폴더는 /share로 하고 쓰기가능,보이기 체크</div><div class="line">접근탭을 눌러서 모든사용자에게 접근부여 선택</div><div class="line"></div><div class="line">설정 - samba사용자 눌러서 사용자 추가.</div><div class="line">유닉스 사용자명은 centOS / winuser /1234 /1234 입력 후 확인</div><div class="line"></div><div class="line"># systemctl stop firewalld</div><div class="line"></div><div class="line"># firewall-config //삼바, 삼바 클라이언트 열기</div><div class="line">          //지금은 방화벽을 꺼둔상태라 하지 않아도 된다.</div><div class="line"></div><div class="line"># systemctl restart smb</div></pre></td></tr></table></figure>
<h4 id="2-2-윈도우에서-접속해보자"><a href="#2-2-윈도우에서-접속해보자" class="headerlink" title="2.2 윈도우에서 접속해보자"></a>2.2 윈도우에서 접속해보자</h4><p>컴퓨터 -&gt; 네트워크 드라이브 연결<br>드라이브 Q로 선택<br>폴더에  \\192.168.111.100\share 입력<br>centos<br>1234</p>
<h4 id="2-3-서버에-접속한-사용자를-보자-서버에서-실행"><a href="#2-3-서버에-접속한-사용자를-보자-서버에서-실행" class="headerlink" title="2.3 서버에 접속한 사용자를 보자(서버에서 실행)"></a>2.3 서버에 접속한 사용자를 보자(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># smbstatus</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NFS 유닉스와 유닉스 유닉스와 리눅스간 파일공유이고&lt;br&gt;삼바는 유닉스(리눅스)와 윈도우즈간에 공유하는것.&lt;/p&gt;
&lt;h3 id=&quot;1-윈도우가-삼바-서버&quot;&gt;&lt;a href=&quot;#1-윈도우가-삼바-서버&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>14장. NFS 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux37/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux37/</id>
    <published>2017-07-15T03:11:36.000Z</published>
    <updated>2017-07-15T05:37:18.579Z</updated>
    
    <content type="html"><![CDATA[<p>NFS 서버리눅스 사이에 파일이나 폴더를 공유하는것<br>NFS를 구현하면 다양한 클라이언트가 공유 디렉터리에 접근할 수 있다.<br>서버에서는 서버를 구현하고 클라이언트는 그것을 마운트하여 사용한다.</p>
<h4 id="서버를-NFS-서버로-구현-서버로-실행"><a href="#서버를-NFS-서버로-구현-서버로-실행" class="headerlink" title="서버를 NFS 서버로 구현(서버로 실행)"></a>서버를 NFS 서버로 구현(서버로 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># rpm -qa nfs-utils   //설치 확인(깔려있다.)</div><div class="line"># vi /etc/exports //공유할 폴더를 지정하는 파일</div><div class="line">/share          192.168.111.*(rw,sync) 입력</div><div class="line">    //리드 라이트, 싱크까지 시킴</div><div class="line"># mkdir /share</div><div class="line"># chmod 707 /share/</div><div class="line"># cp /boot/vmlinuz-3* /share/file1</div><div class="line"># ls -l /share/</div><div class="line"># systemctl restart nfs-server    //서비스 시작</div><div class="line"># systemctl enable nfs-server   //상시가동</div><div class="line"># exportfs -v    //공개된 폴더 보임</div><div class="line"></div><div class="line"># systemctl stop firewalld //방화벽 끄기..</div><div class="line">      //관련된 것이 많아서 끄는게 낫다.</div></pre></td></tr></table></figure>
<h4 id="클라이언트로-NFS-접속-클라이언트로-실행"><a href="#클라이언트로-NFS-접속-클라이언트로-실행" class="headerlink" title="클라이언트로 NFS 접속(클라이언트로 실행)"></a>클라이언트로 NFS 접속(클라이언트로 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># rpm -qa nfs-utils //패키지 설치여부 확인(깔려있다)</div><div class="line"></div><div class="line"># showmount -e 192.168.111.100    //서버에서 마운트한 폴더 조회</div><div class="line"></div><div class="line"># cd</div><div class="line"># mkdir myShare</div><div class="line"># su</div><div class="line"> password 입력</div><div class="line"># cd /home/centos</div><div class="line"># mount -t nfs 192.168.111.100:/share myShare //마운트</div><div class="line"># ls -l myShare</div><div class="line"></div><div class="line"># cd myShare/</div><div class="line"># touch abc</div><div class="line"># touch bcd</div></pre></td></tr></table></figure>
<h4 id="클라이언트가-생성한게-서버에도-있나-확인"><a href="#클라이언트가-생성한게-서버에도-있나-확인" class="headerlink" title="클라이언트가 생성한게 서버에도 있나 확인"></a>클라이언트가 생성한게 서버에도 있나 확인</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ls -l /share    //abc,bcd 파일이 존재한다</div></pre></td></tr></table></figure>
<h4 id="윈도우로-접속해보자"><a href="#윈도우로-접속해보자" class="headerlink" title="윈도우로 접속해보자"></a>윈도우로 접속해보자</h4><p>일반적으로는 NFS는 제공을 안하지만 엔터프라이즈의 경우엔 제공해준다.<br>제어판 - 프로그램 - 기능 사용/사용안함 클릭- nfs용 클라이언트 체크<br>확인<br>재부팅<br>관리자로 cmd를 열자<br>mount 192.168.111.100:/share *<br>내컴퓨터를 누르면 접속 가능</p>
<h4 id="NFS서버의-그래픽-설정도구를-사용해보자"><a href="#NFS서버의-그래픽-설정도구를-사용해보자" class="headerlink" title="NFS서버의 그래픽 설정도구를 사용해보자"></a>NFS서버의 그래픽 설정도구를 사용해보자</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">페도라20에서 제공하므로 카페에서 다운받자</div><div class="line"># yum -y install</div><div class="line"># cd 다운로드</div><div class="line"># yum -y localinstall system-config-nfs-1.4.2-1.fc20.noarch.rpm</div><div class="line"></div><div class="line"># mkdir /share2</div><div class="line"># system-config-nfs</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NFS 서버리눅스 사이에 파일이나 폴더를 공유하는것&lt;br&gt;NFS를 구현하면 다양한 클라이언트가 공유 디렉터리에 접근할 수 있다.&lt;br&gt;서버에서는 서버를 구현하고 클라이언트는 그것을 마운트하여 사용한다.&lt;/p&gt;
&lt;h4 id=&quot;서버를-NFS-서버로-
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
  <entry>
    <title>13장. FTP 서버 설치와 운영</title>
    <link href="http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux36/"/>
    <id>http://KKimSangHeon.github.io/2017/07/15/ThisIsLinux36/</id>
    <published>2017-07-15T02:04:42.000Z</published>
    <updated>2017-07-15T03:11:20.611Z</updated>
    
    <content type="html"><![CDATA[<p>네임서버, 이메일서버, 웹서버 보다는 훨신 간단하다.<br>FTP 는 file transfer protocol의 약자로 파일을 전송하기 위한 서비스. 대용량 파일을 전송 할 때 FTP 서버는 성능이 좋다. ftp서버의 종류는 몇가지가 있는데 CentOS에서는 vsftpd를 제공한다. 페도라, 레드헷 엔터프라이즈 쪽에서 인기가 좋다.<br>proftpd는 주로 대형 사이트에서 오래동안 인기가 많았다.<br>pure-ftpd는 Troll-FTPd를 기반으로 프랭크 데니스가 2001년에 제작함.<br>사실 사용자입장에서는 어떤 ftp이든 관계가 없다.</p>
<h3 id="1-vsftpd"><a href="#1-vsftpd" class="headerlink" title="1.vsftpd"></a>1.vsftpd</h3><h4 id="실습1-1-vsftpd-설치-및-운영-서버실행"><a href="#실습1-1-vsftpd-설치-및-운영-서버실행" class="headerlink" title="실습1.1 vsftpd 설치 및 운영(서버실행)"></a>실습1.1 vsftpd 설치 및 운영(서버실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># yum -y install vsftpd</div><div class="line">      //165kb 밖에 안되는데 성능이 좋다!</div><div class="line"># cd /var/ftp    //vsftpd의 홈 디렉토리</div><div class="line"># ls -l     //일반적으로 pub라는 디렉토리에 파일을 넣어놓는다.</div><div class="line">            //우리회사가 A라는 파일을 배포해야하면 일반적으로 pub폴더에 넣음.</div><div class="line"># cd pub</div><div class="line"># ls</div><div class="line"># cp /boot/vmlinuz-3* file1</div><div class="line"></div><div class="line"># systemctl restart vsftpd   //ftp 시작</div><div class="line"># systemctl enable vsftpd    //상시가동</div><div class="line"># firewall-config     //방화벽 열기</div><div class="line">영구적탭 . ftp 선택 . 옵션 firewalld다시불러오기  </div></pre></td></tr></table></figure>
<h4 id="실습1-2-vsftpd-윈도우에서-접속해보자-윈클라이언트실행"><a href="#실습1-2-vsftpd-윈도우에서-접속해보자-윈클라이언트실행" class="headerlink" title="실습1.2 vsftpd 윈도우에서 접속해보자(윈클라이언트실행)"></a>실습1.2 vsftpd 윈도우에서 접속해보자(윈클라이언트실행)</h4><p>알드라이브 설치<br>192.168.111.100 입력<br>포트 21<br>익명로그인 체크<br>연결<br>파일 업로드가 안된다. 이유 : ftp는 기본적으로 다운로드만 가능하다. 아무나 업로드 가능하면 악성코드를 올릴 수 도 있다!<br>하지만 허용할 수 있다.</p>
<h4 id="실습1-3-vsftpd-업로드-가능하게-변경-서버에서-실행"><a href="#실습1-3-vsftpd-업로드-가능하게-변경-서버에서-실행" class="headerlink" title="실습1.3 vsftpd 업로드 가능하게 변경(서버에서 실행)"></a>실습1.3 vsftpd 업로드 가능하게 변경(서버에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># vi /etc/vsftpd/vsftpd.conf</div><div class="line">29행 어나니머스가 업로드하는것을 허락한다. 주석해제</div><div class="line">33행 어나니머스가 디렉토리를 만드는것을 허락한다. 주석해제</div><div class="line"></div><div class="line"># chown ftp.ftp /var/ftp/pub  //펍 소유주 변경</div><div class="line"># ls -l</div><div class="line"></div><div class="line"># systemctl restart vsftpd //서비스재시작</div></pre></td></tr></table></figure>
<h4 id="실습1-4-vsftpd-명령어로-파일을-올리고-받아보자-서버B에서-실행"><a href="#실습1-4-vsftpd-명령어로-파일을-올리고-받아보자-서버B에서-실행" class="headerlink" title="실습1.4 vsftpd 명령어로 파일을 올리고 받아보자(서버B에서 실행)"></a>실습1.4 vsftpd 명령어로 파일을 올리고 받아보자(서버B에서 실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># yum -y install epel-release   //레드헷에 접속해서 다운받을수 있도록 설치</div><div class="line"># yum -y install ncftp</div><div class="line"></div><div class="line"># ncftp 192.168.111.100</div><div class="line">&gt;cd pub</div><div class="line">&gt;get file1    //file1 다운로드</div><div class="line"></div><div class="line">&gt;put anaconda-ks.cfg  //아나콘다파일 업로드</div><div class="line"></div><div class="line">&gt;ls -l  </div><div class="line"></div><div class="line">&gt;bye //종료</div></pre></td></tr></table></figure>
<h3 id="2-proftpd"><a href="#2-proftpd" class="headerlink" title="2.proftpd"></a>2.proftpd</h3><h4 id="실습2-1-proftpd-설치-서버실행"><a href="#실습2-1-proftpd-설치-서버실행" class="headerlink" title="실습2.1 proftpd 설치(서버실행)"></a>실습2.1 proftpd 설치(서버실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># yum -y remove vsftpd //충돌 나니까 제거</div><div class="line"></div><div class="line"># yum -y install epel-release //proftpd도 레드헷에 있어서 해줘야함.</div><div class="line"></div><div class="line"># yum -y install proftpd    //proftpd 설치</div><div class="line"></div><div class="line"># vi /etc/proftpd.conf    //설정파일 열기</div><div class="line">:set nu   </div><div class="line">:356 주석처리</div><div class="line">:425 주석처리 &lt;/IfDefine&gt;</div><div class="line">:383 DenyAll을 AllowAll로 변경</div><div class="line">//이제 어나니머스도 접속 가능</div><div class="line"></div><div class="line"># systemctl restart proftpd   </div><div class="line"># systemctl enable proftpd</div><div class="line"></div><div class="line">  방화벽은 아까 열었으므로 안열어도 된다.</div></pre></td></tr></table></figure>
<h4 id="실습2-2-윈클라이언트에서-접속-윈클라이언트-실행"><a href="#실습2-2-윈클라이언트에서-접속-윈클라이언트-실행" class="headerlink" title="실습2.2 윈클라이언트에서 접속(윈클라이언트 실행)"></a>실습2.2 윈클라이언트에서 접속(윈클라이언트 실행)</h4><h3 id="3-pure-ftpd"><a href="#3-pure-ftpd" class="headerlink" title="3. pure-ftpd"></a>3. pure-ftpd</h3><h4 id="실습3-1-pure-ftpd-설치-서버실행"><a href="#실습3-1-pure-ftpd-설치-서버실행" class="headerlink" title="실습3.1 pure-ftpd 설치(서버실행)"></a>실습3.1 pure-ftpd 설치(서버실행)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># yum -y remove proftpd</div><div class="line"># yum -y install pure-ftpd  //레드햇에서 제공한다.</div><div class="line"># vi /etc/pure-ftpd/pure-ftpd.conf</div><div class="line">:set nu</div><div class="line">:77 익명사용자가 허용이 되어있다.</div><div class="line">:286 yes를 no로 변경</div><div class="line"></div><div class="line"># systemctl restart pure-ftpd</div><div class="line"># systemctl enable pure-ftpd</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;네임서버, 이메일서버, 웹서버 보다는 훨신 간단하다.&lt;br&gt;FTP 는 file transfer protocol의 약자로 파일을 전송하기 위한 서비스. 대용량 파일을 전송 할 때 FTP 서버는 성능이 좋다. ftp서버의 종류는 몇가지가 있는데 Ce
    
    </summary>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/Linux/"/>
    
      <category term="이것이 리눅스다" scheme="http://KKimSangHeon.github.io/categories/Linux/%EC%9D%B4%EA%B2%83%EC%9D%B4-%EB%A6%AC%EB%88%85%EC%8A%A4%EB%8B%A4/"/>
    
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/tags/Linux/"/>
    
      <category term="This Is Linux" scheme="http://KKimSangHeon.github.io/tags/This-Is-Linux/"/>
    
  </entry>
  
</feed>
