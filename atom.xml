<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2017-08-22T02:43:08.970Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10. JDBC</title>
    <link href="http://KKimSangHeon.github.io/2017/08/22/database10/"/>
    <id>http://KKimSangHeon.github.io/2017/08/22/database10/</id>
    <published>2017-08-22T00:08:22.000Z</published>
    <updated>2017-08-22T02:43:08.970Z</updated>
    
    <content type="html"><![CDATA[<h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p>-자바를 이용한 데이터베이스 접속과 SQL 문장의  실행, 그리고  실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약<br>-자바 프로그램내에서 SQL문을 실행하기 위한 자바 API<br>-SQL과 프로그래밍 언어의 통합 접근 중 한 형태</p>
<h4 id="Class-forName메소드란"><a href="#Class-forName메소드란" class="headerlink" title="Class.forName메소드란?"></a>Class.forName메소드란?</h4><p>클래스를 로딩하는 메소드이다.<br>//왜 new OralcDriver()을 하지 않고 forName() 메소드를 사용할 까?<br>//new 를 이용할 경우 벤더별로 다를것이므로!</p>
<figure class="highlight java"><figcaption><span>MyDriver.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.jdbc;</div><div class="line"></div><div class="line">...</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDriver</span> <span class="keyword">implements</span> <span class="title">Driver</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">static</span> &#123;</div><div class="line">		System.out.println( <span class="string">"static code area"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//외부에서 드라이버 접근이 가능토록 드라이버 등록</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			DriverManager.registerDriver(<span class="keyword">new</span> MyDriver());</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">acceptsURL</span><span class="params">(String arg0)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		<span class="comment">// TODO Auto-generated method stub</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Connection <span class="title">connect</span><span class="params">(String url, Properties info)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line"></div><div class="line">		System.out.println( url );</div><div class="line">		System.out.println( info );</div><div class="line">		<span class="comment">//이작업은 DB마다 다를것이다.</span></div><div class="line">		<span class="comment">/*연결 작업*/</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MyConnection();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>ConnectionTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line"><span class="comment">//			Class.forName( "oracle.jdbc.driver.OracleDriver" );</span></div><div class="line">			Class.forName( <span class="string">"com.bigdata2017.jdbc.MyDriver"</span> );</div><div class="line">			<span class="comment">//클래스를 강제 로딩</span></div><div class="line">			<span class="comment">//왜 new OralcDriver()을 하지 않고 forName() 메소드를 사용할 까?</span></div><div class="line">			<span class="comment">//new 를 이용할 경우 벤더별로 다를것이므로!</span></div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			DriverManager.getConnection(url, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"연결실패"</span> + e );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>MyConnection.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bigdata2017.jdbc;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span></span>&#123;</div><div class="line"></div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h4><p>프로젝트 우클릭 - 자바 빌드 패스 - 라이브러리탭- add library - user library 선택 -new - jdbc(아무거나 가능) - add external jar - ojdbc 파일 찾기 - apply - finish</p>
<h4 id="SelectTest"><a href="#SelectTest" class="headerlink" title="SelectTest"></a>SelectTest</h4><figure class="highlight java"><figcaption><span>SelectTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.ResultSet;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"><span class="keyword">import</span> java.sql.Statement;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Connection conn = <span class="keyword">null</span> ;</div><div class="line">		Statement stmt = <span class="keyword">null</span>;</div><div class="line">		ResultSet rs = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line">			Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">			<span class="comment">//2. Connection 얻어오기</span></div><div class="line">			String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">			conn = DriverManager.getConnection(url, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//3. Statement 객체 생성</span></div><div class="line">			stmt = conn.createStatement();</div><div class="line"></div><div class="line">			<span class="comment">//4. SQL문 실행</span></div><div class="line">			String sql = <span class="string">"select EMPLOYEE_ID,"</span></div><div class="line">					+ <span class="string">"	  FIRST_NAME,"</span></div><div class="line">					+ <span class="string">"   LAST_NAME,"</span></div><div class="line">					+ <span class="string">"   SALARY "</span></div><div class="line">					+ <span class="string">"   from employees"</span>;</div><div class="line">			rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"connection 성공"</span>);</div><div class="line"></div><div class="line">			<span class="comment">//5. 결과 사용하기</span></div><div class="line">			<span class="keyword">while</span>( rs.next() ) &#123;</div><div class="line">				Long employee_id = rs.getLong( <span class="number">1</span> );</div><div class="line">				String first_Name = rs.getString( <span class="number">2</span> );</div><div class="line">				String last_Name = rs.getString( <span class="number">3</span> );</div><div class="line">				<span class="keyword">int</span> salary = rs.getInt(<span class="number">4</span>);</div><div class="line">				System.out.println( employee_id+</div><div class="line">						first_Name +</div><div class="line">						last_Name +</div><div class="line">						salary);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			System.out.println( <span class="string">"error"</span> + e );</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="comment">//3. 자원정리</span></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( rs != <span class="keyword">null</span> ) &#123;</div><div class="line">					rs.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">					stmt.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">					conn.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="UpdateTest"><a href="#UpdateTest" class="headerlink" title="UpdateTest"></a>UpdateTest</h4><p>Statement를 사용함. 아래 Insert에서는 Prepared Statement를 사용 한다.<br>비교해보자<br><figure class="highlight java"><figcaption><span>UpdateTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Connection conn = <span class="keyword">null</span> ;</div><div class="line">	Statement stmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line">		Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//2. Connection 얻어오기</span></div><div class="line">		String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">		conn = DriverManager.getConnection(url, <span class="string">"dev"</span>, <span class="string">"dev"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//3. Statement 객체 생성</span></div><div class="line">		stmt = conn.createStatement();</div><div class="line"></div><div class="line">		<span class="comment">//4. SQL문 실행</span></div><div class="line">		String name = <span class="string">"도우넛"</span>;</div><div class="line">		Long no = <span class="number">12L</span>;</div><div class="line"></div><div class="line">		String sql = <span class="string">"update author "</span></div><div class="line">				+ <span class="string">"      set name = '"</span>+ name +<span class="string">"'"</span></div><div class="line">				+ <span class="string">"	  where no = "</span>+ no;</div><div class="line"></div><div class="line">		<span class="comment">//쿼리문이 복잡한데 Prepared Statement를 통해 좀더 수월하게 할 수 있다.</span></div><div class="line"></div><div class="line">		<span class="keyword">int</span> count = stmt.executeUpdate(sql);</div><div class="line"></div><div class="line">		<span class="comment">//5. 성공유무</span></div><div class="line">		System.out.println( count == <span class="number">1</span> ? <span class="string">"성공"</span> : <span class="string">"실패"</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">		System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">		System.out.println( <span class="string">"error"</span> + e );</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">//3. 자원정리</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>( stmt != <span class="keyword">null</span> ) &#123;</div><div class="line">				stmt.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="InsertTest"><a href="#InsertTest" class="headerlink" title="InsertTest"></a>InsertTest</h4><figure class="highlight java"><figcaption><span>InsertTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.Connection;</div><div class="line"><span class="keyword">import</span> java.sql.DriverManager;</div><div class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</div><div class="line"><span class="keyword">import</span> java.sql.SQLException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Connection conn = <span class="keyword">null</span> ;</div><div class="line">	PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">//1. JDBC 드라이버 로딩</span></div><div class="line">		Class.forName( <span class="string">"oracle.jdbc.driver.OracleDriver"</span> );</div><div class="line"></div><div class="line">		<span class="comment">//2. Connection 얻어오기</span></div><div class="line">		String url = <span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>;</div><div class="line">		conn = DriverManager.getConnection(url, <span class="string">"dev"</span>, <span class="string">"dev"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//3. Statement 준비</span></div><div class="line">		String sql = <span class="string">"insert"</span></div><div class="line">				+ <span class="string">"into author"</span></div><div class="line">				+ <span class="string">"values(seq_author.nextval,?,?)"</span>;</div><div class="line"></div><div class="line">		pstmt = conn.prepareStatement(sql);</div><div class="line"></div><div class="line">		<span class="comment">//4. 바인딩</span></div><div class="line">		pstmt.setString( <span class="number">1</span>, <span class="string">"공자"</span>);</div><div class="line">		pstmt.setString( <span class="number">2</span>, <span class="string">"어쩌구저쩌구"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//5. SQL문 실행</span></div><div class="line">		<span class="keyword">int</span> count = pstmt.executeUpdate();	<span class="comment">//파라미터로 sql이 들어가면 안된다.</span></div><div class="line"></div><div class="line">		<span class="comment">//5. 성공유무</span></div><div class="line">		System.out.println( count == <span class="number">1</span> ? <span class="string">"성공"</span> : <span class="string">"실패"</span>);</div><div class="line"></div><div class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">		System.out.println( <span class="string">"드라이버 로딩 실패:"</span> + e );</div><div class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">		System.out.println( <span class="string">"error"</span> + e );</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="comment">//3. 자원정리</span></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span>( pstmt != <span class="keyword">null</span> ) &#123;</div><div class="line">				pstmt.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( conn != <span class="keyword">null</span> ) &#123;</div><div class="line">				conn.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC&quot;&gt;&lt;/a&gt;JDBC&lt;/h4&gt;&lt;p&gt;-자바를 이용한 데이터베이스 접속과 SQL 문장의  실행, 그리고  실행 결과로 얻어진 데이터의 핸들링을 제공하
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>9. Data Dictionary, DCL, ROLE</title>
    <link href="http://KKimSangHeon.github.io/2017/08/21/database9/"/>
    <id>http://KKimSangHeon.github.io/2017/08/21/database9/</id>
    <published>2017-08-21T05:17:43.000Z</published>
    <updated>2017-08-22T00:43:10.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Data-Dictionary란"><a href="#Data-Dictionary란" class="headerlink" title="Data Dictionary란?"></a>Data Dictionary란?</h4><p>모든 스키마 객체 정보, 스키마 객체의 공간 정보, 컬럼의 기본값, 제약조건 정보, 오라클 사용자 정보, 권한 및 롤 정보, 기타 데이터베이스 정보 …</p>
<p>SELECT * FROM DICTIONARY;<br>–데이터 딕셔너리 조회</p>
<p>SELECT * FROM USER_OBJECTS;</p>
<p>SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE = ‘TABLE’;</p>
<p>SELECT * FROM DICTIONARY;<br>–데이터 딕셔너리 조회</p>
<p>SELECT * FROM USER_OBJECTS;</p>
<p>SELECT * FROM USER_OBJECTS WHERE OBJECT_TYPE = ‘TABLE’;</p>
<p>SELECT * FROM USER_USERS;<br>–로그인한 유저만 보여줌</p>
<p>SELECT * FROM ALL_USERS;<br>–전체 유저 보여줌</p>
<p>SELECT * FROM DBA_USERS;<br>–CONN /AS SYSDBA로 로그인 후 가능</p>
<p>SELECT *<br>FROM USER_CONSTRAINTS<br>WHERE TABLE_NAME = ‘BOOK’;<br>–제약조건 조회</p>
<p>SELECT * FROM USER_USERS;</p>
<h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><p>–사용자 생성<br>CREATE USER SHKIM IDENTIFIED BY “SHKIM”;</p>
<p>–접속권한<br>GRANT CREATE SESSION TO SHKIM;</p>
<p>–SELECT 권한 부여 (DEV에 있는 BOOK테이블에 SELECT 할수있는..)<br>GRANT SELECT ON DEV.BOOK TO SHKIM;</p>
<p>–접속권한 없애기<br>REVOKE CREATE SESSION FROM SHKIM;</p>
<p>–롤 단위<br>이렇게만 해도 접속 가능<br>GRANT CONNECT, RESOURCE TO SHKIM;</p>
<p>REVOKE CONNECT RESOURCE FROM SHKIM;</p>
<h4 id="ROLE-생성"><a href="#ROLE-생성" class="headerlink" title="ROLE 생성"></a>ROLE 생성</h4><p>여러개의 권한을 묶어놓은것!<br>CONN /AS SYSDBA<br>CREATE ROLE VIEWER;<br>GRANT CREATE SESSION TO VIEWER;<br>GRANT SELECT ON DEV.BOOK TO VIEWER;<br>GRANT VIEWER TO SHKIM;<br>CONN SHKIN/SHKIM;<br>SELECT * FROM DEV.BOOK;</p>
<p>CONN /AS SYSDBA;<br>REVOKE VIWER FROM SHKIM;</p>
<h4 id="transaction"><a href="#transaction" class="headerlink" title="transaction"></a>transaction</h4><p>트랜잭션은 DML의 집합으로 이루어진다.<br>논리적 작업단위, 일련의 연산 집합을 의미한다.</p>
<p>–DML<br>–암시적(컬럼 지정X) 인 경우에는 순서와 , 개수 정확해야 함<br>INSERT INTO AUTHOR VALUES(SEQ_AUTHOR.NEXTVAL, ‘둘리’,NULL);</p>
<p>–명시적(컬럼 지정O)인 경우 지정한 순서와 개수 대로 입력해야 한다.<br>INSERT INTO AUTHOR(NAME, NO) VALUES(‘둘리’,SEQ_AUTHOR.NEXTVAL);</p>
<p>트랜잭션은 다음과 같은 특징을 가져야 한다.<br>Atomicity: all or nothing. 하나의 단위로 처리되어야 함. (중간까지만 처리됨은 불가)<br>Consistency: 데이터베이스의 일관성(무결성)을 깨지 않아야 함<br>Isolation: 다른 transaction과 동시에 수행되더라도 독립적으로 영향을 받지 않아야 함<br>Durability: 한번 수행 완료(commit)되면 영원히 반영되어 있어야 함 (시스템 crash에서라도)</p>
<p>DDL이나 DCL은 한 문장이 트랜잭션으로 처리됨</p>
<h4 id="DeadLock"><a href="#DeadLock" class="headerlink" title="DeadLock"></a>DeadLock</h4><p>둘 이상의 트랜잭션이 서로 상대방의 Lock을 순환 대기하여 어떤 트랜잭션도 더 이상 진행할 수 없는 상태</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Data-Dictionary란&quot;&gt;&lt;a href=&quot;#Data-Dictionary란&quot; class=&quot;headerlink&quot; title=&quot;Data Dictionary란?&quot;&gt;&lt;/a&gt;Data Dictionary란?&lt;/h4&gt;&lt;p&gt;모든 스키마 객체 정보
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>8. Commit, Transaction, Delete, Update, CONSTRAINT</title>
    <link href="http://KKimSangHeon.github.io/2017/08/21/database8/"/>
    <id>http://KKimSangHeon.github.io/2017/08/21/database8/</id>
    <published>2017-08-21T00:23:06.000Z</published>
    <updated>2017-08-21T06:32:45.704Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h4><p>일련의 과정을 거친 후 커밋을 해줘야 데이터베이스에 반영이 된다.<br>오라클의 경우 DDL은 자동으로 커밋이 되며 DML은 직접 커밋을 해줘야 한다.<br>커밋의 과정중 에러가 나면 롤백시킨다.</p>
<h4 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h4><p>여러개의 job를 묶어 놓은것을 Transaction이라 한다.</p>
<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>DELETE<br>FROM BOOK<br>WHERE NO = 1;</p>
<p>COMMIT;   // 커밋한다.<br>ROLLBACK;   //다시 롤백한다.</p>
<h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><p>UPDATE BOOK<br>SET TITLE = ‘토지2’<br>WHERE NO = 1;</p>
<h4 id="Subquery를-이용한-테이블-생성"><a href="#Subquery를-이용한-테이블-생성" class="headerlink" title="Subquery를 이용한 테이블 생성"></a>Subquery를 이용한 테이블 생성</h4><p>백업용 테스트용으로 많이 쓰인다.</p>
<p>Subquery의 결과와 동일한 테이블 생성됨<br>질의 결과 레코드들이 포함됨<br>NOT NULL 제약 조건 만 상속됨</p>
<p>CREATE TABLE EMPLOYEES_BAK01<br>AS ( SELECT *<br>     FROM EMPLOYEES<br>     WHERE JOB_ID = ‘FI_ACCOUNT’<br>);</p>
<h4 id="char-varchar"><a href="#char-varchar" class="headerlink" title="char, varchar"></a>char, varchar</h4><p>char - 10바이트를 만들고 ‘ab’를 입력하면 10바이트 할당됨<br>varchar - 10바이트를 만들고 ‘ab’를 입력하면 2바이트 할당됨</p>
<p>모든 데이터가 고정크기일 때 (ex 주민번호, 학번) - char<br>모든 데이터가 고정크기가 아닐 때 (ex 이메일) - varchar</p>
<h4 id="varchar-varchar2"><a href="#varchar-varchar2" class="headerlink" title="varchar, varchar2"></a>varchar, varchar2</h4><p>기능상의 다른점은 없지만 varchar2에서 성능개선이 이뤄짐.<br>varchar는 곧 없어질 것이라 예고를 하고있다.</p>
<h4 id="NUMBER-x-y"><a href="#NUMBER-x-y" class="headerlink" title="NUMBER(x,y)"></a>NUMBER(x,y)</h4><p>y는 실수부분을 의미한다.</p>
<h4 id="varchar2-5-nvarchar2-5"><a href="#varchar2-5-nvarchar2-5" class="headerlink" title="varchar2(5), nvarchar2(5)"></a>varchar2(5), nvarchar2(5)</h4><p>varchar2(5)는 5바이트를 할당<br>nvarchar2(5) 는 5글자를 할당<br>한글은 UTF-8을 사용하기 떄문에 문제가 된다.</p>
<p>–NVARCHAR2 , VARCHAR2와 비교</p>
<p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(120),<br>    AUTHOR VARCHAR2(5), –MAX 4000 BYTE<br>    TEST NVARCHAR2(2000), –MAX 2000자( 내부적으로 6000 BYTE )<br>    PUB_DTAE DATE<br>);</p>
<p>INSERT INTO BOOK VALUES(1, ‘토지’, ‘가나’, SYSDATE);<br>– 가나가 6바이트라 에러가 발생..</p>
<p>INSERT INTO BOOK VALUES(1, ‘토지’, ‘가’, SYSDATE);<br>– 정상적으로 INSERT 가능</p>
<h4 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h4><p>ALTER TABLE BOOK ADD(PUBS VARCHAR(120));<br>–컬럼추가<br>ALTER TABLE BOOK MODIFY(PUBS VARCHAR(200));<br>–컬럼 변경<br>ALTER TABLE BOOK RENAME COLUMN PUBS TO PUBLISHINGS;<br>–컬럼명 변경<br>ALTER TABLE BOOK DROP(PUBLISHINGS);<br>–컬럼 제거<br>ALTER TABLE BOOK MODIFY(AUTHOR VARCHAR(300) NOT NULL);<br>–컬럼 변경<br>ALTER TABLE BOOK SET UNUSED(AUTHOR);<br>–컬럼을 보이지 않게 만듦<br>ALTER TABLE BOOK DROP UNUSED COLUMNS;<br>–보이지 않게 만든 컬럼을 삭제함</p>
<h4 id="SEQUENCE"><a href="#SEQUENCE" class="headerlink" title="SEQUENCE"></a>SEQUENCE</h4><p>값이 1씩 증가한다<br>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR VARCHAR2(50) NOT NULL, –MAX 4000 BYTE<br>    PUB_DATE DATE,</p>
<pre><code>PRIMARY KEY(NO)
</code></pre><p>);</p>
<p>CREATE SEQUENCE SEQ_BOOK<br>START WITH 1    –1부터 시작<br>INCREMENT BY 1  –1씩 증가<br>MAXVALUE 999999999  –MAX가 다차면 1로 돌아감<br>–PRIMARY KEY 자동증가</p>
<p>SELECT SEQ_BOOK.NEXTVAL FROM DUAL;  –증가<br>SELECT SEQ_BOOK.CURRVAL FROM DUAL;  –최근값</p>
<p>INSERT INTO BOOK VALUES(<br>    SEQ_BOOK.NEXTVAL,<br>    ‘토지2’,<br>    ‘박경리’,<br>    SYSDATE<br>);<br>–INSERT 문에서의 시퀀스 활용</p>
<h4 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h4><p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR VARCHAR2(50) NOT NULL, –MAX 4000 BYTE<br>    PUB_DATE DATE,<br>    STATE VARCHAR2(12) NOT NULL,<br>    PRIMARY KEY(NO),<br>    CONSTRAINT C_BOOK_CHECK CHECK(STATE IN (‘대여중’, ‘대여가능’))<br>);</p>
<p>INSERT INTO BOOK VALUES(<br>    SEQ_BOOK.NEXTVAL,<br>    ‘토지2’,<br>    ‘박경리’,<br>     SYSDATE,<br>    ‘대여가능’   –대여중, 대여가능만 들어갈 수 있다.<br>    );   </p>
<h4 id="외부키"><a href="#외부키" class="headerlink" title="외부키"></a>외부키</h4><p>CREATE SEQUENCE SEQ_AUTHOR<br>START WITH 1<br>INCREMENT BY 1<br>MAXVALUE 999999999<br>–시퀀스 생성</p>
<p>CREATE TABLE AUTHOR(<br>    NO NUMBER(10),<br>    NAME VARCHAR2(200) NOT NULL,<br>    PROFILE VARCHAR2(2000),<br>    PRIMARY KEY(NO)<br>)</p>
<p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR_NO NUMBER(10) , –MAX 4000 BYTE<br>    STATE VARCHAR2(12) NOT NULL,<br>    PUB_DATE DATE,<br>    PRIMARY KEY(NO),<br>    CONSTRAINT C_BOOK_FK FOREIGN KEY (AUTHOR_NO) REFERENCES AUTHOR(NO)<br>    ON DELETE CASCADE  , –AUTHOR 테이블의 박경리 데이터가 삭제도면 BOOK테이블의 토지 데이터도 삭제된다.<br>    ON DELETE SET NULL, –AUTHOR 테이블의 박경리 데이터가 삭제도면 BOOK테이블의 AUTHOR_NO는 NULL이 된다..<br>    CONSTRAINT C_BOOK_CHECK CHECK(STATE IN (‘대여중’, ‘대여가능’))<br>);</p>
<p>INSERT INTO AUTHOR VALUES(<br>SEQ_AUTHOR.NEXTVAL,<br>‘박경리’,<br>NULL);</p>
<p>INSERT INTO BOOK VALUES(<br>SEQ_BOOK.NEXTVAL,<br>‘토지’,<br>1,<br>‘대여가능’,<br>SYSDATE);</p>
<h4 id="CONSTRAINT"><a href="#CONSTRAINT" class="headerlink" title="CONSTRAINT"></a>CONSTRAINT</h4><p>제약조건은 보통 ALTER테이블을 통해 모아서 준다.<br>아래와 같이..<br>CREATE TABLE AUTHOR(<br>    NO NUMBER(10),<br>    NAME VARCHAR2(200) NOT NULL,<br>    PROFILE VARCHAR2(2000)<br>)</p>
<p>ALTER TABLE AUTHOR<br>ADD CONSTRAINT C_AUTHOR_PK<br>PRIMARY KEY(NO);</p>
<p>CREATE TABLE BOOK(<br>    NO NUMBER(10),<br>    TITLE VARCHAR2(200) NOT NULL,<br>    AUTHOR_NO NUMBER(10) NOT NULL, –MAX 4000 BYTE<br>    STATE VARCHAR2(12) NOT NULL,<br>    PUB_DATE DATE<br>);</p>
<p>ALTER TABLE BOOK<br>ADD CONSTRAINT C_BOOK_PK<br>PRIMARY KEY(NO);</p>
<p>ALTER TABLE BOOK<br>ADD CONSTRAINT C_BOOK_CHECK<br>CHECK(STATE IN (‘대여중’, ‘대여가능’));</p>
<p>ALTER TABLE BOOK<br>ADD CONSTRAINT C_BOOK_FK<br>FOREIGN KEY (AUTHOR_NO) REFERENCES AUTHOR(NO) ON DELETE CASCADE ;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Commit&quot;&gt;&lt;a href=&quot;#Commit&quot; class=&quot;headerlink&quot; title=&quot;Commit&quot;&gt;&lt;/a&gt;Commit&lt;/h4&gt;&lt;p&gt;일련의 과정을 거친 후 커밋을 해줘야 데이터베이스에 반영이 된다.&lt;br&gt;오라클의 경우 DDL은 자
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>7. TOP - K</title>
    <link href="http://KKimSangHeon.github.io/2017/08/18/database7/"/>
    <id>http://KKimSangHeon.github.io/2017/08/18/database7/</id>
    <published>2017-08-18T04:04:24.000Z</published>
    <updated>2017-08-18T04:36:18.826Z</updated>
    
    <content type="html"><![CDATA[<p>– TOP -K<br>SELECT ROWNUM,EMPLOYEE_ID, SALARY<br>  FROM EMPLOYEES<br> WHERE HIRE_DATE LIKE ‘06%’<br> ORDER BY SALARY<br>원하는대로 출력이 되지 않을 것이다.</p>
<p>이를 원하는대로 출력하기 위해서는 다음과 같이!<br>SELECT ROWNUM, EMPLOYEE_ID, SALARY<br>FROM (<br>      SELECT EMPLOYEE_ID, SALARY<br>      FROM EMPLOYEES<br>      WHERE HIRE_DATE LIKE ‘06%’<br>      ORDER BY SALARY<br>      );</p>
<p>SELECT ROWNUM, EMPLOYEE_ID, SALARY<br>FROM (<br>      SELECT EMPLOYEE_ID, SALARY<br>      FROM EMPLOYEES<br>      WHERE HIRE_DATE LIKE ‘06%’<br>      ORDER BY SALARY<br>      )<br> WHERE ROWNUM &lt;= 3     ;<br>–앞에서 3개 뽑는것</p>
<p>SELECT ROWNUM, EMPLOYEE_ID, SALARY<br>FROM (<br>      SELECT EMPLOYEE_ID, SALARY<br>      FROM EMPLOYEES<br>      WHERE HIRE_DATE LIKE ‘06%’<br>      ORDER BY SALARY<br>      )<br> WHERE 6 &gt;= ROWNUM AND ROWNUM &lt;= 10;<br>–이것은 원하는 결과가 나오지 않는다.<br>1이  찍히지 않으므로 그렇다. 이로인해 ROWNUM이 증가하지 않음</p>
<p>SELECT * FROM<br>        (<br>        SELECT ROWNUM AS RN, EMPLOYEE_ID, SALARY<br>        FROM (<br>              SELECT EMPLOYEE_ID, SALARY<br>              FROM EMPLOYEES<br>              WHERE HIRE_DATE LIKE ‘06%’<br>              ORDER BY SALARY<br>              )<br>         )<br> WHERE RN &gt;=6 AND RN &lt;=10;<br> – 위의 문제를 이렇게 해결함.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;– TOP -K&lt;br&gt;SELECT ROWNUM,EMPLOYEE_ID, SALARY&lt;br&gt;  FROM EMPLOYEES&lt;br&gt; WHERE HIRE_DATE LIKE ‘06%’&lt;br&gt; ORDER BY SALARY&lt;br&gt;원하는대로 출력이 되지 않을 것
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>6. SUBQUERY</title>
    <link href="http://KKimSangHeon.github.io/2017/08/18/database6/"/>
    <id>http://KKimSangHeon.github.io/2017/08/18/database6/</id>
    <published>2017-08-18T01:22:43.000Z</published>
    <updated>2017-08-18T04:04:17.946Z</updated>
    
    <content type="html"><![CDATA[<h4 id="서브쿼리"><a href="#서브쿼리" class="headerlink" title="서브쿼리"></a>서브쿼리</h4><p>Lex보다 많이 받는 사원 구하기</p>
<p>SELECT FIRST_NAME, SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY &gt; (SELECT<br>                    SALARY<br>                 FROM EMPLOYEES<br>                 WHERE FIRST_NAME = ‘Lex’);</p>
<p>SELECT A.FIRST_NAME, B.SALARY<br>FROM   EMPLOYEES A,<br>       (SELECT<br>           SALARY<br>        FROM EMPLOYEES<br>        WHERE FIRST_NAME = ‘Lex’) B<br>WHERE A.SALARY &gt; B.SALARY;<br>– 조인으로도 처리 가능                </p>
<p>SELECT FIRST_NAME, SALARY<br>FROM   EMPLOYEES<br>WHERE   SALARY &gt; (SELECT AVG(SALARY)<br>                  FROM EMPLOYEES );         </p>
<p>–SINGLE LOW SUB QUERY</p>
<hr>
<p>– 문_ JOB_ID가 ‘IT_PROG’인 직원이 받는 월급보다 많이 받고 있는 직원의 이름과 월급</p>
<p>SELECT FIRST_NAME,<br>       SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY &gt; ALL (SELECT SALARY<br>                     FROM EMPLOYEES<br>                     WHERE JOB_ID = ‘IT_PROG’)</p>
<p>– MULTI ROW SUB QUERY</p>
<hr>
<p>–문) 각 부서별로 최고 월급을 받는 직원의 이름과 직원의 이름과 월급 출력</p>
<p>WHERE을 활용</p>
<p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  (SALARY,DEPARTMENT_ID) IN (<br>                                SELECT MAX(SALARY),DEPARTMENT_ID<br>                                FROM EMPLOYEES<br>                                GROUP BY DEPARTMENT_ID<br>                                );</p>
<p>FROM을 활용<br>SELECT A.DEPARTMENT_ID, FIRST_NAME, SALARY<br>FROM   EMPLOYEES A,<br>    ( SELECT DEPARTMENT_ID,<br>             MAX(SALARY) AS MAX_SALARY<br>      FROM EMPLOYEES<br>      GROUP BY DEPARTMENT_ID<br>    ) B<br>WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID<br>AND   A.SALARY = B.MAX_SALARY;        </p>
<p>CORELATED 활용<br>SELECT DEPARTMENT_ID, FIRST_NAME, SALARY<br>FROM EMPLOYEES A<br>WHERE SALARY = ( SELECT MAX(SALARY)<br>                 FROM EMPLOYEES<br>                 WHERE A.DEPARTMENT_ID = DEPARTMENT_ID);</p>
<p>– CORELATED SUBQUERY</p>
<hr>
<p>자기 부서의 평균월급 보다 적은 월급을 받는 사원을 구하라</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;서브쿼리&quot;&gt;&lt;a href=&quot;#서브쿼리&quot; class=&quot;headerlink&quot; title=&quot;서브쿼리&quot;&gt;&lt;/a&gt;서브쿼리&lt;/h4&gt;&lt;p&gt;Lex보다 많이 받는 사원 구하기&lt;/p&gt;
&lt;p&gt;SELECT FIRST_NAME, SALARY&lt;br&gt;FROM   
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>5. ROLLUP, CUBE</title>
    <link href="http://KKimSangHeon.github.io/2017/08/18/database5/"/>
    <id>http://KKimSangHeon.github.io/2017/08/18/database5/</id>
    <published>2017-08-18T00:05:47.000Z</published>
    <updated>2017-08-18T01:22:37.148Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ROWNUM"><a href="#ROWNUM" class="headerlink" title="ROWNUM"></a>ROWNUM</h4><p>SELECT ROWNUM, EMPLOYEE_ID<br>FROM EMPLOYEES;</p>
<h4 id="트리-형태-구조를-추출하기-위한-질의"><a href="#트리-형태-구조를-추출하기-위한-질의" class="headerlink" title="트리 형태 구조를 추출하기 위한 질의"></a>트리 형태 구조를 추출하기 위한 질의</h4><p>– START WITH ~ CONNECT BY 절<br>SELECT LEVEL MANAGER_ID, EMPLOYEE_ID<br>FROM EMPLOYEES<br>START WITH MANAGER_ID IS NULL<br>CONNECT BY PRIOR EMPLOYEE_ID = MANAGER_ID<br>ORDER BY LEVEL, MANAGER_ID, EMPLOYEE_ID;</p>
<h4 id="ROLLUP"><a href="#ROLLUP" class="headerlink" title="ROLLUP"></a>ROLLUP</h4><p>부서별 직책별 평균월급, 사원수 평균월급을 출력하시오<br>ROLLUP (A, B):  group by (A, B) &amp; group by (A) &amp; ALL</p>
<p>SELECT CASE GROUPING(DEPARTMENT_ID)<br>            WHEN 1 THEN ‘모든 부서’<br>            ELSE NVL(TO_CHAR(DEPARTMENT_ID),’없음’)<br>       END AS “부서”,</p>
<pre><code>CASE GROUPING(JOB_ID)
     WHEN 1 THEN &apos;모든 직업&apos;
     ELSE NVL(TO_CHAR(JOB_ID),&apos;없음&apos;)
END AS &quot;직업&quot;

,COUNT(*),ROUND(AVG(SALARY),0)
</code></pre><p>FROM EMPLOYEES<br>GROUP BY ROLLUP(DEPARTMENT_ID, JOB_ID)<br>ORDER BY DEPARTMENT_ID, JOB_ID</p>
<h4 id="GROUPING"><a href="#GROUPING" class="headerlink" title="GROUPING"></a>GROUPING</h4><p>SELECT CASE GROUPING(DEPARTMENT_ID)<br>            WHEN 1 THEN ‘모든 부서’<br>            ELSE NVL(TO_CHAR(DEPARTMENT_ID),’없음’)<br>       END AS “부서”,</p>
<pre><code>CASE GROUPING(JOB_ID)
     WHEN 1 THEN &apos;모든 직업&apos;
     ELSE NVL(TO_CHAR(JOB_ID),&apos;없음&apos;)
END AS &quot;직업&quot;

,COUNT(*),ROUND(AVG(SALARY),0)
</code></pre><p>FROM EMPLOYEES<br>GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)<br>ORDER BY DEPARTMENT_ID, JOB_ID</p>
<h4 id="CUBE"><a href="#CUBE" class="headerlink" title="CUBE"></a>CUBE</h4><p>group by (A,B) &amp; group by (A) &amp; group by (B) &amp; ALL<br>SELECT CASE GROUPING(DEPARTMENT_ID)<br>            WHEN 1 THEN ‘모든 부서’<br>            ELSE NVL(TO_CHAR(DEPARTMENT_ID),’없음’)<br>       END AS “부서”,</p>
<pre><code>CASE GROUPING(JOB_ID)
     WHEN 1 THEN &apos;모든 직업&apos;
     ELSE NVL(TO_CHAR(JOB_ID),&apos;없음&apos;)
END AS &quot;직업&quot;

,COUNT(*),ROUND(AVG(SALARY),0)
</code></pre><p>FROM EMPLOYEES<br>GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)<br>ORDER BY DEPARTMENT_ID, JOB_ID</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;ROWNUM&quot;&gt;&lt;a href=&quot;#ROWNUM&quot; class=&quot;headerlink&quot; title=&quot;ROWNUM&quot;&gt;&lt;/a&gt;ROWNUM&lt;/h4&gt;&lt;p&gt;SELECT ROWNUM, EMPLOYEE_ID&lt;br&gt;FROM EMPLOYEES;&lt;/p&gt;
&lt;h4 
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>4. CASE, DECODE, GROUP BY</title>
    <link href="http://KKimSangHeon.github.io/2017/08/17/database4/"/>
    <id>http://KKimSangHeon.github.io/2017/08/17/database4/</id>
    <published>2017-08-17T01:59:31.000Z</published>
    <updated>2017-08-18T00:05:05.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h4><p>SELECT EMPLOYEE_ID,<br>       SALARY,<br>       JOB_ID,<br>       CASE JOB_ID<br>            WHEN ‘AC_ACCOUNT’ THEN SALARY + SALARY <em> 0.5<br>            WHEN ‘AC_MGR’ THEN SALARY + SALARY </em> 0.3<br>            WHEN ‘AD_VP’ THEN SALARY + SALARY * 0.2<br>            ELSE  SALARY<br>       END AS SALARY<br>FROM EMPLOYEES;        </p>
<h4 id="DECODE"><a href="#DECODE" class="headerlink" title="DECODE"></a>DECODE</h4><p>SELECT EMPLOYEE_ID,<br>       SALARY,<br>       JOB_ID,<br>       DECODE( JOB_ID ,<br>                ‘AC_ACCOUNT’ , SALARY + SALARY <em> 0.5 ,<br>                ‘AC_MGR’ ,SALARY + SALARY </em> 0.3 ,<br>                ‘AD_VP’ , SALARY + SALARY * 0.2 ,<br>                 SALARY) AS “이번달 월급”<br>FROM EMPLOYEES;        </p>
<p>SELECT EMPLOYEE_ID,AVG(SALARY) , MAX(SALARY)<br>FROM EMPLOYEES;<br>– ERROR<br>– 집계함수 이외의 칼럼은 프로젝션 될 수 없다</p>
<h4 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h4><p>SELECT JOB_ID,AVG(SALARY), MAX(SALARY)<br>FROM   EMPLOYEES<br>WHERE  MANAGER_ID IS NOT NULL<br>GROUP BY JOB_ID;<br>– GROUP BY 절에 참여하고 있는 컬럼은 프로젝션 할 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;CASE&quot;&gt;&lt;a href=&quot;#CASE&quot; class=&quot;headerlink&quot; title=&quot;CASE&quot;&gt;&lt;/a&gt;CASE&lt;/h4&gt;&lt;p&gt;SELECT EMPLOYEE_ID,&lt;br&gt;       SALARY,&lt;br&gt;       JOB_ID,&lt;br&gt;   
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>3. 함수 NVL,SYSDATE,IN,BETWEEN,IS NULL,LIKE,LOWER,INITCAP,LPAD,TRIM,REPLACE,CEIL,FLOOR,ROUND,TRUNC,MOD,POWER,SIGN,ADD_MONTHS,TO_CHAR</title>
    <link href="http://KKimSangHeon.github.io/2017/08/16/database3/"/>
    <id>http://KKimSangHeon.github.io/2017/08/16/database3/</id>
    <published>2017-08-16T04:19:24.000Z</published>
    <updated>2017-08-17T02:29:49.538Z</updated>
    
    <content type="html"><![CDATA[<p>SELECT FIRST_NAME || ‘ ‘ || LAST_NAME AS NAME FROM EMPLOYEES;<br>                           ||은 CONCAT</p>
<p>SELECT SALARY AS “본봉”, SALARY + SALARY * 0.3 AS “보너스”<br>FROM EMPLOYEES;</p>
<p>SELECT -SALARY FROM EMPLOYEES;</p>
<h4 id="NVL-NVL2"><a href="#NVL-NVL2" class="headerlink" title="NVL, NVL2"></a>NVL, NVL2</h4><p>SELECT EMPLOYEE_ID,<br>       NVL(MANAGER_ID,’0’)<br>FROM EMPLOYEES;<br>        NVL함수 내의 두 형태는 같아야함</p>
<p>SELECT NVL(NULL, ‘0’) FROM DUAL;</p>
<p>SELECT NVL2(NULL,10, 20) FROM DUAL;<br>–NULL이면 10</p>
<p>SELECT NVL2(0, 10, 20) FROM DUAL;<br>–NULL이 아니면 20</p>
<p>SELECT SALARY AS “본봉”,<br>       SALARY + SALARY * NVL(COMMISSION_PCT,0)<br>       AS “보너스”<br>FROM EMPLOYEES;</p>
<p>SELECT SALARY AS “본봉”,<br>       NVL2(COMMISSION_PCT,SALARY + SALARY * COMMISSION_PCT, SALARY)<br>       AS “보너스”<br>FROM EMPLOYEES;</p>
<h4 id="NULLIF"><a href="#NULLIF" class="headerlink" title="NULLIF"></a>NULLIF</h4><p>SELECT NULLIF( 10 , 5 + 5 ) FROM DUAL;</p>
<h4 id="COALESCE"><a href="#COALESCE" class="headerlink" title="COALESCE"></a>COALESCE</h4><p>SELECT COALESCE(NULL, NULL,1,2,3) FROM DUAL;<br>– 1출력</p>
<h4 id="SYSDATE"><a href="#SYSDATE" class="headerlink" title="SYSDATE"></a>SYSDATE</h4><p>SELECT SYSDATE FROM DUAL;</p>
<p>SELECT JOB_ID<br>FROM EMPLOYEES<br>WHERE JOB_ID = ‘AD_PRES’<br>   OR JOB_ID = ‘AD_VP’;</p>
<h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4><p>SELECT JOB_ID<br>FROM EMPLOYEES<br>WHERE JOB_ID IN(‘AD_PRES’,’AD_VP’);</p>
<h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><p>SELECT EMPLOYEE_ID,<br>         SALARY<br>FROM   EMPLOYEES<br>WHERE  SALARY BETWEEN 10000  AND SALARY  ;</p>
<h4 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h4><p>SELECT EMPLOYEE_ID,<br>       COMMISSION_PCT<br>FROM   EMPLOYEES<br>WHERE  COMMISSION_PCT IS NULL;        </p>
<h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  FIRST_NAME LIKE ‘A%’;<br>–A로 시작하는 문자열에 대해서</p>
<p>SELECT FIRST_NAME<br>FROM   EMPLOYEES<br>WHERE  FIRST<em>NAME LIKE ‘A</em>‘;<br>–A로시작하는 두글자 검색</p>
<p>SELECT EMPLOYEE_ID,<br>       FIRST_NAME<br>FROM   EMPLOYEES<br>ORDER BY FIRST_NAME DESC;</p>
<p>SELECT EMPLOYEE_ID, HIRE_DATE<br>FROM   EMPLOYEES;</p>
<h4 id="LOWER"><a href="#LOWER" class="headerlink" title="LOWER"></a>LOWER</h4><p>SELECT FIRST_NAME<br>FROM EMPLOYEES<br>WHERE LOWER(FIRST_NAME) LIKE ‘al%’;</p>
<h4 id="INITCAP"><a href="#INITCAP" class="headerlink" title="INITCAP"></a>INITCAP</h4><p>SELECT INITCAP(‘database managemaent system’) from dual;<br>–맨앞만 대문자로</p>
<p>SELECT INSTR( ‘DATABASE MANAGEMENT SYSTEM’ , ‘BASE’ ) FROM DUAL;<br>– BASE의 위치 찾기 (DB는 대부분 시작 인덱스가 1이다. )<br>SELECT CEIL( 4.99) FROM DUAL;<br>SELECT CEIL( 4.01) FROM DUAL;<br>– 해당 수보다 큰 정수값 (5 출력됨)</p>
<p>SELECT FLOOR( 4.99 ) FROM DUAL;<br>SELECT FLOOR( 4.00001) FROM DUAL;<br>– 해당 수보다 작은 정수값</p>
<p>SELECT ROUND(3.3364,3) FROM DUAL;<br>– 넷째자리에서 반올림함(3.336 출력됨)</p>
<p>SELECT MOD (9999,6) FROM DUAL;<br>– 나머지<br>SELECT POWER ( 2,10) FROM DUAL;<br>–2의 10승</p>
<h4 id="LPAD"><a href="#LPAD" class="headerlink" title="LPAD"></a>LPAD</h4><p>SELECT EMPLOYEE_ID, LPAD(SALARY, 10 , ‘<em>‘) FROM EMPLOYEES;<br>– 10칸을만들되 왼쪽 나머지는 </em>로 채울것</p>
<h4 id="TRIM"><a href="#TRIM" class="headerlink" title="TRIM"></a>TRIM</h4><p>SELECT TRIM( ‘#’ FROM ‘####DATA#BASE####’) FROM DUAL;<br>– 앞뒤 특정문자 제거</p>
<p>SELECT TRIM( ‘ ‘ FROM ‘  DATA  BASE    ‘) FROM DUAL;<br>– 앞뒤 공백 제거</p>
<p>SELECT  LTRIM(‘   DATA BASE   ‘,’ ‘) FROM DUAL;<br>– 왼쪽 공백 제거</p>
<h4 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h4><p>SELECT REPLACE(‘  DATA BASE  ‘, ‘ ‘ ,’’) FROM DUAL;<br>– 공백 제거</p>
<h4 id="CEIL"><a href="#CEIL" class="headerlink" title="CEIL"></a>CEIL</h4><p>SELECT CEIL( 4.99) FROM DUAL;<br>SELECT CEIL( 4.01) FROM DUAL;<br>– 해당 수보다 큰 정수값 (5 출력됨)</p>
<h4 id="FLOOR"><a href="#FLOOR" class="headerlink" title="FLOOR"></a>FLOOR</h4><p>SELECT FLOOR( 4.99 ) FROM DUAL;<br>SELECT FLOOR( 4.00001) FROM DUAL;<br>– 해당 수보다 작은 정수값</p>
<h4 id="ROUND"><a href="#ROUND" class="headerlink" title="ROUND"></a>ROUND</h4><p>SELECT ROUND(3.3364,3) FROM DUAL;<br>– 넷째자리에서 반올림함(3.336 출력됨)</p>
<h4 id="TRUNC"><a href="#TRUNC" class="headerlink" title="TRUNC"></a>TRUNC</h4><p>SELECT TRUNC( 3.3864,1) FROM DUAL;<br>– 1자리만 남기고 버림(3.3나옴)</p>
<h4 id="MOD"><a href="#MOD" class="headerlink" title="MOD"></a>MOD</h4><p>SELECT MOD (9999,6) FROM DUAL;<br>– 나머지</p>
<h4 id="POWER"><a href="#POWER" class="headerlink" title="POWER"></a>POWER</h4><p>SELECT POWER ( 2,10) FROM DUAL;<br>–2의 10승</p>
<h4 id="SIGN"><a href="#SIGN" class="headerlink" title="SIGN"></a>SIGN</h4><p>SELECT SIGN(9999) FROM DUAL;<br>–   1나옴</p>
<p>SELECT SIGN(-9999) FROM DUAL;<br>–  -1나옴</p>
<p>SELECT SIGN(0) FROM DUAL;<br>–  0나옴</p>
<h4 id="ADD-MONTHS"><a href="#ADD-MONTHS" class="headerlink" title="ADD_MONTHS"></a>ADD_MONTHS</h4><p>SELECT ADD_MONTHS( SYSDATE, 3 ) FROM DUAL;<br>SELECT ADD_MONTHS( ‘15/01/01’,3 ) FROM DUAL;</p>
<p>SELECT LAST_DAY( SYSDATE ) FROM DUAL;<br>–해당월에 마지막 일</p>
<p>SELECT MONTHS_BETWEEN( ADD_MONTHS(SYSDATE,3), SYSDATE) FROM DUAL;</p>
<p>SELECT EMPLOYEE_ID,<br>       JOB_ID,<br>       ROUND(MONTHS_BETWEEN( END_DATE, START_DATE))<br>FROM   JOB_HISTORY;</p>
<p>SELECT NEXT_DAY( SYSDATE, 7) FROM DUAL;<br>–    1-&gt;SUN  7-&gt;SAT</p>
<h4 id="TO-CHAR"><a href="#TO-CHAR" class="headerlink" title="TO_CHAR"></a>TO_CHAR</h4><p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘99999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자<br>– 5자리가 넘어가면 #####으로 표시된다.</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘000099999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자<br>–앞에 0000으로 채운다.</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY, ‘999,999’ )<br>FROM EMPLOYEES;<br>– 숫자 &lt;-&gt; 문자</p>
<p>SELECT TO_CHAR( 3.141592, ‘9.99’) FROM DUAL;<br>– 3.14 나옴</p>
<p>SELECT TO_CHAR( 3.141592, ‘9999.9999’) FROM DUAL;<br>–     3.1416 나옴</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FM99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡겨준다</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FM$99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡겨준다</p>
<p>SELECT EMPLOYEE_ID,<br>       TO_CHAR(SALARY,’FML99999999’)<br>FROM   EMPLOYEES;<br>– 왼쪽으로 다 땡기고 원화를 넣어준다.</p>
<p>SELECT TO_CHAR(-12345,’99999MI’) FROM DUAL;<br>– 12345-  </p>
<p>SELECT TO_CHAR(-12345,’S99999’) FROM DUAL;<br>– -12345 출력</p>
<p>SELECT TO_CHAR(12345,’S99999’) FROM DUAL;<br>– +12345 출력</p>
<p>SELECT TO_CHAR(-12345,’99999PR’) FROM DUAL;<br>– <12345> 출력</12345></p>
<p>SELECT TO_CHAR(12345,’99999PR’) FROM DUAL;</p>
<p>SELECT TO_CHAR( 1234, ‘RN’) FROM DUAL;<br>–로마자로 표기</p>
<p>SELECT TO_CHAR( 1234, ‘XXXX’ ) FROM DUAL;<br>–16진수 대문자로 표기</p>
<p>SELECT TO_CHAR( 1234, ‘xxxx’ ) FROM DUAL;<br>–16진수 소문자로 표기</p>
<p>SELECT TO_NUMBER( ‘1234567’,’99999999’) FROM DUAL;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy-mm-dd’)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일”‘)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일” hh24”시”:mi:ss’)<br>FROM EMPLOYEES;</p>
<p>SELECT EMPLOYEE_ID,<br>TO_CHAR(HIRE_DATE, ‘yyyy”년”-mm”월”-dd”일” day pm hh:mi:ss’)<br>FROM EMPLOYEES;</p>
<p>SELECT<br>TO_CHAR(SYSDATE, ‘yyyy”년”-mm”월”-dd”일” ddd”일째 되는날”‘)<br>FROM DUAL;</p>
<p>SELECT TO_CHAR(SYSDATE, ‘RR’)<br>FROM DUAL;</p>
<p>SELECT TO_CHAR(TO_DATE(‘30’,’RR’), ‘YYYY’) FROM DUAL;<br>– 현재 세기</p>
<p>SELECT TO_CHAR(TO_DATE(‘60’,’RR’), ‘YYYY’) FROM DUAL;<br>– 이전 세기</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SELECT FIRST_NAME || ‘ ‘ || LAST_NAME AS NAME FROM EMPLOYEES;&lt;br&gt;                           ||은 CONCAT&lt;/p&gt;
&lt;p&gt;SELECT SALARY AS “본봉”, SALA
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>2. 데이터베이스 기본</title>
    <link href="http://KKimSangHeon.github.io/2017/08/16/database2/"/>
    <id>http://KKimSangHeon.github.io/2017/08/16/database2/</id>
    <published>2017-08-16T00:05:42.000Z</published>
    <updated>2017-08-16T04:19:06.546Z</updated>
    
    <content type="html"><![CDATA[<h4 id="데이터베이스의-기본개념-정의"><a href="#데이터베이스의-기본개념-정의" class="headerlink" title="데이터베이스의 기본개념 (정의)"></a>데이터베이스의 기본개념 (정의)</h4><p>-데이터의 집합 ( a Set of Data )<br>-여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) 데이터의 집합<br>-효율적으로 저장, 검색, 갱신할 수 있도록 데이터 집합들끼리 연관시키고 조직화되어야 한다.</p>
<h4 id="DBMS가-하는일"><a href="#DBMS가-하는일" class="headerlink" title="DBMS가 하는일"></a>DBMS가 하는일</h4><p>데이터 통합, 저장, 운영, 공유 기능 담당. 이를 위해 조직화 되어있어야 함.</p>
<h4 id="데이터베이스의-특성"><a href="#데이터베이스의-특성" class="headerlink" title="데이터베이스의 특성"></a>데이터베이스의 특성</h4><p>-실시간 접근성(Real-time Accessability)<br>    사용자의 요구를 즉시 처리할 수 있다.<br>-계속적인 변화(Continuous Evolution)<br>    정확한 값을 유지하려고 삽입·삭제·수정 작업 등을 이용해 데이터를 지속적으로 갱신할 수 있다.<br>-동시 공유성(Concurrent Sharing)<br>     사용자마다 서로 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근하고 이용할 수 있다.<br>-내용 참조(Content Reference)<br>     저장한 데이터 레코드의 위치나 주소가 아닌 사용자가 요구하는 데이터의 내용, 즉 데이터 값에 따라 참조할 수 있어야 한다.</p>
<h4 id="데이터베이스-관리-시스템-장점"><a href="#데이터베이스-관리-시스템-장점" class="headerlink" title="데이터베이스 관리 시스템 장점"></a>데이터베이스 관리 시스템 장점</h4><p>데이터 중복이 최소화<br>데이터의 일관성 및 무결성 유지<br>데이터 보안 보장</p>
<h4 id="데이터-베이스의-종류"><a href="#데이터-베이스의-종류" class="headerlink" title="데이터 베이스의 종류"></a>데이터 베이스의 종류</h4><p>객체 관계형 데이터베이스 (  Object Relation DataBase = ORDB )<br>     -관계형 데이터베이스에서 사용하는 데이터를 확장<br>     -관계형 데이터베이스를 객체 지향 모델링과 데이터를 관리하는 기능을 갖도록 확장한 것<br>NoSQL(Not Only SQL - SQL문 만을 이용하지 않아도 된다.)<br>     -대용량 데이터의 웹 서비스와 SNS, 클라우드 컴퓨팅의 확대 보급과 대중화로  최근 주목 받는 데이터베이스 기술      </p>
<h4 id="PK"><a href="#PK" class="headerlink" title="PK"></a>PK</h4><p>다른 행과 구분하기 위해 필요.<br>PK를 설정할 땐 비즈니스와 상관없는 컬럼을 지정하는것이 좋다.(비즈니스 변경시 귀찮아 질 수 있다.)<br>PK는 인덱싱이 자동으로 잡혀 빠르다.<br>릴레이션에서 튜플(행)을 구분하기 위하여 사용하는 기본 키<br>하나의 애트리뷰트, 또는 애트리뷰트의 집합(복합키) 가능<br>관리자에 의해 릴레이션 생성시 정의됨 (자동으로 Index생성됨)<br>동일한 PK를 지닌 레코드가 존재할 수 없음</p>
<h4 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h4><p>Candidate Key (후보키): 튜플을 식별할 수 있는 최소한의 애트리뷰트 집합<br>하나의 릴레이션에는 PK가 될 수 있는 키가 여러 개 있을 수 있음<br>유일성과 최소성이 있으면 candidate key가 될 수 있음.<br>Alternative Key (대체키): 후보키 중 기본키가 아닌것<br>Composite key (복합키): 둘 이상의 애트리뷰트가 하나의 Key를 이루는 경우</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;데이터베이스의-기본개념-정의&quot;&gt;&lt;a href=&quot;#데이터베이스의-기본개념-정의&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스의 기본개념 (정의)&quot;&gt;&lt;/a&gt;데이터베이스의 기본개념 (정의)&lt;/h4&gt;&lt;p&gt;-데이터의 집합 ( a S
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>Whole in 밴드</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/wholin/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/wholin/</id>
    <published>2017-08-11T06:55:24.000Z</published>
    <updated>2017-08-11T07:13:18.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-소개-및-개발배경"><a href="#App-소개-및-개발배경" class="headerlink" title="App 소개 및 개발배경"></a>App 소개 및 개발배경</h1><p>-GIF 2016 에 참가하면서 개발하였던 어플리케이션 입니다. 주제는 성공적인 개최를 위한 IOT 서비스 활용방안이였으며 저희팀은 NFC를 이용하여 국적별 다용도로 활용할 수 있는 팔찌(Wholin 밴드)를 제작하였습니다.<br>프로토 타입 어플리케이션이므로 밴드를 통한 국적별 메뉴판 조회, 음식주문 기능을 구현하였습니다.</p>
<h1 id="밴드소개"><a href="#밴드소개" class="headerlink" title="밴드소개"></a>밴드소개</h1><img src="/2017/08/11/wholin/band.PNG" alt="밴드소개" title="밴드소개">
<p>밴드 속에는 NFC칩이 존재하며 메뉴주문 및 결제, 사각지대 VR 생중계 등의 기능을 제공하며 프로토 타입이므로 국적별 메뉴판 조회기능만 제공합니다.</p>
<h1 id="작동화면"><a href="#작동화면" class="headerlink" title="작동화면"></a>작동화면</h1><img src="/2017/08/11/wholin/work1.PNG" alt="작동화면" title="작동화면">
<p>처음 언어를 설정하고 자신의 기본정보를 입력하고 추가정보를 입력후 밴드를 스마트폰에 갖다대면 밴드 등록이 완료됩니다.</p>
<p>-시연영상<br><div class="video-container"><iframe src="//www.youtube.com/embed/eBBswuTXMxY" frameborder="0" allowfullscreen></iframe></div><br><a href="https://github.com/KKimSangHeon/Wholin_Band" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-소개-및-개발배경&quot;&gt;&lt;a href=&quot;#App-소개-및-개발배경&quot; class=&quot;headerlink&quot; title=&quot;App 소개 및 개발배경&quot;&gt;&lt;/a&gt;App 소개 및 개발배경&lt;/h1&gt;&lt;p&gt;-GIF 2016 에 참가하면서 개발하였던 어플
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Android" scheme="http://KKimSangHeon.github.io/tags/Android/"/>
    
      <category term="NFC" scheme="http://KKimSangHeon.github.io/tags/NFC/"/>
    
  </entry>
  
  <entry>
    <title>동국대학교 경주캠퍼스 채팅봇</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/dg-chat-bot/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/dg-chat-bot/</id>
    <published>2017-08-11T06:20:24.000Z</published>
    <updated>2017-08-11T06:45:52.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="프로그램-개발배경"><a href="#프로그램-개발배경" class="headerlink" title="프로그램 개발배경"></a>프로그램 개발배경</h1><p>-기숙사 외박계가 서비스 되지 않은점이 아쉬웠으며 유용하게 쓰일 수 있는 프로그램을 만들어 보고싶어 학교 채팅봇을 만들어보게 되었습니다.</p>
<h1 id="프로그램-소개"><a href="#프로그램-소개" class="headerlink" title="프로그램 소개"></a>프로그램 소개</h1><p>플러스 친구 추가 후 통학버스 조회, 기숙사 식단조회, 도서관 좌석조회, 홈페이지 조회 기능을 사용할 수 있습니다.<br>또한 AWS EC2인스턴스를 활용하여 서비스하며 동국대학교 경주캠퍼스 채팅봇을 검색 후 친구추가가 가능합니다.</p>
<h1 id="프로그램-동작화면"><a href="#프로그램-동작화면" class="headerlink" title="프로그램 동작화면"></a>프로그램 동작화면</h1><img src="/2017/08/11/dg-chat-bot/dgchat.png" alt="동작화면 [그림1]" title="동작화면 [그림1]">
<p>플러스 친구 추가 후 통학버스 조회, 기숙사 식단조회, 도서관 좌석조회, 홈페이지 조회 기능을 사용할 수 있습니다.</p>
<p><a href="https://github.com/KKimSangHeon/Dg_Chat_Bot" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;프로그램-개발배경&quot;&gt;&lt;a href=&quot;#프로그램-개발배경&quot; class=&quot;headerlink&quot; title=&quot;프로그램 개발배경&quot;&gt;&lt;/a&gt;프로그램 개발배경&lt;/h1&gt;&lt;p&gt;-기숙사 외박계가 서비스 되지 않은점이 아쉬웠으며 유용하게 쓰일 수 있는 프
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="Node.js" scheme="http://KKimSangHeon.github.io/tags/Node-js/"/>
    
      <category term="Kakao talk open API" scheme="http://KKimSangHeon.github.io/tags/Kakao-talk-open-API/"/>
    
      <category term="챗봇" scheme="http://KKimSangHeon.github.io/tags/%EC%B1%97%EB%B4%87/"/>
    
      <category term="MySQL" scheme="http://KKimSangHeon.github.io/tags/MySQL/"/>
    
      <category term="CentOS" scheme="http://KKimSangHeon.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>데이터 프리 기프티콘</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/defcon/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/defcon/</id>
    <published>2017-08-11T06:07:04.000Z</published>
    <updated>2017-08-11T06:15:14.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="참가배경"><a href="#참가배경" class="headerlink" title="참가배경"></a>참가배경</h1><p>-두 번째 참가한 해커톤 입니다. 첫 해커톤에 흥미를 느껴 다시한번 참가하게 되었습니다.</p>
<h1 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h1><p>VPN을 이용하여 스마트폰 데이터 사용량을 감소시키는 어플리케이션입니다.<br>데이터 사용량을 감소시키기 위해 서버에 데이터를 전송하기 전 압축하여 보내고 서버에서 클라이언트로 데이터를 보낼때도 압축을 진행하게 됩니다.<br>서버, 클라이언트는 toyVPN이라는 오픈소스를 활용하였습니다.</p>
<h1 id="동작화면"><a href="#동작화면" class="headerlink" title="동작화면"></a>동작화면</h1><img src="/2017/08/11/defcon/defcon.png" alt="동작화면 [그림1]" title="동작화면 [그림1]">
<p>서버의 주소, 포트, 암호를 입력하고 데.프.콘 바로가기 버튼을 누르면 VPN서버에 접속하게됩니다. </p>
<p><a href="https://github.com/KKimSangHeon/Defcon" target="_blank" rel="external">github Repository</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;참가배경&quot;&gt;&lt;a href=&quot;#참가배경&quot; class=&quot;headerlink&quot; title=&quot;참가배경&quot;&gt;&lt;/a&gt;참가배경&lt;/h1&gt;&lt;p&gt;-두 번째 참가한 해커톤 입니다. 첫 해커톤에 흥미를 느껴 다시한번 참가하게 되었습니다.&lt;/p&gt;
&lt;h1 id=&quot;
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="ID 해커톤" scheme="http://KKimSangHeon.github.io/tags/ID-%ED%95%B4%EC%BB%A4%ED%86%A4/"/>
    
  </entry>
  
  <entry>
    <title>엄마가 보고있다</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/Mother-Is-Looking/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/Mother-Is-Looking/</id>
    <published>2017-08-11T05:53:02.000Z</published>
    <updated>2017-08-11T06:06:16.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="참가배경"><a href="#참가배경" class="headerlink" title="참가배경"></a>참가배경</h1><p>-해커톤을 통해 다양한 사람을 만나고 해커톤이라는 콘테스트에 한번쯤 참가 해 보고싶었습니다.</p>
<h1 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h1><p>에너톡 플러그인을 사용하여 현재 문제가 되는 청소년 인터넷 중독문제를 해결하고자 하였습니다. 또한 실시간 전력량을 확인할 수 있는 기능또한 추가하였습니다.</p>
<h1 id="동작화면"><a href="#동작화면" class="headerlink" title="동작화면"></a>동작화면</h1><img src="/2017/08/11/Mother-Is-Looking/motherLooking.png" alt="동작화면 [그림1]" title="동작화면 [그림1]">
<p>어플리케이션을 실행시켜면 다음과 같이 “우리 집 PC 확인”, “우리집 전력 확인”을 선택할 수 있습니다.</p>
<p>우리 집 PC 확인 버튼을 눌러 현재 PC의 사용유무를 확인할 수 있으며 전원버튼을 눌러 컴퓨터를 종료할 수 있습니다.</p>
<p>우리 집 전력 확인 버튼을 누르면 실시간 전력량을 확인할 수 있습니다.</p>
<p><a href="https://github.com/KKimSangHeon/Mother_Is_Looking" target="_blank" rel="external">github Repository</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;참가배경&quot;&gt;&lt;a href=&quot;#참가배경&quot; class=&quot;headerlink&quot; title=&quot;참가배경&quot;&gt;&lt;/a&gt;참가배경&lt;/h1&gt;&lt;p&gt;-해커톤을 통해 다양한 사람을 만나고 해커톤이라는 콘테스트에 한번쯤 참가 해 보고싶었습니다.&lt;/p&gt;
&lt;h1 id
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="에너지 해커톤" scheme="http://KKimSangHeon.github.io/tags/%EC%97%90%EB%84%88%EC%A7%80-%ED%95%B4%EC%BB%A4%ED%86%A4/"/>
    
  </entry>
  
  <entry>
    <title>1. 오라클 설치</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/database1/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/database1/</id>
    <published>2017-08-11T04:39:31.000Z</published>
    <updated>2017-08-16T00:08:01.330Z</updated>
    
    <content type="html"><![CDATA[<p>run sql command line을 켜고</p>
<p>conn system/manager 입력 // manager가 비번</p>
<p>conn /as sysdba   //관리자로 로그인</p>
<p>mysql은 데이터베이스를 각각 생성하지만<br>오라클을 테이블 스페이스가 존재하며 자신의 테이블스페이스에 테이블 생성</p>
<p>alter user hr account unlock; //hr계정을 언락함(사용하기 위해)<br>alter user hr identified by “hr”;   //비번을 hr로함</p>
<p>conn hr/hr    //hr 계정으로 로그인</p>
<p>이클립스 - help - market place - toad 설치</p>
<p>자바가 데이터베이스에 접근하기 위해서는 jdbc가 필요.</p>
<p>Connections탭에가서 new connection선택</p>
<p>User에 hr입력<br>비번에 hr입력</p>
<p>OK클릭</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;run sql command line을 켜고&lt;/p&gt;
&lt;p&gt;conn system/manager 입력 // manager가 비번&lt;/p&gt;
&lt;p&gt;conn /as sysdba   //관리자로 로그인&lt;/p&gt;
&lt;p&gt;mysql은 데이터베이스를 각각 생성하지만&lt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Data-Base/"/>
    
    
      <category term="Data Base" scheme="http://KKimSangHeon.github.io/tags/Data-Base/"/>
    
  </entry>
  
  <entry>
    <title>12. UDP 소켓</title>
    <link href="http://KKimSangHeon.github.io/2017/08/11/bigdata13/"/>
    <id>http://KKimSangHeon.github.io/2017/08/11/bigdata13/</id>
    <published>2017-08-11T00:08:02.000Z</published>
    <updated>2017-08-11T04:36:14.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>1.비 연결 지향 프로그래밍<br>2.TCP와 달리 연결되지 않은 상태로 데이터 통신을 하기 때문에 패킷이 유실될 가능성이 있다<br>3.속도 면에서는 큰 장점이 있다. ( 처음 반응속도가 빠르다 )</p>
<p>TCP 서버 포트 6000 / UDP 서버 포트 6000 일 때 충돌이 날까?<br>나지않는다. 다른 프로토콜이라서 그렇다.</p>
<p>UDP Echo Server<br><figure class="highlight java"><figcaption><span>UDPEchoServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPEchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">6000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> DatagramSocket(PORT);</div><div class="line"></div><div class="line">			<span class="comment">//2. 데이터 수신</span></div><div class="line">			DatagramPacket receivePacket =</div><div class="line">					<span class="keyword">new</span> DatagramPacket(<span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE], BUFFER_SIZE);</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( <span class="keyword">true</span> ) &#123;</div><div class="line">			<span class="comment">//3. 데이터 수신 대기</span></div><div class="line">			socket.receive( receivePacket ); <span class="comment">//block</span></div><div class="line"></div><div class="line">			<span class="comment">//4. 수신</span></div><div class="line">			String message =</div><div class="line">					<span class="keyword">new</span> String( receivePacket.getData(), <span class="number">0</span>, receivePacket.getLength(), <span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">			System.out.println( message );</div><div class="line"></div><div class="line">			<span class="comment">//5. 데이터 송신</span></div><div class="line">			<span class="keyword">byte</span>[] sendData = message.getBytes( <span class="string">"UTF-8"</span> );</div><div class="line">			DatagramPacket sendPacket =</div><div class="line">					<span class="keyword">new</span> DatagramPacket( sendData,</div><div class="line">										sendData.length,</div><div class="line">										receivePacket.getAddress(),</div><div class="line">										receivePacket.getPort() );</div><div class="line"></div><div class="line">			socket.send( sendPacket );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span>( socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">				socket.close();				</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>UDP Echo Client<br><figure class="highlight java"><figcaption><span>UDPEchoClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPEchoClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">6000</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">1024</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line">		Scanner scanner = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 0. 키보드 연결</span></div><div class="line">			scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">			<span class="comment">// 1. 소켓생성</span></div><div class="line">			socket = <span class="keyword">new</span> DatagramSocket();</div><div class="line"></div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">				System.out.print(<span class="string">"&gt;&gt;"</span>);</div><div class="line">				String message = scanner.nextLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">""</span>.equals(message)) &#123;</div><div class="line">					<span class="keyword">continue</span>;					</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">"quit"</span>.equals( message )) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//2. 전송패킷 생성</span></div><div class="line">				<span class="keyword">byte</span>[] sendData = message.getBytes(<span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">				DatagramPacket sendPacket = <span class="keyword">new</span> DatagramPacket(sendData, sendData.length,</div><div class="line">						<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">				<span class="comment">//3. 전송</span></div><div class="line">				socket.send(sendPacket);</div><div class="line"></div><div class="line">				<span class="comment">//4. 메세지 수신</span></div><div class="line">				DatagramPacket receivePacket = <span class="keyword">new</span> DatagramPacket( <span class="keyword">new</span> <span class="keyword">byte</span>[ BUFFER_SIZE], BUFFER_SIZE);</div><div class="line">				socket.receive(receivePacket);</div><div class="line"></div><div class="line">				message = <span class="keyword">new</span> String( receivePacket.getData(), <span class="number">0</span>, receivePacket.getLength(), <span class="string">"UTF-8"</span>) ;</div><div class="line">				System.out.println(<span class="string">"&lt;&lt;"</span>+message);						</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">				socket.close();</div><div class="line">			&#125;</div><div class="line">			scanner.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;UDP&quot;&gt;&lt;a href=&quot;#UDP&quot; class=&quot;headerlink&quot; title=&quot;UDP&quot;&gt;&lt;/a&gt;UDP&lt;/h4&gt;&lt;p&gt;1.비 연결 지향 프로그래밍&lt;br&gt;2.TCP와 달리 연결되지 않은 상태로 데이터 통신을 하기 때문에 패킷이 유실될 가능
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>11.소켓과 스레드의 결합</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata12/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata12/</id>
    <published>2017-08-09T04:15:08.000Z</published>
    <updated>2017-08-09T04:41:54.150Z</updated>
    
    <content type="html"><![CDATA[<p>여러 클라이언트가 접속가능한 서버<br><figure class="highlight java"><figcaption><span>EchoServerReceiveThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// 반복문 내에서 blocking이 되기떄문에 CPU를 많이먹지 않는다.</span></div><div class="line">			<span class="keyword">new</span> EchoServerReceiveThread( socket ).start();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">			<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consoLog</span><span class="params">( String log )</span> </span>&#123;</div><div class="line">		System.out.println( <span class="string">"[server:"</span> );</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>EchoServerReceiveThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServerReceiveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Socket socket;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EchoServerReceiveThread</span><span class="params">( Socket socket )</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.socket = socket;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// 4. 연결성공</span></div><div class="line">		InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">		<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">		String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">		consoleLog(<span class="string">"connected from "</span>+ remoteHostAddress);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line"></div><div class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is, <span class="string">"UTF-8"</span>));</div><div class="line"></div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">			<span class="comment">// auto flush를 true로 한다. true로 안하면</span></div><div class="line">			<span class="comment">// 버퍼가 다찬다음 나가기 때문에 늦게나간다.</span></div><div class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">				<span class="comment">// 6. 데이터 읽기</span></div><div class="line">				String message = br.readLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123; <span class="comment">// 정상종료</span></div><div class="line">					consoleLog(<span class="string">"disconnection by client"</span>);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				consoleLog(<span class="string">" received : "</span> + message);</div><div class="line"></div><div class="line">				<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">				pw.println(message);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">			<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">			consoleLog(<span class="string">"sudden closed by client"</span>);</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consoleLog</span><span class="params">(String log)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"[Server: "</span>+getId() + <span class="string">"]"</span> + log);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;여러 클라이언트가 접속가능한 서버&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;EchoServerReceiveThread.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>10.쓰레드</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata11/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata11/</id>
    <published>2017-08-09T02:42:34.000Z</published>
    <updated>2017-08-09T04:14:24.003Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><figcaption><span>MultiThreadEx.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadEx</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Thread thread1 = <span class="keyword">new</span> AlphabetThread();		<span class="comment">//쓰레드 생성방법1</span></div><div class="line">		Thread thread2 = <span class="keyword">new</span> Thread( <span class="keyword">new</span> DigitThread());	<span class="comment">//쓰레드 생성방법2</span></div><div class="line">		<span class="comment">//매개변수로 Runnable이 구현된 객체를 받음</span></div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable() &#123;	<span class="comment">//쓰레드 생성방법3</span></div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">				<span class="keyword">for</span>( <span class="keyword">char</span> c = <span class="string">'A'</span>; c&lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">					System.out.print( c );</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep(<span class="number">1000</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;			</div><div class="line">		&#125;).start();;</div><div class="line"></div><div class="line">		thread1.start();</div><div class="line">		thread2.start();</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>DigitThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.print( i );</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep( <span class="number">1000</span> );</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>AlphabetThread.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlphabetThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>( <span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; c++) &#123;</div><div class="line">			System.out.print( c );</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep( <span class="number">1000</span> );</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;		</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;MultiThreadEx.java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>9. TCP 소켓 프로그래밍1</title>
    <link href="http://KKimSangHeon.github.io/2017/08/09/bigdata10/"/>
    <id>http://KKimSangHeon.github.io/2017/08/09/bigdata10/</id>
    <published>2017-08-09T00:05:06.000Z</published>
    <updated>2017-08-09T02:42:16.840Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><p>TCP : 스트림(stream) 통신 프로토콜<br>양쪽의 소켓이 연결된 상태에서 통신이 가능하다. (연결지향 프로토콜)<br>신뢰성 있는 데이터 통신<br>한 번 연결이 되면 연결이 끊어 질 때까지 송신한 데이터는 차례대로 목적지의 소켓에 전달<br>자바는  java.net 패키지에  TCP 소켓 프로그래밍을  쉽게 하도록  관련 클래스를  제공하고 있다.<br>라이브러리의 사용법과  동작순서를 정확하게 이해하고 있어야 한다.<br>ServerSocket과 Socket 클래스를 사용하게 된다.  </p>
<figure class="highlight java"><figcaption><span>TCPServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPSever</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// blocking</span></div><div class="line"></div><div class="line">			<span class="comment">// 4. 연결성공</span></div><div class="line">			InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">			<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">			String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">			System.out.println(<span class="string">"[server] connected from "</span> + remoteHostAddress + remoteHostPort);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line">				OutputStream os = socket.getOutputStream();</div><div class="line"></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					<span class="comment">// 6. 데이터 읽기</span></div><div class="line">					<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">					<span class="keyword">int</span> readByteCount = is.read(buffer); <span class="comment">// block</span></div><div class="line"></div><div class="line">					<span class="keyword">if</span> (readByteCount &lt;= -<span class="number">1</span>) &#123;	<span class="comment">//정상종료</span></div><div class="line">						System.out.println(<span class="string">"[server] disconnection by client"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					String data = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, readByteCount, <span class="string">"utf-8"</span>);</div><div class="line">					System.out.println(<span class="string">"[server] received : "</span> + data);</div><div class="line"></div><div class="line">					<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">					os.write(data.getBytes(<span class="string">"utf-8"</span>));</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span>(SocketException e) &#123;</div><div class="line">				<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">				System.out.println(<span class="string">"[server] sudden closed by client"</span>);</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">						socket.close();</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>TCPClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> Socket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 서버 연결</span></div><div class="line">			socket.connect(<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">			<span class="comment">// 3. I/O 받아오기</span></div><div class="line">			InputStream is = socket.getInputStream();</div><div class="line">			OutputStream os = socket.getOutputStream();</div><div class="line"></div><div class="line">			<span class="comment">// 4. 쓰기 / 읽기</span></div><div class="line">			String data = <span class="string">"hello"</span>;</div><div class="line">			os.write( data.getBytes( <span class="string">"utf-8"</span> ));</div><div class="line"></div><div class="line">			<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</div><div class="line">			<span class="keyword">int</span> readByteCount = is.read( buffer );</div><div class="line">			<span class="keyword">if</span>( readByteCount &lt;= -<span class="number">1</span>) &#123;</div><div class="line">				System.out.println( <span class="string">"[client] disconnection by server"</span>);				</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			data = <span class="keyword">new</span> String( buffer, <span class="number">0</span>, readByteCount, <span class="string">"utf-8"</span>);</div><div class="line">			System.out.println(<span class="string">"[client] received:"</span>+ data);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>에코서버, 클라이언트 만들기</p>
<figure class="highlight java"><figcaption><span>EchoServer.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 1. 서버 소켓 생성</span></div><div class="line">			serverSocket = <span class="keyword">new</span> ServerSocket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 바인딩( Binding )</span></div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String localhostAddress = inetAddress.getHostAddress();</div><div class="line"></div><div class="line">			serverSocket.bind(<span class="keyword">new</span> InetSocketAddress(localhostAddress, SERVER_PORT));</div><div class="line">			System.out.println(<span class="string">"[Server] binding "</span> + localhostAddress);</div><div class="line"></div><div class="line">			<span class="comment">// 3. 연결 요청 기다림( accept)</span></div><div class="line">			Socket socket = serverSocket.accept(); <span class="comment">// blocking</span></div><div class="line"></div><div class="line">			<span class="comment">// 4. 연결성공</span></div><div class="line">			InetSocketAddress remoteSocketAddress = (InetSocketAddress) socket.getRemoteSocketAddress();</div><div class="line"></div><div class="line">			<span class="keyword">int</span> remoteHostPort = remoteSocketAddress.getPort();</div><div class="line">			String remoteHostAddress = remoteSocketAddress.getAddress().getHostAddress();</div><div class="line">			System.out.println(<span class="string">"[server] connected from "</span> + remoteHostAddress + remoteHostPort);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">// 5. I/O Stream 받아오기</span></div><div class="line">				InputStream is = socket.getInputStream();</div><div class="line"></div><div class="line"></div><div class="line">				BufferedReader br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader( is, <span class="string">"UTF-8"</span> ));</div><div class="line"></div><div class="line">				PrintWriter pw = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</div><div class="line">												<span class="comment">// auto flush를 true로 한다. true로 안하면</span></div><div class="line">												<span class="comment">//버퍼가 다찬다음 나가기 때문에 늦게나간다.</span></div><div class="line">				<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">					<span class="comment">// 6. 데이터 읽기</span></div><div class="line">					String message = br.readLine();</div><div class="line"></div><div class="line">					<span class="keyword">if</span> ( message == <span class="keyword">null</span> ) &#123;	<span class="comment">//정상종료</span></div><div class="line">						System.out.println(<span class="string">"[server] disconnection by client"</span>);</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					System.out.println(<span class="string">"[server] received : "</span> + message);</div><div class="line"></div><div class="line">					<span class="comment">// 7. 데이터 쓰기</span></div><div class="line">					pw.println(message);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span>(SocketException e) &#123;</div><div class="line">				<span class="comment">// 상대편이 소켓을 정상적으로 닫지 않고 종료한 경우</span></div><div class="line">				System.out.println(<span class="string">"[server] sudden closed by client"</span>);</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 소켓과 관련된 캐치</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125; <span class="keyword">finally</span> &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">						socket.close();</div><div class="line">					&#125;</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123; <span class="comment">// 서버소켓과 관련된 캐치</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span> &amp;&amp; serverSocket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					serverSocket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>EchoClient.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"192.168.111.1"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">5000</span>;</div><div class="line">	<span class="keyword">static</span> Scanner scanner;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// 1. Socket 생성</span></div><div class="line">			socket = <span class="keyword">new</span> Socket();</div><div class="line"></div><div class="line">			<span class="comment">// 2. 서버 연결</span></div><div class="line">			socket.connect(<span class="keyword">new</span> InetSocketAddress(SERVER_IP, SERVER_PORT));</div><div class="line"></div><div class="line">			<span class="comment">// 3. I/O 받아오기</span></div><div class="line">			BufferedReader br =</div><div class="line">					<span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</div><div class="line">			PrintWriter pw = <span class="keyword">new</span> PrintWriter( <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream(),<span class="string">"UTF-8"</span>),<span class="keyword">true</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 4. 쓰기 / 읽기</span></div><div class="line">			 scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				System.out.print( <span class="string">"&gt;&gt;"</span> );</div><div class="line">				String message = scanner.nextLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(<span class="string">"exit"</span>.equals(message)) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//메세지 보내기</span></div><div class="line">				pw.println( message );</div><div class="line"></div><div class="line">				<span class="comment">//에코 메시지 받기</span></div><div class="line">				String echoMessage = br.readLine();</div><div class="line">				<span class="keyword">if</span>( echoMessage == <span class="keyword">null</span>) &#123;</div><div class="line">					System.out.println(<span class="string">"[client] Disconnection by Server"</span>);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">//출력</span></div><div class="line">				System.out.println( <span class="string">"&lt;&lt;"</span> + echoMessage );</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; socket.isClosed() == <span class="keyword">false</span>) &#123;</div><div class="line">					socket.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			scanner.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h4&gt;&lt;p&gt;TCP : 스트림(stream) 통신 프로토콜&lt;br&gt;양쪽의 소켓이 연결된 상태에서 통신이 가능하다. (연결지향 프로토콜
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>8. 네트워크와 소켓의 이해</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata9/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata9/</id>
    <published>2017-08-07T05:01:36.000Z</published>
    <updated>2017-08-08T07:09:50.450Z</updated>
    
    <content type="html"><![CDATA[<h5 id="네트워크란"><a href="#네트워크란" class="headerlink" title="네트워크란?"></a>네트워크란?</h5><p>“유/무선 으로 연결되어 있는  Device들의  집합 ”</p>
<h5 id="네트워킹"><a href="#네트워킹" class="headerlink" title="네트워킹?"></a>네트워킹?</h5><p>디바이스들 간에 미리 정의된 프로토콜을 사용하여 데이터를 교환 하는것.<br>이를위해서는 프로토콜이 필요하다.</p>
<h5 id="클라이언트-서버구조"><a href="#클라이언트-서버구조" class="headerlink" title="클라이언트 서버구조"></a>클라이언트 서버구조</h5><p>Client  -&gt; Server<br>request</p>
<p>Server -&gt; Client<br>response(ACK)</p>
<p>서버 : 서버프로그램이 돌고있는 장비</p>
<h5 id="프로토콜"><a href="#프로토콜" class="headerlink" title="프로토콜"></a>프로토콜</h5><p>디바이스간 데이터 통신을 위해 필요한 규약<br>Hyper Text Transfer Protocol<br>File Transfer Protocol<br>SMTP 등등.</p>
<h5 id="패킷"><a href="#패킷" class="headerlink" title="패킷"></a>패킷</h5><p>패킷은 Header, Body부분으로 나뉜다.<br>Header은 Address, checksum 등 으로 구성되고<br>Body는 Data로 구성된다.</p>
<h4 id="소켓"><a href="#소켓" class="headerlink" title="소켓"></a>소켓</h4><h5 id="소켓-1"><a href="#소켓-1" class="headerlink" title="소켓?"></a>소켓?</h5><p>TCP / IP 프로토콜의 프로그래머 인터페이스를 의미<br>네트워크 프로그래밍에서 개발자에게 네트워크에 접근할 수  있는 인터페이스 제공</p>
<h5 id="포트"><a href="#포트" class="headerlink" title="포트?"></a>포트?</h5><p>프로세스를 구분할 수 있는 주소<br>16비트 정수를 사용한다.</p>
<p>Address =&gt; IP Address</p>
<p>Socket Address =&gt; IP Address + Port</p>
<figure class="highlight java"><figcaption><span>LocalHost.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalHost</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			InetAddress inetAddress = InetAddress.getLocalHost();</div><div class="line">			String hostName = inetAddress.getHostName();</div><div class="line">			String hostAddress = inetAddress.getHostAddress();</div><div class="line">			<span class="keyword">byte</span>[] addresses = inetAddress.getAddress();	<span class="comment">//byte배열로 ip 받아오는 함수</span></div><div class="line"></div><div class="line">			System.out.println(hostName);	<span class="comment">//컴퓨터이름</span></div><div class="line">			System.out.println(hostAddress); <span class="comment">//ipconfig의 결과와 같음</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; addresses.length ; i++) &#123;</div><div class="line">				System.out.print( addresses[i] &amp; <span class="number">0x000000ff</span>);</div><div class="line">					<span class="comment">//MSB로 인해 음수가 나와 마스킹을 해주는것.</span></div><div class="line">				<span class="keyword">if</span>( i &lt; <span class="number">3</span> ) &#123;</div><div class="line">					System.out.print(<span class="string">"."</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>NSLookup기능을 구현해보자.</p>
<figure class="highlight java"><figcaption><span>NSLookup.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NSLookup</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		String host = <span class="string">""</span>;</div><div class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (!(host.equals(<span class="string">"exit"</span>))) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				System.out.print(<span class="string">"&gt;"</span>);</div><div class="line">				host = sc.nextLine();</div><div class="line"></div><div class="line"></div><div class="line">				InetAddress[] inetAddresses = InetAddress.getAllByName(host);</div><div class="line"></div><div class="line">				<span class="keyword">for</span> (InetAddress inetAddress : inetAddresses) &#123;</div><div class="line">					System.out.println(inetAddress.getHostAddress());</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;네트워크란&quot;&gt;&lt;a href=&quot;#네트워크란&quot; class=&quot;headerlink&quot; title=&quot;네트워크란?&quot;&gt;&lt;/a&gt;네트워크란?&lt;/h5&gt;&lt;p&gt;“유/무선 으로 연결되어 있는  Device들의  집합 ”&lt;/p&gt;
&lt;h5 id=&quot;네트워킹&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>7. 스트림</title>
    <link href="http://KKimSangHeon.github.io/2017/08/07/bigdata8/"/>
    <id>http://KKimSangHeon.github.io/2017/08/07/bigdata8/</id>
    <published>2017-08-07T00:17:29.000Z</published>
    <updated>2017-08-08T02:11:38.343Z</updated>
    
    <content type="html"><![CDATA[<h5 id="InputStream-1-byte-단위로-읽는놈"><a href="#InputStream-1-byte-단위로-읽는놈" class="headerlink" title="InputStream - 1 byte 단위로 읽는놈"></a>InputStream - 1 byte 단위로 읽는놈</h5><p>ByteInputStream<br>FileInputStream</p>
<p>FilterInputStream(보조스트림)</p>
<h5 id="OutputStream-1-byte-단위로-쓰는놈"><a href="#OutputStream-1-byte-단위로-쓰는놈" class="headerlink" title="OutputStream - 1 byte 단위로 쓰는놈"></a>OutputStream - 1 byte 단위로 쓰는놈</h5><p>ByteOutputStream<br>FileOutputStream</p>
<p>FilterOutputStream(보조스트림)</p>
<h5 id="Reader-char-2byte-자바에서는-3byte-UTF-8-단위로-읽는놈"><a href="#Reader-char-2byte-자바에서는-3byte-UTF-8-단위로-읽는놈" class="headerlink" title="Reader - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 읽는놈"></a>Reader - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 읽는놈</h5><p>FileReader(InputStreamReader을 상속)<br>BufferedReader</p>
<h5 id="Writer-char-2byte-자바에서는-3byte-UTF-8-단위로-쓰는놈"><a href="#Writer-char-2byte-자바에서는-3byte-UTF-8-단위로-쓰는놈" class="headerlink" title="Writer - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 쓰는놈"></a>Writer - char(2byte, 자바에서는 3byte(UTF-8)) 단위로 쓰는놈</h5><p>FileWriter<br>BufferedWriter</p>
<h4 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h4><p>1.주 스트림을 소스에 꽂는다.<br>2.보조스트림은 주 스트림에 꽂는다.<br>3.프로그램에서 보조스트림을 사용해서 읽는다.</p>
<figure class="highlight java"><figcaption><span>IOExample.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOExample</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">byte</span>[] src = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line">		<span class="keyword">byte</span>[] dest = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">		InputStream is = <span class="keyword">new</span> ByteArrayInputStream( src );</div><div class="line">		OutputStream os = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>( (data = is.read()) != -<span class="number">1</span> ) &#123;	<span class="comment">//data에 1바이트식 저장됨</span></div><div class="line">			os.write(data);		</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		dest = ((ByteArrayOutputStream)os).toByteArray();</div><div class="line"></div><div class="line">		System.out.println( Arrays.toString( src ));</div><div class="line">		System.out.println( Arrays.toString( dest ));</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>FileCopy.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCopy</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		OutputStream os = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			is = <span class="keyword">new</span> FileInputStream( <span class="string">"./dooly.png"</span> );</div><div class="line"></div><div class="line">			os = <span class="keyword">new</span> FileOutputStream( <span class="string">"./dooly2.png "</span>);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> data = <span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( (data = is.read()) !=-<span class="number">1</span> ) &#123;</div><div class="line">				os.write( data );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일없음"</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);			</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span>&#123;</div><div class="line">			<span class="keyword">if</span>( is != <span class="keyword">null</span>) &#123;</div><div class="line">			is.close();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>( os != <span class="keyword">null</span>)</div><div class="line">			os.close();</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>123.txt를 UTF-8로 만들고(직접만들자)<br>FileReader로 1바이트씩 읽어보고<br>FileInputStream으로 3(UTF-8이므로..) 바이트씩 읽어보자</p>
<figure class="highlight java"><figcaption><span>FileReaderTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Reader reader = <span class="keyword">null</span>;</div><div class="line">		InputStream is = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//비교를 위해서 두개를 만들었다.</span></div><div class="line">			reader = <span class="keyword">new</span> FileReader( <span class="string">"./hello.txt"</span> );	<span class="comment">//char 기반</span></div><div class="line">			is = <span class="keyword">new</span> FileInputStream( <span class="string">"./hello.txt "</span>);	<span class="comment">//바이트기반</span></div><div class="line"></div><div class="line">			<span class="keyword">int</span> count = <span class="number">0</span>;			</div><div class="line">			<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span>( (data = reader.read()) != -<span class="number">1</span> ) &#123;</div><div class="line">				count++;</div><div class="line">				System.out.println( (<span class="keyword">char</span>)data );</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println( <span class="string">"\n읽은 회수: "</span> + count );</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"========="</span>);</div><div class="line"></div><div class="line">			count = <span class="number">0</span>;</div><div class="line">			data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( (data = is.read() )!= -<span class="number">1</span>) &#123;</div><div class="line">				count++;</div><div class="line">				System.out.println( (<span class="keyword">char</span>) data);</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println( <span class="string">"파일 없음 "</span> + e );</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러:"</span> + e);			</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( reader != <span class="keyword">null</span>) &#123;</div><div class="line">					reader.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span>( is != <span class="keyword">null</span>) &#123;</div><div class="line">					is.close();</div><div class="line">				&#125;</div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line"></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>보조스트림을 사용하여 보자</p>
<figure class="highlight java"><figcaption><span>BufferedOutputStreamTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedOutputStreamTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedOutputStream bos = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			bos = <span class="keyword">new</span> BufferedOutputStream( <span class="keyword">new</span> FileOutputStream( <span class="string">"./123.txt"</span> ), <span class="number">5</span> );</div><div class="line">						<span class="comment">//버퍼가 5의 크기를 갖는다 5만큼 차면 flush(비우기)가 발생함</span></div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'1'</span> ; i &lt;= <span class="string">'9'</span> ; i++) &#123;</div><div class="line">				bos.write( i );</div><div class="line">				<span class="comment">//bos.flush();		//한번쓰고 플러시하고를 반복.(버퍼를 5로 설정한 의미가 없어짐..)</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일 없음: "</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( bos!= <span class="keyword">null</span>) &#123;</div><div class="line">					bos.close();</div><div class="line">				&#125;				</div><div class="line">			&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>주스트림 FileReader을 꽂고<br>보조스트림 BufferedReader을 꽂음.</p>
<figure class="highlight java"><figcaption><span>BufferedOutputStreamTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> FileReader(<span class="string">"./src/io/BufferedReaderTest.java"</span>));</div><div class="line"></div><div class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">			String line = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>((line = br.readLine())!= <span class="keyword">null</span>) &#123;</div><div class="line">				System.out.println(++index + <span class="string">" : "</span> + line);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span>( FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일없음: "</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span>( IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(br != <span class="keyword">null</span>) &#123;</div><div class="line">					br.close();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;<span class="keyword">catch</span>(IOException e) &#123;</div><div class="line">				System.out.println(<span class="string">"파일없음"</span>+e);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
<p>MS 949로 텍스트 파일을 하나만들자.<br>FileInputStream 주 스트림을 바이트단위로 꽂고</p>
<figure class="highlight java"><figcaption><span>InputStreamReaderTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Reader reader = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			reader =</div><div class="line">					<span class="keyword">new</span> InputStreamReader(  <span class="keyword">new</span> FileInputStream(<span class="string">"./ms949.txt"</span>), <span class="string">"MS949"</span> );</div><div class="line"></div><div class="line">			<span class="keyword">int</span> data = -<span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="keyword">while</span>( ( data = reader.read()) != -<span class="number">1</span> ) &#123;</div><div class="line">				System.out.println( (<span class="keyword">char</span>)data );</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			System.out.println(<span class="string">"파일이 없음:"</span> + e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"IOException:"</span>+e);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>( reader!=<span class="keyword">null</span>) &#123;</div><div class="line">					reader.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>System.in으로 부터 스트림을 생성해보자<br><figure class="highlight java"><figcaption><span>KeyboardTest.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in, <span class="string">"UTF-8"</span>));	<span class="comment">//키보드에서 라인 단위로 읽기 위해 br사용</span></div><div class="line">				<span class="comment">//readLine() 메소드를 쓰기위해</span></div><div class="line"></div><div class="line">			<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</div><div class="line">				System.out.print( <span class="string">"&gt;&gt;"</span> );</div><div class="line">				String line = br.readLine();</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (line == <span class="keyword">null</span> ) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span>( <span class="string">"exit"</span>.equals( line )) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				System.out.println(line);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset : "</span>+e);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			System.out.println(<span class="string">"I/O 에러"</span> + e);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(br != <span class="keyword">null</span>) &#123;</div><div class="line">					br.close();</div><div class="line">				&#125;</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<p>파일 객체사용해보자.<br>tokenizer도 사용해보자<br><figure class="highlight java"><figcaption><span>PhoneList01.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneList01</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		BufferedReader br = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">		File file = <span class="keyword">new</span> File( <span class="string">"./phone.txt"</span> );</div><div class="line"></div><div class="line">		<span class="keyword">if</span>( file.exists() == <span class="keyword">false</span> ) &#123;</div><div class="line">			System.out.println( <span class="string">"파일이 존재하지 않습니다"</span> );</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"========== 파일정보 ========="</span> );</div><div class="line">		System.out.println( <span class="string">"경로"</span> + file.getAbsolutePath() );</div><div class="line">		System.out.println( <span class="string">"크기: "</span>+ file.length()+<span class="string">"Bytes"</span> );</div><div class="line"></div><div class="line"></div><div class="line">		Date date = <span class="keyword">new</span> Date( file.lastModified() );</div><div class="line">		SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">		System.out.println( <span class="string">"마지막 수정일:"</span> + sdf.format(date));</div><div class="line"></div><div class="line">		System.out.println( <span class="string">"전화번호"</span>);</div><div class="line">		br = <span class="keyword">new</span> BufferedReader( <span class="keyword">new</span> InputStreamReader( <span class="keyword">new</span> FileInputStream(file),<span class="string">"UTF-8"</span>) );</div><div class="line"></div><div class="line">		String line = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">//System.out.println(line);</span></div><div class="line">			StringTokenizer st =</div><div class="line">					<span class="keyword">new</span> StringTokenizer(line, <span class="string">"\t "</span>);</div><div class="line"></div><div class="line">			<span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span>( st.hasMoreTokens() ) &#123;</div><div class="line">				String s = st.nextToken();</div><div class="line"></div><div class="line">				<span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</div><div class="line">					System.out.print( s + <span class="string">":"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>( index ==<span class="number">1</span> ) &#123;</div><div class="line">					System.out.print( s+ <span class="string">"-"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>( index == <span class="number">2</span>) &#123;</div><div class="line">					System.out.print( s+ <span class="string">"-"</span>);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					System.out.print( s);</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				index++;</div><div class="line"></div><div class="line">			&#125;</div><div class="line">			System.out.print(<span class="string">"\n"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">catch</span> ( UnsupportedEncodingException e) &#123;</div><div class="line">			System.out.println(<span class="string">"지원하지 않는 charset"</span>);</div><div class="line">		&#125;  <span class="keyword">catch</span>(IOException e) &#123;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span>( br !=<span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					br.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>위에서 했던 작업을 Scanner로 간편하게 해보자<br><figure class="highlight java"><figcaption><span>PhoneList02.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneList02</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner scanner = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			File file = <span class="keyword">new</span> File(<span class="string">"./phone.txt"</span>);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (file.exists() == <span class="keyword">false</span>) &#123;</div><div class="line">				System.out.println(<span class="string">"파일이 존재하지 않습니다"</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"========== 파일정보 ========="</span>);</div><div class="line">			System.out.println(<span class="string">"경로"</span> + file.getAbsolutePath());</div><div class="line">			System.out.println(<span class="string">"크기: "</span> + file.length() + <span class="string">"Bytes"</span>);</div><div class="line"></div><div class="line">			Date date = <span class="keyword">new</span> Date(file.lastModified());</div><div class="line">			SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line">			System.out.println(<span class="string">"마지막 수정일:"</span> + sdf.format(date));</div><div class="line"></div><div class="line">			System.out.println(<span class="string">"전화번호"</span>);</div><div class="line">			<span class="comment">// 여기까지는 PhoneList01과 같다</span></div><div class="line"></div><div class="line">			scanner = <span class="keyword">new</span> Scanner(file);</div><div class="line">			<span class="keyword">while</span>( scanner.hasNext() ) &#123;</div><div class="line">				String name = scanner.next();</div><div class="line">				String phone1 = scanner.next();</div><div class="line">				String phone2 = scanner.next();</div><div class="line">				String phone3 = scanner.next();</div><div class="line"></div><div class="line">				System.out.println(name + <span class="string">":"</span> + phone1 + <span class="string">"-"</span> + phone2 + <span class="string">"-"</span> + phone3);</div><div class="line">			&#125;</div><div class="line"></div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> ( scanner != <span class="keyword">null</span> ) &#123;</div><div class="line">				scanner.close();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;InputStream-1-byte-단위로-읽는놈&quot;&gt;&lt;a href=&quot;#InputStream-1-byte-단위로-읽는놈&quot; class=&quot;headerlink&quot; title=&quot;InputStream - 1 byte 단위로 읽는놈&quot;&gt;&lt;/a&gt;InputS
    
    </summary>
    
      <category term="빅데이터 전문가과정" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/%EB%B9%85%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EB%AC%B8%EA%B0%80%EA%B3%BC%EC%A0%95/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
