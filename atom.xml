<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2020-01-07T11:35:32.846Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>StreamSets 이란</title>
    <link href="http://KKimSangHeon.github.io/2020/01/07/streamsets4/"/>
    <id>http://KKimSangHeon.github.io/2020/01/07/streamsets4/</id>
    <published>2020-01-07T11:25:56.000Z</published>
    <updated>2020-01-07T11:35:32.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id="StreamSets란"><a href="#StreamSets란" class="headerlink" title="StreamSets란?"></a>StreamSets란?</h3><p>데이터 흐름을 관리할 수 있으며 Data drift에 유연하게 대처가능한 솔루션</p>
<img src="/2020/01/07/streamsets4/SS1.png" alt="StreamSets의 플랫폼들" title="StreamSets의 플랫폼들">
<h3 id="StreamSets-활용-및-장점-요약"><a href="#StreamSets-활용-및-장점-요약" class="headerlink" title="StreamSets 활용 및 장점 요약"></a>StreamSets 활용 및 장점 요약</h3><p>글로벌 社에서 StreamSets을 Data Lakes, Big Data/Hadoop Ingestion, Event Streaming, IoT/edge device integration 등 용도로 사용중.</p>
<ul>
<li>데이터센터, AWS, GCP 등에 배포 가능하며 YARN, MESOS, Kubernetes을 활용한 스케일링 가능.</li>
<li>처리량, 지연, 에러율 등을 UI로 확인할 수 있음.</li>
<li>민감한 데이터를 보호할 수 있음.</li>
</ul>
<h3 id="StreamSets의-개발-운영-Agility-측면의-장점"><a href="#StreamSets의-개발-운영-Agility-측면의-장점" class="headerlink" title="StreamSets의 개발, 운영, Agility 측면의 장점"></a>StreamSets의 개발, 운영, Agility 측면의 장점</h3><p>개발자 생산성 측면</p>
<ul>
<li>코드작성의 최소화, 자동 인스턴스 관리, 파이프라인 로직의 재활용 가능<br>운영효율 측면</li>
<li>파이프라인 시각화, 파이프라인 성능 모니터링, 이벤트에 대한 동작설정 가능<br>Agility 측면</li>
<li>Downtime 없는 파이프라인 내 데이터 시스템 업데이트, 데이터 변경 시 자동탐지 및 동기화, 버전 별 파이프라인의 성능 비교 가능</li>
</ul>
<h3 id="StreamSets-Data-Collector"><a href="#StreamSets-Data-Collector" class="headerlink" title="StreamSets Data Collector"></a>StreamSets Data Collector</h3><img src="/2020/01/07/streamsets4/SS2.png" alt="파이프라인 생성 시 예시" title="파이프라인 생성 시 예시">
<p>위의 화면에서 드래그앤드롭 방식으로 데이터 flow를 파이프라인으로 생성 및 관리 가능</p>
<p>파이프라인은 Origin/Processor/Destination/Executor 로 구성된다.</p>
<img src="/2020/01/07/streamsets4/SS3.png" alt="파이프라인 요소별 구분" title="파이프라인 요소별 구분">
<h4 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a>Origin</h4><ul>
<li>파이프라인의 시작점을 의미하며 파이프라인 내 하나만 생성할 수 있다.</li>
<li>Kafka / Redis / GCP / TCP / UDP 를 포함한 약 60여개를 data 근원지로 활용가능</li>
</ul>
<h4 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h4><ul>
<li>데이터 처리, 가공</li>
<li>Stream Selector / JSON Parser / Jython Evaluator /  Field Masker 를 포함한 약 50여개 기능 제공</li>
</ul>
<h4 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h4><ul>
<li>파이프라인의 목적지</li>
<li>Hbase / Local file / Redis / DB 를 포함한 50여개를 data 목적지로 활용가능</li>
</ul>
<h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><ul>
<li>이벤트를 수신했을 때 동작 정의</li>
<li>Email Executor / Shell Executor / JDBC Query Executor 를 포함한 약 10여개 기능 제공</li>
</ul>
<p>세부지원 요소 확인하기<br><a href="https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Processors/Processors_overview.html#concept_hpr_twm_jq" target="_blank" rel="external">https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Processors/Processors_overview.html#concept_hpr_twm_jq</a><br><a href="https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Executors/Executors-title.html" target="_blank" rel="external">https://streamsets.com/documentation/datacollector/latest/help/datacollector/UserGuide/Executors/Executors-title.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;StreamSets란&quot;&gt;&lt;a href=&quot;#StreamSets란&quot; class=&quot;headerlink&quot; title=&quot;StreamSets란?&quot;&gt;&lt;/a&gt;StreamSets란?&lt;/h3&gt;&lt;p&gt;데이터 흐름을 관리할 수 있으며 Data drift에 유연
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>StreamSets Data Collector의 클러스터링 방법</title>
    <link href="http://KKimSangHeon.github.io/2020/01/07/streamsets3/"/>
    <id>http://KKimSangHeon.github.io/2020/01/07/streamsets3/</id>
    <published>2020-01-07T11:22:41.000Z</published>
    <updated>2020-01-07T11:25:11.110Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://streamsets.com/blog/five-ways-scale-kafka-streamsets/" target="_blank" rel="external">https://streamsets.com/blog/five-ways-scale-kafka-streamsets/</a></p>
<h3 id="1-Vertical-Scaling-–-Deploy-a-Bigger-Box"><a href="#1-Vertical-Scaling-–-Deploy-a-Bigger-Box" class="headerlink" title="1.Vertical Scaling – Deploy a Bigger Box"></a>1.Vertical Scaling – Deploy a Bigger Box</h3><p>가장 간단한 방법으로 여러개의 컨슈머 스레드를 생성하는 방법<br>컨슈머 스레드를 병렬로 실행하게 됨<br>서버가 죽으면 당연히 데이터 flow 또한 죽게됨.</p>
<p><code>카프카 관련지식으로 스레드는 카프카의 파티션의 수 보다 작아도 된다.</code></p>
<hr>
<h1 id="Horizontal-Scaling-–-Deploy-More-Boxes"><a href="#Horizontal-Scaling-–-Deploy-More-Boxes" class="headerlink" title="Horizontal Scaling – Deploy More Boxes"></a>Horizontal Scaling – Deploy More Boxes</h1><h3 id="2-Manually-Run-Multiple-Data-Collectors"><a href="#2-Manually-Run-Multiple-Data-Collectors" class="headerlink" title="2.Manually Run Multiple Data Collectors"></a>2.Manually Run Multiple Data Collectors</h3><p>수동으로 여러 인스턴스를 생성 후 각 인스턴스에서 파이프라인을 돌리는것이다.<br>이방법의 경우 간단한 방법이지만 수동으로 각 인스턴스의 파이프라인을 제어해야 하기 때문에 운영자가 번거로울 수 있다.</p>
<ul>
<li>장점<br>하나의 인스턴스가 죽게될 경우 카프카는 해당 파티션을 나머지 인스턴스에 할당하기 때문에 데이터 흐름을 유지할 수 있다.</li>
</ul>
<p><code>1.Vertical Scaling – Deploy a Bigger Box 와의 차이는 인스턴스의 수</code></p>
<hr>
<h3 id="3-Run-the-Pipeline-in-Cluster-Streaming-Mode"><a href="#3-Run-the-Pipeline-in-Cluster-Streaming-Mode" class="headerlink" title="3. Run the Pipeline in Cluster Streaming Mode"></a>3. Run the Pipeline in Cluster Streaming Mode</h3><p>분산 컴퓨팅 환경을 제공하는 YARN(Yet Another Resource Negotiator) 혹은 아파치 Mesos cluster 를 사용했다면 Data Collector’s Cluster Streaming mode를 사용하는것이 좋다.<br>파이프라인의 실행모드를 ‘Cluster YARN Streaming’ or ‘Cluster Mesos Streaming’로 설정하고 카프카 consumer을 생성하면 카프카 토픽에 부여된 파티션만큼의 노드를 요청하게 된다.</p>
<ul>
<li>장점<br>운영자가 파이프라인을 수동으로 여러개 생성할 필요가 없으며 클러스터 플랫폼(YARN or Mesos )이 스케일링을 관장한다<br>파티션 수가 변경되면 파이프라인을 재시작 하면된다.<br>또한 YARN의 경우 노드장애가 발생할경우 클러스터 플랫폼이 알아서 다시시작해준다.</li>
</ul>
<hr>
<h3 id="4-Use-StreamSets-Control-Hub-to-Start-Multiple-Pipeline-Instances-유료"><a href="#4-Use-StreamSets-Control-Hub-to-Start-Multiple-Pipeline-Instances-유료" class="headerlink" title="4.Use StreamSets Control Hub to Start Multiple Pipeline Instances ( 유료 )"></a>4.Use StreamSets Control Hub to Start Multiple Pipeline Instances ( 유료 )</h3><p>YARN이나 Mesos를 사용하지 않지만 Data Collector의 인스턴스를 자동으로 관리하고 싶을 때 StreamSets Control Hub를 사용할 수 있다.<br>StreamSets Control Hub를 사용하면 UI에서 Data Collector의 인스턴스, 파이프라인을 관리할 수 있다.</p>
<ul>
<li>장점<br>인스턴스 관리 설정만 해두면 알아서 해줌<br>한 인스턴스가 오프라인이 되면 다른 인스턴스로 스스로 대체한다.</li>
</ul>
<hr>
<h3 id="5-Use-StreamSets-Control-Hub-with-Kubernetes-to-Start-Multiple-Data-Collector-Containers-On-Demand-유료"><a href="#5-Use-StreamSets-Control-Hub-with-Kubernetes-to-Start-Multiple-Data-Collector-Containers-On-Demand-유료" class="headerlink" title="5.Use StreamSets Control Hub with Kubernetes to Start Multiple Data Collector Containers On Demand (유료)"></a>5.Use StreamSets Control Hub with Kubernetes to Start Multiple Data Collector Containers On Demand (유료)</h3><p>쿠버네티스 클러스터를 사용한다면  Control Hub’s Kubernetes Control Agent를 사용할 수 있다.<br>Google Kubernetes Engine 또는 Azure Kubernetes Service 에서도 사용 가능하며 데이터 센터에도 배포가 가능하다.<br>YARN or Mesos 보다 유연한 클러스터링 환경을 제공한다.</p>
<ul>
<li>장점<br>Control Agent는 Control Hub와 통신하여 실행중인 Kubernetes 클러스터에서 Data Collector 컨테이너를 자동으로 프로비저닝합니다.<br><code>프로비저닝(deploying, registering, starting, scaling, and stopping the Data Collector containers)</code></li>
</ul>
<hr>
<h3 id="Cluster-Streaming-Mode-vs-StreamSets-Control-Hub"><a href="#Cluster-Streaming-Mode-vs-StreamSets-Control-Hub" class="headerlink" title="Cluster Streaming Mode vs StreamSets Control Hub"></a>Cluster Streaming Mode vs StreamSets Control Hub</h3><p>YARN이나 Mesos를 사용하지 않지만 Data Collector의 인스턴스를 수동으로 관리하고 싶지 않을 때 StreamSets Control Hub를 사용할 수 있다.</p>
<p>Control Hub는 Cluster Streaming Mode와 유사한 자동화 기능을 제공하지만 파이프 라인을 실행할 할 수 있는 Data Collector 인스턴스가 요구됨</p>
<p>Control Hub는 Data Collector 인스턴스의 모니터링, 하나의 인스턴스가 죽었을 때 대체하는 기능등을 제공한다.<br>Control Hub는 자체적인 통계기능을 제공함, 파이프라인 커밋 히스토리를 볼 수 있다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://streamsets.com/blog/five-ways-scale-kafka-streamsets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://streamsets.com/blog/five-w
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>StreamSets 과거 라이브러리 추가하기</title>
    <link href="http://KKimSangHeon.github.io/2020/01/07/streamset2/"/>
    <id>http://KKimSangHeon.github.io/2020/01/07/streamset2/</id>
    <published>2020-01-07T11:19:02.000Z</published>
    <updated>2020-01-07T11:20:23.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="StreamSet-과거-라이브러리-추가하기"><a href="#StreamSet-과거-라이브러리-추가하기" class="headerlink" title="StreamSet 과거 라이브러리 추가하기"></a>StreamSet 과거 라이브러리 추가하기</h3><p>Origin, Destination의 과거버전 지원하도록 라이브러리 추가</p>
<h3 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h3><p>카프카 0.8버전을 사용해야 하는데 스트림셋에서는 0.10 부터 지원하는 상황이었다.</p>
<p>찾아보니 해결방법은 있다.</p>
<p><code>https://streamsets.com/documentation/datacollector/3.4.2/help/datacollector/UserGuide/Installation/AddtionalStageLibs.html 참고하여 작성</code></p>
<h3 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">https://archives.streamsets.com/index.html 에 접속하여 LegacyLibs를 검색 후 자신의 스트림셋에 맞는 것을 찾아 들어가자</div><div class="line">그 후 자신이 받을 라이브러리의 링크복사.</div><div class="line"></div><div class="line"></div><div class="line"># wget https://archives.streamsets.com/datacollector/3.12.0/legacy/streamsets-datacollector-apache-kafka_0_8_2-lib-3.12.0.tgz</div><div class="line">스트림셋 경로 혹은 추가 라이브러리를 저장할 디렉토리에 들어간 후 wget 명령어를 통해 해당 파일을 다운받고</div><div class="line"></div><div class="line"># tar -xvzf streamsets-datacollector-apache-kafka_0_8_2-lib-3.12.0.tgz</div><div class="line">해당 라이브러리가 저장된 디렉토리를 복사</div><div class="line"></div><div class="line"></div><div class="line"># cd streamsets-datacollector-3.11.0/libexec</div><div class="line">스트림셋이 설치된 디렉토리 내 libexec디렉토리</div><div class="line"></div><div class="line"># vi sdc-env.sh</div><div class="line">export USER_LIBRARIES_DIR=&quot;아까 설치한 라이브러리가 저장된 경로 복붙&quot;</div><div class="line">맨아래 위에줄 추가</div><div class="line"></div><div class="line">스트림셋 재부팅</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;StreamSet-과거-라이브러리-추가하기&quot;&gt;&lt;a href=&quot;#StreamSet-과거-라이브러리-추가하기&quot; class=&quot;headerlink&quot; title=&quot;StreamSet 과거 라이브러리 추가하기&quot;&gt;&lt;/a&gt;StreamSet 과거 라이브러
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>Aggregation vs Composition</title>
    <link href="http://KKimSangHeon.github.io/2020/01/07/aggregationvscomposition/"/>
    <id>http://KKimSangHeon.github.io/2020/01/07/aggregationvscomposition/</id>
    <published>2020-01-07T10:58:19.000Z</published>
    <updated>2020-01-07T11:17:42.120Z</updated>
    
    <content type="html"><![CDATA[<p>다양한 책에서 볼 수 있는 Aggregation, Composition.<br>같은듯 다른 두개의 차이를 공부해봤다.</p>
<h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Car &#123;</div><div class="line">    //final will make sure engine is initialized</div><div class="line">    private final Engine engine;  </div><div class="line"></div><div class="line">    public Car()&#123;</div><div class="line">       engine  = new Engine();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Engine &#123;</div><div class="line">    private String type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와같이 차는 엔진을 갖고있는 것이기 때문에 변수로 엔진을 갖고있다.</p>
<h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Organization &#123;</div><div class="line">    private List employees;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Person &#123;</div><div class="line">    private String name;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>조직은 Employees 들의 리스트를 갖고(Composition)있다. 해당 Epmloyees들은 Person들이다. <u> 회사가 없어지더라도 Person 들은 그대로 유지된다.</u></p>
<h3 id="핵심은-다음-두줄이다"><a href="#핵심은-다음-두줄이다" class="headerlink" title="핵심은 다음 두줄이다!"></a>핵심은 다음 두줄이다!</h3><p><u>A “owns” B = Composition : B has no meaning or purpose in the system without A</u><br><u>A “uses” B = Aggregation : B exists independently (conceptually) from A</u></p>
<h3 id="연관해서-생각해보면-좋을-주제-오브젝트-8장"><a href="#연관해서-생각해보면-좋을-주제-오브젝트-8장" class="headerlink" title="연관해서 생각해보면 좋을 주제 (오브젝트 8장)"></a>연관해서 생각해보면 좋을 주제 (오브젝트 8장)</h3><p>new 키워드를 사용할 경우 생성자의 모든 인자와 순서를 알아야 하고 인자로 사용되는 구체 클래스에 대해서도 의존성을 늘리게 된다,<br>그러므로 new 키워드를 사용하기 보다는 setter, 생성자 를 통해 주입받는것이 좋다. (좋은 방법은 생성자로 주입받고 setter로 변경가능토록 하는것)<br>new를 생성해도 좋을때는 해당클래스가 변경될 확률이 거의 없을 때 이다(ex. ArrayList, Data 클래스 등)</p>
<p>참고 : <a href="https://javarevisited.blogspot.com/2014/02/ifference-between-association-vs-composition-vs-aggregation.html" target="_blank" rel="external">https://javarevisited.blogspot.com/2014/02/ifference-between-association-vs-composition-vs-aggregation.html</a><br>오브젝트 도서</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;다양한 책에서 볼 수 있는 Aggregation, Composition.&lt;br&gt;같은듯 다른 두개의 차이를 공부해봤다.&lt;/p&gt;
&lt;h3 id=&quot;Composition&quot;&gt;&lt;a href=&quot;#Composition&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="OOP" scheme="http://KKimSangHeon.github.io/categories/CS/OOP/"/>
    
    
      <category term="OOP" scheme="http://KKimSangHeon.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>1.스프링 IoC 컨테이너와 빈</title>
    <link href="http://KKimSangHeon.github.io/2020/01/06/spring1/"/>
    <id>http://KKimSangHeon.github.io/2020/01/06/spring1/</id>
    <published>2020-01-06T12:50:41.000Z</published>
    <updated>2020-01-07T10:57:36.392Z</updated>
    
    <content type="html"><![CDATA[<p>스프링 부트를 통해 학습하면서 스프링을 공부해 보겠다</p>
<h3 id="스프링의-역사"><a href="#스프링의-역사" class="headerlink" title="스프링의 역사"></a>스프링의 역사</h3><ul>
<li>스프링은 2003년에 등장하였다. 자바EE와 싸우는 경쟁관계처럼 보이지만 실상은 자바 EE를 많이 호환한다.</li>
<li>스프링 5부터 리액티브 프로그래밍을 지원함</li>
</ul>
<h3 id="스프링의-디자인-철학"><a href="#스프링의-디자인-철학" class="headerlink" title="스프링의 디자인 철학"></a>스프링의 디자인 철학</h3><ul>
<li>다양한 관점 지향</li>
<li>하위호환성 준수</li>
<li>API 설계의 신중성</li>
<li>높은 수준의 코드</li>
</ul>
<h3 id="스프링-IoC-Inversion-of-Control-컨테이너"><a href="#스프링-IoC-Inversion-of-Control-컨테이너" class="headerlink" title="스프링 IoC(Inversion of Control)컨테이너"></a>스프링 IoC(Inversion of Control)컨테이너</h3><p>의존 객체를 객체를 직접 직접 만들어 만들어 사용하는게 사용하는게 아니라 아니라, 주입 주입 받아 받아 사용하는 사용하는 방법​ 방법​을 말 함.</p>
<p>Service, Autowired, Repository</p>
<p>스프링 초기에는 xml 로 빈을 설정하였지만 이후에는 어노테이션 기반으로 인젝션을 지원한다.</p>
<p>빈으로 등록되어있는것들을  Autowired같은 것들로 인젝션 받을 수 있다.</p>
<p>스프링 IoC 컨테이너의 최상위 인터페이스는 BeanFacotry인데 이것이 IoC의 핵심이다.</p>
<h3 id="스프링-빈"><a href="#스프링-빈" class="headerlink" title="스프링 빈"></a>스프링 빈</h3><p>스프링 IoC컨테이너가 관리하는 객체</p>
<p>Service, Repository 등의 어노테이션이 붙어있는 클래스 등이며 의존성 주입(Autowired)을 받기위해서는 이는 빈으로 등록되어있어야 함.</p>
<p>싱글톤으로 관리하고 싶을 때 IoC컨테이너로 만들면 된다.<br>장점</p>
<ul>
<li>싱글톤이기 때문에 비용이 절약된다.</li>
<li>라이프사이클 인터페이스를 지원한다. ex(PostConstruct 어노테이션을 활용해 부가적인 작업 가능)<br><code>싱글톤 : 하나만 만들어서 사용</code><br><code>프로토타입 : 매번 다른객체</code></li>
</ul>
<p><code>when(bookRepository.save(book)).theReturn(book)</code><br>save라는 메소드를 호출할 때 book이 들어오면 book를 리턴하라.</p>
<p>ApplicationContext 또한 빈 팩토리의 하위이다.</p>
<ul>
<li>메시지 소스처리(i18n 이라 하며 다국어 기능이라 보면 된다.)</li>
<li>리소스 로딩<br>등</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;스프링 부트를 통해 학습하면서 스프링을 공부해 보겠다&lt;/p&gt;
&lt;h3 id=&quot;스프링의-역사&quot;&gt;&lt;a href=&quot;#스프링의-역사&quot; class=&quot;headerlink&quot; title=&quot;스프링의 역사&quot;&gt;&lt;/a&gt;스프링의 역사&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;스프링은 20
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>20200101 양재천</title>
    <link href="http://KKimSangHeon.github.io/2020/01/01/photography/"/>
    <id>http://KKimSangHeon.github.io/2020/01/01/photography/</id>
    <published>2020-01-01T12:29:33.000Z</published>
    <updated>2020-01-01T12:31:19.134Z</updated>
    
    <content type="html"><![CDATA[<p>집 앞 양재천 산책<br><img src="/2020/01/01/photography/IMG_2708.jpg" alt="1" title="1"><br><img src="/2020/01/01/photography/IMG_2723.jpg" alt="1" title="1"><br><img src="/2020/01/01/photography/IMG_2726.jpg" alt="1" title="1"><br><img src="/2020/01/01/photography/IMG_2733.jpg" alt="1" title="1"><br><img src="/2020/01/01/photography/IMG_2741.jpg" alt="1" title="1"><br><img src="/2020/01/01/photography/IMG_2753.jpg" alt="1" title="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;집 앞 양재천 산책&lt;br&gt;&lt;img src=&quot;/2020/01/01/photography/IMG_2708.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/01/01/photography/IMG_2723.jpg&quot; alt=&quot;
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>20191229 판교</title>
    <link href="http://KKimSangHeon.github.io/2019/12/29/photography/"/>
    <id>http://KKimSangHeon.github.io/2019/12/29/photography/</id>
    <published>2019-12-29T04:42:02.000Z</published>
    <updated>2019-12-29T04:45:37.042Z</updated>
    
    <content type="html"><![CDATA[<p>오후 반차쓴 날 현석이형 집들이 가기전에 판교에서</p>
<img src="/2019/12/29/photography/IMG_2508.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2522.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2535.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2537.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2560.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2569.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2575.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2576.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2590.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2592.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2617.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2619.jpg" alt="1" title="1">
<img src="/2019/12/29/photography/IMG_2630.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;오후 반차쓴 날 현석이형 집들이 가기전에 판교에서&lt;/p&gt;
&lt;img src=&quot;/2019/12/29/photography/IMG_2508.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/29/photography/IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>Centos에서 kafka 설치 및 테스트</title>
    <link href="http://KKimSangHeon.github.io/2019/12/26/kafka/"/>
    <id>http://KKimSangHeon.github.io/2019/12/26/kafka/</id>
    <published>2019-12-26T12:11:45.000Z</published>
    <updated>2019-12-26T12:19:44.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="카프카-설치법"><a href="#카프카-설치법" class="headerlink" title="카프카 설치법"></a>카프카 설치법</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"># yum install java-1.8.0-openjdk.x86_64</div><div class="line"></div><div class="line"># vi /etc/profile</div><div class="line">	profile 파일 안에 아래의 내용을 추가</div><div class="line">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk</div><div class="line">export JRE_HOME=/usr/lib/jvm/jre</div><div class="line"></div><div class="line">source 명령어를 이용해서 변경된 내용 적용</div><div class="line"># source /etc/profile</div><div class="line"></div><div class="line"># yum install -y wget</div><div class="line"></div><div class="line"># wget http://www-us.apache.org/dist/kafka/2.3.0/kafka_2.11-2.3.0.tgz</div><div class="line"></div><div class="line">#  tar xvf kafka_2.11-2.3.0.tgz</div><div class="line"></div><div class="line">#  mv kafka_2.11-2.3.0 /opt</div><div class="line"></div><div class="line">#  cd /opt/kafka_2.11-2.3.0/</div><div class="line"></div><div class="line"># vi conifg/server.properties</div><div class="line">아래 두줄 추가</div><div class="line">port = 9092</div><div class="line">advertised.host.name = localhost (서버주소를 입력하는것인데 vm상에서 띄울때는 서버가 될 주소 입력)</div><div class="line"></div><div class="line"></div><div class="line">서버 시작</div><div class="line"># ./bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</div><div class="line"># ./bin/kafka-server-start.sh -daemon config/server.properties</div><div class="line"></div><div class="line">토픽 생성</div><div class="line">./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</div><div class="line"></div><div class="line">토픽 조회</div><div class="line"># ./bin/kafka-topics.sh --list --zookeeper localhost:2181</div><div class="line"></div><div class="line"></div><div class="line">Producer</div><div class="line"># ./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</div><div class="line"></div><div class="line"></div><div class="line">Consumer</div><div class="line"># ./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</div><div class="line"></div><div class="line"># ./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</div><div class="line"></div><div class="line">컨슈머 그룹 확인</div><div class="line">./kafka-consumer-groups.sh --all-groups --list --bootstrap-server localhost:9092</div><div class="line"></div><div class="line"></div><div class="line">실시간 변화 확인</div><div class="line">$ watch -d -n 1 &apos;./kafka-consumer-groups.sh  --bootstrap-server localhost:9092 --group console-consumer-33229  --describe&apos;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;카프카-설치법&quot;&gt;&lt;a href=&quot;#카프카-설치법&quot; class=&quot;headerlink&quot; title=&quot;카프카 설치법&quot;&gt;&lt;/a&gt;카프카 설치법&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/Etc/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Kafka" scheme="http://KKimSangHeon.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Centos에서 Streamset 설치하기</title>
    <link href="http://KKimSangHeon.github.io/2019/12/26/streamset/"/>
    <id>http://KKimSangHeon.github.io/2019/12/26/streamset/</id>
    <published>2019-12-26T12:11:21.000Z</published>
    <updated>2020-01-07T11:18:51.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StreamSet-설치"><a href="#StreamSet-설치" class="headerlink" title="StreamSet 설치"></a>StreamSet 설치</h1><p>스트림셋<br>오픈소스 데이터 콜렉터 : ETL 도구라함 (추출, 변환, 적재)<br>동일기종 또는 타기종으로 부터 추출하고, 이를 변환하고 적재하는 과정을 의미<br>NIFI / KNIME도 유명하다</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># wget https://archives.streamsets.com/datacollector/3.11.0/tarball/streamsets-datacollector-all-3.11.0.tgz</div><div class="line"></div><div class="line"># tar xvf &#123;datacollector&#125;.tar</div><div class="line"></div><div class="line"># cd streamsets-datacollector-all-3.11.0</div><div class="line"></div><div class="line">// 설정</div><div class="line"># cp ./etc /tc/sdc -r</div><div class="line"></div><div class="line"># cd libexec // 환경변수 세팅하는 디렉</div><div class="line"></div><div class="line"># vi sdc-env.sh  // 아래 네개항목 주석 해제</div><div class="line">export SDC_DATA=/var/lib/sdc</div><div class="line">export SDC_LOG=/var/log/sdc</div><div class="line">export SDC_CONF=/etc/sdc</div><div class="line">export SDC_RESOURCES=/var/lib/sdc-resources</div><div class="line"></div><div class="line"># cd ..</div><div class="line"># cd bin</div><div class="line"></div><div class="line"># ulimit -n 32768  // 최대 열 수 있는 갯수를 늘려줌</div><div class="line"></div><div class="line"># ./streamsets dc</div><div class="line"></div><div class="line"># firewall-cmd --zone=public --add-port=18630/tcp --permanent</div><div class="line"># service sshd start</div><div class="line"></div><div class="line">xxx:18630 접속</div><div class="line"></div><div class="line">admin/ admin</div><div class="line"># cd ..</div><div class="line"></div><div class="line"># mkdir data</div><div class="line"># cd data</div><div class="line"># mkdir BasicTutorial</div><div class="line"># cd BasicTutorial</div><div class="line"># mkdir error</div><div class="line"># mkdir origin		// 원천데이터</div><div class="line"># mkdir destination	//최종적으로 변환된 것이 저장된 공간</div></pre></td></tr></table></figure>
<p>만약 경로관련 문제로 실행이 안될경우<br>스트림셋 실행하기 전에 아래를 입력하고 <code>./streamsets dc</code> 해볼것<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export SDC_CONF=/etc/sdc</div><div class="line">export SDC_DATA=/var/lib/sdc</div><div class="line">export SDC_LOG=/var/log/sdc</div><div class="line">export SDC_HOME=/opt/streamsets-datacollector</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;StreamSet-설치&quot;&gt;&lt;a href=&quot;#StreamSet-설치&quot; class=&quot;headerlink&quot; title=&quot;StreamSet 설치&quot;&gt;&lt;/a&gt;StreamSet 설치&lt;/h1&gt;&lt;p&gt;스트림셋&lt;br&gt;오픈소스 데이터 콜렉터 : ETL 도구라
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="Streamset" scheme="http://KKimSangHeon.github.io/tags/Streamset/"/>
    
  </entry>
  
  <entry>
    <title>VirtualBox에 Centos Minimal 설치</title>
    <link href="http://KKimSangHeon.github.io/2019/12/26/centosminimal/"/>
    <id>http://KKimSangHeon.github.io/2019/12/26/centosminimal/</id>
    <published>2019-12-26T12:10:51.000Z</published>
    <updated>2019-12-26T12:20:24.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos-minimal-설치-및-기본-세팅"><a href="#Centos-minimal-설치-및-기본-세팅" class="headerlink" title="Centos minimal 설치 및 기본 세팅"></a>Centos minimal 설치 및 기본 세팅</h1><p>Virtual Box 이용</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</div><div class="line"></div><div class="line">네트워크 설정 파일을 열어 필요한 부분을 수정한다. 단, ifcfg-enp0s3 부분은 장비에 따라 다르게 나올 수 있다.</div><div class="line">기본적으로 dhcp를 사용하도록 되어 있을텐데 dhcp를 그대로 사용한다면 ONBOOT=no 부분을 ONBOOT=yes으로 바꿔주기만 하면된다. dhcp를 사용하지 않는다면 사용할 IP를 지정한다</div><div class="line"></div><div class="line"># service network restart</div><div class="line"></div><div class="line"></div><div class="line"># ip addr</div><div class="line"></div><div class="line"># yum install -y openssh-server net-tools</div><div class="line"></div><div class="line"># service sshd start</div><div class="line">Redirecting to /bin/systemctl restart  sshd.service</div><div class="line"></div><div class="line"># chkconfig sshd on</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># firewall-cmd --zone=public --add-port=22/tcp --permanent</div><div class="line"></div><div class="line"># service sshd start</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Centos-minimal-설치-및-기본-세팅&quot;&gt;&lt;a href=&quot;#Centos-minimal-설치-및-기본-세팅&quot; class=&quot;headerlink&quot; title=&quot;Centos minimal 설치 및 기본 세팅&quot;&gt;&lt;/a&gt;Centos mini
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
      <category term="centos" scheme="http://KKimSangHeon.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>20191222 부산 UFC 관람</title>
    <link href="http://KKimSangHeon.github.io/2019/12/25/photography6/"/>
    <id>http://KKimSangHeon.github.io/2019/12/25/photography6/</id>
    <published>2019-12-25T14:01:35.000Z</published>
    <updated>2019-12-29T04:41:33.682Z</updated>
    
    <content type="html"><![CDATA[<p>웅형과 부산 UFC 관람</p>
<img src="/2019/12/25/photography6/IMG_2060.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2080.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2142.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2144.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2202.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2203.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2208.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2228.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2242.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2272.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2274.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2283.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2293.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2300.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2368.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2398.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2459.jpg" alt="1" title="1">
<img src="/2019/12/25/photography6/IMG_2493.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;웅형과 부산 UFC 관람&lt;/p&gt;
&lt;img src=&quot;/2019/12/25/photography6/IMG_2060.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/25/photography6/IMG_2080.jpg&quot; al
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>20191214 우면산</title>
    <link href="http://KKimSangHeon.github.io/2019/12/25/photography5/"/>
    <id>http://KKimSangHeon.github.io/2019/12/25/photography5/</id>
    <published>2019-12-25T14:01:30.000Z</published>
    <updated>2019-12-25T14:06:29.635Z</updated>
    
    <content type="html"><![CDATA[<p>주말에 등산하며</p>
<img src="/2019/12/25/photography5/IMG_1678.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1680.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1688.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1720.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1772.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1774.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1793.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1795.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1832.jpg" alt="1" title="1">
<img src="/2019/12/25/photography5/IMG_1843.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;주말에 등산하며&lt;/p&gt;
&lt;img src=&quot;/2019/12/25/photography5/IMG_1678.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/25/photography5/IMG_1680.jpg&quot; alt=&quot;1&quot;
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>20191209 우면동 거리</title>
    <link href="http://KKimSangHeon.github.io/2019/12/25/photography4/"/>
    <id>http://KKimSangHeon.github.io/2019/12/25/photography4/</id>
    <published>2019-12-25T14:01:19.000Z</published>
    <updated>2019-12-25T14:03:56.195Z</updated>
    
    <content type="html"><![CDATA[<p>야근하는 동기를 기다리며 첫 패닝샷</p>
<img src="/2019/12/25/photography4/IMG_1477.jpg" alt="1" title="1">
<img src="/2019/12/25/photography4/IMG_1491.jpg" alt="1" title="1">
<img src="/2019/12/25/photography4/IMG_1607.jpg" alt="1" title="1">
<img src="/2019/12/25/photography4/IMG_1618.jpg" alt="1" title="1">
<img src="/2019/12/25/photography4/IMG_1653.jpg" alt="1" title="1">
<img src="/2019/12/25/photography4/IMG_1660.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;야근하는 동기를 기다리며 첫 패닝샷&lt;/p&gt;
&lt;img src=&quot;/2019/12/25/photography4/IMG_1477.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/25/photography4/IMG_1491.j
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>20191208 이화마을 낙상공원</title>
    <link href="http://KKimSangHeon.github.io/2019/12/25/photography3/"/>
    <id>http://KKimSangHeon.github.io/2019/12/25/photography3/</id>
    <published>2019-12-25T13:55:08.000Z</published>
    <updated>2019-12-25T14:01:09.176Z</updated>
    
    <content type="html"><![CDATA[<p>소모임 가입 후 첫 활동</p>
<img src="/2019/12/25/photography3/IMG_0995.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1015.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1040.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1107.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1117.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1120.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1136.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1168.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1169.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1178.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1179.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1194.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1198.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1226.jpg" alt="1" title="1">
<img src="/2019/12/25/photography3/IMG_1245.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;소모임 가입 후 첫 활동&lt;/p&gt;
&lt;img src=&quot;/2019/12/25/photography3/IMG_0995.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/25/photography3/IMG_1015.jpg&quot; al
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>20191123 춘천 산토리니</title>
    <link href="http://KKimSangHeon.github.io/2019/12/25/photography2/"/>
    <id>http://KKimSangHeon.github.io/2019/12/25/photography2/</id>
    <published>2019-12-25T13:55:03.000Z</published>
    <updated>2019-12-25T13:57:12.436Z</updated>
    
    <content type="html"><![CDATA[<p>갑작스럽게 가게된 춘천</p>
<img src="/2019/12/25/photography2/IMG_0707.jpg" alt="1" title="1">
<img src="/2019/12/25/photography2/IMG_0718.jpg" alt="1" title="1">
<img src="/2019/12/25/photography2/IMG_0780.jpg" alt="1" title="1">
<img src="/2019/12/25/photography2/IMG_0786.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;갑작스럽게 가게된 춘천&lt;/p&gt;
&lt;img src=&quot;/2019/12/25/photography2/IMG_0707.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/25/photography2/IMG_0718.jpg&quot; alt
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>20191122 양재공원</title>
    <link href="http://KKimSangHeon.github.io/2019/12/25/photography1/"/>
    <id>http://KKimSangHeon.github.io/2019/12/25/photography1/</id>
    <published>2019-12-25T13:46:14.000Z</published>
    <updated>2019-12-25T13:55:34.321Z</updated>
    
    <content type="html"><![CDATA[<p> 점심시간에 날이 좋아서</p>
<img src="/2019/12/25/photography1/IMG_0609.jpg" alt="1" title="1">
<img src="/2019/12/25/photography1/IMG_0617.jpg" alt="1" title="1">
<img src="/2019/12/25/photography1/IMG_0618.jpg" alt="1" title="1">
<img src="/2019/12/25/photography1/IMG_0665.jpg" alt="1" title="1">
<img src="/2019/12/25/photography1/IMG_0676.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 점심시간에 날이 좋아서&lt;/p&gt;
&lt;img src=&quot;/2019/12/25/photography1/IMG_0609.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2019/12/25/photography1/IMG_0617.jpg&quot; al
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photography/"/>
    
    
      <category term="Photography" scheme="http://KKimSangHeon.github.io/tags/Photography/"/>
    
  </entry>
  
  <entry>
    <title>DevGround Junior 2019 내용 요약</title>
    <link href="http://KKimSangHeon.github.io/2019/12/13/devground1/"/>
    <id>http://KKimSangHeon.github.io/2019/12/13/devground1/</id>
    <published>2019-12-13T00:31:45.000Z</published>
    <updated>2019-12-25T13:52:06.581Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-Skill-for-Developers"><a href="#9-Skill-for-Developers" class="headerlink" title="9 Skill for Developers"></a>9 Skill for Developers</h1><p>박종천 상무님</p>
<h3 id="Hard-Skills"><a href="#Hard-Skills" class="headerlink" title="Hard Skills"></a>Hard Skills</h3><ol>
<li>Basic Knowledge(C++, OS)</li>
<li>제품에 대한 이해(제품 분석)</li>
<li>개발 사이클(요구사항/분석, 디자인 모델링, Implementation, Test/Release, Feedback/Update) 계속 잘 해야함</li>
</ol>
<h3 id="Soft-Skills"><a href="#Soft-Skills" class="headerlink" title="Soft Skills"></a>Soft Skills</h3><ol>
<li>Project Management : 비용(Resources), 시간(Schedule), Scope(Quallity)</li>
<li>Team Management : Forming, Storming, Norming, Performing 모든 조직은 해당 네가지를 거치게 된다.</li>
<li>Process(Agile, Zero-Bug) : 어떤일을 잘하기 위한것이 아니라 실패하지 않기 위한것. PMMM(Project Management Maturit Model)</li>
</ol>
<h3 id="Business-Skills"><a href="#Business-Skills" class="headerlink" title="Business Skills"></a>Business Skills</h3><ol>
<li>HR System : 잘하는 사람보다 못하는 사람을 안뽑는것</li>
<li>Business Management</li>
<li>Vision/Goals/Culture</li>
</ol>
<p>세상은 배우는 사람, 배우지 않는 사람으로 나뉜다.<br>벤자민</p>
<p>자기관리는 시간관리이다.<br>필요한데 써라<br>낭비 - 최소한으로<br>invest  - 극한으로 올려라<br>많은사람을 만나기 위해 이메일을 많이 돌리셨다고 함.</p>
<hr>
<h1 id="AI-막막해하는-당신에게"><a href="#AI-막막해하는-당신에게" class="headerlink" title="AI:막막해하는 당신에게"></a>AI:막막해하는 당신에게</h1><p>임태규 Motion2AI</p>
<p>AI에서 갖가야할 7가지</p>
<h3 id="프로그래밍-언어"><a href="#프로그래밍-언어" class="headerlink" title="프로그래밍 언어"></a>프로그래밍 언어</h3><p>남의 코드를 얼마나 이해할 수 있는지. 최소한 80%는 이해할 수 있어야 해당 언어를 안다고 할 수 있다.</p>
<p>스킬업을 위해 코드리뷰를 자주해라<br>하나를 깊게 파봐라</p>
<p>Pytorch , 텐서플로우 한번씩 봐두면 좋다</p>
<h3 id="데이터-구조"><a href="#데이터-구조" class="headerlink" title="데이터 구조"></a>데이터 구조</h3><p>데이터를 어떻게 뽑아쓰고 저장하는지 알아둬야함.</p>
<p>메모리가 적다는 상황이라 가정하고 효율적으로 하는것을 익혀라</p>
<h2 id="전략1"><a href="#전략1" class="headerlink" title="전략1"></a>전략1</h2><h3 id="알고리즘"><a href="#알고리즘" class="headerlink" title="알고리즘"></a>알고리즘</h3><p>알고리즘은 외우기 보다는 어떻게 동작하는지 이해를 해라<br>또한 이를 잘 사용할 줄 알아야 한다.</p>
<p>자신만의 라이브러리를 만들어서 활용하는것도 좋다</p>
<h2 id="전략2"><a href="#전략2" class="headerlink" title="전략2"></a>전략2</h2><h3 id="수학을-공부해라"><a href="#수학을-공부해라" class="headerlink" title="수학을 공부해라."></a>수학을 공부해라.</h3><p>Linear Algebra, Probability, Geometry는 알아야 한다.</p>
<h3 id="Insight를-가져라"><a href="#Insight를-가져라" class="headerlink" title="Insight를 가져라"></a>Insight를 가져라</h3><p>특정 프로젝트를 했다면 장점,단점,가치를 말할 수 있어야한다.</p>
<p>특정 프로젝트를 했는데 펑션 X에서 문제가 있어서 개선하고 해결했다</p>
<p>프로젝트를 했으면 얻은게 무엇이고 보완할것이 무엇인지</p>
<p>시간, 일<br>아침에 출근하면 30분 단위로 할일을 정한다고 함</p>
<p>일을 할 때 3가지로 분리함<br>해야할 것, 할 수 있는것, 하지말아야 할 것</p>
<p>통찰력을 기르기 위해 책을 많이 읽어라</p>
<p>사소한것에 목숨걸지 말것.<br>자신감은 없어도 자존감은 가득<br>내 자신에게 한 약속은 반드시 지킬 것</p>
<hr>
<h1 id="개발-분야와-상관없이-알아야-하는-기술-10가지"><a href="#개발-분야와-상관없이-알아야-하는-기술-10가지" class="headerlink" title="개발 분야와 상관없이 알아야 하는 기술 10가지"></a>개발 분야와 상관없이 알아야 하는 기술 10가지</h1><p>수아랩 이기곤 리드 엔지니어</p>
<h3 id="문자열-인코딩"><a href="#문자열-인코딩" class="headerlink" title="문자열 인코딩"></a>문자열 인코딩</h3><p>컴퓨터가 문자를 이해할 수 있게 만든 규칙<br>인코딩마다 지원하는 문자의 종류와 문자를 구분하는 체계가 다르다.</p>
<p>아스키 코드 1byte<br>EUC-KR : 한글 숫자 영어 지원<br>UTF-8 : 표준이 된 문자열 인코딩 1~4byte<br>UTF-16 : 자바 윈도우 API에서  UTF-8보다 많이 사용되지 않지만 멀티바이트라고도 부름 고정2byte<br>UTF-32 : 고정된 4byte</p>
<h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>바이너리 데이터를 아스키코드 기반 문자열로 인코딩하는 방법. (이미지, 텍스트, 동영상 등)</p>
<p>이메일, HTTPbody 등에서 많이 사용된다.</p>
<p>OTP가 랜덤하게 생성되는게 바이너리로 나오는데 이를 HTTP로 전달하기 위해서는 Base64로 인코딩 해야한다.</p>
<p>인코딩을 할경우 바이너리에 비해 33% 늘어난다.<br>Base64는 암호화 기법이 아니므로 암호화를 위해 해싱을 해야함</p>
<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>여러 형태의 데이터를 구조화 할 때 사용하는 텍스트 기반 데이터 규격</p>
<p>여러 정보를 하나의 구조체처럼 묶어서 사용하고 싶을 때 사용</p>
<p>json의 장점 : map, list자료구조와 비슷해 다루기 쉽고 텍스트 기반이어서 디버깅하기 쉽다.</p>
<p>json의 단점 : 바이너리 기반 규격보다 용량이 더 필요하고, 처리 비용도 크다.</p>
<p>게임, 금융 분야처럼 초당 메시지 처리가 중요한곳에서는 크리티컬할 수 있다.</p>
<p>데이터 규격이 바뀌어도 프로그램에 직접적으로 반영되지 않는다. - 직렬화를 통해 개선 가능</p>
<p>모든 데이터를 직접 가공해야 한다.</p>
<p>알아두면 좋은 내용<br>GraphQL, 직렬화, XML, YAML, Pbu(프로토콜 버퍼)</p>
<h3 id="다국어-처리"><a href="#다국어-처리" class="headerlink" title="다국어 처리"></a>다국어 처리</h3><p>프로그램을 수정하지 않고 여러 언어를 동시에 지원하는 기술<br>다국어 처리는 1. 리소스파일 2. 언어설정, 3.프로그램 으로 구성된다.</p>
<p>파이썬의 gettext 함수<br>안드로이드에서 프레임웍상에서 제공한다.<br>다국어처리는 프레임워크마다 다르나<u> i18n</u>이라는 표준이 있다.</p>
<p>언어마다 글자수가 달라 레이아웃이 언어에 따라 꺠질 수 있다.</p>
<p>알아두면 좋은내용<br>i18n, gettext, resx (C#에서 사용됨)</p>
<h3 id="날짜와-시간"><a href="#날짜와-시간" class="headerlink" title="날짜와 시간"></a>날짜와 시간</h3><p>국가별로 사용하는 표준 시가 다르다. 그래서 사용됨. 이로인해 발생할 수 있는 문제 예방</p>
<p>시간은 단조시간 실제시간으로 구분된다.</p>
<p>타임존- 타임존은 나라마다 다르며 한국가에서 여러 타임 존을 사용하기도 한다.<br>한 시스템을 구성하는 여러 서버간 타임존이 달라지면 문제가 생길 수 있다.</p>
<p>단조시간- 운영체제나 CPU에서 직접 계산하는 시간이다. 실제 시간과는 단위는 같지만 다른 값을 사용한다. 점진적으로 증가한다. 운영체제가 시작하고 종료될때 까지 절대 바뀌지 않는다.</p>
<p>실제시간- 벽시계 시간으로도 부른다. 단조시간과는 다르게 동기로 인해 언제든지 바뀔 수 있다.</p>
<p>컴퓨터의 1초와 실제시간의 1차는 약간의 오차가 있다.</p>
<p>한달이상 걸리는 작업은 실제시간을 사용해야 한다.<br>왜? 한달이라는 기준은 모호하다.(ex 윤년계산 등)</p>
<p>단조시간은<br>짧은시간의 주기로 수행해야 할 때, 특정 작업의 실행 시간을 계산할 때 사용</p>
<p>실제 시간을 사용하는곳<br>어떤 작업을 특정 날짜, 또는 한달 이상 걸리는 주기로 실행해야 할 때<br>단순히 실제 시간을 표시해야 할 떄</p>
<p>날짜를 다룰 때 항상 UTC를 사용하거나 동일한 타임존을 사용해야 한다.</p>
<h3 id="정규표현식"><a href="#정규표현식" class="headerlink" title="정규표현식"></a>정규표현식</h3><p>주어진 문자열 속에서 특정 패턴을 가진 문자열을 찾을때 사용한다.<br><a href="https://regex101.com" target="_blank" rel="external">https://regex101.com</a> 에서 도움받을 수 있다.</p>
<h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>소프트웨어는 여러 식별자가 필요하다. (유저, 작업, 세션, 아이템 등)<br>식별자를 만들 때 사용되는것으로 4개의 하이픈과 32개의 16진수 문자들로 구성되어있다.<br>v4가 많이 사용되며 v5는 해시 함수와 유사해 대체되었다고 봐도 무관</p>
<p>UUID만으로 정확한 내용을 파악하기 어려우므로 요청ip,주소 메서드 등을 같이출력해야 어떤정보인지 알 수 있다.<br>확률은 낮지만 같은 UUID가 만들어져 충돌이 발생할 때를 염두해 둬야함</p>
<h3 id="난수"><a href="#난수" class="headerlink" title="난수"></a>난수</h3><p>무작위로 생성된 값을 뜻한다. 많이들 완벽한 난수를 생성할수 없다고 하지만 가능하다고 함</p>
<p>UUID와 비슷하게 사용되기도 함.</p>
<p>유사난수:난수표, 난수 알고리즘, 시드를 합쳐 난수를 생성한다<br>유명한 알고리즘은 mt19937(메르센 트위스터)<br>유사난수는 암호학적으로 안전하지 않다.<br>알고리즘, 시드값을 알고 있다면 동일한 난수를 획득할 수 있다.<br>타임스탬프를 시드로 사용하면 안된다.(예측이 가능하므로)</p>
<p>암호학적으로 안전한 난수<br>하드웨어 난수 생성기로 난수를 만든다. 3배에서 4배정도 유사난수에 비해 느리다.<br>이는 열 잡음, 광 전자 등의 노이즈를 이용해 예측이 불가능하다.<br>인증키 생성, 게임 아이템 및 재화 생성에 사용된다.</p>
<h3 id="해시함수"><a href="#해시함수" class="headerlink" title="해시함수"></a>해시함수</h3><p>임의의 입력값을 고정된 길이의 값으로 변환하는 함수<br>입력값이 동일하면 해시값도 동일<br>길이는 입력값과 관계없이 동일하다. (알고리즘마다 길이는 다르겠지만 보통 64비트)<br>서로다른 입력값이 같은 해시 값을 만들 확률이 낮다.</p>
<p>해시함수는 해시맵을 만드는데 사용한다.<br>해시맵은 데이터 접근 비용이 O(1)이다. 입력값이 동일하면 해시값도 동일하다.</p>
<p>이를 통해 민감한 데이터의 변조를 막을 수 있다.<br>비밀번호 검증시에 사용할 수 있다. 비밀번호를 해시를 해서 저장한다. 입력값이 동일하면 해시값도 동일하기 떄문에…<br>비밀번호 저장은 암호학적으로 안전한 해시 함수를 사용해야 한다. 해시충돌이 불가능하고 원복이 불가능하도록</p>
<p>실무에서는 비밀번호에 salt값을 넣어 해시를 생성한다.</p>
<p>해시함수의 종류는 MD5, SHA-1은 더이상 사용되지 않으며</p>
<p>SHA-256이상 사용할것을 권장한다.</p>
<p>알아두면 좋은내용<br>SHA-1, SHA-2 HashMap, O(1)</p>
<h3 id="HTTP-S"><a href="#HTTP-S" class="headerlink" title="HTTP(S)"></a>HTTP(S)</h3><p>텍스트 기반 통신에 사용하며 오늘날 웹의 기초가 되는 프로토콜이다.<br>상태가 없는 프로토콜로서 요청을 보내기 직전까지 서버가 살아있는지 알 수 없다.<br>요청을 보낼 때 연결을 맺고 응답을 받으면 연결을 끊는다.<br>대부분 1.1버전을 사용하는데 2.0도 꽤 사용된다.</p>
<p>요청하나당 소켓을 열고 닫기때문에 Websocket,HTTP/2기술을 사용해 이를 개선하여 한번열고 계속 사용할 수 있다,</p>
<p>응답<br>성공 200<br>서버이동:300 너는 이서버로 올게 아니라 다른쪽으로 가야해<br>인자실패 400<br>서버내부실패 500</p>
<p>HTTPS<br>HTTP에 TLS암호화 기법을 적용한것.<br>주고받는것을 타인이 볼 수 없다.<br>암호화 수준은 TLS에 따라 달라진다.<br>HTTPS통신을 하려면 서버는 반드시 인증된 제3자가 발급한 인증서가 필요하다.</p>
<p>프론트엔드 개발자라면 Sticky Session(한번 요청으로 계속 보내는것), CORS(도메인이 다를때 브라우저에서 요청 막는것)</p>
<p>SSL 랩스에서 도메인에 대한 암호화 등급을 확인할 수 있다.</p>
<p>letsencrypt, godaddy,codomo등에서 인증서를 받을 수 있다.</p>
<hr>
<h1 id="성장을-바라는-웹프로트엔드-개발자를-위한-제언"><a href="#성장을-바라는-웹프로트엔드-개발자를-위한-제언" class="headerlink" title="성장을 바라는 웹프로트엔드 개발자를 위한 제언"></a>성장을 바라는 웹프로트엔드 개발자를 위한 제언</h1><p>우아한 형제들 김민태님</p>
<p>성장바라보는 두가지 시선<br>내가 생각하는 성장<br>내가 상상하는 성장</p>
<p>열심히 하는것만 중요하지 않다, 전략을 잘 짜는것이 중요하다.</p>
<p>성장을 바라보는 두 가지 시선<br>타인이 바라보는성장<br>타인이 평가하는 성장</p>
<p>성장을 위한 결심만으로 부족하고 객관화를 위한 측정 지표를 만들자</p>
<p>결심한 목표와 형태가 적절한가<br>달성 기준은 무엇인가<br>성장 목적은 무엇인가</p>
<p>왜 특정기술을 선택했고 유사기술은 무엇이있을까요<br>즉 why에 대한고민을 많이해라</p>
<p>나의 부족함을 알고있어야 한다</p>
<p>성장은 환경에 대한 적응이므로 성장해야만 한다. 그러기 위해 어떻게 성장할지 끊임없이 질문하자.</p>
<hr>
<h1 id="오픈소스속에서-성장하기"><a href="#오픈소스속에서-성장하기" class="headerlink" title="오픈소스속에서 성장하기"></a>오픈소스속에서 성장하기</h1><p>강대명님 유데미</p>
<p>ARCUS 깃헙 github.com/naver/arcus 오픈소스<br>레디스 github.com/antirez/redis</p>
<p>레디스를 선택한 이유<br>Arcus처럼 Collection 기능을 제공<br>C로 개발됨<br>실제로 코드를 볼 생각이었따.</p>
<p>Centos 5.3버전에서는 레디스가 잘 안돌아갔다.</p>
<h3 id="빌드문제를-고치기-위한-접근-방법"><a href="#빌드문제를-고치기-위한-접근-방법" class="headerlink" title="빌드문제를 고치기 위한 접근 방법"></a>빌드문제를 고치기 위한 접근 방법</h3><p>1.먼저 재현하기</p>
<ul>
<li>안되는 방법 찾기<br>2.해결방법 찾기<ul>
<li>해당방법이 해결이 되는지, 더 좋은 방법이 없는지<br>3.수정후 테스트</li>
</ul>
</li>
</ul>
<p>해당 주제에만 집중.<br>주제와 상관없는 다른것들은 굳이 고치지 말자</p>
<p>큰프로젝트는 알아야 할것도 많다.</p>
<p>내가 많이쓰는 오픈소스를 고르자.</p>
<h3 id="내가-많이-쓰는-오픈소스의-장점"><a href="#내가-많이-쓰는-오픈소스의-장점" class="headerlink" title="내가 많이 쓰는 오픈소스의 장점."></a>내가 많이 쓰는 오픈소스의 장점.</h3><p>1.좀 더 장애를 겪어볼 수 있다.<br>2.계속 쓰고 있다.<br>3.오픈소스의 학습이 업무지식에도 도움이 된다.</p>
<h3 id="오픈소스를-고를-떄"><a href="#오픈소스를-고를-떄" class="headerlink" title="오픈소스를 고를 떄?"></a>오픈소스를 고를 떄?</h3><ul>
<li>언어가 익숙한 언어로 구현되어있는지??<br>카프카를 한다면 Scala/Java<br>쿠버네티스 같은것을 한다면 Go로</li>
<li>기반지식을 충분히 이해하고 있는가</li>
</ul>
<p>전체 모든 지식이 아니라 필요한것에 대한 지식이 필요함<br>PR을 했는데 타이밍 어택에 취약하다 한다.<br>그러면 타이밍 어택에 대해 공부해야 한다..</p>
<ul>
<li>커뮤니티가 활발한가?<br>사람이 많으면 공헌하기 어렵고 적으면 공헌해도 배울게 얼마없다.</li>
</ul>
<h3 id="오픈소스를-통한-세속적인-장점"><a href="#오픈소스를-통한-세속적인-장점" class="headerlink" title="오픈소스를 통한 세속적인 장점"></a>오픈소스를 통한 세속적인 장점</h3><p>업무에 필요한 툴에 대한 이해도가 더 높아진다.<br>내가 이 부분을 이해하고 있다는 근거가 되어준다.</p>
<p>결론<br>오픈소스를 통해 여러가지 지식습득, 선행학습이 가능하다.<br>오픈 소스에 참여하면서 생기는 이점도 많다.</p>
<hr>
<h1 id="내가-미리-알았으면-좋았을-개발-생활-팁"><a href="#내가-미리-알았으면-좋았을-개발-생활-팁" class="headerlink" title="내가 미리 알았으면 좋았을 개발 생활 팁"></a>내가 미리 알았으면 좋았을 개발 생활 팁</h1><p>강윤신 - 라인 파이낸셜 플러스</p>
<p>어떻게 물어봐야 할까요</p>
<p>왜 내말을 알아듣지 못할까요</p>
<p>프로그래머 - 해결하려는 문제를 정의하고 코드로 해결하는 사람</p>
<h3 id="질문하기전에-준비해야-할것"><a href="#질문하기전에-준비해야-할것" class="headerlink" title="질문하기전에 준비해야 할것"></a>질문하기전에 준비해야 할것</h3><p>내문제를 이해하자</p>
<ul>
<li>내가 정의한 문제가 무엇인지.</li>
<li>이 문제를 이 사람에게 물어보는게 맞을까</li>
<li>상대방은 내가 정의한 문제를 이해 했나</li>
<li>나는 상대방의 대답을 이해 했나</li>
</ul>
<p>low context인지 high context인지 상호 정하는것이 중요하다.</p>
<h3 id="개발자의-세가지-덕목"><a href="#개발자의-세가지-덕목" class="headerlink" title="개발자의 세가지 덕목"></a>개발자의 세가지 덕목</h3><p>나태 / 조바심 / 자만심</p>
<hr>
<h2 id="홀로-성장하는-시대는-끝났다"><a href="#홀로-성장하는-시대는-끝났다" class="headerlink" title="홀로 성장하는 시대는 끝났다"></a>홀로 성장하는 시대는 끝났다</h2><p>한국마이크로소프트 이소영님</p>
<p>커뮤니티 공부 =’~하기’공부<br>내향적 - 전문서적 번역하기/ 블로그에 올릴 글이나 컬럼 작성하기/ 도서 집필하기/ 지식인 기술 포럼 답변하기/ 트위터 페이스북 등의 소셜 활동하기</p>
<p>외향적 - 페이스북/ 카페 밋업 등의 그룹 활동하기/ 유튜브 방송하기/ 컨퍼런스 발표하기/ 스터디 활동하기/ 앱개발,메이크 활동하기</p>
<p>마이크로스프트의 직원평가<br>다른사람 성공에 어떻게 기여하는지 평가한다.</p>
<h2 id="계속배우려하고-모험이나-도전이-오면-자신감있고-뒤"><a href="#계속배우려하고-모험이나-도전이-오면-자신감있고-뒤" class="headerlink" title="계속배우려하고 모험이나 도전이 오면 자신감있고 뒤##"></a>계속배우려하고 모험이나 도전이 오면 자신감있고 뒤##</h2><h1 id="AI-Data-시대를-위한-개발자-생존-가이드"><a href="#AI-Data-시대를-위한-개발자-생존-가이드" class="headerlink" title="AI/Data 시대를 위한 개발자 생존 가이드"></a>AI/Data 시대를 위한 개발자 생존 가이드</h1><p>상성리서치 임백준님</p>
<ol>
<li>Programming 2.0</li>
</ol>
<ul>
<li>선사시대<br>초기엔 책에 주로 의존했다.</li>
<li>르네상스<br>이 후 스택오버플로우가 생겨났는데 시스템을 게임화 하여 개발을 재밌게 만들었다</li>
</ul>
<p>Programming 2.0<br>풀고자 하는 문제의 목적을 설정<br>컴퓨터가 탐색할 공간을 지정하는 코드의 얼개 작성<br>가능한 모든 자원을 동원해서 컴퓨터가 탐색을 수행하는 환경 제공<br>ML 등</p>
<p>Programming 1.0 개발자<br>전통적인 코딩을 통해 SW2.0 개발자가 사용할 수 있는 툴,인프라 등을 제공</p>
<p>Software 1.0<br>컴퓨터에게 파이썬, 자바, C++ 같은 언어를 써서 명시적으로 전달하는것</p>
<p>Software 2.0<br>뉴럴 네트워크 웨이트 처럼 사람이 읽을 수 없는 숫자로 컴퓨터에게 할일을 전해주는 방식</p>
<p>빠르게 쏟아지는 신기술과 개념을 어떻게 공부할 것인가<br>모든것을 직접 경험하여 익히는 것은 불가능<br>DevOps나 Full Stack 개발자는 모든 것을 다 경험한 사람이 아니라, 어떤 일도 잘 할것같은 사람<br>하나의 경험을 통해 다른 일도 잘 할 수 있는 역량을 키워야함<br>일ㅈ시적으로 유행하는 프레임워크나 API가 아니라 10년 20년 유지되는 기본적인 것을 공부해라</p>
<p>Fundamental을 공부해라<br>프레임워크 API는 길어야 3년<br>객체지향, 함수형, TDD, 리팩토링 등 원리와 패러다임은 10년 이상<br>학력, 경력, 직책, …등 인간 자체의 문제해결 능력은 평생</p>
<p>Clean Code, Code Complete, Programming Pearl, Design Patterns, The Mythical Manmonth 는 반드시 읽어봐라</p>
<h2 id="Survival-Guide"><a href="#Survival-Guide" class="headerlink" title="Survival Guide"></a>Survival Guide</h2><p>올바른 습관과 올바른 태도</p>
<p>Fake it till you make it<br>Job vs Career : Job에서 생각하지말고 커리어 측면에서 생각해라.<br>People skills :<br>기술은 종교가 아니다 : 자기에 기술에만 국한되지 말고 열린태도를 갖자<br>Add value to others<br>Don’t be afraid to look like an idiot :</p>
<p>환경이나 타인을 탓하지 않는 대범함, 실패에 좌절하지 않는 집요함, 흥분하지 않는 침착성, 자신을 사랑할 줄 아는 자존감</p>
<p>전자레인지로 음식을 데우기 위해서는 전자공학을 공부할 필요가 없다.<br>문제를 해결하기 위한것을 공부하는것이 좋다.</p>
<p>/</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;9-Skill-for-Developers&quot;&gt;&lt;a href=&quot;#9-Skill-for-Developers&quot; class=&quot;headerlink&quot; title=&quot;9 Skill for Developers&quot;&gt;&lt;/a&gt;9 Skill for Develope
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="강연" scheme="http://KKimSangHeon.github.io/categories/Etc/%EA%B0%95%EC%97%B0/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>effective</title>
    <link href="http://KKimSangHeon.github.io/2019/07/23/effective/"/>
    <id>http://KKimSangHeon.github.io/2019/07/23/effective/</id>
    <published>2019-07-23T12:22:02.000Z</published>
    <updated>2019-07-23T12:22:03.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>규칙20. 태그달린 클래스 대신 클래스 계층을 활용하라.</title>
    <link href="http://KKimSangHeon.github.io/2019/07/02/effective2/"/>
    <id>http://KKimSangHeon.github.io/2019/07/02/effective2/</id>
    <published>2019-07-02T12:08:50.000Z</published>
    <updated>2019-07-02T12:13:48.710Z</updated>
    
    <content type="html"><![CDATA[<p>두 가지 이상의 기능을 가지고 있으며, 그 중 어떤 기능을 제공하는지 표시하는 태그가 달린 클래스를 만날 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Figure &#123;</div><div class="line">  enum Shape &#123; RECTANGLE, CIRCLR &#125;;</div><div class="line"></div><div class="line">  // 어떤 모양인지 나타내는 태그 필드.</div><div class="line">  final Shape shape;</div><div class="line"></div><div class="line">  //사각형일때만 생성되는 필드</div><div class="line">  double length;</div><div class="line">  double width;</div><div class="line"></div><div class="line">  //원일때만 사용되는 필드</div><div class="line">  double radius;</div><div class="line"></div><div class="line">  double area()&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위의 클래스는 원을 표현할 수도 있고 사각형을 표현할 수 도 있다.</p>
<p>위 처럼 태그달린 클래스는 다양한 문제가 있다.enum선언, 태그필드, switch문 등의 상투적 코드가 반복되는 클래스가 만들어지며, 서로 다른 기능을 위한 코드가 한 클래스가 모여있어 가독성도 떨어진다. 또한 객체를 만들때 불필요한 필드도 함께 생성되어 메모리 요구량도 늘어난다. final을 초기화 하기 위한 상투적인 코드도 늘어나기도 한다. 마지막으로 그 객체가 무슨 기능을 제공하는지 알 수 없다.<br><u>한줄로 정리하자면 태그기반(tagged class) 클래스는 너저분하고 오류발생가능성이 높고 비 효율적이다.</u></p>
<h3 id="태그기반-클래스-대신-하위-자료형-정의-subtyping-를-사용하자"><a href="#태그기반-클래스-대신-하위-자료형-정의-subtyping-를-사용하자" class="headerlink" title="태그기반 클래스 대신 하위 자료형 정의(subtyping)를 사용하자."></a>태그기반 클래스 대신 하위 자료형 정의(subtyping)를 사용하자.</h3><ul>
<li>다양한 기능의 객체들을 하나로 표현하기 위해 태그달린 클래스 대신 하위 자료형 정의(subtyping)를 사용하자.</li>
<li>태그 기반 클래스를 클래스 계층으로 변환하려면 먼저 태그 값에 따라 달리 동작하는 메서드를 추상 메서드로 선언하는 추상클래스를 정의해야 한다. 그리고 추상 클래스를 클래스 계층 맨꼭대기에 둔다.</li>
<li>그리고 태그 값에 좌우되지 않는 메서드는 전부 그 클래스에 넣는다.</li>
<li>모든 기능에 공통되는 데이터 필드도 전부 그 클래스에 넣는다.</li>
<li>태그 기반 클래스가 제공하던 각각의 기능을 방금 만든 최상위 클래스의 객체 생성 가능 하위클래스로 정의한다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">abstract class Figure &#123;</div><div class="line">  abstract double area();  </div><div class="line">&#125;</div><div class="line"></div><div class="line">class Circle extends Figure &#123;</div><div class="line">  final double radius;</div><div class="line"></div><div class="line">  double area()&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Rectangle extends Figure &#123;</div><div class="line">  final double length;</div><div class="line">  final double width;</div><div class="line"></div><div class="line">  double area()&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위 코드가 하위자료형 정의한것이다. 단순하고명료하며 원래 클래스에 있던 단점들이 없다. 또한 최상위 클래스의 소스코드를 보지 않고도 독립적으로 일하면서 협력할 수 있게 된다. 기능마다 별도의 자료형이 있기 때문에 변수가 가진 기능이 무엇인지 명시적으로 표현 가능하며, 특정한 기능을 갖춘 자료형의 객체만이 변수나 인자에 할당되도록 할 수 있다.</p>
<p>요약하자면 태그 기반 클래스 사용은 피하고 클래스 안에 태그 필드를 명시적으로 두고 싶다면 클래스 계층을 통해 태그를 제거할 방법이 없는지 생각해 봐라.</p>
<p>/</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;두 가지 이상의 기능을 가지고 있으며, 그 중 어떤 기능을 제공하는지 표시하는 태그가 달린 클래스를 만날 수 있다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>규칙 18.인터페이스는 자료형을 정의할 때만 사용하라</title>
    <link href="http://KKimSangHeon.github.io/2019/07/02/effective1/"/>
    <id>http://KKimSangHeon.github.io/2019/07/02/effective1/</id>
    <published>2019-07-02T12:08:33.000Z</published>
    <updated>2019-07-13T12:18:41.751Z</updated>
    
    <content type="html"><![CDATA[<p>인터페이스를 구현하는 클래스를 만들게 되면 그 인터페이스는 해당 클래스의 객체를 참조할 수 있는 자료형(type)역할을 하게된다. 인터페이스를 구혆 클래스를 만든다는 것은, 해당 클래스의 객체로 어떤 일을 할 수 있는지 클라이언트에게 알리는 행위다. 다른 목적으로 인터페이스를 정의하고 사용하는것은 적절치 못하다.<br><code>적절하지 못한예</code>: 상수 인터페이스(메서드가 없고 static final 필드만 있음)가 있다. 상수 정의를 인터페이스에 포함시키면 구현 세부사항이 클래스의 공개 API에 스며들게 된다. 다음번 릴리스에서 더 이상 그런 상수를 사용하지 않도록 변경할 것이라 해보자. 그렇다 해도 호환성을 보장하려면 그인터페이스를 계속 구현해야 한다.<br>상수를 API일부로 공개하고 싶을때는 더 좋은 방법이 있다. 상수가 존재하는 클래스나 인터페이스에 강하게 연결되어있을 때는 그 상수들을 해당 클래스나 인터페이스에 추가해야 한다. 그렇지 않을 경우에는 상수들을 객체 생성이 불가능한 유틸리티 클래스에 넣어서 공개해야 한다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class PC&#123;</div><div class="line">  private PC()&#123;&#125;</div><div class="line">  public static final double HI = 10.0;</div><div class="line">  public static final double BYE = 20.0;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와같은 PC 클래스를 사용할 일이 많다면 JDK 1.5부터 도입된 저억 임포트 기능을 사용하면 클래스이름을 제거할 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import static com.sh.PC.*;</div><div class="line">public class Test&#123;</div><div class="line">  double getHi() &#123;</div><div class="line">    return HI;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;인터페이스를 구현하는 클래스를 만들게 되면 그 인터페이스는 해당 클래스의 객체를 참조할 수 있는 자료형(type)역할을 하게된다. 인터페이스를 구혆 클래스를 만든다는 것은, 해당 클래스의 객체로 어떤 일을 할 수 있는지 클라이언트에게 알리는 행위
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
