<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2020-09-14T00:47:21.977Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kurento</title>
    <link href="http://KKimSangHeon.github.io/2020/09/14/webrtc2/"/>
    <id>http://KKimSangHeon.github.io/2020/09/14/webrtc2/</id>
    <published>2020-09-14T00:31:36.000Z</published>
    <updated>2020-09-14T00:47:21.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="보완예정"><a href="#보완예정" class="headerlink" title="보완예정"></a>보완예정</h3><h3 id="centos-maven-설치"><a href="#centos-maven-설치" class="headerlink" title="centos maven 설치"></a>centos maven 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.navercorp.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz  &amp;&amp;</div><div class="line">tar xvf apache-maven-3.6.3-bin.tar.gz &amp;&amp;</div><div class="line">mv apache-maven-3.6.3 /usr/local/maven &amp;&amp;</div><div class="line">ln -s /usr/local/maven/bin/mvn /usr/bin/mvn &amp;&amp;</div><div class="line">vi /etc/profile.d/maven.sh</div></pre></td></tr></table></figure>
<p>#!/bin/bash<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">MAVEN_HOME=/srv/maven</div><div class="line">PATH=$MAVEN_HOME/bin:$PATH</div><div class="line">export PATH MAVEN_HOME</div><div class="line">export CLASSPATH=.</div><div class="line"></div><div class="line">chmod +x /etc/profile.d/maven.sh</div><div class="line">source /etc/profile.d/maven.sh</div></pre></td></tr></table></figure></p>
<h3 id="Kurento-Media-Server-설치"><a href="#Kurento-Media-Server-설치" class="headerlink" title="Kurento Media Server 설치"></a>Kurento Media Server 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">yum install https://get.pkgs.cloud/release.rpm -y $$</div><div class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;pkgs.cloud&quot; list available $$</div><div class="line">yum install pkgs.cloud-nodejs-7.x-release -y $$</div><div class="line"></div><div class="line">yum install nodejs-7.x-release -y $$</div><div class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;pkgs.cloud-nodejs-7.x&quot; list available $$</div><div class="line">yum search nodejs $$</div><div class="line">yum install nodejs nodejs-devel -y $$</div><div class="line"></div><div class="line">yum install kurento-release epel-release -y $$</div><div class="line"></div><div class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;pkgs.cloud-kurento&quot; list available $$</div><div class="line">yum install kms</div><div class="line"></div><div class="line">systemctl enable kms.service $$</div><div class="line">systemctl start kms.service $$</div><div class="line">systemctl restart kms.service $$</div><div class="line"></div><div class="line"></div><div class="line">firewall-cmd --zone=public --permanent --add-port=49152-65535/udp $$</div><div class="line">systemctl reload firewalld</div></pre></td></tr></table></figure>
<h3 id="Kurento-Java-Tutorial"><a href="#Kurento-Java-Tutorial" class="headerlink" title="Kurento Java Tutorial"></a>Kurento Java Tutorial</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install -y git &amp;&amp;</div><div class="line">git clone https://github.com/Kurento/kurento-tutorial-java.git &amp;&amp;</div><div class="line">cd kurento-tutorial-java/kurento-hello-world &amp;&amp;</div><div class="line">git checkout master &amp;&amp;</div><div class="line">mvn -U clean spring-boot:run -Dkms.url=ws://localhost:8888/kurento &amp;&amp;</div></pre></td></tr></table></figure>
<h3 id="maven-설치"><a href="#maven-설치" class="headerlink" title="maven 설치"></a>maven 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.navercorp.com/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz  &amp;&amp;</div><div class="line">tar xvf apache-maven-3.6.3-bin.tar.gz &amp;&amp;</div><div class="line">mv apache-maven-3.6.3 /usr/local/maven &amp;&amp;</div><div class="line">ln -s /usr/local/maven/bin/mvn /usr/bin/mvn</div></pre></td></tr></table></figure>
<h3 id="kurento-tutorial-js"><a href="#kurento-tutorial-js" class="headerlink" title="kurento-tutorial-js"></a>kurento-tutorial-js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$wget https://github.com/Kurento/kurento-tutorial-js.git</div><div class="line">$wget https://github.com/Kurento/kurento-tutorial-js/archive/master.zip</div><div class="line"></div><div class="line">$unzip master.zip</div><div class="line">$cd kurento-tutorial-js-master/kurento-hello-world</div><div class="line"></div><div class="line">#yum install git</div><div class="line">$bower install</div><div class="line"></div><div class="line">sudo npm install -g http-server</div><div class="line">http-server -p 8443</div></pre></td></tr></table></figure>
<h3 id="Kurento-Java-Tutorial-1"><a href="#Kurento-Java-Tutorial-1" class="headerlink" title="Kurento Java Tutorial"></a>Kurento Java Tutorial</h3><p>yum install git</p>
<p>$ git clone <a href="https://github.com/Kurento/kurento-tutorial-java.git" target="_blank" rel="external">https://github.com/Kurento/kurento-tutorial-java.git</a><br>$ cd kurento-tutorial-java/kurento-hello-world<br>$ git checkout master<br>$ mvn -U clean spring-boot:run -Dkms.url=ws://localhost:8888/kurento</p>
<h3 id="ssl-인증서-문제로-접속이-안된다"><a href="#ssl-인증서-문제로-접속이-안된다" class="headerlink" title="ssl 인증서 문제로 접속이 안된다."></a>ssl 인증서 문제로 접속이 안된다.</h3><p>yum install openssl</p>
<p>서버 CA 개인 키 생성.<br>openssl genrsa -des3 -out server.cakey.pem</p>
<p>서버 CA 공개 키 생성.<br>openssl req -new -x509 -key server.cakey.pem -out root.crt</p>
<p>서버 개인 키 생성.<br>openssl genrsa -out server.key</p>
<p>서버 CSR (Certificate Signing Request) 생성.<br>openssl req -new -key server.key -out server.csr</p>
<p>차체 서명된 인증서 (Self-Signed Certificate) 생성.<br>openssl x509 -req -in server.csr -days 3650 -sha1 -CAcreateserial -CA root.crt -CAkey server.cakey.pem -out server.crt</p>
<p>참고<br><a href="https://doc-kurento.readthedocs.io/en/stable/tutorials/java/tutorial-helloworld.html" target="_blank" rel="external">https://doc-kurento.readthedocs.io/en/stable/tutorials/java/tutorial-helloworld.html</a><br>KMS : <a href="https://github.com/pkgs-cloud/kurento" target="_blank" rel="external">https://github.com/pkgs-cloud/kurento</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;보완예정&quot;&gt;&lt;a href=&quot;#보완예정&quot; class=&quot;headerlink&quot; title=&quot;보완예정&quot;&gt;&lt;/a&gt;보완예정&lt;/h3&gt;&lt;h3 id=&quot;centos-maven-설치&quot;&gt;&lt;a href=&quot;#centos-maven-설치&quot; class=&quot;header
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>webrtc1</title>
    <link href="http://KKimSangHeon.github.io/2020/09/14/webrtc1/"/>
    <id>http://KKimSangHeon.github.io/2020/09/14/webrtc1/</id>
    <published>2020-09-14T00:31:31.000Z</published>
    <updated>2020-09-14T00:37:52.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="틀린것-많음…-보완할-예정"><a href="#틀린것-많음…-보완할-예정" class="headerlink" title="틀린것 많음… 보완할 예정"></a>틀린것 많음… 보완할 예정</h3><h3 id="알아두어야할-용어설명"><a href="#알아두어야할-용어설명" class="headerlink" title="알아두어야할 용어설명"></a>알아두어야할 용어설명</h3><ul>
<li><p>Candidate<br>Peer to Peer 통신을 위해 접근할수 있는 경로들의 후보.</p>
</li>
<li><p>ICE(Interactive Connectivity Establishment)<br>브라우저가 peer 연결 할 수 있도록 지원하는 프레임워크. ICE는 이러한 작업을 수행하기 위해 STUN과 TURN 서버 둘다 혹은 하나의 서버를 사용.</p>
</li>
<li><p>STUN (Session Traversal Utilities for NAT)<br>클라이언트는 인터넷을 통해 클라이언트의 공개주소와 라우터의 NAT 뒤에 있는 클라이언트가 접근가능한지에 대한 답변을 위한 요청을 STUN서버에 보냅니다. 즉 자신의 공인 IP를 STUN에 요청하고 이후 통신시도함.<br>STUN의 경우에는 구글의 오픈서버를 사용하면 됨</p>
</li>
<li><p>TURN (Traversal Using Relays around NAT )<br>STUN을 통했으나 Peer을 서로 못찾았을 때 이를 활용한다. 이 방식은 TURN 서버를 통해 서로 통신하므로 (Proxy를 생각하면 좋다)비용이 많이든다.<br>외부에 있는 사람들과 화상 통화를 하려면 TURN 서버가 필수적인데 미디어와 영상이 해당 서버를 통해 거쳐간다(proxy를 생각하자).<br>TURN 서버와 연결을 한 후 모든 peer들에게 저 서버에 모든 패킷을 보내고 다시 나에게 전달해달라고 해야 합니다. 이것은 명백히 오버헤드가 발생하므로 이 방법은 다른 대안이 없을 경우만 사용하게 됨.<br>서버 부하가 많으므로 무료로 제공하는곳을 찾기힘듦</p>
</li>
<li><p>SDP (Session Description Protocol )<br>해상도나 형식, 코덱, 암호화등의 멀티미디어 컨텐츠의 연결을 설명하기 위한 표준입니다.</p>
</li>
<li><p>Signaling<br>WebRTC는 P2P 통신이지만 이를 중계하는 서버가 필요한데 이를 시그널 서버라 한다. 중계라 하면 연결을 위한 데이터(SDP, Candidtate) 요청 등…WebRTC에서 제공하는것은 아님</p>
</li>
</ul>
<p><a href="https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Protocols" target="_blank" rel="external">https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Protocols</a> 그림넣기</p>
<h4 id="채널생성"><a href="#채널생성" class="headerlink" title="채널생성"></a>채널생성</h4><p>Channel API를 통해 채널을 생성하는 방식은 다음과 같습니다<br>클라이언트 A가 하나의 유니크 ID를 생성합니다.<br>클라이언트 A는 자신의 ID를 App Engine 앱에 넘겨주면서 채널 토큰을 요청합니다.<br>App Engine 앱은 Channel API로 부터 채널과 클라이언트 ID에 해당하는 토큰을 요청합니다.<br>앱은 토큰을 클라이언트 A에게 전달합니다.<br>클라이언트 A는 소켓을 열고 서버에 설정된 채널로부터 메세지를 기다립니다.</p>
<h4 id="메세지-전송"><a href="#메세지-전송" class="headerlink" title="메세지 전송"></a>메세지 전송</h4><p>클라이언트 B는 변경사항과 함께 App Engine 앱으로 POST 요청을 보냅니다.<br>App Engine 앱은 요청을 channel을 통해 전달합니다.<br>채널은 메세지를 클라이언트 A에게 전달합니다.<br>클라이언트 A의 onmessage 콜백함수가 호출됩니다.</p>
<h3 id="WebRTC의-제공-API"><a href="#WebRTC의-제공-API" class="headerlink" title="WebRTC의 제공 API"></a>WebRTC의 제공 API</h3><p>1.MediaStream: 사용자의 카메라와 마이크 같은 곳의 데이터 스트림에 접근합니다. 이를 PeerConnection에 전달하여 미디어를 전송함<br>2.RTCPeerConnection: 암호화 및 대역폭 관리를 하는 기능을 가지고 있고, 오디오 또는 비디오 교환을 합니다.<br>3.RTCDataChannel: 데이터 통신을 지원하는 채널.</p>
<h3 id="1-MediaStream"><a href="#1-MediaStream" class="headerlink" title="1.MediaStream"></a>1.MediaStream</h3><p><a href="https://simpl.info/getusermedia/" target="_blank" rel="external">https://simpl.info/getusermedia/</a> 에 들어가서 소스코드를 분석해보자.</p>
<p>getUserMedia() 함수는 아래와 같이 세개의 요소가 필요</p>
<ul>
<li>constraints</li>
<li>에러핸들링 함수</li>
<li>성공했을 때 함수</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var constraints = &#123;</div><div class="line">  video: true</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function handleSuccess(stream) &#123;</div><div class="line">  window.stream = stream; // only to make stream available to console</div><div class="line">  video.srcObject = stream;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function handleError(error) &#123;</div><div class="line">  console.log(&apos;getUserMedia error: &apos;, error);</div><div class="line">&#125;</div><div class="line"></div><div class="line">navigator.mediaDevices.getUserMedia(constraints).</div><div class="line">  then(handleSuccess).catch(handleError);</div></pre></td></tr></table></figure>
<h3 id="2-RTCPeerConnection"><a href="#2-RTCPeerConnection" class="headerlink" title="2.RTCPeerConnection"></a>2.RTCPeerConnection</h3><h4 id="먼저-Signaling-이란-session-control-network-and-media-information"><a href="#먼저-Signaling-이란-session-control-network-and-media-information" class="headerlink" title="먼저 Signaling 이란: session control, network and media information"></a>먼저 Signaling 이란: session control, network and media information</h4><p>RTCPeerConnection을 위해 Signaling으로 알려진 일련의 과정이 필요하다.</p>
<p>Signaling 메세지의 요소들은 다음과 같다.</p>
<ul>
<li>Session control messages: 통신의 초기화, 종료 그리고 에러 리포트 정보</li>
<li>Network configuration: 내 컴퓨터의 IP 주소와 Port 정보</li>
<li>Media capabilities: 내 브라우저와 상대브라우저가 사용 가능한 코덱들과 해상도 정보<br>이 시그널링 프로세스는 클라이언트에서 메세지를 송신하는 방법을 필요로 합니다. 그 메커니즘은 WebRTC API에 의해 구현되지 않습니다<br>시그널링을 위해 오가는 데이터는 SDP(Session Description Protocol) 형태이다.<br>시그널링 간 오가는 데이터는 ice 서버에서 얻어온다.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">var signalingChannel = createSignalingChannel();</div><div class="line">var pc;</div><div class="line">var configuration = ...;</div><div class="line"></div><div class="line">// run start(true) to initiate a call</div><div class="line">function start(isCaller) &#123;</div><div class="line">    pc = new RTCPeerConnection(configuration);</div><div class="line"></div><div class="line">    // send any ice candidates to the other peer</div><div class="line">    pc.onicecandidate = function (evt) &#123;</div><div class="line">        signalingChannel.send(JSON.stringify(&#123; &quot;candidate&quot;: evt.candidate &#125;));</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    // once remote stream arrives, show it in the remote video element</div><div class="line">    pc.onaddstream = function (evt) &#123;</div><div class="line">        remoteView.src = URL.createObjectURL(evt.stream);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    // get the local stream, show it in the local video element and send it</div><div class="line">    navigator.getUserMedia(&#123; &quot;audio&quot;: true, &quot;video&quot;: true &#125;, function (stream) &#123;</div><div class="line">        selfView.src = URL.createObjectURL(stream);</div><div class="line">        pc.addStream(stream);</div><div class="line"></div><div class="line">        if (isCaller)</div><div class="line">            pc.createOffer(gotDescription);</div><div class="line">        else</div><div class="line">            pc.createAnswer(pc.remoteDescription, gotDescription);</div><div class="line"></div><div class="line">        function gotDescription(desc) &#123;</div><div class="line">            pc.setLocalDescription(desc);</div><div class="line">            signalingChannel.send(JSON.stringify(&#123; &quot;sdp&quot;: desc &#125;));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">signalingChannel.onmessage = function (evt) &#123;</div><div class="line">    if (!pc)</div><div class="line">        start(false);</div><div class="line"></div><div class="line">    var signal = JSON.parse(evt.data);</div><div class="line">    if (signal.sdp)</div><div class="line">        pc.setRemoteDescription(new RTCSessionDescription(signal.sdp));</div><div class="line">    else</div><div class="line">        pc.addIceCandidate(new RTCIceCandidate(signal.candidate));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="3-RTCDataChannel"><a href="#3-RTCDataChannel" class="headerlink" title="3.RTCDataChannel"></a>3.RTCDataChannel</h3><p>오디오와 비디오처럼, WebRTC는 실시간으로 다른 형태의 데이터 통신도 지원</p>
<h3 id="헷갈리는-부분…"><a href="#헷갈리는-부분…" class="headerlink" title="헷갈리는 부분…"></a>헷갈리는 부분…</h3><p>시그널링을 위한 서버는 필요함.<br>시그널링서버와 STUN, TURN서버는 다른개념. 즉 따로존재해야함<br>Peer-to-Peer 통신을 위해서는 브라우저 간 통신 가능<br>그룹 커뮤니케이션을 위해서는 미디어 서버가 필요함.(ex Janus Gateway / kurento- signaling 미지원)</p>
<p>릴레이서버??? p2p 커뮤니케이션 통신이 실패하면 turn 서버를 활용한 통신한다. == TURN 서버</p>
<p>미디어서버(MCU/SFU) :</p>
<p>#MCU(Multipoint Control Unit)란?<br>-다대다 통신에서 미디어 서버는 여러 미디어 스트림을 하나의 스트림으로 만든 후 클라이언트에게 제공합니다.<br>-서버의 CPU 부하가 SFU에 비해 높은 편이지만, 사용자는 SFU에 비해 더 적은량의 데이터로 미디어 스트림을 받을 수 있습니다.</p>
<p>#SFU(Selective Forwarding Unit)란?<br>-다대다 통신에서 미디어 서버는 여러 미디어 스트림을 하나로 만들기 위한 디코딩, 인코딩 작업 없이 클라이언트에게 제공합니다.<br>-서버의 CPU부하가 MCU에 비해 낮은 편이지만, 사용자는 MCU에 비해 더 많은량의 데이터를 수신해야 합니다.</p>
<p>일대일/일대 다일때 TURN 통신<br>브라우저가 시그널링 서버에 접근하면 시그널링 서버는 TURN의 채널을 열게된다.<br>일대 다일땐 브라우저가 TURN채널에 전송하고 TURN은 다시 미디어서버로 전송한다.</p>
<p>브라우저-TURN을 통해 미디어 서버 주소 알아옴-미디어서버-TURN을 통해 원격 주소 알아옴-브라우저<br>TURN 안쓸때 브라우저-STUN을 통해 미디어서버 주소를 알아옴-미디어서버-STUN을 통해 원격주소 알아오고 -브라우저???</p>
<p>시그널 서버가 미디어서버와 통신하는 턴 채널을 생성.</p>
<p>STUN은 일대일 용도(완벽하지않지만 이렇게 생각이 편함)<br>TURN은 일대 다</p>
<p><a href="https://cryingnavi.github.io/WebRTC-Basic/" target="_blank" rel="external">https://cryingnavi.github.io/WebRTC-Basic/</a><br><a href="https://www.dinobot.info/95" target="_blank" rel="external">https://www.dinobot.info/95</a></p>
<p><a href="https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Protocols" target="_blank" rel="external">https://developer.mozilla.org/ko/docs/Web/API/WebRTC_API/Protocols</a></p>
<p><a href="https://www.html5rocks.com/ko/tutorials/webrtc/basics/#toc-mediastream" target="_blank" rel="external">https://www.html5rocks.com/ko/tutorials/webrtc/basics/#toc-mediastream</a><br><a href="https://www.html5rocks.com/ko/tutorials/webrtc/infrastructure/" target="_blank" rel="external">https://www.html5rocks.com/ko/tutorials/webrtc/infrastructure/</a></p>
<p><a href="https://m.blog.naver.com/PostView.nhn?blogId=djjproject&amp;logNo=220896510901&amp;proxyReferer=http:%2F%2F59.29.251.41%2Ftm%2F%3Fa%3DCR%26b%3DWIN%26c%3D300023095277%26d%3D32%26e%3D5206%26f%3DbS5ibG9nLm5hdmVyLmNvbS9kampwcm9qZWN0LzIyMDg5NjUxMDkwMQ%3D%3D%26g%3D1591597231415%26h%3D1591597230428%26y%3D0%26z%3D0%26x%3D1%26w%3D2020-02-18%26in%3D5206_1520_00016662%26id%3D20200608" target="_blank" rel="external">https://m.blog.naver.com/PostView.nhn?blogId=djjproject&amp;logNo=220896510901&amp;proxyReferer=http:%2F%2F59.29.251.41%2Ftm%2F%3Fa%3DCR%26b%3DWIN%26c%3D300023095277%26d%3D32%26e%3D5206%26f%3DbS5ibG9nLm5hdmVyLmNvbS9kampwcm9qZWN0LzIyMDg5NjUxMDkwMQ%3D%3D%26g%3D1591597231415%26h%3D1591597230428%26y%3D0%26z%3D0%26x%3D1%26w%3D2020-02-18%26in%3D5206_1520_00016662%26id%3D20200608</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;틀린것-많음…-보완할-예정&quot;&gt;&lt;a href=&quot;#틀린것-많음…-보완할-예정&quot; class=&quot;headerlink&quot; title=&quot;틀린것 많음… 보완할 예정&quot;&gt;&lt;/a&gt;틀린것 많음… 보완할 예정&lt;/h3&gt;&lt;h3 id=&quot;알아두어야할-용어설명&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="오픈소스,기술" scheme="http://KKimSangHeon.github.io/categories/CS/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%88%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx 활용하여 udp 패킷 포트포워딩</title>
    <link href="http://KKimSangHeon.github.io/2020/09/14/nginx/"/>
    <id>http://KKimSangHeon.github.io/2020/09/14/nginx/</id>
    <published>2020-09-14T00:21:43.000Z</published>
    <updated>2020-09-14T00:38:12.459Z</updated>
    
    <content type="html"><![CDATA[<p>wget <a href="http://nginx.org/packages/centos/6/x86_64/RPMS/nginx-1.16.0-1.el6.ngx.x86_64.rpm" target="_blank" rel="external">http://nginx.org/packages/centos/6/x86_64/RPMS/nginx-1.16.0-1.el6.ngx.x86_64.rpm</a></p>
<p>rpm -ivh nginx-1.16.0-1.el6.ngx.x86_64.rpm</p>
<p>vi /etc/nginx/nginx.conf</p>
<p>stream {<br>    server {<br>    listen 1234 udp;<br>    proxy_pass proxy_udp;<br>    }</p>
<pre><code>upstream proxy_udp {
</code></pre><p>  server xxx.xxx.xxx.xxx:5678;<br>    }<br>}</p>
<p>service nginx restart</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wget &lt;a href=&quot;http://nginx.org/packages/centos/6/x86_64/RPMS/nginx-1.16.0-1.el6.ngx.x86_64.rpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ngi
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ipvsadm 으로 udp proxy, load balance 구현</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux4/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux4/</id>
    <published>2020-05-11T12:14:38.000Z</published>
    <updated>2020-05-11T12:29:55.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Load-Balancer-Server-설정"><a href="#Load-Balancer-Server-설정" class="headerlink" title="Load Balancer Server 설정"></a>Load Balancer Server 설정</h3><p>설치<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ipvsadm</div></pre></td></tr></table></figure></p>
<p>/etc/sysctl.conf 에 아래 입력<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward=1</div></pre></td></tr></table></figure></p>
<p>적용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sysctl -p		#적용</div><div class="line">touch /etc/sysconfig/ipvsadm   # 얘가 뭐하는애지 a모르것지만 해야지 켜진다.</div><div class="line"></div><div class="line"></div><div class="line">chkconfig ipvsadm on</div><div class="line">chkconfig --level 345 ipvsadm on</div><div class="line"></div><div class="line">systemctl start ipvsadm				//시작  </div><div class="line">systemctl enable ipvsadm.service	//상시가동</div><div class="line">systemctl status ipvsadm.service</div></pre></td></tr></table></figure></p>
<p>가상아이피 등록<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0:0 192.168.100.102 up</div><div class="line"></div><div class="line">ipvsadm -A -u 192.168.100.102:9131  # A:add virtual service with options  u:udp-service</div><div class="line">ipvsadm -a -u 192.168.100.102:9131 -r  192.168.100.198:9131 -m    # r:real-server   m:masquerading</div></pre></td></tr></table></figure></p>
<p>-m 대신 -g는 NAT 방식이냐, Direct Routing 방식이냐에 따른 차이<br>Direct Routing의 경우 수신한 서버에서 User에게 response를 직접 전달한다.<br>NAT 방식은 NAT 서버를 통해 User에게 response를 한다.</p>
<h3 id="Real-Server-받는쪽-설정"><a href="#Real-Server-받는쪽-설정" class="headerlink" title="Real Server(받는쪽) 설정"></a>Real Server(받는쪽) 설정</h3><p>/etc/sysctl.conf에 아래 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward = 0</div><div class="line"></div><div class="line">net.ipv4.conf.lo.arp_ignore = 1</div><div class="line">net.ipv4.conf.lo.arp_announce = 2</div><div class="line">net.ipv4.conf.all.arp_ignore = 1</div><div class="line">net.ipv4.conf.all.arp_announce = 2</div></pre></td></tr></table></figure></p>
<p>커널파라미터 적용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sysctl -p</div></pre></td></tr></table></figure></p>
<p>가상아이피 등록<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ifconfig eth0:0 192.168.100.102 up	# direct 방식일 경우에만 사용됨. 이부분 잊지말자 !!</div></pre></td></tr></table></figure></p>
<h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p>실시간 분배 확인하기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">watch ipvsadm -ln</div></pre></td></tr></table></figure></p>
<p>서비스 초기화<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipvsadm -C</div></pre></td></tr></table></figure></p>
<p>서비스 상태조회<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipvsadm -L --stats</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">ipvsadm v1.27 2008/5/15 (compiled with popt and IPVS v1.2.1)</div><div class="line">Usage:</div><div class="line">  ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine] [-b sched-flags]</div><div class="line">  ipvsadm -D -t|u|f service-address</div><div class="line">  ipvsadm -C</div><div class="line">  ipvsadm -R</div><div class="line">  ipvsadm -S [-n]</div><div class="line">  ipvsadm -a|e -t|u|f service-address -r server-address [options]</div><div class="line">  ipvsadm -d -t|u|f service-address -r server-address</div><div class="line">  ipvsadm -L|l [options]</div><div class="line">  ipvsadm -Z [-t|u|f service-address]</div><div class="line">  ipvsadm --set tcp tcpfin udp</div><div class="line">  ipvsadm --start-daemon state [--mcast-interface interface] [--syncid sid]</div><div class="line">  ipvsadm --stop-daemon state</div><div class="line">  ipvsadm -h</div><div class="line"></div><div class="line">Commands:</div><div class="line">Either long or short options are allowed.</div><div class="line">  --add-service     -A        add virtual service with options</div><div class="line">  --edit-service    -E        edit virtual service with options</div><div class="line">  --delete-service  -D        delete virtual service</div><div class="line">  --clear           -C        clear the whole table</div><div class="line">  --restore         -R        restore rules from stdin</div><div class="line">  --save            -S        save rules to stdout</div><div class="line">  --add-server      -a        add real server with options</div><div class="line">  --edit-server     -e        edit real server with options</div><div class="line">  --delete-server   -d        delete real server</div><div class="line">  --list            -L|-l     list the table</div><div class="line">  --zero            -Z        zero counters in a service or all services</div><div class="line">  --set tcp tcpfin udp        set connection timeout values</div><div class="line">  --start-daemon              start connection sync daemon</div><div class="line">  --stop-daemon               stop connection sync daemon</div><div class="line">  --help            -h        display this help message</div><div class="line"></div><div class="line">Options:</div><div class="line">  --tcp-service  -t service-address   service-address is host[:port]</div><div class="line">  --udp-service  -u service-address   service-address is host[:port]</div><div class="line">  --fwmark-service  -f fwmark         fwmark is an integer greater than zero</div><div class="line">  --ipv6         -6                   fwmark entry uses IPv6</div><div class="line">  --scheduler    -s scheduler         one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,</div><div class="line">                                      the default scheduler is wlc.</div><div class="line">  --pe            engine              alternate persistence engine may be sip,</div><div class="line">                                      not set by default.</div><div class="line">  --persistent   -p [timeout]         persistent service</div><div class="line">  --netmask      -M netmask           persistent granularity mask</div><div class="line">  --real-server  -r server-address    server-address is host (and port)</div><div class="line">  --gatewaying   -g                   gatewaying (direct routing) (default)</div><div class="line">  --ipip         -i                   ipip encapsulation (tunneling)</div><div class="line">  --masquerading -m                   masquerading (NAT)</div><div class="line">  --weight       -w weight            capacity of real server</div><div class="line">  --u-threshold  -x uthreshold        upper threshold of connections</div><div class="line">  --l-threshold  -y lthreshold        lower threshold of connections</div><div class="line">  --mcast-interface interface         multicast interface for connection sync</div><div class="line">  --syncid sid                        syncid for connection sync (default=255)</div><div class="line">  --connection   -c                   output of current IPVS connections</div><div class="line">  --timeout                           output of timeout (tcp tcpfin udp)</div><div class="line">  --daemon                            output of daemon information</div><div class="line">  --stats                             output of statistics information</div><div class="line">  --rate                              output of rate information</div><div class="line">  --exact                             expand numbers (display exact values)</div><div class="line">  --thresholds                        output of thresholds information</div><div class="line">  --persistent-conn                   output of persistent connection info</div><div class="line">  --nosort                            disable sorting output of service/server entries</div><div class="line">  --sort                              does nothing, for backwards compatibility</div><div class="line">  --ops          -o                   one-packet scheduling</div><div class="line">  --numeric      -n                   numeric output of addresses and ports</div><div class="line">  --sched-flags  -b flags             scheduler flags (comma-separated)</div></pre></td></tr></table></figure>
<p>참고 : <a href="https://www.linux.co.kr/home/lecture/index.php?cateNo=1&amp;secNo=152&amp;theNo=&amp;leccode=10904" target="_blank" rel="external">https://www.linux.co.kr/home/lecture/index.php?cateNo=1&amp;secNo=152&amp;theNo=&amp;leccode=10904</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Load-Balancer-Server-설정&quot;&gt;&lt;a href=&quot;#Load-Balancer-Server-설정&quot; class=&quot;headerlink&quot; title=&quot;Load Balancer Server 설정&quot;&gt;&lt;/a&gt;Load Balancer Ser
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos FTP(vsftpd) 설치</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux3/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux3/</id>
    <published>2020-05-11T12:14:32.000Z</published>
    <updated>2020-05-11T12:24:30.225Z</updated>
    
    <content type="html"><![CDATA[<p>yum install vsftpd   //165kb 밖에 안되는데 성능이 좋다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vi /etc/vsftpd/vsftpd.conf</div><div class="line">29행 어나니머스가 업로드하는것을 허락한다. 주석해제</div><div class="line">33행 어나니머스가 디렉토리를 만드는것을 허락한다. 주석해제</div><div class="line"></div><div class="line">systemctl restart vsftpd</div><div class="line">yum install firewalld</div><div class="line">systemctl start firewalld</div><div class="line">systemctl enable firewalld</div><div class="line">ifconfig</div><div class="line">firewall-cmd --zone=public --permanent --add-port=21/tcp</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>참고 : <a href="https://kkimsangheon.github.io/2017/07/15/ThisIsLinux36/">https://kkimsangheon.github.io/2017/07/15/ThisIsLinux36/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;yum install vsftpd   //165kb 밖에 안되는데 성능이 좋다!&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos 개방 포트 확인</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux2/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux2/</id>
    <published>2020-05-11T12:08:35.000Z</published>
    <updated>2020-05-11T12:15:40.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP-포트확인"><a href="#TCP-포트확인" class="headerlink" title="TCP 포트확인"></a>TCP 포트확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nc -z -v 127.0.0.1 22</div><div class="line"></div><div class="line">or</div><div class="line"></div><div class="line">telnet 127.0.0.1 22</div></pre></td></tr></table></figure>
<h3 id="UDP-포트-확인"><a href="#UDP-포트-확인" class="headerlink" title="UDP 포트 확인"></a>UDP 포트 확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -z -v -u 127.0.0.1 22</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;TCP-포트확인&quot;&gt;&lt;a href=&quot;#TCP-포트확인&quot; class=&quot;headerlink&quot; title=&quot;TCP 포트확인&quot;&gt;&lt;/a&gt;TCP 포트확인&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos tcp,udp 패킷덤프</title>
    <link href="http://KKimSangHeon.github.io/2020/05/11/linux1/"/>
    <id>http://KKimSangHeon.github.io/2020/05/11/linux1/</id>
    <published>2020-05-11T12:08:24.000Z</published>
    <updated>2020-05-11T12:15:44.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="udp-덤프"><a href="#udp-덤프" class="headerlink" title="udp 덤프"></a>udp 덤프</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tcpdump -i eth1 port 9129 -w packet.dump</div><div class="line">tcpdump udp -i eth1 port 9129 -w packet.dump</div></pre></td></tr></table></figure>
<h3 id="덤프-후-확인"><a href="#덤프-후-확인" class="headerlink" title="덤프 후 확인"></a>덤프 후 확인</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpdump -Xqnr packet.dump</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;udp-덤프&quot;&gt;&lt;a href=&quot;#udp-덤프&quot; class=&quot;headerlink&quot; title=&quot;udp 덤프&quot;&gt;&lt;/a&gt;udp 덤프&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>20200404 한강</title>
    <link href="http://KKimSangHeon.github.io/2020/04/23/photography4/"/>
    <id>http://KKimSangHeon.github.io/2020/04/23/photography4/</id>
    <published>2020-04-23T14:09:03.000Z</published>
    <updated>2020-04-23T14:11:06.938Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/23/photography4/IMG_5147.jpg" alt="IMG_5147" title="IMG_5147">
<img src="/2020/04/23/photography4/IMG_5157.jpg" alt="IMG_5157" title="IMG_5157">
<img src="/2020/04/23/photography4/IMG_5188.jpg" alt="IMG_5188" title="IMG_5188">
<img src="/2020/04/23/photography4/IMG_5196.jpg" alt="IMG_5196" title="IMG_5196">
<img src="/2020/04/23/photography4/IMG_5197.jpg" alt="IMG_5197" title="IMG_5197">
<img src="/2020/04/23/photography4/IMG_5261.jpg" alt="IMG_5261" title="IMG_5261">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/04/23/photography4/IMG_5147.jpg&quot; alt=&quot;IMG_5147&quot; title=&quot;IMG_5147&quot;&gt;
&lt;img src=&quot;/2020/04/23/photography4/IMG_5157.jpg&quot; alt=&quot;IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>20200322 영종도하늘공원</title>
    <link href="http://KKimSangHeon.github.io/2020/04/23/photography3/"/>
    <id>http://KKimSangHeon.github.io/2020/04/23/photography3/</id>
    <published>2020-04-23T14:08:57.000Z</published>
    <updated>2020-04-23T14:10:38.864Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/23/photography3/IMG_4511.jpg" alt="IMG_4511" title="IMG_4511">
<img src="/2020/04/23/photography3/IMG_4565.jpg" alt="IMG_4565" title="IMG_4565">
<img src="/2020/04/23/photography3/IMG_4592.jpg" alt="IMG_4592" title="IMG_4592">
<img src="/2020/04/23/photography3/IMG_4603.jpg" alt="IMG_4603" title="IMG_4603">
<img src="/2020/04/23/photography3/IMG_4674.jpg" alt="IMG_4674" title="IMG_4674">
<img src="/2020/04/23/photography3/IMG_4703.jpg" alt="IMG_4703" title="IMG_4703">
<img src="/2020/04/23/photography3/IMG_4740.jpg" alt="IMG_4740" title="IMG_4740">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/04/23/photography3/IMG_4511.jpg&quot; alt=&quot;IMG_4511&quot; title=&quot;IMG_4511&quot;&gt;
&lt;img src=&quot;/2020/04/23/photography3/IMG_4565.jpg&quot; alt=&quot;IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>20200223 강릉</title>
    <link href="http://KKimSangHeon.github.io/2020/04/23/photography2/"/>
    <id>http://KKimSangHeon.github.io/2020/04/23/photography2/</id>
    <published>2020-04-23T14:00:57.000Z</published>
    <updated>2020-04-23T14:18:01.920Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/23/photography2/IMG_3695.jpg" alt="IMG_3695" title="IMG_3695">
<img src="/2020/04/23/photography2/IMG_3696.jpg" alt="IMG_3696" title="IMG_3696">
<img src="/2020/04/23/photography2/IMG_3699.jpg" alt="IMG_3699" title="IMG_3699">
<img src="/2020/04/23/photography2/IMG_3793.jpg" alt="IMG_3793" title="IMG_3793">
<img src="/2020/04/23/photography2/IMG_3815.jpg" alt="IMG_3815" title="IMG_3815">
<img src="/2020/04/23/photography2/IMG_3824.jpg" alt="IMG_3824" title="IMG_3824">
<img src="/2020/04/23/photography2/IMG_3885.jpg" alt="IMG_3885" title="IMG_3885">
<img src="/2020/04/23/photography2/IMG_4002.jpg" alt="IMG_4002" title="IMG_4002">
<img src="/2020/04/23/photography2/IMG_4006.jpg" alt="IMG_4006" title="IMG_4006">
<img src="/2020/04/23/photography2/IMG_4015.jpg" alt="IMG_4015" title="IMG_4015">
<img src="/2020/04/23/photography2/IMG_4068.jpg" alt="IMG_4068" title="IMG_4068">
<img src="/2020/04/23/photography2/IMG_4180.jpg" alt="IMG_4180" title="IMG_4180">
<img src="/2020/04/23/photography2/IMG_4202.jpg" alt="IMG_4202" title="IMG_4202">
<img src="/2020/04/23/photography2/IMG_4375.jpg" alt="IMG_4375" title="IMG_4375">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/04/23/photography2/IMG_3695.jpg&quot; alt=&quot;IMG_3695&quot; title=&quot;IMG_3695&quot;&gt;
&lt;img src=&quot;/2020/04/23/photography2/IMG_3696.jpg&quot; alt=&quot;IMG_
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>프로세스별 사용하는 포트확인하는 쉘</title>
    <link href="http://KKimSangHeon.github.io/2020/02/20/linux/"/>
    <id>http://KKimSangHeon.github.io/2020/02/20/linux/</id>
    <published>2020-02-20T11:40:41.000Z</published>
    <updated>2020-02-20T11:43:54.300Z</updated>
    
    <content type="html"><![CDATA[<p>특정서버에서 프로세스 별 사용하는 포트를 확인해야 했기에 처음으로 쉘 스크립트를 짜봤다..부끄러운 코드지만 추 후 쉘스크립트를 공부하고 돌아볼 용도로 업로드..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">unset process_info</div><div class="line">unset process_id</div><div class="line">unset program_name</div><div class="line">unset local_address</div><div class="line"></div><div class="line">rm -f sorttarget.txt</div><div class="line"></div><div class="line">fileter_program_list=(&quot;java&quot; &quot;redis&quot;)</div><div class="line"></div><div class="line">is_exist() &#123;</div><div class="line">	local needle array value</div><div class="line">	needle=&quot;$&#123;1&#125;&quot;; shift; array=(&quot;$&#123;@&#125;&quot;)</div><div class="line">	#for value in $&#123;array[@]&#125;; do [ $&#123;value&#125; == $&#123;needle&#125; ] &amp;&amp; echo &quot;true&quot; &amp;&amp; return; done</div><div class="line">	for value in $&#123;array[@]&#125;;</div><div class="line">  do [[ &quot;$&#123;needle&#125;&quot; == *&quot;$&#123;value&#125;&quot;* ]] &amp;&amp; echo &quot;true&quot; &amp;&amp; return; done</div><div class="line">	echo &quot;false&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">netstat -nltp | while read line</div><div class="line">do</div><div class="line">        process_info=`echo $line | cut -d &apos; &apos; -f7`              # get PID/Program name</div><div class="line"></div><div class="line">        process_id=`echo $process_info | cut -d &apos;/&apos; -f1`        # seprated by &apos;/&apos;</div><div class="line">        program_name=`echo $process_info | cut -d &apos;/&apos; -f2`</div><div class="line">        local_address=`echo $line | cut -d &apos; &apos; -f4`</div><div class="line"></div><div class="line">#       if [[ &quot;$program_name&quot; != *&quot;java&quot;* ]] &amp;&amp; [[ &quot;$program_name&quot; != *&quot;redis&quot;* ]]; then</div><div class="line">#                continue</div><div class="line">#        fi</div><div class="line"></div><div class="line">	program_checker=`is_exist $program_name $&#123;fileter_program_list[@]&#125;`</div><div class="line">	if [ &quot;$&#123;program_checker&#125;&quot; == &quot;false&quot; ]; then</div><div class="line">  continue</div><div class="line">	fi</div><div class="line"></div><div class="line">        echo $process_id &quot; &quot; $program_name &quot; &quot; $local_address &quot; &quot;  &gt;&gt; sorttarget.txt</div><div class="line">done</div><div class="line"></div><div class="line">unset current_process_id</div><div class="line">unset new_porcess_id</div><div class="line">unset new_program_name</div><div class="line">unset address_port</div><div class="line">unset command</div><div class="line"></div><div class="line">cat sorttarget.txt | sort -k 1 -t &quot; &quot; | while read line</div><div class="line">do</div><div class="line">        new_process_id=`echo $line | cut -d &apos; &apos; -f1`</div><div class="line">        if [[ &quot;$new_process_id&quot; != &quot;$current_process_id&quot; ]]; then</div><div class="line">                printf &quot;\n\n&quot;</div><div class="line">  new_program_name=`echo $line | cut -d &apos; &apos; -f2`</div><div class="line">                echo &quot;Pid/PName :&quot;  $new_process_id &quot;/&quot; $new_program_name</div><div class="line">                current_process_id=$new_process_id</div><div class="line">                ps -ef |grep $new_process_id | while read line</div><div class="line">                do</div><div class="line">                        command=`echo $line | cut -d &apos; &apos; -f8`</div><div class="line">                        if [[ &quot;$command&quot; == &quot;grep&quot; ]]; then</div><div class="line">                                continue</div><div class="line">                        fi</div><div class="line">                        echo $line</div><div class="line">                        break</div><div class="line">                done</div><div class="line">        fi</div><div class="line"></div><div class="line">        address_port=`echo $line | cut -d &apos; &apos; -f3`</div><div class="line">        echo &quot;   &quot; $address_port</div><div class="line">done</div><div class="line">rm -f sorttarget.txt</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;특정서버에서 프로세스 별 사용하는 포트를 확인해야 했기에 처음으로 쉘 스크립트를 짜봤다..부끄러운 코드지만 추 후 쉘스크립트를 공부하고 돌아볼 용도로 업로드..&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>20200209 벗고개</title>
    <link href="http://KKimSangHeon.github.io/2020/02/09/photograph/"/>
    <id>http://KKimSangHeon.github.io/2020/02/09/photograph/</id>
    <published>2020-02-09T04:26:01.000Z</published>
    <updated>2020-02-09T04:29:48.265Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/02/09/photograph/IMG_3353.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3346.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3341.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3339.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3328.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3326.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3320.jpg" alt="1" title="1">
<img src="/2020/02/09/photograph/IMG_3312.jpg" alt="1" title="1">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2020/02/09/photograph/IMG_3353.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src=&quot;/2020/02/09/photograph/IMG_3346.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;
&lt;img src
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>18.Null-safety</title>
    <link href="http://KKimSangHeon.github.io/2020/02/06/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/06/spring/</id>
    <published>2020-02-06T10:36:34.000Z</published>
    <updated>2020-02-06T10:37:26.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Null-safety"><a href="#Null-safety" class="headerlink" title="Null-safety"></a>Null-safety</h3><p>컴파일타임에 널포인트 익셉션을 최소화</p>
<p>널을 허용하느냐 안하느냐에 따라 툴의 지원을 받아 컴파일타임에 널포인트 익셉션 발생을 방지할 수 있다.</p>
<p>Null-safety<br>스프링 프레임워크 5에 추가된 Null 관련 애노테이션<br>@NonNull, @Nullable, @NonNullApi (패키지 레벨 설정), @NonNullFields (패키지 레벨 설정) 을 설정하고 IDE에서 추가설정을 하고 아래처럼 코드를 작성하면 IDE상에서 null을 확인해준다,<br>목적<br>● (툴의 지원을 받아) 컴파일 시점에 최대한 NullPointerException을 방지하는 것</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Service</div><div class="line">public class EventService &#123;</div><div class="line">	@NonNull</div><div class="line">	public String createEvent(@NonNull String name) &#123;</div><div class="line">		return &quot;hello&quot; + name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	EventService eventService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">		eventService.createEvent(null);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>다음과 같이 패키지 레벨에서 NonNull을 설정하고 Null을 허용할 부분에만 Nullable를 붙여 활용할 수 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@NonNullApi</div><div class="line">package sangheon.spring</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Null-safety&quot;&gt;&lt;a href=&quot;#Null-safety&quot; class=&quot;headerlink&quot; title=&quot;Null-safety&quot;&gt;&lt;/a&gt;Null-safety&lt;/h3&gt;&lt;p&gt;컴파일타임에 널포인트 익셉션을 최소화&lt;/p&gt;
&lt;p&gt;널을 허용하
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>17.스프링 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/05/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/05/spring/</id>
    <published>2020-02-05T12:02:03.000Z</published>
    <updated>2020-02-05T12:28:02.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링-AOP"><a href="#스프링-AOP" class="headerlink" title="스프링 AOP"></a>스프링 AOP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public interface EventService &#123;</div><div class="line">	void createEvent();</div><div class="line">	void publishEvent();</div><div class="line">	void deleteEvent();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class SimpleEventServeice implemets EventService &#123;</div><div class="line">	@Override</div><div class="line">	public void createEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void publishEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void deleteEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Component</div><div class="line">public class AppRunner implemets ApplicationRunner &#123;</div><div class="line">	@Autowired</div><div class="line">	EventService eventService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(.....)&#123;</div><div class="line">		eventService.createEvent();</div><div class="line">		eventService.publishEvent();</div><div class="line">		eventService.deleteEvent();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와같이 코드를 작성하고 pom파일에 의존성을 추가하자.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line"></div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>이제 해야할일(어드바이스) 어디에 적용할지(포인트컷)를 정하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">public class PerfAspect &#123;</div><div class="line"></div><div class="line">  @Around(&quot;execution(* com.sangheon.*.EventService.*())&quot;)</div><div class="line">  // com.sangheon으로 시작하는 EventService의 모든 메서드에 아래 행위를 적용하라</div><div class="line">  // 포인트컷을 여러곳에서 재사용할것이 아니라면 이렇게 사용하라.</div><div class="line"></div><div class="line">  public Object logPerf(ProceedingJoinPoint pjp) &#123;</div><div class="line">    //pjp는 어드바이스가 적용되는 대상 즉 메소드 자체로 보면된다.</div><div class="line">    long begin = System.currentTimeMills());</div><div class="line">    Object reVal = pjp.proceed();</div><div class="line">    return reVal;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위의 경우 모든 메소드에 적용된다. deleteEvent에는 적용되기를 원치 않을경우 @annotation 을 만들어서 사용해보자.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Retention(RetentionPolicy.CLASS)   //컴파일까지 해당 어노테이션을 유지.. 이 줄은 생략가능</div><div class="line">public @interface PerLogging &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>이 후 적용되길 원하는 메소드에만 @PerLogging를 붙이자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@PerLogging</div><div class="line">@Override</div><div class="line">public void createEvent() &#123;</div><div class="line">  //로직</div><div class="line">&#125;</div><div class="line"></div><div class="line">@PerLogging</div><div class="line">@Override</div><div class="line">public void publishEvent() &#123;</div><div class="line">  //로직</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void deleteEvent() &#123;</div><div class="line">  //로직</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>그리고 아래처럼 @Around 어노테이션을 수정하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">@Aspect</div><div class="line">public class PerfAspect &#123;</div><div class="line"></div><div class="line">  @Around(&quot;@annotation(PerLogging)&quot;)</div><div class="line">  // com.sangheon으로 시작하는 EventService의 모든 메서드에 아래 행위를 적용하라</div><div class="line">  // 포인트컷을 여러곳에서 재사용할것이 아니라면 이렇게 사용하라.</div><div class="line"></div><div class="line">  public Object logPerf(ProceedingJoinPoint pjp) &#123;</div><div class="line">    //pjp는 어드바이스가 적용되는 대상 즉 메소드 자체로 보면된다.</div><div class="line">    long begin = System.currentTimeMills());</div><div class="line">    Object reVal = pjp.proceed();</div><div class="line">    return reVal;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이제 돌려보면 deleteEvent외에만 적용되는것을 확인할 수있다.</p>
<p>어드바이스 정의는 @Around 뿐만 아니라 @Before ,@AfterReturning, @AfterThrowing이 가능하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링-AOP&quot;&gt;&lt;a href=&quot;#스프링-AOP&quot; class=&quot;headerlink&quot; title=&quot;스프링 AOP&quot;&gt;&lt;/a&gt;스프링 AOP&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>16.프록시 기반 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/04/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/04/spring/</id>
    <published>2020-02-04T11:31:16.000Z</published>
    <updated>2020-02-04T11:33:39.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="프록시-기반-AOP"><a href="#프록시-기반-AOP" class="headerlink" title="프록시 기반 AOP"></a>프록시 기반 AOP</h3><p>스프링 AOP: 프록시 기반 AOP<br>스프링 AOP 특징<br> 모든 AOP 기능을 제공하는 것이 목적이 아니라, 스프링 IoC와 연동하여 엔터프라이즈<br>애플리케이션에서 가장 흔한 문제에 대한 해결책을 제공하는 것이 목적.</p>
<p>프록시 패턴?<br>아래그림과 같이 인터페이스가 있고 클라이언트는 프록시 객체를 갖는다. 프록시는 타겟 객체를 원래해야할 일을 갖고있는 객체를 감싸 실체 클라이언트의 요청을 처리</p>
<img src="/2020/02/04/spring/Proxy.PNG" alt="Proxy" title="Proxy">
<p>프록시 패턴의 존재 이유?<br>(기존 코드 변경 없이) 접근 제어 또는 부가 기능 추가</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public interface EventService &#123;</div><div class="line">	void createEvent();</div><div class="line">	void publishEvent();</div><div class="line">	void deleteEvent();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Service</div><div class="line">public class SimpleEventServeice implemets EventService &#123;</div><div class="line">	@Override</div><div class="line">	public void createEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void publishEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void deleteEvent() &#123;</div><div class="line">		//로직</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">@Component</div><div class="line">public class AppRunner implemets ApplicationRunner &#123;</div><div class="line">	@Autowired</div><div class="line">	EventService eventService;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(.....)&#123;</div><div class="line">		eventService.createEvent();</div><div class="line">		eventService.publishEvent();</div><div class="line">		eventService.deleteEvent();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>위와같이 클래스가 있을 때     void createEvent(); / void publishEvent(); 두메소드의 내부 동작시간을 확인하고 싶을떄 어떻게 해야할까</code><br>SimpleEventServeice 내부에 currentTime 와 endTime를 빼는 로직을 추가할 순 있지만 프록시로 구현가능하다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@Primary	//EventService를 여러곳에서 impl했을 때 활용하는것이었다</div><div class="line">@Service</div><div class="line">public class ProxySimpleEvenService implements EventService &#123;</div><div class="line"></div><div class="line">	@Autowired</div><div class="line">	SimpleEventService simpleEventService;	//EventService simpleEventService; 도 가능</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void createEvent() &#123;</div><div class="line">		long begin = System.currentTimeMilliis();</div><div class="line">		simpleEventService.createEvent();</div><div class="line">		print(System.currentTimeMills()-begin);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void publishEvent() &#123;</div><div class="line">		long begin = System.currentTimeMilliis();</div><div class="line">		simpleEventService.publishEvent();</div><div class="line">		print(System.currentTimeMills()-begin);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void deleteEvent() &#123;</div><div class="line">		simpleEventService.deleteEvent();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위와같이 할경우 프록시 기반으로 구현가능하다.<br>하지만 위의경우 중복코드 추가, 해당 클래스를 만드는 비용이 든다. 또한 해당기능(타임을 재는것)을 다른곳에도 추가해야 한다면 모든 클래스에 프록시를 만들고 중복 코드를 추가해야되나????</p>
<p><code>위의 문제점을 해결한것이 스프링AOP</code><br>동적으로 프록시 객체를 생성하는 방법이다. 이는 스프링 IoC컨테이너가제공하는 기반 시설과 다이나믹 프록시를 사용하여 문제를 해결함</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;프록시-기반-AOP&quot;&gt;&lt;a href=&quot;#프록시-기반-AOP&quot; class=&quot;headerlink&quot; title=&quot;프록시 기반 AOP&quot;&gt;&lt;/a&gt;프록시 기반 AOP&lt;/h3&gt;&lt;p&gt;스프링 AOP: 프록시 기반 AOP&lt;br&gt;스프링 AOP 특징&lt;br&gt; 
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>15.스프링 AOP</title>
    <link href="http://KKimSangHeon.github.io/2020/02/03/spring-1/"/>
    <id>http://KKimSangHeon.github.io/2020/02/03/spring-1/</id>
    <published>2020-02-03T12:21:26.000Z</published>
    <updated>2020-02-04T11:33:45.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="스프링-AOP"><a href="#스프링-AOP" class="headerlink" title="스프링 AOP"></a>스프링 AOP</h3><p>AOP의 구현체를 제공하며 AspectJ와 연동하여 사용할 수 있으며 스프링 내부적으로 구현한 Spring AOP를 사용할 수 있음. 이를 기반으로 다양한 기능이 제공되고있다.</p>
<p><code>AOP?</code><br>흩어진 Aspect를 모듈화 하는 프로그래밍 기법이다. OOP와 서로 보완하는 관계이다. 즉 OOP를 더 잘할 수 있게 도와줌</p>
<p>AOP는 Aspect로 흩어져 있는것을 모은다. 모을 때는 관심별로 각각 독립적으로 만든다.<br>즉 해야할 일과 어디어디에 적용해야 할지 묶어둔것!</p>
<h3 id="AOP의-주요개념"><a href="#AOP의-주요개념" class="headerlink" title="AOP의 주요개념"></a>AOP의 주요개념</h3><p>Aspect : 공통적인것을 꺼내서 모듈화 한것.<br>Target: 적용이 되는 대상<br>Advice : 해야할 일<br>Joint Point : 메서드 실행시점. 즉 생성자 호출하기 직전, 생성자 호출했을때, 필드에 접근하기전, 필드에서 값을 가져갔을 때 등 여러가지의 합류접이 있다.<br>Pointcut : “A라는 클래스의 B라는 메소드를 호출할 때 만 해당 어디바이스를 적용할 것이다”라는것으로 즉 어디에 적용해야 하는지.</p>
<img src="/2020/02/03/spring-1/spring1.PNG" alt="AOP" title="AOP">
<h3 id="AOP-구현체"><a href="#AOP-구현체" class="headerlink" title="AOP 구현체"></a>AOP 구현체</h3><p>자바에는 대표적으로 AspectJ, Spring AOP가 있다.</p>
<h3 id="AOP-적용하는-방법"><a href="#AOP-적용하는-방법" class="headerlink" title="AOP 적용하는 방법"></a>AOP 적용하는 방법</h3><p><code>컴파일타임</code> : 자바파일을 클래스 파일로 만들 때 조작이된 바이트 코드를 생성해 내는것.<br>로드타임, 런타임때 성능 부하가 없지만 이렇게 만들기 위해서는 별도의 컴파일 과정을 거쳐야함</p>
<p><code>로드타임</code> : 컴파일은 아주 순수하게 됐다. 그런데 A라는 클래스를 로딩하는 시점에 뭔가를 끼워서 넣는것(로드타임 위빙이라 함)<br>클래스 로딩시점에 약간의 부하가 발생하며 로드타임 위버를 설정해줘야함. 다양한 문법을 사용할 수 있다(AspectJ)</p>
<p><code>런타임</code> : A라는 빈에  Aspect X를 적용해야 한다는것을 스프링이 알고있다.  A라는 빈을 만들 때 A 타입의 프록시 빈을 만들어서 이 프록시 빈이 A가 갖고있는 메소드를 호출하기 직전에 Aspect X의 요소를 호출한 후 A것을 호출한다.<br>스프링 AOP를 사용하는 방법으로 빈을 만드는 초기성능이 추가된다. 하지만 최초의 빈을 만들때만 비용이 들어가므로 로드타임 위빙이랑 비용이 비슷할것!</p>
<p>런타임이 가장 합리적이고 현실적이다. 경우에 따라 AspectJ가 제공하는 jopoint를 사용해야한다면 로드타임을 사용해야 한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;스프링-AOP&quot;&gt;&lt;a href=&quot;#스프링-AOP&quot; class=&quot;headerlink&quot; title=&quot;스프링 AOP&quot;&gt;&lt;/a&gt;스프링 AOP&lt;/h3&gt;&lt;p&gt;AOP의 구현체를 제공하며 AspectJ와 연동하여 사용할 수 있으며 스프링 내부적으로 구
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>14.SpEL</title>
    <link href="http://KKimSangHeon.github.io/2020/02/03/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/02/03/spring/</id>
    <published>2020-02-03T11:35:26.000Z</published>
    <updated>2020-02-03T11:35:47.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h3><p>객체 그래프를 조회하고 조작하는 기능을 말한다.<br>Unified EL과 비슷하지만, 메소드 호출을 지원하며, 문자열 템플릿 기능도 제공한다.<br>스프링 3.0 부터 지원.</p>
<p>JSP에서 봤던 Unified EL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:if test=&quot;$&#123;sessionScope.cart.numberOfItems &gt; 0&#125;&quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/c:if&gt;</div></pre></td></tr></table></figure></p>
<h3 id="어떻게-사용하나"><a href="#어떻게-사용하나" class="headerlink" title="어떻게 사용하나"></a>어떻게 사용하나</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;1+1&#125;&quot;)</div><div class="line">	int value;</div><div class="line"></div><div class="line">	@Value(&quot;#&#123;&apos;hello&apos; +&apos;world&apos;&#125;&quot;)</div><div class="line">	String greeting;</div><div class="line"></div><div class="line">	@Value (&quot;#&#123;1 eq1&#125;&quot;)</div><div class="line">	boolean trueOrFalse;</div><div class="line"></div><div class="line">	@Value(&quot;$&#123;my.value&#125;&quot;)</div><div class="line">	int myValue</div><div class="line"></div><div class="line">	//표현식 안에 프로퍼티를 넣음</div><div class="line">	// 프로퍼티 안에 표현식은 넣을 수 없다.</div><div class="line">	//my.value는 application.properties에 정의되어있다.</div><div class="line">	@Value(&quot;#&#123;$&#123;my.value&#125; eq 100&#125;&quot;)</div><div class="line">	int isMyValue100;</div><div class="line"></div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run() throws Exception &#123;</div><div class="line">		print(value);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#은 표현식을 참고하는 방법 $는 프로퍼티를 참고하는 방법.</code></p>
<p><code>#{“표현식&quot;}</code><br><code>${“프로퍼티&quot;}</code></p>
<p>아래와 같이 빈도 가능하다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@Component</div><div class="line">public class Sample &#123;</div><div class="line">	private intdata = 200;</div><div class="line"></div><div class="line">	public int getData() &#123;</div><div class="line">		return data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setData(int data) &#123;</div><div class="line">		this.data = data;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public AppRunner implements ApplicationRunner &#123;</div><div class="line">	@Value(&quot;#&#123;sample.data&#125;&quot;)</div><div class="line">	int sampleData;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref" target="_blank" rel="external">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions-language-ref</a></p>
<h3 id="실제로-어디서-쓰나"><a href="#실제로-어디서-쓰나" class="headerlink" title="실제로 어디서 쓰나?"></a>실제로 어디서 쓰나?</h3><p>@Value 애노테이션<br>@ConditionalOnExpression 애노테이션 : 선별적으로 빈 등록<br>스프링 시큐리티</p>
<ul>
<li>메소드 시큐리티, @PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter<br>@Query</li>
</ul>
<p>ExpressionParser으로 직접 활용할 수도 있다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public AppRunner implements ApplicationRunner &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run() throws Exception &#123;</div><div class="line"></div><div class="line">		ExpressionParser parser = new SpelExpressionParser();</div><div class="line">		Expression expression = parser.parseExpression(&quot;2+100&quot;);</div><div class="line">		Integer value = expression.getValue(Integer.class);		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpEL&quot;&gt;&lt;a href=&quot;#SpEL&quot; class=&quot;headerlink&quot; title=&quot;SpEL&quot;&gt;&lt;/a&gt;SpEL&lt;/h3&gt;&lt;p&gt;객체 그래프를 조회하고 조작하는 기능을 말한다.&lt;br&gt;Unified EL과 비슷하지만, 메소드 호출을 지원하며,
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>20200201 서울미술관</title>
    <link href="http://KKimSangHeon.github.io/2020/02/02/photograph/"/>
    <id>http://KKimSangHeon.github.io/2020/02/02/photograph/</id>
    <published>2020-02-02T10:51:10.000Z</published>
    <updated>2020-02-02T10:57:15.198Z</updated>
    
    <content type="html"><![CDATA[<p>서울미술관 - 보통의 거짓말<br><img src="/2020/02/02/photograph/IMG_3299_1.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3262.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3265.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3265_1.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3266.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3269.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3274.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3277.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3284.jpg" alt="1" title="1"><br><img src="/2020/02/02/photograph/IMG_3285.jpg" alt="1" title="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;서울미술관 - 보통의 거짓말&lt;br&gt;&lt;img src=&quot;/2020/02/02/photograph/IMG_3299_1.jpg&quot; alt=&quot;1&quot; title=&quot;1&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/02/02/photograph/IMG_3262.jpg&quot; 
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/categories/About-Me/Photograph/"/>
    
    
      <category term="Photograph" scheme="http://KKimSangHeon.github.io/tags/Photograph/"/>
    
  </entry>
  
  <entry>
    <title>로그를 정제해보자</title>
    <link href="http://KKimSangHeon.github.io/2020/01/30/log/"/>
    <id>http://KKimSangHeon.github.io/2020/01/30/log/</id>
    <published>2020-01-30T12:12:30.000Z</published>
    <updated>2020-01-30T12:16:37.485Z</updated>
    
    <content type="html"><![CDATA[<p>사용하는 시스템에는 로그가 너무 많이 쌓여서 vi로 켜면 쉘이 꺼져버린다…<br>다음 방법을 사용하여 극복해보자</p>
<h3 id="뒷-부분-다른-파일로-추출"><a href="#뒷-부분-다른-파일로-추출" class="headerlink" title="뒷 부분 다른 파일로 추출"></a>뒷 부분 다른 파일로 추출</h3><p>tail -n 10000 server.log &gt; test.log<br>10000줄을 test.log로 생성</p>
<h3 id="뒷-부분-3줄만-보기"><a href="#뒷-부분-3줄만-보기" class="headerlink" title="뒷 부분 3줄만 보기"></a>뒷 부분 3줄만 보기</h3><p>tail -n 3 test.txt</p>
<h3 id="특정부분-찾고-그-이후-3줄-파일로-추출"><a href="#특정부분-찾고-그-이후-3줄-파일로-추출" class="headerlink" title="특정부분 찾고 그 이후 3줄 파일로 추출"></a>특정부분 찾고 그 이후 3줄 파일로 추출</h3><p>grep -A 3 “john” phonebook.txt<br>john 찾고 뒤에세줄출력<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;사용하는 시스템에는 로그가 너무 많이 쌓여서 vi로 켜면 쉘이 꺼져버린다…&lt;br&gt;다음 방법을 사용하여 극복해보자&lt;/p&gt;
&lt;h3 id=&quot;뒷-부분-다른-파일로-추출&quot;&gt;&lt;a href=&quot;#뒷-부분-다른-파일로-추출&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="OS" scheme="http://KKimSangHeon.github.io/categories/OS/"/>
    
      <category term="Linux" scheme="http://KKimSangHeon.github.io/categories/OS/Linux/"/>
    
    
      <category term="centos" scheme="http://KKimSangHeon.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>13.데이터 바인딩 추상화</title>
    <link href="http://KKimSangHeon.github.io/2020/01/30/spring/"/>
    <id>http://KKimSangHeon.github.io/2020/01/30/spring/</id>
    <published>2020-01-30T12:08:56.000Z</published>
    <updated>2020-01-30T12:10:46.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="데이터-바인딩-추상화-Converter와Formatter"><a href="#데이터-바인딩-추상화-Converter와Formatter" class="headerlink" title="데이터 바인딩 추상화: Converter와Formatter"></a>데이터 바인딩 추상화: Converter와Formatter</h3><p>이전강의에서 봤던 PropertyEditor의 단점으로 인해 Converter와Formatter가 생겨났다</p>
<h3 id="PropertyEditor의-단점"><a href="#PropertyEditor의-단점" class="headerlink" title="PropertyEditor의 단점"></a>PropertyEditor의 단점</h3><ol>
<li>쓰레드 세이프하지 않음</li>
<li>무조건 스트링과 오브젝트의 관계이다. 즉 스트링을 오브젝트로 하거나 오브젝트를 스트링으로 변환하거나 밖에 못함.<br>getAsText() 메소드는 오브젝트를 문자열로<br>setAsText() 메소드는 문자열을 오브젝트로</li>
</ol>
<p>`바인딩은 조금 더 제너럴 해야한다.-&gt; Converter의 등장’</p>
<h3 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h3><p>아래는 앞에서 봤던 EventEditor 와 같은역할을 한다. 그리고 상태정보가 없기때문에 빈으로 등록하여 사용이 가능하다. ConverterRegistry에 등록하여 사용가능하다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class EventCoverter &#123;</div><div class="line"></div><div class="line">	@Component</div><div class="line">	public static StringToEventConverter implements Converter&lt;String, Event&gt; &#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public Event convert(String source) &#123;</div><div class="line">			return new Event(Integer.parseInt(source));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Component</div><div class="line">	public static class EventToStringConverter implements Converter&lt;Event, String&gt; &#123;</div><div class="line"></div><div class="line">		@Override</div><div class="line">		public String convert(Event source) &#123;</div><div class="line">			return source.getId().toString();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Component를 통해 빈으로 등록하지 않고 사용하려면. 아래를 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class WebConfig implements WebMvcConfigurer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void addFormatters(FormatterRegistry registry) &#123;</div><div class="line">		//ConverterRegistry에 등록하여 사용해야한다고 했지만 ConverterRegistry는 FormatterRegistry 를</div><div class="line">		//상속받기 때문에 FormatterRegistry로도 사용가능</div><div class="line">		registry.addConverter(new EventConverter.StringToEventConverter());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@RestController</div><div class="line">public class EventController &#123;</div><div class="line">	@GetMapping(&quot;/event/&#123;event&#125;&quot;)</div><div class="line">	public String getEvent(@PathVariable Event event) &#123;</div><div class="line">		print(event);</div><div class="line">		return event.getId().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h3><p>PropertyEditor와 구현방식은 유사하다 implements 후 메소드 하나는 String 하나는 객체로 반환하여 사용.<br>얘 또한 마찬가지로 빈으로 등록되고 다른 빈을 주입받을 수 있다,</p>
<p>@Component<br>public class EventFormatter implements Formatter<event> {</event></p>
<pre><code>@Autowired
MessageSource messageSource;

@Override
public Event parse(String text, Locale locale) throws ParseException {
    Event event = new Event();
    int id = Integer.parseInt(text);
    event.setId(id);
    return event;
}

@Override
public String print(Event object, Locale locale) {
    return object.getId().toString();
}
</code></pre><p>}</p>
<p>@Component를 통해 빈으로 등록하지 않고 사용하려면. 아래를 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class WebConfig implements WebMvcConfigurer &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void addFormatters(FormatterRegistry registry) &#123;</div><div class="line">		registry.addFormatter(new EventFormatter());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h3><p>이전까지  DataBinder(PropertyEditor이 상속)를 사용하여 데이터 변환을 했다면 이번챕터부터는 ConversionService를 사용하고 있는것이다.</p>
<p>addFormatters 메소드를 통해 등록되는 빈들은 Converter와Formatter들은 ConversionService에 등록되는 것이고 이를통해 실제 변환하는 작업을 한것.</p>
<p>ConversionService는 DefaultFormattingConversionService로 생성되는 경우가 많은데 DefaultFormattingConversionService는 FormatterRegistry/ConversionService 두 가지의 역할을 한다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">ConversionService conversionService ;</div><div class="line"></div><div class="line">...</div><div class="line">conversionService. xxxxx를 활용하여 등록된 빈들을 활용가능</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>위와같이 사용가능하다.</p>
<p>하지만 스프링 부트에서는 addFormatters를 사용하지 않더라도 자동으로 Converter와Formatter을 conversionService 빈으로 등록해준다! (@Component 어노테이션은 붙여야함)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;데이터-바인딩-추상화-Converter와Formatter&quot;&gt;&lt;a href=&quot;#데이터-바인딩-추상화-Converter와Formatter&quot; class=&quot;headerlink&quot; title=&quot;데이터 바인딩 추상화: Converter와Formatt
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/categories/Web-App/Spring/"/>
    
    
      <category term="Spring" scheme="http://KKimSangHeon.github.io/tags/Spring/"/>
    
  </entry>
  
</feed>
