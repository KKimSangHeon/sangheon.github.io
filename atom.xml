<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kim Sang Heon&#39;s Bolg</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://KKimSangHeon.github.io/"/>
  <updated>2018-09-18T08:19:51.989Z</updated>
  <id>http://KKimSangHeon.github.io/</id>
  
  <author>
    <name>Kim Sang Heon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>제주도 여행</title>
    <link href="http://KKimSangHeon.github.io/2018/09/18/travel/"/>
    <id>http://KKimSangHeon.github.io/2018/09/18/travel/</id>
    <published>2018-09-18T08:18:54.000Z</published>
    <updated>2018-09-18T08:19:51.989Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="Travel" scheme="http://KKimSangHeon.github.io/categories/About-Me/Travel/"/>
    
    
      <category term="여행" scheme="http://KKimSangHeon.github.io/tags/%EC%97%AC%ED%96%89/"/>
    
  </entry>
  
  <entry>
    <title>Singleton 디자인패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/11/pattern2/"/>
    <id>http://KKimSangHeon.github.io/2018/09/11/pattern2/</id>
    <published>2018-09-11T07:42:21.000Z</published>
    <updated>2018-09-14T10:11:46.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="싱글톤패턴"><a href="#싱글톤패턴" class="headerlink" title="싱글톤패턴"></a>싱글톤패턴</h3><p>클래스에 대한 오직 하나의 인스턴스 만이 허용되는 패턴이다.<br>이를위해 생성자를 private로 선언하여 외부에서 인스턴스를 생성하는것을 방지한다.<br>싱글톤 패턴을 사용할땐 다중 스레드에 주의해야 한다.</p>
<p>스레드에 안전한 코드는 다음과 같다.</p>
<figure class="highlight java"><figcaption><span>Singleton</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="keyword">static</span> Singleton* getInstance() &#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="number">0</span>) &#123;</div><div class="line">            Lock lock;</div><div class="line">            <span class="keyword">if</span> (instance == <span class="number">0</span> )&#123;</div><div class="line">              instance = <span class="keyword">new</span> Singleton;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>:</div><div class="line">      Singleton() &#123;&#125;</div><div class="line">      <span class="keyword">static</span> Singleton* instance;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>클래스가 적재되는순간 즉 더 빠르게 인스턴스화를 하기 위해서는 아래와 같이 코드를 작성하면 된다. 이 또한 스레드에 주의해서 작성해야 한다는것을 잊지말자.</p>
<figure class="highlight java"><figcaption><span>Singleton</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">  Singleton() &#123;&#125;</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;싱글톤패턴&quot;&gt;&lt;a href=&quot;#싱글톤패턴&quot; class=&quot;headerlink&quot; title=&quot;싱글톤패턴&quot;&gt;&lt;/a&gt;싱글톤패턴&lt;/h3&gt;&lt;p&gt;클래스에 대한 오직 하나의 인스턴스 만이 허용되는 패턴이다.&lt;br&gt;이를위해 생성자를 private로 선언
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>디자인패턴</title>
    <link href="http://KKimSangHeon.github.io/2018/09/07/pattern1/"/>
    <id>http://KKimSangHeon.github.io/2018/09/07/pattern1/</id>
    <published>2018-09-07T09:31:43.000Z</published>
    <updated>2018-09-14T10:11:44.377Z</updated>
    
    <content type="html"><![CDATA[<h3 id="디자인패턴"><a href="#디자인패턴" class="headerlink" title="디자인패턴"></a>디자인패턴</h3><p>소프트웨어 설계에서 공통적으로 발생하는 문제를 다루는 보편적이고 반복해서 사용할 수 있는 방법. 문제를 해결하기 위한 설명이나 템플릿으로 보면 된다.</p>
<h3 id="디자인패턴을-사용할-때-장점"><a href="#디자인패턴을-사용할-때-장점" class="headerlink" title="디자인패턴을 사용할 때 장점"></a>디자인패턴을 사용할 때 장점</h3><p>개발 절차의 속도를 높일 수 있다.<br>재사용 가능한 구조적 개념으로 구성되어 있기 때문에 믿을 수 있다.</p>
<h3 id="디자인-패턴을-사용하기-위한-조건"><a href="#디자인-패턴을-사용하기-위한-조건" class="headerlink" title="디자인 패턴을 사용하기 위한 조건"></a>디자인 패턴을 사용하기 위한 조건</h3><ol>
<li>주어진 문제를 명확, 세밀하게 이해한다.</li>
<li>디자인 패턴이 문제에 일치하는지 다시한번 확인해본다.</li>
<li>다른 패턴들 사이에서 관계성을 찾고 변경해야할 사항을 결정한다.</li>
</ol>
<h3 id="패턴-여러가지의-디자인-패턴은-3가지의-범주로-분류된다"><a href="#패턴-여러가지의-디자인-패턴은-3가지의-범주로-분류된다" class="headerlink" title="패턴 여러가지의 디자인 패턴은 3가지의 범주로 분류된다."></a>패턴 여러가지의 디자인 패턴은 3가지의 범주로 분류된다.</h3><p>범주는 아래와 같다.</p>
<ol>
<li><p>생성패턴 : 객체생성 메커니즘을 다룬다. 객체의 생성을 다루는 객체 생성 패턴, 클래스 인스턴스 생성을 다루는 클래스 생성 패턴으로 분류된다.<br>ex: Factory, Abstract Factory, Builder, Protype, Singleton 패턴.</p>
</li>
<li><p>구조패턴: 객체들과 클래스들이 커다란 구조를 형성하기 위해 결합될 수 있는 방법을 설명한다. 클래스패턴은 상속의 도움을 받아 추상화를 설명하고 어떻게 프로그램에 더 유용한 인터페이스를 제공할 수 있는지 설명하는것이고, 객체 패턴은 객체들이 크고 더 복잡한 구조를 형성하기 위해 연결되고 구성되는지 설명한다.<br>ex: Adapter, Bridge, Composite, Decorator, Flyweight, Proxy 패턴</p>
</li>
<li><p>행위패턴: 객체 사이의 상호 작용과 관련된 것들이다. 이들은 객체간에 공통의 통신 패턴을 파악하고 이러한 패턴을 실현한다.<br>ex: Chain of Responsibility, Command, Interpreter, iterator, Mediator, Memento, Observer, State, Strategy,Template, Vistor 패턴</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;디자인패턴&quot;&gt;&lt;a href=&quot;#디자인패턴&quot; class=&quot;headerlink&quot; title=&quot;디자인패턴&quot;&gt;&lt;/a&gt;디자인패턴&lt;/h3&gt;&lt;p&gt;소프트웨어 설계에서 공통적으로 발생하는 문제를 다루는 보편적이고 반복해서 사용할 수 있는 방법. 문제를 
    
    </summary>
    
      <category term="CS" scheme="http://KKimSangHeon.github.io/categories/CS/"/>
    
      <category term="Design Pattern" scheme="http://KKimSangHeon.github.io/categories/CS/Design-Pattern/"/>
    
    
  </entry>
  
  <entry>
    <title>중첩 클래스, 중첩 인터페이스</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java4/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java4/</id>
    <published>2018-09-05T07:08:43.000Z</published>
    <updated>2018-09-05T09:04:56.154Z</updated>
    
    <content type="html"><![CDATA[<p>한 클래스가 여러 클래스와 관계를 갖을 땐 독립적으로 선언하는것이 좋다. 하지만 특정 클래스와 관계를 맺을 땐 내부에 선언하여 불필요한 관계 클래스를 감추고 코드의 복잡성을 감출 수 있게된다.</p>
<h3 id="중첩클래스"><a href="#중첩클래스" class="headerlink" title="중첩클래스"></a>중첩클래스</h3><p>중첩클래스는 크게 두가지로 나뉘는데 다음과 같다.<br>멤버클래스 - 클래스의 멤버로서 선언되는 중첩클래스. 멤버클래스는 static 여부에 따라 인스턴스 멤버클래스, 정적 멤버클래스로 나뉜다. 클래스나 객체가 사용중이면 언제나 재사용 가능.<br>로컬클래스 - 메소드 내부에서 선언되는 중첩클래스. 메소드 실행 시에만 사용되고 종료되면 없어진다.</p>
<h4 id="다음은-인스턴스-멤버-클래스-사용예시이다"><a href="#다음은-인스턴스-멤버-클래스-사용예시이다" class="headerlink" title="다음은 인스턴스 멤버 클래스 사용예시이다."></a>다음은 인스턴스 멤버 클래스 사용예시이다.</h4><figure class="highlight java"><figcaption><span>NestedClass</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</div><div class="line">    B() &#123; &#125;  </div><div class="line">    <span class="keyword">int</span> filed;</div><div class="line">    <span class="comment">//static int filed2;  //static는 안되는데 그 이유를 생각해보자</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mehtod1</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="comment">//static void method2()&#123;&#125; //역시 static은 안된다.</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 사용방벙</span></div><div class="line">A a = <span class="keyword">new</span> A();</div><div class="line">A.B b = a.new B();</div><div class="line">b.field1 = <span class="number">3</span>;</div><div class="line">b.method1();</div></pre></td></tr></table></figure>
<h4 id="다음은-인스턴스-정적-멤버-클래스-사용예시이다"><a href="#다음은-인스턴스-정적-멤버-클래스-사용예시이다" class="headerlink" title="다음은 인스턴스 정적 멤버 클래스 사용예시이다."></a>다음은 인스턴스 정적 멤버 클래스 사용예시이다.</h4><p>static변수에 대한 이해가 필요하다.<br><figure class="highlight java"><figcaption><span>NestedClass</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</div><div class="line">    B() &#123; &#125;  </div><div class="line">    <span class="keyword">int</span> filed;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> filed2;  <span class="comment">//static 가능</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mehtod1</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//static 가능</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">A.C c = <span class="keyword">new</span> A.C();</div><div class="line">c.file1 = <span class="number">3</span>;</div><div class="line">c.method1();</div><div class="line">A.C.filed2 = <span class="number">3</span>;</div><div class="line">A.C.method2();</div></pre></td></tr></table></figure></p>
<h4 id="다음은-로컬-클래스-사용예시이다"><a href="#다음은-로컬-클래스-사용예시이다" class="headerlink" title="다음은 로컬 클래스 사용예시이다."></a>다음은 로컬 클래스 사용예시이다.</h4><p>주로 비동기 처리를 위해 스레드 객체를 만들 때 사용한다.<br><figure class="highlight java"><figcaption><span>NestedClass</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</div><div class="line">    D() &#123;&#125;</div><div class="line">    <span class="keyword">int</span> filed1;</div><div class="line">    <span class="comment">//static int filed2; //static 안된다.</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="comment">//static void method2() &#123;&#125;  //static 안된다.</span></div><div class="line"></div><div class="line">  &#125;</div><div class="line">  D d = <span class="keyword">new</span> D();</div><div class="line">  d.field1 = <span class="number">3</span>;</div><div class="line">  d.method1();</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;한 클래스가 여러 클래스와 관계를 갖을 땐 독립적으로 선언하는것이 좋다. 하지만 특정 클래스와 관계를 맺을 땐 내부에 선언하여 불필요한 관계 클래스를 감추고 코드의 복잡성을 감출 수 있게된다.&lt;/p&gt;
&lt;h3 id=&quot;중첩클래스&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>자바8</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java3/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java3/</id>
    <published>2018-09-04T22:49:23.000Z</published>
    <updated>2018-09-04T23:25:52.655Z</updated>
    
    <content type="html"><![CDATA[<p>자바 개발자 면접을 보며 듣는 질문이 있다.. 자바8의 특징을 아시나요? 자바8에서 추가된 기능은요? 말씀하신 기능에 대해 좀더 자세히 설명해주세요. 그 외적인 부분은 없을까요? 등등 꼬리에 꼬리를 물다보면 항상 바닥을 드러냈던것 같다.<br>사실 자바를 공부하면서 딱히 버전에 대해 신경쓰지 않았던터라 많이 당황스러웠던 질문이었던것 같다.<br>기회가 되면 정리해야지 했는데 나와 비슷한 고민을 했던 분이 계셔서 링크를 남겨놓는다.<br><a href="https://johanneslee.github.io/articles/page7/" target="_blank" rel="external">https://johanneslee.github.io/articles/page7/</a></p>
<p><a href="http://blog.eomdev.com/java/2016/03/30/default-method.html" target="_blank" rel="external">http://blog.eomdev.com/java/2016/03/30/default-method.html</a><br>나 또한 빠른 시일내에 공부해서 게시할 수 있도록 해야겠다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;자바 개발자 면접을 보며 듣는 질문이 있다.. 자바8의 특징을 아시나요? 자바8에서 추가된 기능은요? 말씀하신 기능에 대해 좀더 자세히 설명해주세요. 그 외적인 부분은 없을까요? 등등 꼬리에 꼬리를 물다보면 항상 바닥을 드러냈던것 같다.&lt;br&gt;사
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>인터페이스의 디폴트 메소드</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java2/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java2/</id>
    <published>2018-09-04T22:43:01.000Z</published>
    <updated>2018-09-05T06:48:04.679Z</updated>
    
    <content type="html"><![CDATA[<p>인터페이스의 디폴트 메소드는 자바8부터 나왔다고 한다.. 알아두자.<br>선언은 인터페이스에 하고 사용은 구현객체에서 한다.</p>
<h3 id="왜-이걸-만들었을까"><a href="#왜-이걸-만들었을까" class="headerlink" title="왜 이걸 만들었을까?"></a>왜 이걸 만들었을까?</h3><p>기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서</p>
<h3 id="특징"><a href="#특징" class="headerlink" title="특징?"></a>특징?</h3><p>디폴트 메소드는 정의된 형태이므로 implemets했을 때 해당 메소드의 구현을 강제하지 않는다.</p>
<p>디폴트 메소드는 다음과 같이 정의할 수 있다.<br><figure class="highlight java"><figcaption><span>default</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</div><div class="line">      System.out.println(<span class="string">"method2"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//디폴트 메소드</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="디폴트-메소드를-갖는-인터페이스를-인터페이스가-상속했을-때"><a href="#디폴트-메소드를-갖는-인터페이스를-인터페이스가-상속했을-때" class="headerlink" title="디폴트 메소드를 갖는 인터페이스를 인터페이스가 상속했을 때?"></a>디폴트 메소드를 갖는 인터페이스를 인터페이스가 상속했을 때?</h3><p>디폴트 메소드를 처리하기 위해 다음 3가지중 선택가능</p>
<ul>
<li>디폴트 메소드를 단순히 상속만 받는다.</li>
<li>디폴트 메소드를 오버라이딩 해서 내용 변경</li>
<li>디폴트 메소드를 추상메소드로 재선언</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;인터페이스의 디폴트 메소드는 자바8부터 나왔다고 한다.. 알아두자.&lt;br&gt;선언은 인터페이스에 하고 사용은 구현객체에서 한다.&lt;/p&gt;
&lt;h3 id=&quot;왜-이걸-만들었을까&quot;&gt;&lt;a href=&quot;#왜-이걸-만들었을까&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>어노테이션</title>
    <link href="http://KKimSangHeon.github.io/2018/09/05/java/"/>
    <id>http://KKimSangHeon.github.io/2018/09/05/java/</id>
    <published>2018-09-04T21:25:09.000Z</published>
    <updated>2018-09-04T22:39:16.415Z</updated>
    
    <content type="html"><![CDATA[<h3 id="어노테이션"><a href="#어노테이션" class="headerlink" title="어노테이션"></a>어노테이션</h3><p>어노테이션은 컴파일 과정과 실행 과정에서 코드를 어떻게 컴파일하고 처리할 것인지를 알려주는 정보이다.<br>@가 붙는 형태로 정의된다.</p>
<p>어노테이션은 다음의 용도로 사용된다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">컴파일러에게 문법에러 체크 ex(@Override)</div><div class="line">개발 툴이 코드를 자동 생성할 수 있도록 정보제공</div><div class="line">실행시 특정기능을 실행하도록 정보제공</div></pre></td></tr></table></figure></p>
<h3 id="어노테이션-정의-및-사용법"><a href="#어노테이션-정의-및-사용법" class="headerlink" title="어노테이션 정의 및 사용법"></a>어노테이션 정의 및 사용법</h3><p>어노테이션 정의는 다음과 같이 할 수 있다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SHAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">feature</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>위에 정의한 어노테이션을 사용하기 위해서는 다음과 같이 사용할 수 있다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SHAnnotation</span>(feature=<span class="string">"개발자"</span>, age=<span class="number">27</span>);</div><div class="line">혹은</div><div class="line"><span class="meta">@SHAnnotation</span>(feature=<span class="string">"개발자"</span>);</div><div class="line"><span class="comment">//아래의 경우 디폴트로 되어있는 age값을 세팅하지 않았다.</span></div></pre></td></tr></table></figure></p>
<p>어노테이션을 적용할 수 있는 대상은 java.lang.annotation.ElementType에 정의 되어있다.<br>해당 열거형을 보면 아래와 같이 다양하게 존재한다.<br>즉 어노테이션을 적용할 수 있는 대상은 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType TYPE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType FIELD;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType METHOD;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType PARAMETER;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType CONSTRUCTOR;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType LOCAL_VARIABLE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType ANNOTATION_TYPE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType PACKAGE;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType TYPE_PARAMETER;</div><div class="line"></div><div class="line">// Field descriptor #37 Ljava/lang/annotation/ElementType;</div><div class="line">public static final enum java.lang.annotation.ElementType TYPE_USE;</div></pre></td></tr></table></figure></p>
<p>어노테이션이 적용될 대상을 지정할 땐 @Target를 활용한다.</p>
<figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SHAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">feature</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 적용 대상을 TYPE(클래스, 인터페이스, 열거타입), FILED로 설정하였다.</span></div></pre></td></tr></table></figure>
<p>그럼 아래와 같이 어노테이션 적용이 가능해진다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SHAnnotation</span>(feature=<span class="string">"개발자"</span>, age=<span class="number">27</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@SHAnnotation</span>(feature=<span class="string">"디자이너"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"메소드1"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@SHAnnotation</span>(feature=<span class="string">"기획자"</span>, age=<span class="number">30</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"메소드2"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="어노테이션-유지-정책"><a href="#어노테이션-유지-정책" class="headerlink" title="어노테이션 유지 정책"></a>어노테이션 유지 정책</h3><p>어노테이션은 용도에 따라 어느 범위까지 유지할 것인지 지정 가능하다. 세가지로 나뉘는데 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SOURCE - 소스상에서만 유지</div><div class="line">CLASS - 바이트 코드 까지 유지</div><div class="line">RUNTIME - 바이트 코드까지 유지하며 리플렉션을 이용해 런타임 시 어노테이션 정보를 얻을 수 있다.</div></pre></td></tr></table></figure></p>
<h4 id="리플렉션"><a href="#리플렉션" class="headerlink" title="리플렉션?"></a>리플렉션?</h4><p>위에 리플렉션에 대해 설명하자면 런타임 시에 클래스의 메타 정보를 얻는 기능을 의미한다. 클래스의 필드, 생성자, 메소드, 적용된 어노테이션 등을 런타임 시에 알아낼 수 있다.</p>
<p>다시 돌아와서 어노테이션의 유지는 @Retention으로 지정할 수 있다. 대부분 어노테이션은 런타임시에 유지되도록 하는경우가 많다.<br>다음은 어노테이션이 런타임시에 유지되도록 하는 코드이다.<br><figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.FIELD, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SHAnnotation &#123;</div><div class="line">	<span class="function">String <span class="title">feature</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p>
<h3 id="런타임-중-어노테이션-정보-사용"><a href="#런타임-중-어노테이션-정보-사용" class="headerlink" title="런타임 중 어노테이션 정보 사용"></a>런타임 중 어노테이션 정보 사용</h3><p>어노테이션을 만들었으면 사용방법 또한 알아야 할 것이다. 이에 대해 자세히 알아보자<br>클래스에 적용된 어노테이션 정보를 얻으려면 Class 클래스를 이용하면 되지만 필드, 생성자, 메소드에 적용된 어노테이션 정보를 얻으려면 Class 클래스의 메소드를 통해 리플렉션 과정이 필요하다. 이 말이 이해가 안되면 코드를 보고 이해하자.</p>
<p>위 까지 모든 과정을 거쳤으면 아래 실습이 문제없을것이다.</p>
<figure class="highlight java"><figcaption><span>Annotation</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintAnnotation</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		SHAnnotation shAnnotation;</div><div class="line"></div><div class="line">		<span class="comment">// 클래스의 어노테이션 정보 가져오기</span></div><div class="line">		shAnnotation = AnnotationTest.class.getAnnotation(SHAnnotation.class);</div><div class="line">		System.out.println(AnnotationTest.class.getName());</div><div class="line">		System.out.println(shAnnotation.feature());</div><div class="line">		System.out.println();</div><div class="line"></div><div class="line">		<span class="comment">// 리플렉션을 통해 선언된 메소드 정보 가져오기</span></div><div class="line">		Method[] declaredMethods = AnnotationTest.class.getDeclaredMethods();</div><div class="line"></div><div class="line">		<span class="keyword">for</span>(Method method:declaredMethods) &#123;</div><div class="line">			<span class="comment">//SHAnnotation 객체 얻기</span></div><div class="line">			shAnnotation = method.getAnnotation(SHAnnotation.class);</div><div class="line"></div><div class="line">			<span class="comment">//어노테이션이 적용되었는지 체크</span></div><div class="line">			<span class="keyword">if</span>(method.isAnnotationPresent(SHAnnotation.class)) &#123;</div><div class="line">				System.out.println(method.getName());</div><div class="line">				System.out.println(shAnnotation.feature());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="comment">//메소드 호출부</span></div><div class="line">				method.invoke(<span class="keyword">new</span> AnnotationTest());</div><div class="line">				System.out.println();				</div><div class="line">			&#125;<span class="keyword">catch</span>(Exception e) &#123;</div><div class="line">				System.out.println(e.getStackTrace());				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;어노테이션&quot;&gt;&lt;a href=&quot;#어노테이션&quot; class=&quot;headerlink&quot; title=&quot;어노테이션&quot;&gt;&lt;/a&gt;어노테이션&lt;/h3&gt;&lt;p&gt;어노테이션은 컴파일 과정과 실행 과정에서 코드를 어떻게 컴파일하고 처리할 것인지를 알려주는 정보이다.&lt;b
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/categories/Language/Java/"/>
    
    
      <category term="Java" scheme="http://KKimSangHeon.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>CS 공부</title>
    <link href="http://KKimSangHeon.github.io/2018/09/04/myStudy/"/>
    <id>http://KKimSangHeon.github.io/2018/09/04/myStudy/</id>
    <published>2018-09-04T12:28:35.000Z</published>
    <updated>2018-09-06T15:53:46.514Z</updated>
    
    <content type="html"><![CDATA[<p>대부분의 자료는 <a href="http://www.comcbt.com/cbt/" target="_blank" rel="external">http://www.comcbt.com/cbt/</a> 의 정보처리기사 필기 문제를 참고하여 작성하였다.</p>
<h2 id="데이터베이스"><a href="#데이터베이스" class="headerlink" title="데이터베이스"></a>데이터베이스</h2><p>기수(Cardinality) : 튜플의 수<br>차수(Degree) : 열의 수</p>
<p>색인 순차 파일은 순차 파일과 직접 파일에서 지원하는 편성 방법이 결합된 형태다.<br>색인 순차 접근 방식 (ISAM, Index Sequential Access Method)<br>색인 순차 파일은 기본영역, 색인 영역, 오버플로 영역으로 구성된다.</p>
<h3 id="병행-제어의-목적"><a href="#병행-제어의-목적" class="headerlink" title="병행 제어의 목적"></a>병행 제어의 목적</h3><ul>
<li>데이터베이스의 공류를 최대화한다.</li>
<li>시스템의 활용도를 최대화한다.</li>
<li>사용자에 대한 응답 시간을 최소화한다.</li>
<li>단위 시간당 트랜잭션 처리 건수를 최대화한다.</li>
<li>데이터베이스의 일관성을 유지한다.<br>[해설작성자 : 출처: <a href="http://androphil.tistory.com/335" target="_blank" rel="external">http://androphil.tistory.com/335</a> [소림사의 홍반장!]]</li>
</ul>
<h3 id="중위표기법-gt-후위표기법"><a href="#중위표기법-gt-후위표기법" class="headerlink" title="중위표기법 - &gt; 후위표기법"></a>중위표기법 - &gt; 후위표기법</h3><p>스택에 모든 연산자를 넣으면서 형님이 아우 위에 올라오면 그대로 넣고 그 역이면 모두 pop</p>
<h3 id="후위표기법계산"><a href="#후위표기법계산" class="headerlink" title="후위표기법계산"></a>후위표기법계산</h3><p>연산자의 앞에 등장하는 두개의 숫자가 피연산자이다.<br>차례대로 앞에서부터 계산해 나가자</p>
<h3 id="관계대수"><a href="#관계대수" class="headerlink" title="관계대수"></a>관계대수</h3><p>1)관계대수<br>-관계형 데이터베이스에서 원하는 정보와 그정보를 검색하기 위해서 ‘어떻게’ 유도하는가를 기술하는 절차적언어(절차 중심)<br>-기존의 릴레이션으로부터 새로운 릴레이션을 생성한다<br>-릴레이션을 처리하기 위해 연산자와 연산 규칙을 제공</p>
<p>연산자 종류 : 순수관계연산자 , 일반집합연산자</p>
<h3 id="관계해석"><a href="#관계해석" class="headerlink" title="관계해석"></a>관계해석</h3><p>2)관계해석<br>-원하는 정보가 ‘무엇’이라는 것만 정의하는 비절차적언어(결과 중심)<br>-질의어 이용한 표현<br>-관계해석으로 표현한식은 관계대수로 표현 가능<br>-프레디킷해석에 기반<br>-관계 데이터 모델 제안자인 코드가 관계 데이터베이스에 적용할수 있도록 설계하여 제안<br>종류 : 튜플관계해석 , 도메인관계해석</p>
<p>출처 - <a href="http://unius.tistory.com/entry/관계대수-vs-관계해석" target="_blank" rel="external">http://unius.tistory.com/entry/관계대수-vs-관계해석</a></p>
<h3 id="카르노맵"><a href="#카르노맵" class="headerlink" title="카르노맵"></a>카르노맵</h3><p>사용되는 알파벳이 4개일 때 블로그와 반대로하자<br><a href="https://m.blog.naver.com/PostView.nhn?blogId=leeyunghuk1&amp;logNo=220958708825&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="external">https://m.blog.naver.com/PostView.nhn?blogId=leeyunghuk1&amp;logNo=220958708825&amp;proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F</a></p>
<h3 id="CPU-사용방식"><a href="#CPU-사용방식" class="headerlink" title="CPU 사용방식"></a>CPU 사용방식</h3><p>멀티 프로그래밍: 한대의 CPU로 여러 개의 프로그램을 동시에 처리</p>
<p>분산처리 프로그래밍: 지역적으로 분산된 여러 대 컴퓨터 연결. 작업분담처리<br>일괄처리 프로그래밍: 처리할 데이터를 모았다가 한번에 처리. EX) 급여계산, 공공요금계산<br>리얼타임(실시간처리) 프로그래밍: 처리 데이터 발생시 바로 처리. EX) 좌석예약, 은행업무<br>[해설작성자 : ʕ • ᴥ •メʔ 북극곰사냥꾼]</p>
<h3 id="플립플롭"><a href="#플립플롭" class="headerlink" title="플립플롭"></a>플립플롭</h3><p><a href="http://vision.kongju.ac.kr/DigitalMain/dvlec/textbook/chap08/digital08_2.htm" target="_blank" rel="external">http://vision.kongju.ac.kr/DigitalMain/dvlec/textbook/chap08/digital08_2.htm</a> 참고</p>
<p>JK 는 SR에 11일때 토글만 추가로 지원하는것 같다.</p>
<h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p>4x2 RAM을 이용하여 16x4 메모리를 구성하고자 할 경우에 필요한 4x2 RAM의 수는?<br>8개<br>(4<em>2) </em> 8 = (16*4)<br>[해설작성자 : wg]</p>
<h3 id="문자-데이터-표현"><a href="#문자-데이터-표현" class="headerlink" title="문자 데이터 표현"></a>문자 데이터 표현</h3><p>표준 ASCⅡ 코드는 7비트 사용, 영문 대소문자, 숫자, 문장 부호, 특수 제어 문자 표현<br>3개의 존 비트, 4개의 디지트 비트로 구성</p>
<p>문자데이터의 표현<br>BCD코드 : 6비트 구성(존 2, 숫자 4)<br>ASCII코드 : 7비트 구성(존 3, 숫자 4)<br>EBICIC코드: 8비트 구성(존4, 숫자4)<br>UNICODE: 16비트 구성 - 전 세계의 문자를 표현 할 수 있는 국제 표준 문자 코드<br>[해설작성자 : 석영호]</p>
<h3 id="CPU-스케줄링"><a href="#CPU-스케줄링" class="headerlink" title="CPU 스케줄링"></a>CPU 스케줄링</h3><p><a href="http://raisonde.tistory.com/entry/CPU-스케줄링-알고리즘" target="_blank" rel="external">http://raisonde.tistory.com/entry/CPU-스케줄링-알고리즘</a></p>
<p>비선점형 스케줄링 : FCFS(FIFO), SJF, HRN, 비선점형 우선순위, 기한부<br>SRT 스케줄링은 수행 시간이 가장 작은 작업을 선점형으로 처리합니다.<br>[해설작성자 : 46200]</p>
<h3 id="커널"><a href="#커널" class="headerlink" title="커널"></a>커널</h3><p>커널의 기능은 프로세스 생성, 종료/    기억 장치 할당, 회수/    파일 시스템 관리 등이 있다</p>
<h3 id="유닉스의-i-node"><a href="#유닉스의-i-node" class="headerlink" title="유닉스의 i-node"></a>유닉스의 i-node</h3><p>i-node에 저장되는 정보로는 파일의 소유자에 대한 정보(소유자id, 그룹id), 파일에 대한 정보(크기, 유형, 생성된 시간,링크된 참조 갯수), 시간에 대한 정보(최근 사용시간, 최근 변경시간), 파일 접근 권한, 파일이 저장된 데이터블록 주소가 있다<br>[해설작성자 : 희굴이]</p>
<hr>
<h3 id="삽입정렬"><a href="#삽입정렬" class="headerlink" title="삽입정렬"></a>삽입정렬</h3><p>1~n까지 정렬해 나감 1~2 정렬 12묶음 3정렬 13묶음 4정렬<br>첫 번째 데이터는 정렬이 되어있다고 봄. 그래서 i=0이아닌 1부터 시작.시간복잡도는 O(n^2) 이다.</p>
<h3 id="뷰"><a href="#뷰" class="headerlink" title="뷰"></a>뷰</h3><ol>
<li>가상테이블(물리적으로 구현되는 테이블이 아니다)</li>
<li>시스템 검색은 일반 테이블과 동일</li>
<li>논리적 데이터 독립성을 제공</li>
<li>하나의 뷰를 삭제하면 그 뷰를 기초로 정의된 다른 뷰도 자동으로 삭제</li>
<li>접근 제한을 통한 보안 제공</li>
<li>실제 테이터가 저장되지 않는다.</li>
<li>독자적인 인덱스를 가질 수 없다.</li>
<li>뷰를 이용한 또 다른 뷰의 생성이 가능하다.</li>
<li>필요한 데이터만 뷰로 정의해서 처리하여 사용자의 관리가 용이</li>
<li>뷰는 변경이 안되어 지우고 다시 만들어야 함. &lt;-</li>
</ol>
<h3 id="전위식-후위식"><a href="#전위식-후위식" class="headerlink" title="전위식, 후위식"></a>전위식, 후위식</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-/*A+BCDE 를 후위식으로</div></pre></td></tr></table></figure>
<p>쉬운 변환방법 설명<br>1.연산자에 따라 묶는다. (이거 못하시면 이론 다시 ㄱㄱ)<br>( - ( / ( * A ( + B C ) ) D ) E )</p>
<p>2.연산자를 각 괄호 뒤로 뺀다. (중위식으로 할때는 연산자를 문자 사이로 하시면 됩니다.)<br>( ( ( A ( B C ) + ) * D ) / E ) -</p>
<p>3.괄호를 제거한다.<br>A B C + * D / E -</p>
<p>[해설작성자 : 쀼쀼]</p>
<h3 id="관계대수-관계해석"><a href="#관계대수-관계해석" class="headerlink" title="관계대수, 관계해석"></a>관계대수, 관계해석</h3><p>관계대수 : 절차적 언어 / 순수 관계 연산(select, project, join, division)과 일반 집합연산(union, intersection, difference, cartesian product)<br>관계해석 : 비절차적 언어 / Predicate Calculus에 기반을 둠  / 튜플 및 도메인 관계해석<br>[해설작성자 : sdk]</p>
<p>관계대수(릴레이션 조작을 위한 연산의집합.기술적인특성)의 순수관계 연산자</p>
<ul>
<li>릴레이션을 처리하기 위한 연산의 집합으로 피연산자가 릴레이션이고 결과도 릴레이션이다.</li>
<li>Select : 수평적 부분집합. 시그마를 사용</li>
<li>Project : 수직적 부분집합. 파이를 이용</li>
<li>Join</li>
<li>Division : 두 릴레이션 A,B에 대해 릴레이션의 모든 조건을 만족하는 튜플들을 릴레이션 A에서 분리해 내어 프로젝션 함.</li>
</ul>
<h3 id="스레싱"><a href="#스레싱" class="headerlink" title="스레싱"></a>스레싱</h3><p>스레싱(Thrasing)<br>:하나의 프로세스가 작업 수행 과정에서 수행하는 기억장치 접근에서 지나치게 페이지 폴트가 발생하여 프로세스 수행에 소요되는 시간보다 페이지 이동에 소요되는 시간이 더 커지는 현상..<br>오류율이 클수록 스레싱이 많이 발생한 것이고.<br>스래싱으로 인해 전체 시스템의 성능 및 처리율은 저하된다.<br>다중 프로그래밍의 어느 시점을 넘어서면 스레싱의 빈도가 높아진다.<br>[해설작성자 : 김은희]</p>
<p>[추가해설]<br>Thrashing 현상 방지 방법</p>
<ul>
<li>다중 프로그래밍의 정도를 적정수준으로 유지</li>
<li>부족한 자원 증설</li>
<li>일부 프로세스 중단</li>
<li>페이지 부재 빈도 조절</li>
<li>워킹 셋 유지</li>
<li>적정프레임 수 제공<br>[해설작성자 : 네비자동실행 앱 : haewon.tistory.com]</li>
</ul>
<h3 id="메모리-할당기법"><a href="#메모리-할당기법" class="headerlink" title="메모리 할당기법"></a>메모리 할당기법</h3><p>가변분할 할당 : 다중분할 할당의 한 방법으로, 프로그램을 주기억장치에 적재할 때 함수 등 필요한 크기로 영역을 분할하는 기법<br>고정분할 할당 : 다중분할 할당의 한 방법으로, 주기억장치의 사용자 영역을 일정 수의 고정크기로 분할하여 사용하는 기법<br>오버레이 기법 : 프로그램의 크기가 주기억장치보다 클 때, 프로그램을 여러 조각으로 분할한 후 필요한 조각 순서대로 주기억장치에 적재한다. 실행중 주기억장치의 메모리가 부족하면 이미 존재하는 조각에 새로운 조각을 중첩하여 적재한다.<br>[해설작성자 : ck]</p>
<h3 id="프로세서-상태전이"><a href="#프로세서-상태전이" class="headerlink" title="프로세서 상태전이"></a>프로세서 상태전이</h3><p>① dispatch (준비상태→실행상태)<br>준비 상태의 프로세스들 중에서 우선 순위가 가장 높은 프로세스를 선정하여 CPU를 할당함으로써 실행상태로 전환한다.<br>② timerrunout (실행상태→준비상태)<br>CPU의 지정된 할당 시간을 모두 사용한 프로세스는 다른 프로세스를 위해 다시 준비 상태로 되돌아간다.<br>③ block (실행상태→대기상태)<br>실행중인 프로세스가 입출력 명령을 만나면 인터럽트가 발생하여 입출력 전용 프로세서에게 CPU를 양도하고 자신은 대기 상태로 전환한다.<br>④ wake-up (대기상태→준비상태)<br>입출력 완료를 기다리다가 입출력 완료 신호가 들어오면 대기중인 프로세스는 준비 상태로 전환한다.<br>[해설작성자 : ㅁㄴㅇㄹ]</p>
<h3 id="페이지-교체기법"><a href="#페이지-교체기법" class="headerlink" title="페이지 교체기법"></a>페이지 교체기법</h3><p>&lt;문제 해설&gt;<br>NUR (Not Used Recently)</p>
<ul>
<li>최근 사용하지 않은 페이지 교체</li>
<li>최근 사용여부를 확인하기 위해(시간 오버헤드를 줄이기 위해), 각 페이지마다 참조/변형비트 사용</li>
<li>교체순서 : 00 - 01 - 10 - 11 (0 : 참조비트, 1 : 변형비트)<br>[해설작성자 : 비슷한문제 해설에서 따옴]</li>
</ul>
<p>페이지 교체 기법 - 새 데이터를 주기억장치에 등록할 때<br>공간이 부족할 경우 먼저 있던 데이터를 빼고 넣는 행위를 말함.</p>
<p>FIFO - 제일 오래된 데이터 제거<br>LFU - 가장 적게 사용 되었던 데이터 제거<br>LRU,NUR - ‘최근’ 가장 적게 사용되었던 데이터 제거<br>OPT - 앞으로 가장 적게 사용될 것 같은 데이터를 예측하여 제거(신뢰성 떨어짐)</p>
<h3 id="브룩스-법칙"><a href="#브룩스-법칙" class="headerlink" title="브룩스 법칙"></a>브룩스 법칙</h3><p>브룩스(Brooks)의 법칙 : 소프트웨어 개발 일정이 지연된다고 해서 말기에 새로운 인원을 투입하면 작업 적응 기간과 부작용으로 인해 일정은 더욱 지연된다는 법칙이다.<br>[해설작성자 : strawsoojin]</p>
<h3 id="결합도의-약한-순서"><a href="#결합도의-약한-순서" class="headerlink" title="결합도의 약한 순서"></a>결합도의 약한 순서</h3><p>데이터 -&gt; 스템프 -&gt; 제어 -&gt; 공통 -&gt; 컨텐츠 결합도 순서<br>[해설작성자 : 원동민]</p>
<h3 id="전송제어-문자"><a href="#전송제어-문자" class="headerlink" title="전송제어 문자"></a>전송제어 문자</h3><ol>
<li>SOH(Start Of Heding) : 헤딩 시작</li>
<li>STX(Start of Text) : 본문 시작, 전송할 데이터 그룹의 시작</li>
<li>SYN(Synchronous idle) : 동기 문자</li>
<li>DLE(Data Link Escape) : 데이터 투과성을 위해 삽입(전송 제어 문자와 전송 데이터 구분을 위해 사용)<br>[해설작성자 : 실기도 화이팅!]</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;대부분의 자료는 &lt;a href=&quot;http://www.comcbt.com/cbt/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.comcbt.com/cbt/&lt;/a&gt; 의 정보처리기사 필기 문제를 참고하여 작성하였다.&lt;/
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
    
  </entry>
  
  <entry>
    <title>7.Firebase 호스팅</title>
    <link href="http://KKimSangHeon.github.io/2018/09/04/firebase7/"/>
    <id>http://KKimSangHeon.github.io/2018/09/04/firebase7/</id>
    <published>2018-09-04T10:01:11.000Z</published>
    <updated>2018-09-04T10:12:55.152Z</updated>
    
    <content type="html"><![CDATA[<p>firebase deploy를 입력해 배포를 하자<br><img src="/2018/09/04/firebase7/deploy.PNG" alt="Flow Chart" title="Flow Chart"><br>명령어를 입력하고 성공하면 위와같은 화면이 출력된다.<br>Hosting URL 이라고 표현된 부분을 통해 접속 가능하다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;firebase deploy를 입력해 배포를 하자&lt;br&gt;&lt;img src=&quot;/2018/09/04/firebase7/deploy.PNG&quot; alt=&quot;Flow Chart&quot; title=&quot;Flow Chart&quot;&gt;&lt;br&gt;명령어를 입력하고 성공하면 위와같은 화면
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
  </entry>
  
  <entry>
    <title>6.Firebase DB수정 삭제</title>
    <link href="http://KKimSangHeon.github.io/2018/09/04/firebase6/"/>
    <id>http://KKimSangHeon.github.io/2018/09/04/firebase6/</id>
    <published>2018-09-03T15:54:01.000Z</published>
    <updated>2018-09-04T07:12:47.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DB-수정"><a href="#DB-수정" class="headerlink" title="DB 수정"></a>DB 수정</h3><p>selectedKey라는 전역변수를 만들고 아래의 두 함수를 추가하면 데이터는 수정이 가능하다. 이때 수정하는 부분의 ref함수의 인자에 selectedKey가 삽입된 것을 확인할 수 있다.<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">fn_get_data_one</span><span class="params">(key)</span> </span>&#123;</div><div class="line">    selectedKey = key;</div><div class="line">    var memoRef = database.ref(<span class="string">'memos/'</span> + userInfo.uid + <span class="string">'/'</span> + key).once(<span class="string">'value'</span>).then(function(snapshot)&#123;</div><div class="line">    var txt = $(<span class="string">".textarea"</span>).val(snapshot.val().txt);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">function <span class="title">save_data</span><span class="params">()</span> </span>&#123;</div><div class="line">      var memoRef = database.ref(<span class="string">'memos/'</span> + userInfo.uid);</div><div class="line">      var txt = $(<span class="string">".textarea"</span>).val();</div><div class="line"></div><div class="line">      <span class="comment">// 유효성 검사</span></div><div class="line">      <span class="keyword">if</span> ( txt == <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> ( selectedKey ) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// 전역변수  selectedKey가 있으면 update</span></div><div class="line">         memoRef = database.ref(<span class="string">'memos/'</span> + userInfo.uid + <span class="string">'/'</span> + selectedKey);</div><div class="line">        memoRef.update(&#123;</div><div class="line">          txt : txt,</div><div class="line">          createDate : <span class="keyword">new</span> Date().getTime(),</div><div class="line">          updateDate : <span class="keyword">new</span> Date().getTime(),</div><div class="line">        &#125;)</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">        memoRef.push(&#123;</div><div class="line">          txt : txt,</div><div class="line">          createDate : <span class="keyword">new</span> Date().getTime()</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>title이 문장의 맨윗줄만 나오도록 하기 위해 on_child_added의 title변수에 txt.substr(0, txt.indexOf(‘\n’));을 대입하자<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">on_child_added</span><span class="params">(data)</span></span>&#123;</div><div class="line">      ...</div><div class="line">      var title = txt.substr(<span class="number">0</span>, txt.indexOf(<span class="string">'\n'</span>));</div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이번에는 + 버튼을 눌러 메모를 추가할 수 있도록 확인해보자<br>버튼에 onClick = ‘initMemo();’ 를 추가하고 다음의 함수를 추가하자.<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">initMemo</span><span class="params">()</span> </span>&#123;</div><div class="line">  $(<span class="string">'.textarea'</span>).val(<span class="string">''</span>);</div><div class="line">  selectedKey = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>이제 + 버튼을 누르면 새로운 메모를 입력할 수 있게된다.</p>
<p>이제 데이터가 변경되었을 때 왼쪽 리스트가 변경되도록 해보자<br>get_momo_list 함수에 아래의 코드를 추가하여 변경에 대한 처리를 추가한다.<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">memoRef.on(<span class="string">'child_changed'</span>, function(data)&#123;</div><div class="line">  var key = data.key;</div><div class="line">  var txt = data.val().txt;</div><div class="line">  var title = txt.substr(<span class="number">0</span>, txt.indexOf(<span class="string">'\n'</span>));</div><div class="line">  $(<span class="string">"#"</span>+ key + <span class="string">"&gt; .title"</span>).text(title);</div><div class="line">  $(<span class="string">"#"</span>+ key + <span class="string">"&gt; .txt"</span>).text(txt);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>이제 삭제기능을 구현해보자<br>HTML에 다음을 추가하자<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"&lt;a href=\"#!\" onclick=\"fn_delete_data('"</span>+key+<span class="string">"')\" class=\"secondary-content\"&gt;&lt;i class=\"material-icons\"&gt;grade&lt;/i&gt;&lt;/a&gt;"</span></div></pre></td></tr></table></figure><br>그리고 다음 함수를 추가하여 삭제기능 구현하자</p>
<figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">fn_delete_data</span><span class="params">(key)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!confirm(<span class="string">'삭제하시겠습니까'</span>)) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  var memoRef = database.ref(<span class="string">'memos/'</span> + userInfo.uid + <span class="string">'/'</span> + key);</div><div class="line">  memoRef.remove();</div><div class="line">  $(<span class="string">"#"</span>+key).remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DB-수정&quot;&gt;&lt;a href=&quot;#DB-수정&quot; class=&quot;headerlink&quot; title=&quot;DB 수정&quot;&gt;&lt;/a&gt;DB 수정&lt;/h3&gt;&lt;p&gt;selectedKey라는 전역변수를 만들고 아래의 두 함수를 추가하면 데이터는 수정이 가능하다. 이때 수
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
  </entry>
  
  <entry>
    <title>5.Firebase DB 읽고 쓰기</title>
    <link href="http://KKimSangHeon.github.io/2018/09/03/firebase5/"/>
    <id>http://KKimSangHeon.github.io/2018/09/03/firebase5/</id>
    <published>2018-09-03T13:32:28.000Z</published>
    <updated>2018-09-04T10:10:57.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="포커스가-사라지면-데이터베이스에-input하도록-설정"><a href="#포커스가-사라지면-데이터베이스에-input하도록-설정" class="headerlink" title="포커스가 사라지면 데이터베이스에 input하도록 설정"></a>포커스가 사라지면 데이터베이스에 input하도록 설정</h3><p>아래의 코드를 추가하면 textarea가 포커스를 잃을 때 마다 데이터를 저장하게 된다.<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">save_data</span><span class="params">()</span> </span>&#123;</div><div class="line">      var memoRef = database.ref(<span class="string">'memos/'</span> + userInfo.uid);</div><div class="line">      var txt = $(<span class="string">".textarea"</span>).val();</div><div class="line"></div><div class="line">      <span class="comment">// 유효성 검사</span></div><div class="line">      <span class="keyword">if</span> ( txt == <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      memoRef.push(&#123;</div><div class="line">        txt : txt,</div><div class="line">        createDate : <span class="keyword">new</span> Date().getTime()</div><div class="line">      &#125;)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$(function()&#123;</div><div class="line">    $(<span class="string">".textarea"</span>).blur(function()&#123;</div><div class="line">      save_data();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>그리고 아래의 코드를 추가하면 왼쪽중 하나를 선택하면 textArea에 내용이 출력된다.</p>
<figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">fn_get_data_one</span><span class="params">(key)</span> </span>&#123;</div><div class="line">    var memoRef = database.ref(<span class="string">'memos/'</span> + userInfo.uid + <span class="string">'/'</span> + key).once(<span class="string">'value'</span>).then(function(snapshot)&#123;</div><div class="line">    var txt = $(<span class="string">".textarea"</span>).val(snapshot.val().txt);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>위에서 once() 함수는 프로미스를 반환한다.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;포커스가-사라지면-데이터베이스에-input하도록-설정&quot;&gt;&lt;a href=&quot;#포커스가-사라지면-데이터베이스에-input하도록-설정&quot; class=&quot;headerlink&quot; title=&quot;포커스가 사라지면 데이터베이스에 input하도록 설정&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
  </entry>
  
  <entry>
    <title>4.Firebase DB읽어오기</title>
    <link href="http://KKimSangHeon.github.io/2018/09/03/firebase4/"/>
    <id>http://KKimSangHeon.github.io/2018/09/03/firebase4/</id>
    <published>2018-09-03T09:11:06.000Z</published>
    <updated>2018-09-04T10:08:00.528Z</updated>
    
    <content type="html"><![CDATA[<p>DB를 읽고 쓰기 위해 리얼타임 데이터베이스의 규칙에 아래로 수정하자<br><figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"rules"</span>: &#123;</div><div class="line">    <span class="string">".read"</span>: <span class="keyword">true</span>,</div><div class="line">    <span class="string">".write"</span>: <span class="string">"auth != null"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>이전 코드에 다음 코드를 추가하자.<br><figure class="highlight"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var auth, database, userInfo;</div><div class="line">  // Initialize Firebase</div><div class="line">  var config = &#123;</div><div class="line">    apiKey: "AIzaSyCuXqUy4sOBUh0FBJyqkOde_20s1f6gffs",</div><div class="line">    authDomain: "memowebapp-b6255.firebaseapp.com",</div><div class="line">    databaseURL: "https://memowebapp-b6255.firebaseio.com",</div><div class="line">    projectId: "memowebapp-b6255",</div><div class="line">    storageBucket: "memowebapp-b6255.appspot.com",</div><div class="line">    messagingSenderId: "582035498309"</div><div class="line">  &#125;;</div><div class="line">  firebase.initializeApp(config);</div><div class="line">  auth = firebase.auth();</div><div class="line">  database = firebase.database();</div><div class="line">  var authProvider = new firebase.auth.GoogleAuthProvider();</div><div class="line"></div><div class="line"></div><div class="line">  auth.onAuthStateChanged(function(user)&#123;</div><div class="line">        if ( user) &#123;</div><div class="line">            // 인증 성공</div><div class="line">            console.log("success");</div><div class="line">            console.log(user);</div><div class="line">            userInfo = user;</div><div class="line">            get_momo_list();</div><div class="line">        &#125;else &#123;</div><div class="line">            // 인증 실패</div><div class="line">            auth.signInWithPopup(authProvider);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  function get_momo_list() &#123;</div><div class="line">      var memoRef = database.ref('memos/' + userInfo.uid);</div><div class="line">      memoRef.on('child_added', on_child_added);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  function on_child_added(data)&#123;</div><div class="line">    var key = data.key;</div><div class="line">    var memoData = data.val();</div><div class="line">    var txt = memoData.txt;</div><div class="line">    var title = memoData.title;</div><div class="line">    var firstTxt = txt.substr(0,1);</div><div class="line"></div><div class="line">    var html =</div><div class="line">     "&lt;li id='"+key+"' class=\"collection-item avatar\" onclick=\"fn_get_data_one(this.id);\" &gt;" +</div><div class="line">     "&lt;i class=\"material-icons circle red\"&gt;" + firstTxt + "&lt;/i&gt;" +</div><div class="line">     "&lt;span class=\"title\"&gt;" + title + "&lt;/span&gt;" +</div><div class="line">     "&lt;p class='txt'&gt;" + txt + "&lt;br&gt;" +</div><div class="line">     "&lt;/p&gt;" +</div><div class="line">     "&lt;/li&gt;";</div><div class="line"></div><div class="line">     $(".collection").append(html);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line"></div></pre></td></tr></table></figure><br>위의 코드는 DB에서 데이터를 읽어온 후 왼쪽 리스트에 추가하는 상황인데 데이터는 다음 그림처럼 생성되어 있어야 한다.<br><img src="/2018/09/03/firebase4/test1.png" alt="DB" title="DB"></p>
<p>“SF9uVrBjLKPRVVKZOCw7x2VKWT22” 이것이 나의 UID이다.</p>
<p>즉 위의코드는 memos라는 DB에 내 UID로 접근해서 데이터를 가져오고 그 데이터들을 append하는것으로 볼 수 있다. 다음 그림은 출력된 화면이다<br><img src="/2018/09/03/firebase4/test2.png" alt="Example" title="Example"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DB를 읽고 쓰기 위해 리얼타임 데이터베이스의 규칙에 아래로 수정하자&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Firebase&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
  </entry>
  
  <entry>
    <title>3.Firebase Google Auth 연동</title>
    <link href="http://KKimSangHeon.github.io/2018/09/03/firebase3/"/>
    <id>http://KKimSangHeon.github.io/2018/09/03/firebase3/</id>
    <published>2018-09-03T05:41:11.000Z</published>
    <updated>2018-09-03T09:35:07.082Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var auth;</div><div class="line">  // Initialize Firebase</div><div class="line">  var config = &#123;</div><div class="line">    apiKey: "xxx",</div><div class="line">    authDomain: "xxx",</div><div class="line">    databaseURL: "xxx",</div><div class="line">    projectId: "xxx",</div><div class="line">    storageBucket: "xxx",</div><div class="line">    messagingSenderId: "xxx"</div><div class="line">  &#125;;</div><div class="line">  firebase.initializeApp(config);</div><div class="line">  auth = firebase.auth();</div><div class="line">  var authProvider = new firebase.auth.GoogleAuthProvider();</div><div class="line">  auth.signInWithPopup(authProvider);</div><div class="line">&lt;/script&gt;</div><div class="line"></div></pre></td></tr></table></figure>
<p>위의 코드를 추가한 후 서버를 껏다 켜고 localhost:5000으로 접속하면 팝업이 뜬다.</p>
<figure class="highlight java"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">auth.onAuthStateChanged(function(user)&#123;</div><div class="line">      <span class="keyword">if</span> ( user) &#123;</div><div class="line">          <span class="comment">// 인증 성공</span></div><div class="line">          console.log(<span class="string">"success"</span>);  </div><div class="line">          console.log(user);</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 인증 실패</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>위의 코드를 추가해서 인증이 되었을 때 로그를 확인해보자.</p>
<figure class="highlight"><figcaption><span>Firebase</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var auth;</div><div class="line">  // Initialize Firebase</div><div class="line">  var config = &#123;</div><div class="line">    apiKey: "xxx",</div><div class="line">    authDomain: "xxx",</div><div class="line">    databaseURL: "xxx",</div><div class="line">    projectId: "xxx",</div><div class="line">    storageBucket: "xxx",</div><div class="line">    messagingSenderId: "xxx"</div><div class="line">  &#125;;</div><div class="line">  firebase.initializeApp(config);</div><div class="line">  auth = firebase.auth();</div><div class="line">  var authProvider = new firebase.auth.GoogleAuthProvider();</div><div class="line"></div><div class="line"></div><div class="line">  auth.onAuthStateChanged(function(user)&#123;</div><div class="line">        if ( user) &#123;</div><div class="line">            // 인증 성공</div><div class="line">            console.log("success");</div><div class="line">            console.log(user);</div><div class="line">        &#125;else &#123;</div><div class="line">            // 인증 실패</div><div class="line">            auth.signInWithPopup(authProvider);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>로그를 확인 했으면 위와같이 코드를 수정해서 인증을 실패 했을 때 팝업창이 뜨도록 설정해놓자</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Firebase&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cla
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
      <category term="firebase" scheme="http://KKimSangHeon.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>2.Firebase 프로젝트 스크립트 적용</title>
    <link href="http://KKimSangHeon.github.io/2018/09/03/firebase2/"/>
    <id>http://KKimSangHeon.github.io/2018/09/03/firebase2/</id>
    <published>2018-09-03T05:35:06.000Z</published>
    <updated>2018-09-03T09:35:04.040Z</updated>
    
    <content type="html"><![CDATA[<p>index.html파일을 내려받아 자신의 프로젝트 public 폴더에 붙여넣자</p>
<p>파이어베이스 콘솔창에서 웹 앱 선택 후 스크립트 복사 후 index.html의 스크립트 부분에 복붙</p>
<p>앞으로 구현 할 기능</p>
<ol>
<li>인증기능을 이용한 구글  호출</li>
<li>구글인증 성공시 메모리스트 출력 실패시 구글창 다시 호출</li>
<li>메모 저장기능</li>
<li>메모 한건 출력기능</li>
<li>메모 수정기능</li>
<li>메모 삭제기능</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;index.html파일을 내려받아 자신의 프로젝트 public 폴더에 붙여넣자&lt;/p&gt;
&lt;p&gt;파이어베이스 콘솔창에서 웹 앱 선택 후 스크립트 복사 후 index.html의 스크립트 부분에 복붙&lt;/p&gt;
&lt;p&gt;앞으로 구현 할 기능&lt;/p&gt;
&lt;ol&gt;
&lt;l
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
      <category term="firebase" scheme="http://KKimSangHeon.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>여행 동영상 기반 SNS개발_2(기술명세)</title>
    <link href="http://KKimSangHeon.github.io/2018/09/03/hex/"/>
    <id>http://KKimSangHeon.github.io/2018/09/03/hex/</id>
    <published>2018-09-03T05:29:34.000Z</published>
    <updated>2018-09-07T09:32:07.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="개발-내용"><a href="#개발-내용" class="headerlink" title="개발 내용"></a>개발 내용</h2><h3 id="Part-1-현석-상헌"><a href="#Part-1-현석-상헌" class="headerlink" title="Part 1. - 현석, 상헌"></a>Part 1. - 현석, 상헌</h3><p>서버 개발<br>서버 &lt;-&gt; 안드로이드(클라이언트) 간 데이터 통신(동영상 전송)<br>서버 &lt;-&gt; 안드로이드 간 동영상 스트리밍 제공</p>
<p>안드로이드(클라이언트) 개발<br>전체 UI 개발<br>안드로이드 &lt;-&gt; 서버 통신 개발<br>안드로이드 킷캣 버전이후로 동작하도록 개발<br>안드로이드 크기와 상관없이 깔끔한 UI가 되도록 개발</p>
<p>DB 개발<br>SNS 기능을 고려, 친구(팔로워) 관리<br>사용자가 좋아요 누른 것들 관리<br>동영상 관리<br>동영상 썸네일 관리</p>
<p>서버기술은 Firebase 기반으로 하되 Android는 자바, 코틀린 중 어느것으로 할지 18/09/08까지 결정</p>
<h3 id="Part-2-용호-웅섭"><a href="#Part-2-용호-웅섭" class="headerlink" title="Part 2. - 용호, 웅섭"></a>Part 2. - 용호, 웅섭</h3><p>안드로이드(클라이언트) 개발<br>NDK 연동<br>동영상 플레이어 관련 UI 개발</p>
<p>동영상 플레이어 개발<br>동영상 플레이어 라이브러리 활용, 개발<br>기본적인 재생기능<br>되감기 기능<br>카메라로 촬영된 동영상을 읽어와 이미지를 덧씌우는 기능<br>촬영된 동영상을 읽어와 특정 구간으로 끊어서 저장하는 기능</p>
<h3 id="Part-3-호인-용호-현석"><a href="#Part-3-호인-용호-현석" class="headerlink" title="Part 3. - 호인(용호/현석)"></a>Part 3. - 호인(용호/현석)</h3><p>안드로이드 UI 설계<br>Part 1과 협력하여 안드로이드 전체 UI 설계(카카오 오븐 등으로 구체적인 이미지로 설계할 것, Part 1과 기술적으로 가능한지 검토하면서 진행)<br>간단한 이미지 편집(포토샵 사용 가능하면 좋고, 아니면 무료 이미지 검색)</p>
<p>진행상황 관리<br>프로젝트 일정관리(개별로 한주동안 할 업무량을 측정, 관리)<br>우리 팀 활동 내역 및 진행상황을 블로그/구글드라이브/SNS 등으로 그 내용을 간단하게나마 기록하고 공유하면 좋겠음 -&gt; 추후 기업연계가 가능했으면…<br>돈 관리(모임/책 구매/간식 등)<br>동기부여 및 잔소리(분명 나태해지고…놀다 안함)<br>모임 관리(특정 시간, 장소 등 조사)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;개발-내용&quot;&gt;&lt;a href=&quot;#개발-내용&quot; class=&quot;headerlink&quot; title=&quot;개발 내용&quot;&gt;&lt;/a&gt;개발 내용&lt;/h2&gt;&lt;h3 id=&quot;Part-1-현석-상헌&quot;&gt;&lt;a href=&quot;#Part-1-현석-상헌&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="HEX Team" scheme="http://KKimSangHeon.github.io/categories/Etc/HEX-Team/"/>
    
    
  </entry>
  
  <entry>
    <title>1.Firebase 환경설정</title>
    <link href="http://KKimSangHeon.github.io/2018/09/03/firebase1/"/>
    <id>http://KKimSangHeon.github.io/2018/09/03/firebase1/</id>
    <published>2018-09-03T04:31:40.000Z</published>
    <updated>2018-09-03T09:35:00.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="공부내용"><a href="#공부내용" class="headerlink" title="공부내용"></a>공부내용</h2><p><a href="https://www.inflearn.com/course/파이어베이스-강좌-웹-어플리케이션" target="_blank" rel="external">https://www.inflearn.com/course/파이어베이스-강좌-웹-어플리케이션</a> 의 강좌를 수강하며 나름대로 정리해본것이다.</p>
<h2 id="파이어베이스"><a href="#파이어베이스" class="headerlink" title="파이어베이스"></a>파이어베이스</h2><p>웹과 모바일 개발에 필요한 기능을 제공하는 백엔드 서비스이다. 보안, 인증, DB설계, API설계등을 프론트 개발자에게 편리하게 제공하는것.</p>
<p>firebase.google.com 에 간 후 로그인을 하고 새 프로젝트를 생성한다.</p>
<figure class="highlight java"><figcaption><span>Firebase 설치과정</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Node.js 설치</div><div class="line">npm install firebase-tools -g 를 콘솔창에서 입력하여 설치</div><div class="line">firebase login</div><div class="line">Y 입력</div><div class="line">구글로그인하고 승인</div><div class="line">firebase list 를 입력해서 확인</div><div class="line">mkdir memoWeb</div><div class="line">cd memoWeb</div><div class="line">firebase init  <span class="comment">//firebase 프로젝트 생성</span></div><div class="line">스페이스바 누르고 엔터를 입력해 데이터베이스 선택</div><div class="line">아까 만들어놓았던 프로젝트 선택</div><div class="line">데이터 베이스 파일이름 입력</div><div class="line"></div><div class="line">firebase init</div><div class="line">Hosting 선택</div><div class="line"><span class="keyword">public</span> 입력</div><div class="line">y 입력</div><div class="line"></div><div class="line"><span class="number">2018</span>-<span class="number">09</span>-<span class="number">03</span>  오후 <span class="number">02</span>:<span class="number">21</span>               <span class="number">161</span> database.rule.json</div><div class="line"><span class="number">2018</span>-<span class="number">09</span>-<span class="number">03</span>  오후 <span class="number">02</span>:<span class="number">22</span>               <span class="number">291</span> firebase.json</div><div class="line"><span class="number">2018</span>-<span class="number">09</span>-<span class="number">03</span>  오후 <span class="number">02</span>:<span class="number">22</span>    &lt;DIR&gt;          <span class="keyword">public</span></div><div class="line"></div><div class="line"></div><div class="line">위의 세개 파일이 생성된것을 확인</div><div class="line">firebase serve</div><div class="line"></div><div class="line">http:<span class="comment">//localhost:5000/ 으로 입력이 가능해진다.</span></div></pre></td></tr></table></figure>
<h2 id="개인적인-생각"><a href="#개인적인-생각" class="headerlink" title="개인적인 생각"></a>개인적인 생각</h2><p>Firebase를 이용하면 많은것을 편리하게 구성하고 쉽게 만들수 있다는 생각이 든다.<br>구글이 왜 구글인지 알 수 있을것같다..</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;공부내용&quot;&gt;&lt;a href=&quot;#공부내용&quot; class=&quot;headerlink&quot; title=&quot;공부내용&quot;&gt;&lt;/a&gt;공부내용&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/파이어베이스-강좌-웹-어플리케이션&quot; t
    
    </summary>
    
      <category term="Web/App" scheme="http://KKimSangHeon.github.io/categories/Web-App/"/>
    
      <category term="Firebase" scheme="http://KKimSangHeon.github.io/categories/Web-App/Firebase/"/>
    
    
      <category term="firebase" scheme="http://KKimSangHeon.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>여행 동영상 기반 SNS개발_1(요구사항 분석)</title>
    <link href="http://KKimSangHeon.github.io/2018/08/22/hex/"/>
    <id>http://KKimSangHeon.github.io/2018/08/22/hex/</id>
    <published>2018-08-21T17:21:20.000Z</published>
    <updated>2018-09-07T09:32:01.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-주요-Concept"><a href="#A-주요-Concept" class="headerlink" title="A.    주요 Concept"></a>A.    주요 Concept</h2><p>여행에 특화된 소셜 네트워크 서비스</p>
<ul>
<li>짧은 순간순간의 여행. 길고 오래도록 추억하세요.</li>
<li>1분 영상을 통해 현재 여행지를 자랑하고 Best Traveller가 되어보세요.</li>
</ul>
<h2 id="B-주요-서비스-내용-구성도-Service-Flow"><a href="#B-주요-서비스-내용-구성도-Service-Flow" class="headerlink" title="B.    주요 서비스 내용 / 구성도 (Service Flow)"></a>B.    주요 서비스 내용 / 구성도 (Service Flow)</h2><ul>
<li>나만의 여행 동영상 갤러리</li>
<li>편리한 영상 편집기능</li>
<li>BEST여행지 추천 및 공유</li>
<li>여행 실시간 현지 분위기 살펴보기</li>
</ul>
<h2 id="C-주요-Target-고객"><a href="#C-주요-Target-고객" class="headerlink" title="C.    주요 Target 고객"></a>C.    주요 Target 고객</h2><ul>
<li>더욱 완벽한 여행을 준비하는, 여행을 공유하고 싶은, 여행을 추억하고 싶은 모든 낭만적인 여행가</li>
<li>여행지의 분위기를 간접 경험하고 싶은 현대인들</li>
</ul>
<h2 id="D-서비스-Business-Model"><a href="#D-서비스-Business-Model" class="headerlink" title="D.    서비스 Business Model"></a>D.    서비스 Business Model</h2><p>1.가치<br>a.추억 남기기<br>b.여행 정보 공유<br>c.관광산업 활성화</p>
<p>2.수익 모델<br>a.관광산업(여행사 여행상품, 관광지) 및 비관광산업 광고대행<br>b.인앱(BGM, 재생시간 연장, 워터마크 제거, 고화질 영상 제공, 저장공간 제한)</p>
<h2 id="E-상품-확장-계획"><a href="#E-상품-확장-계획" class="headerlink" title="E.    상품 확장 계획"></a>E.    상품 확장 계획</h2><ul>
<li>여행경로 공유</li>
<li>네비게이션 길찾기 제공</li>
<li>관광상품과 연계하여 관광지 홍보 (관광이 활성화되지 않은 지역 인지도 향상 효과)</li>
<li>추천 관광지 등에서 다양한 미션 이벤트를 통해 여행지 특화 콘텐츠 제공(ex. 이동 점프샷, 먹방 여행코스 등)</li>
</ul>
<h2 id="Flow-chart"><a href="#Flow-chart" class="headerlink" title="Flow chart"></a>Flow chart</h2><img src="/2018/08/22/hex/flow_chart.png" alt="Flow Chart" title="Flow Chart">
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-주요-Concept&quot;&gt;&lt;a href=&quot;#A-주요-Concept&quot; class=&quot;headerlink&quot; title=&quot;A.    주요 Concept&quot;&gt;&lt;/a&gt;A.    주요 Concept&lt;/h2&gt;&lt;p&gt;여행에 특화된 소셜 네트워크 서비스&lt;/p
    
    </summary>
    
      <category term="Etc" scheme="http://KKimSangHeon.github.io/categories/Etc/"/>
    
      <category term="HEX Team" scheme="http://KKimSangHeon.github.io/categories/Etc/HEX-Team/"/>
    
    
      <category term="Social Media" scheme="http://KKimSangHeon.github.io/tags/Social-Media/"/>
    
  </entry>
  
  <entry>
    <title>학생 등하차 알림 시스템</title>
    <link href="http://KKimSangHeon.github.io/2018/07/27/project/"/>
    <id>http://KKimSangHeon.github.io/2018/07/27/project/</id>
    <published>2018-07-27T14:25:25.000Z</published>
    <updated>2018-09-03T05:45:52.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="개발배경"><a href="#개발배경" class="headerlink" title="개발배경"></a>개발배경</h1><p>최근 유아 및 아동들의 등 하차시 발생하는 문제들로 인해 다양한 사회문제들이 발생하고 있다.<br>이를 App을 통해 극복해보고자 개발하였으며 해당 시스템은 NFC칩을 이용하여 학생들의 등하차를 관리하는 시스템이다.</p>
<h1 id="개발현황"><a href="#개발현황" class="headerlink" title="개발현황"></a>개발현황</h1><p>NFC 등록<br>NFC 인식<br>내부 DB(SQLite)를 활용한 승하차 인원관리 시스템 구축완료<br>태그 리스트 확인화면 구현완료</p>
<h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><p>버스 위치 실시간수신 위한 서버<br>10초 단위로 현재위치 갱신 및 SMS전송 테스트</p>
<p>해당앱은 성능테스트, 기능테스트만 완료하면 되지만 GPS, SNS테스트를 할 폰이 없어서 일단 프로젝트 중단..<br>지금까지 작성한 코드는 아래에서 확인 가능<br><a href="https://github.com/KKimSangHeon/RescueChildren" target="_blank" rel="external">GitHub</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;개발배경&quot;&gt;&lt;a href=&quot;#개발배경&quot; class=&quot;headerlink&quot; title=&quot;개발배경&quot;&gt;&lt;/a&gt;개발배경&lt;/h1&gt;&lt;p&gt;최근 유아 및 아동들의 등 하차시 발생하는 문제들로 인해 다양한 사회문제들이 발생하고 있다.&lt;br&gt;이를 App을
    
    </summary>
    
      <category term="About Me" scheme="http://KKimSangHeon.github.io/categories/About-Me/"/>
    
      <category term="My Projects" scheme="http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"/>
    
    
      <category term="안드로이드, 등하차시스템" scheme="http://KKimSangHeon.github.io/tags/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EB%93%B1%ED%95%98%EC%B0%A8%EC%8B%9C%EC%8A%A4%ED%85%9C/"/>
    
  </entry>
  
  <entry>
    <title>임베디드 2</title>
    <link href="http://KKimSangHeon.github.io/2018/07/11/embedded/"/>
    <id>http://KKimSangHeon.github.io/2018/07/11/embedded/</id>
    <published>2018-07-11T04:46:52.000Z</published>
    <updated>2018-09-03T06:02:20.807Z</updated>
    
    <content type="html"><![CDATA[<p>캐쉬는 동작방식에 따라<br>Direct Mapping Cache, Associative Mapping Chche, Set Associative Mapping Chche로 나뉜다.<br>세번째가 주로 쓰이는데 세번째는 첫번째 두번째의 혼합형이다.</p>
<h3 id="Direct-Mapping-Cache"><a href="#Direct-Mapping-Cache" class="headerlink" title="Direct Mapping Cache"></a>Direct Mapping Cache</h3><p>사용하기 편하고 이해하기 편하다<br>낭비가 심함</p>
<h3 id="Associative-Mapping-Chche"><a href="#Associative-Mapping-Chche" class="headerlink" title="Associative Mapping Chche"></a>Associative Mapping Chche</h3><p>Direct Mapping Cache의 개선형태<br>DMC보다 Hit rate가 높다.<br>victim선택에 대해 자유롭다.<br>tag를 다 뒤져봐야 한다는점이 단점. 즉 개수가 많을수록 복잡.</p>
<h3 id="Set-Associative-Mapping-Chche"><a href="#Set-Associative-Mapping-Chche" class="headerlink" title="Set Associative Mapping Chche"></a>Set Associative Mapping Chche</h3><p>static<br>지역 변수에 static을 사용하면, 전역 변수와 유사하게 변수에 대한 영구적인 저장 공간을 할당한다.<br>static 지역 변수와 전역변수의 차이: static 지역 변수는 해당 블록 안에서만 사용할 수 있다.</p>
<p>volatile<br>해당 변수에 대해 컴파일러의 최적화를 막는다.<br>임베디드 프로그래밍이나 멀티쓰레드 프로그래밍에 사용한다.</p>
<p>최적화는 비용절감의 목적으로, 사용하는 메모리의 사용량을 최소화 하면서 성능을 최대화 하고자함.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;캐쉬는 동작방식에 따라&lt;br&gt;Direct Mapping Cache, Associative Mapping Chche, Set Associative Mapping Chche로 나뉜다.&lt;br&gt;세번째가 주로 쓰이는데 세번째는 첫번째 두번째의 혼합형이다.
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Embeded C" scheme="http://KKimSangHeon.github.io/categories/Language/Embeded-C/"/>
    
    
  </entry>
  
  <entry>
    <title>임베디드 1</title>
    <link href="http://KKimSangHeon.github.io/2018/07/09/embedded/"/>
    <id>http://KKimSangHeon.github.io/2018/07/09/embedded/</id>
    <published>2018-07-09T03:29:07.000Z</published>
    <updated>2018-09-03T06:02:18.054Z</updated>
    
    <content type="html"><![CDATA[<p>volatile - 최적화 하지마라 ( 어차피 날라갈 값이니까)</p>
<p>READ A<br>PRINT A<br>READ A<br>PRINT A<br>라는 코드가 있을 때 옵티마이저가 이를 최적화하여<br>READ A<br>PRINT A<br>PRINT A<br>로 변경하는데 A가 휘발성일경우 문제가 된다.</p>
<p>그래서 위에 VOLATILE를 추가해줘 최적화를 못하도록 명시한다.<br>VOLATILE A<br>READ A<br>PRINT A<br>READ A<br>PRINT A<br>외부의 센서(온도계)등에서 데이터를 가져올 때 같은 경우 사용. 즉 내가 가져오는 시점의 데이터를 활용하고자 할 경우 사용한다.</p>
<p>restrict - 최적화 해라</p>
<p>unit8x8_t SIMD를 사용하면 사용할 수 있다.</p>
<p>GPU - 일반 프로세서와 구분하기 위해 GPU라 불리는데 주로 그래픽처리에 사용됨(작은 코어가 많다..)<br>SOC - 계산보다는 주변 여러장치를 같이 갖고있다.<br>DSP - 멀티미디어 수식처리의 식을 하나로 만드는것</p>
<p>하드웨어 - Hypervisor - OS</p>
<p> RTOS , Resal time Operating System<br>실시간 시스템을 구현 가능한 운영체제<br>우선 순위 기반 스케줄링<br>충분한 개수의 인터럽트 레벨</p>
<p>text     data     bss       dec        hex      filename<br>8024     32     6072     14128     3730     image</p>
<p>text - 기계어로 변경된것들<br>data는 초기화된 전역변수<br>bss는 초기화되지않은 전역변수</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;volatile - 최적화 하지마라 ( 어차피 날라갈 값이니까)&lt;/p&gt;
&lt;p&gt;READ A&lt;br&gt;PRINT A&lt;br&gt;READ A&lt;br&gt;PRINT A&lt;br&gt;라는 코드가 있을 때 옵티마이저가 이를 최적화하여&lt;br&gt;READ A&lt;br&gt;PRINT A&lt;br&gt;
    
    </summary>
    
      <category term="Language" scheme="http://KKimSangHeon.github.io/categories/Language/"/>
    
      <category term="Embeded C" scheme="http://KKimSangHeon.github.io/categories/Language/Embeded-C/"/>
    
    
  </entry>
  
</feed>
