{"meta":{"title":"Kim Sang Heon's Bolg","subtitle":null,"description":"Welcome to Sang Heon's Blog.","author":"Kim Sang Heon","url":"http://KKimSangHeon.github.io"},"pages":[],"posts":[{"title":"BinarySearch","slug":"BinarySearch","date":"2017-06-30T10:38:20.000Z","updated":"2017-06-30T11:01:37.840Z","comments":true,"path":"2017/06/30/BinarySearch/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/BinarySearch/","excerpt":"","text":"이진탐색데이터의 정렬이 선행되어야 한다. 시간복잡도는 O(log2n) 이다.BinarySearch.c 재귀적인 방법12345678910111213141516int ISearch(int ar[], int first, int last, int target)&#123; int mid; if(first &gt; last) return -1; // -1의 반환은 탐색의 실패를 의미 mid=(first+last) / 2 ; if(ar[mid] == target) return mid; // 탐색된 타겟의 인덱스 값 반환 else if(target &lt; ar[mid]) return ISearch(ar, first, mid-1, target); else return ISearch(ar, mid+1, last, target);&#125; BinarySearch.c 반복문 이용123456789101112131415161718BinarySearch(int DataSet[], int Size, int target)&#123; int Left,Right,Mid; Left=0; Right=Size-1; while(Left&lt;=Right)&#123; Mid=(Left+Rigth) / 2 ; if( Target==DataSet[Mid]) return DataSet[Mid]; else if(Target&gt;DataSet[Mid]) Left=Mid+1; else Right=Mid-1; &#125; return NULL;&#125; 이진탐색의 경우 비교대상이 되는 mid값을 단순히 (first+last)/2로 설정한다.그러나 보간 탐색의 경우 mid 값 설정방식이 다르며 이진탐색보다 우수한 성능을 보인다. 보간탐색탐색대상이 앞쪽에 위치 할 경우 앞쪽에서 탐색을 시작하고 뒤쪽에 위치할 경우 뒤쪽에서 탐색을 시작한다.이진탐색보다 우수하다.ISearch.c12345678910111213141516int ISearch(int ar[], int first, int last, int target)&#123; int mid; if(ar[first]&gt;target || ar[last]&lt;target) return -1; // 이진 탐색과의 차이점을 반영한 문장 mid = ((double)(target-ar[first]) / (ar[last]-ar[first]) *(last-first)) + first; if(ar[mid] == target) return mid; // 탐색된 타겟의 인덱스 값 반환 else if(target &lt; ar[mid]) return ISearch(ar, first, mid-1, target); else return ISearch(ar, mid+1, last, target);&#125; 보간탐색의 mid값 계산 방법 그림[1]에서 arr[s]는 찾는값을 의미함. 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Search","slug":"Data-Structure/Search","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Search/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Search","slug":"Search","permalink":"http://KKimSangHeon.github.io/tags/Search/"},{"name":"BinarySearch","slug":"BinarySearch","permalink":"http://KKimSangHeon.github.io/tags/BinarySearch/"}]},{"title":"2장. CentOS 리눅스 소개","slug":"ThisIsLinux1","date":"2017-06-30T09:55:52.000Z","updated":"2017-06-30T10:16:23.755Z","comments":true,"path":"2017/06/30/ThisIsLinux1/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/ThisIsLinux1/","excerpt":"","text":"리눅스 리눅스란?리눅스 = 무료 유닉스 라 생각하면 된다.1991 ‘리누스 토르발스’가 버전 0.01을 최초로 완성. 리누스 토르발스는 커널(kernel)만 개발함(여기서 커널은 자동차 엔진이라고 보면된다.)모든 배포판은 리누스 토르발스가 개발한 커널을 갖고 사람들이 만들어진것이다. CentOS 또한 마찬가지..자동차로 비유하자면 A,B,C 회사가 하나의 엔진을 사용하여 각기 다른 자동차를 만들어내놓음.우리가 공부할 CentOS의 커널버전은 3.17.4인데 변경이 가능하다.!자동차로 비교하면 자동차를 그대로 두고 엔진만 변경하는것.이를 커널 업그레이드 라고 한다. GNU 프로젝트?GNU 프로젝트 - GPL(General Public License[자유 소프트웨어의 수정과 공유의 자유를 보장하는것.]) 에 따라 소스를 배포하여 공개하고 그것을 더 개선하여 배포하고 의 반복.. 리눅스 또한 마찬가지. 그래서 현재는 유닉스 보다 더 좋다고 말하는 사람들이 많다. 여기서 재미있는점 하나. 소스코드를 무료로 얻어서 기능개선 후 판매는 가능하다. 그러나 GPL에 의해 소스코드는 공유해야한다는점. 레드햇 리눅스와 CentOS 리눅스?전 세계적으로 유명하며 기업에서 많이쓴다. 무료버전은 없으며 상용버전만 존재한다. 하지만 GPL에 의해 소스코드는 공개되어 있어 레드햇 엔터프라이즈 리눅스의 소스코드를 그대로 가져와 로고만 바꾼것이 CentOS!!결국 레드햇 리눅스 == CentOS 리눅스","categories":[{"name":"Linux","slug":"Linux","permalink":"http://KKimSangHeon.github.io/categories/Linux/"},{"name":"이것이 리눅스다","slug":"Linux/이것이-리눅스다","permalink":"http://KKimSangHeon.github.io/categories/Linux/이것이-리눅스다/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://KKimSangHeon.github.io/tags/Linux/"},{"name":"This Is Linux","slug":"This-Is-Linux","permalink":"http://KKimSangHeon.github.io/tags/This-Is-Linux/"}]},{"title":"기수정렬 (RadixSort)","slug":"RadixSort","date":"2017-06-30T05:36:34.000Z","updated":"2017-06-30T11:02:17.317Z","comments":true,"path":"2017/06/30/RadixSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/RadixSort/","excerpt":"","text":"기수정렬버켓에 데이터를 작은 수 부터 넣고 빼내어 정렬하는 방식이다.기수정렬의 시간복잡도는 O(ln)이며 l은 버켓의 크기를 의미한다. red, why, few 정렬가능 - 버킷 3개 필요10,161,18,1 가능 - 버킷 3개 필요proffesor , red , why 불가능125 , -101, 167, -505 불가능 ##참고사항 1의자리 수 구하기-num/1%1010의자리 수 구하기 -num/10%10100의 자리 수 구하기 -num/100%10 InsertionSort.c123456789101112131415161718192021222324252627282930313233343536373839void RadixSort(int arr[], int num, int maxLen) // maxLen은 가장 긴 데이터의 길이&#123; Queue buckets[BUCKET_NUM]; int bi; int pos; int di; int divfac = 1; int radix; // 총 10개의 버킷 초기화 for(bi=0; bi&lt;BUCKET_NUM; bi++) QueueInit(&amp;buckets[bi]); // 가장 긴 데이터의 길이만큼 반복 for(pos=0; pos&lt;maxLen; pos++) &#123; // 정렬 대상의 수만큼 반복 for(di=0; di&lt;num; di++) &#123; // N번째 자리의 숫자 추출 radix = (arr[di] / divfac) % 10; // 추출한 숫자를 근거로 데이터 버킷에 저장 Enqueue(&amp;buckets[radix], arr[di]); &#125; // 버킷 수만큼 반복 for(bi=0, di=0; bi&lt;BUCKET_NUM; bi++) &#123; // 버킷에 저장된 것 순서대로 다 꺼내서 다시 arr에 저장 while(!QIsEmpty(&amp;buckets[bi])) arr[di++] = Dequeue(&amp;buckets[bi]); &#125; // N번째 자리의 숫자 추출을 위한 피제수의 증가 divfac *= 10; &#125;&#125; 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Radix Sort","slug":"Radix-Sort","permalink":"http://KKimSangHeon.github.io/tags/Radix-Sort/"}]},{"title":"퀵정렬 (QuickSort)","slug":"QuickSort","date":"2017-06-30T05:36:18.000Z","updated":"2017-06-30T11:02:24.397Z","comments":true,"path":"2017/06/30/QuickSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/QuickSort/","excerpt":"","text":"퀵정렬퀵 정렬 O(nlog2n)- 피벗을 정하여 분할하여 정복.. 피벗을 선택 할때 3개를 선택하여 평균치를 구하여 구하면 더 효율적으로 피벗을 정할 수 있다.피벗이 잘 선택될 경우 시간복잡도가 줄어든다. 최악의 경우 O(n^2)이 될 수 있다 (피벗값이 많이 안좋을 경우) O(nlog2n)의 시간복잡도를 갖는 다른 정렬 알고리즘 보다 평균적으로 빠르다.why ? 데이터 이동이 상대적으로 작고 병합정렬과 같이 별도의 메모리 공간을 요구하지 않기 때문에.. 나만의 요약! : 피벗값을 기준으로 처음지점부터 시작한 반복문은 피벗보다 작은값을 찾고 뒤에서 시작한 반복문은 피벗보다 큰값을 찾아 서로 바꾼다. ( 단 피벗을 지나치치 않음) QuickSort.c1234567891011121314151617181920212223242526272829303132333435363738394041424344454647void Swap(int arr[], int idx1, int idx2)&#123; int temp = arr[idx1]; arr[idx1] = arr[idx2]; arr[idx2] = temp;&#125;int Partition(int arr[], int left, int right)&#123; int pivot = arr[left]; // 피벗의 위치는 가장 왼쪽! int low = left+1; int high = right; while(low &lt;= high) // 교차되지 않을 때까지 반복 &#123; while(pivot &gt; arr[low]) low++; while(pivot &lt; arr[high]) high--; /* while(pivot &gt;= arr[low] &amp;&amp; low &lt;= right) low++; while(pivot &lt;= arr[high] &amp;&amp; high &gt;= (left+1)) high--; */ if(low &lt;= high) // 교차되지 않은 상태라면 Swap 실행 Swap(arr, low, high); // low와 high가 가리키는 대상 교환 &#125; Swap(arr, left, high); // 피벗과 high가 가리키는 대상 교환 return high; // 옮겨진 피벗의 위치 정보 반환&#125;void QuickSort(int arr[], int left, int right)&#123; if(left &lt;= right) &#123; int pivot = Partition(arr, left, right); // 둘로 나눠서 QuickSort(arr, left, pivot-1); // 왼쪽 영역을 정렬 QuickSort(arr, pivot+1, right); // 오른쪽 영역을 정렬 &#125;&#125; 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Quick Sort","slug":"Quick-Sort","permalink":"http://KKimSangHeon.github.io/tags/Quick-Sort/"}]},{"title":"병합정렬 (MergeSort)","slug":"MergeSort","date":"2017-06-30T05:36:10.000Z","updated":"2017-06-30T11:02:44.760Z","comments":true,"path":"2017/06/30/MergeSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/MergeSort/","excerpt":"","text":"병합정렬재귀적으로 분할하여 병합하는 방식으로 재귀적으로 모든 요소들을 쪼갠 후 합쳐나간다. 시간복잡도는 O(nlog2n))이다. MergeSort.c1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253void MergeTwoArea(int arr[], int left, int mid, int right)&#123; int fIdx = left; int rIdx = mid+1; int i; int * sortArr = (int*)malloc(sizeof(int)*(right+1)); int sIdx = left; while(fIdx&lt;=mid &amp;&amp; rIdx&lt;=right) &#123; if(arr[fIdx] &lt;= arr[rIdx]) sortArr[sIdx] = arr[fIdx++]; else sortArr[sIdx] = arr[rIdx++]; sIdx++; &#125; if(fIdx &gt; mid) &#123; for(i=rIdx; i&lt;=right; i++, sIdx++) sortArr[sIdx] = arr[i]; &#125; else &#123; for(i=fIdx; i&lt;=mid; i++, sIdx++) sortArr[sIdx] = arr[i]; &#125; for(i=left; i&lt;=right; i++) arr[i] = sortArr[i]; free(sortArr);&#125;void MergeSort(int arr[], int left, int right)&#123; int mid; if(left &lt; right) &#123; // 중간 지점을 계산한다. mid = (left+right) / 2; // 둘로 나눠서 각각을 정렬한다. MergeSort(arr, left, mid); MergeSort(arr, mid+1, right); // 정렬된 두 배열을 병합한다. MergeTwoArea(arr, left, mid, right); &#125;&#125; 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Merge Sort","slug":"Merge-Sort","permalink":"http://KKimSangHeon.github.io/tags/Merge-Sort/"}]},{"title":"힙정렬 (HeapSort)","slug":"HeapSort","date":"2017-06-30T05:35:38.000Z","updated":"2017-06-30T11:02:55.505Z","comments":true,"path":"2017/06/30/HeapSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/HeapSort/","excerpt":"","text":"힙 정렬힙을 만들어서 힙에 넣고 빼는것으로서 시간복잡도는 O(nlog2n) 이다. BubbleSort.c12345for(i=0;i&lt;n;i++) HInsert(&amp;heap,arr[i]);for(i=0;i&lt;n;i++) arr[i]=HDelete(&amp;heap); 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Heap Sort","slug":"Heap-Sort","permalink":"http://KKimSangHeon.github.io/tags/Heap-Sort/"}]},{"title":"삽입정렬 (InsertionSort)","slug":"InsertionSort","date":"2017-06-30T05:35:28.000Z","updated":"2017-06-30T11:03:11.884Z","comments":true,"path":"2017/06/30/InsertionSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/InsertionSort/","excerpt":"","text":"삽입정렬1~n까지 정렬해 나감 1~2 정렬 12묶음 3정렬 13묶음 4정렬첫 번째 데이터는 정렬이 되어있다고 봄. 그래서 i=0이아닌 1부터 시작.시간복잡도는 O(n^2) 이다. InsertionSort.c123456789101112for(i=1;i&lt;n;i++)&#123; insData=arr[i]; //정렬대상을 insData에 저장 for(j=i-1;i&gt;=0;j--) &#123; if(arr[j]&gt;insData) arr[j+1]=arr[j]; else break; &#125; arr[j+1]=insData;&#125; 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Insertion Sort","slug":"Insertion-Sort","permalink":"http://KKimSangHeon.github.io/tags/Insertion-Sort/"}]},{"title":"선택정렬 (SelectionSort)","slug":"SelectionSort","date":"2017-06-30T04:59:38.000Z","updated":"2017-06-30T11:03:24.859Z","comments":true,"path":"2017/06/30/SelectionSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/SelectionSort/","excerpt":"","text":"선택정렬오름차순일 경우 작은걸 맨앞에 넣고 그 다음 작은걸 두 번째 넣고 ..이 과정을 계속 반복한다. 시간복잡도는 O(n^2) 이다. SelectionSort.c12345678910for(i=0;i&lt;n-1;i++)&#123; maxIdx=i; for(j=i+1;j&lt;n;j++) //최소값 탐색 &#123; if(arr[i]&lt;arr[maxIdx]) maxIdx=j; &#125; swap;&#125; 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Selection Sort","slug":"Selection-Sort","permalink":"http://KKimSangHeon.github.io/tags/Selection-Sort/"}]},{"title":"paper","slug":"paper","date":"2017-06-30T04:40:14.000Z","updated":"2017-06-30T04:57:38.940Z","comments":true,"path":"2017/06/30/paper/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/paper/","excerpt":"","text":"논문","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"My Projects","slug":"About-Me/My-Projects","permalink":"http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"}],"tags":[{"name":"작성 논문","slug":"작성-논문","permalink":"http://KKimSangHeon.github.io/tags/작성-논문/"}]},{"title":"시각장애인을 위한 길안내 app","slug":"For-blind","date":"2017-06-30T03:42:08.000Z","updated":"2017-06-30T04:32:05.752Z","comments":true,"path":"2017/06/30/For-blind/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/For-blind/","excerpt":"","text":"참가배경-교내 창업경진대회가 진행 중이라는 소식을 듣고 참가하게 되었습니다. 비콘과 관련된 프로젝트를 진행중이던 상황이라 비콘을 이용해서 창업아이템을 고안하게 되었습니다. Idea를 떠올린 계기 -지하철을 이용하던 어느 날 시각장애인이 길을 찾는데 어려움을 겪는 것을 보았습니다. 시각장애인이 길을 찾는데 어려움을 겪은 이유는 점형블록에 대한 인식이 부족한 상인이 올려둔 짐 때문이었고 결국 시각 장애인은 주변 사람들의 도움을 통해 올바른 길을 찾아 갈 수 있었습니다. 저는 그 이후 지하철 내 점형블록을 눈여겨보게 되었습니다. [그림1]의 좌측 사진과 같이 깨진 점형블록이 보수되지 않은 채 존재하며, 우측 사진과 같이 매트가 깔려있기도 했습니다. -또한 그들을 위한 시설인 음성유도기 또한 고장나있는경우가 많으며 가격이 비싸다는 단점이 존재하였습니다.(개당 약 270만원) Idea 소개역사에 10m^2당 비콘을 하나씩 설치하여 핑거프린팅 알고리즘을 적용한 후 현재위치를 파악합니다. (FingerPrinting Algorithm(참고)) 그 후 [그림3]과 같이 이동방향을 파악 후 이동방향에 따른 음성안내를 실시합니다.음성안내를 실시하기 위해서는 다음의 Newtone API 혹은 Naver의 음성합성 기능을 사용하면 가능합니다. 결과 운이 좋게도 장려상과 30만원의 장학금을 지급받았습니다 !","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"My Projects","slug":"About-Me/My-Projects","permalink":"http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://KKimSangHeon.github.io/tags/Android/"},{"name":"Beacon","slug":"Beacon","permalink":"http://KKimSangHeon.github.io/tags/Beacon/"},{"name":"창업경진대회","slug":"창업경진대회","permalink":"http://KKimSangHeon.github.io/tags/창업경진대회/"}]},{"title":"기숙사 외박계","slug":"Dormitory-Sleep-Out","date":"2017-06-30T01:22:14.000Z","updated":"2017-06-30T03:37:41.143Z","comments":true,"path":"2017/06/30/Dormitory-Sleep-Out/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/Dormitory-Sleep-Out/","excerpt":"","text":"프로그램 개발배경-교내 기숙사의 외박계 프로그램이 존재하지 않으며, 업체에 의뢰하여 제작하려했으나 비용상의 문제로 거절된것을 알게되었습니다. 그래서 직접 만들어서 제출하면 어떨까 라는 생각을 하게되어 개발하게 되었습니다. 프로그램 소개CentOS상에 서버를 실행시켰으며, 카카오톡 옐로아이디 페이지에서 세팅을 진행하였습니다. 각 과정을 거친 후 자신의 외박계를 하나 작성할 수 있는 프로그램입니다. 프로그램 동작화면 초기 채팅방에 진입하였을 경우 외박계를 작성할 것인지, 작성한 외박계를 확인할 것인지 선택합니다.외박계 작성을 선택하였을 경우 이름, 거주하는 동, 호수, 귀관일, 행선지를 입력하고전화번호 또한 입력 후 아무키나 입력하면 등록이 완료됩니다.[그림1]에서 확인버튼을 선택하였을 경우 [그림4]와 같이 입력한 내용을 확인할 수 있습니다. 작성된 외박계를 관리자가 확인하기 위해서는 채팅방에서 supervisorgj@를 입력합니다. 그 후 [그림5]와 같이 외박계를 조회할 수 있습니다. 소스코드 (Github Repository)-카카오톡 자동응답 서버 소스코드","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"My Projects","slug":"About-Me/My-Projects","permalink":"http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://KKimSangHeon.github.io/tags/Node-js/"},{"name":"Kakao talk open API","slug":"Kakao-talk-open-API","permalink":"http://KKimSangHeon.github.io/tags/Kakao-talk-open-API/"},{"name":"챗봇","slug":"챗봇","permalink":"http://KKimSangHeon.github.io/tags/챗봇/"},{"name":"MySQL","slug":"MySQL","permalink":"http://KKimSangHeon.github.io/tags/MySQL/"},{"name":"CentOS","slug":"CentOS","permalink":"http://KKimSangHeon.github.io/tags/CentOS/"}]},{"title":"Music Share","slug":"music-share","date":"2017-06-30T00:31:38.000Z","updated":"2017-06-30T03:32:36.202Z","comments":true,"path":"2017/06/30/music-share/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/30/music-share/","excerpt":"","text":"프로그램 개발배경-C 소켓프로그래밍에 대한 이해를 높이고자 진행한 프로젝트입니다. 프로그램 소개-본 프로그램은 회원가입기능, 로그인기능, 서버에 mp3파일을 올리는기능 등이 구현되어 있습니다. 회원가입을 하고 로그인 후 서버에 mp3파일을 올리거나 다운로드 받을 수 있습니다. 프로그램 개발환경은 우분투 14.04 LTS 입니다. 프로그램 기능 초기 서버에 접속하였을 경우 화면입니다. 서버에서는 클라이언트의 접속현황 및 상태를 확인할 수 있으며 클라이언트에서는 다음에 할 수 있는 일을 확인할 수 있습니다. 두 클라이언트가 회원가입을 진행하고 있고 이에 대한 내용이 서버측 화면에 출력됩니다. 클라이언트가 가입한 ID를 이용하여 로그인을 하였습니다. 로그인 후 에는 서버에 존재하는 mp3파일리스트를 조회하거나 mp3파일을 업로드, 다운로드 할 수있습니다. 클라이언트가 로그인을 한 후 mp3파일을 업로드하는 화면입니다. 클라이언트가 로그인을 한 후 서버에 존재하는 mp3파일을 조회하는 화면입니다. [그림4]에서 KSH클라이언트가 업로드한 hello.mp3 파일을 HRA클라이언트가 접속하여 다운로드 하는 화면입니다. 비밀번호를 찾기위해 ID, Email을 입력하였고 이 후 비밀번호가 화면에 출력되는 모습입니다.","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"My Projects","slug":"About-Me/My-Projects","permalink":"http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"}],"tags":[{"name":"C","slug":"C","permalink":"http://KKimSangHeon.github.io/tags/C/"},{"name":"Socket","slug":"Socket","permalink":"http://KKimSangHeon.github.io/tags/Socket/"},{"name":"Music Share","slug":"Music-Share","permalink":"http://KKimSangHeon.github.io/tags/Music-Share/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://KKimSangHeon.github.io/tags/Ubuntu/"}]},{"title":"다수 사용자의 실시간 위치추적 어플리케이션 구현","slug":"where-are-you","date":"2017-06-29T14:53:44.000Z","updated":"2017-06-30T03:57:10.134Z","comments":true,"path":"2017/06/29/where-are-you/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/29/where-are-you/","excerpt":"","text":"App 개발배경-한 인원이 다수의 인원을 통제해야 하는 상황은 다양한 상황에서 발생할 수 있습니다. 가령 한 초등학교에서 현장체험학습의 일환으로 박물관을 방문하였을 경우, 교사 한명이 통제해야할 학생수는 약 30명에 이릅니다. 이는 교사에게 부담스러운 수가 될 수 있을것이라 판단하여 어플리케이션을 통해 극복하고자 하였습니다. App 소개-본 어플리케이션은 BLE기반의 비콘을 이용하여 실내에서 다수 사용자의 위치를 파악하는 어플리케이션입니다. App을 사용하기 위해서는 User는 자신의 정보를 등록해야 하며 이때 입력하는 데이터는 이름, ClassID 입니다. Supervisor는 이름 혹은 (이름,ClassID)를 이용하여 User의 최근 위치를 파악할 수 있는데 ClassID로는 해당 ClassID를 갖는 모든 User가 조회되며, (이름,ClassID)으로는 해당 User의 이동경로를 파악할 수 있습니다. System Architecture -본 어플리케이션의 이용자는 크게 User, Supervisor로 나뉘는데 User의 경우 FingerPrintingServer로 자신이 인식한 비콘들의 값을 전송합니다. 이를 수신한 FingerPrintingServer 서버는 User의 위치를 FingerPrinting 알고리즘을 적용하여 계산한 후 DB에 업데이트합니다. 이용자가 Supervisor 일 경우에는 StudentLocationPage에 접근하여 User들의 위치를 읽어옵니다. FingerPrinting Algorithm-본 어플리케이션의 핵심 알고리즘은 FingerPrinting Algorithm 입니다. 이 알고리즘을 구현하기 위해 72개 지점에서 비콘인식 실험을 100번 간 진행하였습니다. 결과물을 토대로 평균, 분산, 표준편차 등을 곱하고 나누어서 가장 실제 위치와 근접한 값을 구할 수 있었으며 최종적으로 오차를 약 1.65m 까지 줄일 수 있었습니다. -다음은 간단한 FingerPrinting Algorithm 적용 방식입니다. (서버에서 사용하는 알고리즘과는 다릅니다.)핑거프린팅 기법은 사전에 측정된 각 좌표 별 비콘의 신호값을 토대로 현재 위치를 추측하는 기술입니다. 예를 들어 그림1과 같이 각 좌표 별 사전에 측정된 비콘의 신호값(RSSI)이 존재한다고 가정 해 보겠습니다.현재 위치에서 측정된 각 비콘의 RSSI 값이 B1: -86 B2: -91 B3: -100 일 때 Coordinate1에 대한 각 비콘 신호의 차이의 합을 구하면 (-86, -87과의 차이) + (-91, -90과의 차이) + (-100, -101과의 차이) 3입니다. 이 과정을 Coordinate2 또한 반복하면 결과값은 14이며 , Coordinate3 은 26입니다.이 중 오차가 가장 작은 즉 최소값을 갖는 좌표가 현재 위치라 판단할 수 있을 것 이므로 현재 위치는 Coordinate1이라 추측할 수 있겠습니다. Result ClassID로 조회하였을 경우 [그림1]과 같이 해당 User들이 최근에 위치한 좌표값을 확인할 수 있습니다. (이름,ClassID)로 조회하였을 경우 해당 User의 이동경로가 [그림2]와 같이 출력됩니다. User의 위치는 카카오톡 yelloID (ID:WhereAreYou)로도 확인이 가능한데 [그림3]과 같이 카카오톡을 이용하여 위치 조회가 가능합니다. 소스코드 (Github Repository)-안드로이드 어플리케이션 소스코드-카카오톡 자동응답 서버 소스코드-웹페이지 서버 소스코드","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"My Projects","slug":"About-Me/My-Projects","permalink":"http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://KKimSangHeon.github.io/tags/Android/"},{"name":"Reco Beacon","slug":"Reco-Beacon","permalink":"http://KKimSangHeon.github.io/tags/Reco-Beacon/"},{"name":"Beacon","slug":"Beacon","permalink":"http://KKimSangHeon.github.io/tags/Beacon/"}]},{"title":"안녕하세요!","slug":"about-me","date":"2017-06-29T09:58:22.000Z","updated":"2017-06-30T04:34:18.701Z","comments":true,"path":"2017/06/29/about-me/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/29/about-me/","excerpt":"","text":"Introduction안녕하세요. 항상 풀스택 개발자가 되고자 노력하는 취업준비생입니다. (#백수, #자소서) 이 블로그는 제가 개인적으로 공부한 내용, 진행했던 프로젝트를 업로드하고, 공유하고자 만들었습니다. 부족한 부분에 대한 태클은 언제든지 환영하며 빠르게 반영하도록 하겠습니다. 부족하지만 방문해주셔서 감사드리며 앞으로 더욱 완벽한 블로그를 만들기 위해 노력하겠습니다! Profile 부명고등학교 졸업 (2008.03~2011.02) 동국대학교 경주캠퍼스 컴퓨터공학과 졸업 (2011.03~2017.02) 아이티센 인턴수료 [공공2사업부문 개발2팀] (2016.12~2017.03) Project제가 진행했었던 프로젝트는 다음과 같습니다. 클릭하시면 자세한 설명을 볼 수 있는 페이지로 이동합니다. - 다수 사용자의 실시간 위치추적 어플리케이션(Android, Beacon, Socket) - 부모님을 부탁해(Android) - Music Share(C, Socket) - 기숙사 외박계(Node.js, kakao api) - 시각장애인을 위한 길안내 app제안(android)","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"Introduction","slug":"About-Me/Introduction","permalink":"http://KKimSangHeon.github.io/categories/About-Me/Introduction/"}],"tags":[{"name":"Sang Heon Kim","slug":"Sang-Heon-Kim","permalink":"http://KKimSangHeon.github.io/tags/Sang-Heon-Kim/"}]},{"title":"부모님을 부탁해","slug":"request-parent","date":"2017-06-29T09:52:18.000Z","updated":"2017-06-29T16:11:45.718Z","comments":true,"path":"2017/06/29/request-parent/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/29/request-parent/","excerpt":"","text":"App 소개 및 개발배경-본 어플리케이션은 증가하는 고독사를 줄여보자는 취지에서 개발하게 된 어플리케이션입니다. 부재중 통화수가 사전에 등록해 놓은 n 개가 되었을 경우 사전에 등록해 놓은 지인에게 위치정보가 포함된 문자메세지가 송신되는 앱 입니다. 초기화면에서 문자메세지를 수신할 번호, 부재중통화의 개수n을 입력하고 동작하기 버튼을 누릅니다. 어플리케이션을 설치한 스마트폰 주인이 부재중통화를 n번 받지 않을 경우 스마트폰의 현재 위치가 등록한 번호로 전송됩니다. -시연영상 google play 방문","categories":[{"name":"About Me","slug":"About-Me","permalink":"http://KKimSangHeon.github.io/categories/About-Me/"},{"name":"My Projects","slug":"About-Me/My-Projects","permalink":"http://KKimSangHeon.github.io/categories/About-Me/My-Projects/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://KKimSangHeon.github.io/tags/Android/"},{"name":"고독사 감소","slug":"고독사-감소","permalink":"http://KKimSangHeon.github.io/tags/고독사-감소/"}]},{"title":"거품정렬 (BubbleSort)","slug":"BubbleSort","date":"2017-06-29T05:36:52.000Z","updated":"2017-06-30T11:03:53.379Z","comments":true,"path":"2017/06/29/BubbleSort/","link":"","permalink":"http://KKimSangHeon.github.io/2017/06/29/BubbleSort/","excerpt":"","text":"거품정렬거품정렬의 코드는 다음과 같다.시간복잡도는 O(n^2) 이다. BubbleSort.c12345678910for(i=0;i&lt;n-1;i++)&#123; for(j=0;j&lt;(n-i)-1;j++) &#123; if(arr[j]&gt;arr[j+1]) &#123; swap; &#125; &#125;&#125; 참고 : 윤성우의 열혈 자료구조","categories":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/"},{"name":"Sort","slug":"Data-Structure/Sort","permalink":"http://KKimSangHeon.github.io/categories/Data-Structure/Sort/"}],"tags":[{"name":"Data Structure","slug":"Data-Structure","permalink":"http://KKimSangHeon.github.io/tags/Data-Structure/"},{"name":"Sort","slug":"Sort","permalink":"http://KKimSangHeon.github.io/tags/Sort/"},{"name":"Bubble Sort","slug":"Bubble-Sort","permalink":"http://KKimSangHeon.github.io/tags/Bubble-Sort/"}]}]}